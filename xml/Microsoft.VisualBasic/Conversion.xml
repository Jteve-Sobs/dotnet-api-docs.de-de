<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc0120340cfb097270b9032d2692b053057366ea" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52242782" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d9442-101">Das <see langword="Conversion" />-Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9442-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-102">Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die konvertiert Dezimalzahlen in andere Basiszahlen, geben Sie Zahlen in Zeichenfolgen, Zeichenfolgen, Zahlen und einen Datentyp in einen anderen.</span><span class="sxs-lookup"><span data-stu-id="d9442-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-103">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="d9442-104">Konvertierung: Zusammenfassung</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9442-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="d9442-105">Schlüsselwörter (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9442-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="d9442-106">Member der Visual Basic-Laufzeitbibliothek</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9442-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d9442-107">Das zu konvertierende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="d9442-108">Der Typ, in den das Objekt konvertiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-109">Konvertiert ein Objekt in den angegebenen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-110">Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-111">Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter, um den vom angegebenen Typ der `TargetType` Parameter.</span><span class="sxs-lookup"><span data-stu-id="d9442-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="d9442-112">Wenn das Objekt ein dynamisches Objekt, das `CTypeDynamic` -Methode angewendet wird, verfügbare dynamische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="d9442-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d9442-113">Die `CTypeDynamic` -Methode angewendet wird, dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d9442-114">Wenn Sie ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` Methode versucht zuerst mithilfe einer benutzerdefinierten, statischen Konvertierung die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d9442-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d9442-115">Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d9442-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d9442-116">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` Verfahren erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="d9442-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-117">Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die Konvertierung von dynamischen Objekts definiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="d9442-118">Arbeiten mit dynamischen Objekten (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="d9442-119">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="d9442-120">Der Typ, in den das Objekt konvertiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="d9442-121">Das zu konvertierende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-122">Konvertiert ein Objekt in den angegebenen generischen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-123">Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-124">Die `CTypeDynamic` -Methode konvertiert das Objekt übergeben, als die `Expression` Parameter, um den Typ, der vom angegebenen Typ des generischen Parameters.</span><span class="sxs-lookup"><span data-stu-id="d9442-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="d9442-125">Wenn das Objekt ein dynamisches Objekt, das `CTypeDynamic` -Methode angewendet wird, verfügbare dynamische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="d9442-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d9442-126">Die `CTypeDynamic` -Methode angewendet wird, dynamische Konvertierungen in Übereinstimmung mit der Konvertierungssemantik, die durch das Objekt selbst definiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d9442-127">Wenn Sie ein dynamisches Objekt erbt <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` Methode versucht zuerst mithilfe einer benutzerdefinierten, statischen Konvertierung die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d9442-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d9442-128">Wenn die benutzerdefinierten, statische Konvertierung schlägt fehl, die `CTypeDynamic` Methode versucht, mithilfe der dynamischen Konvertierungen die Konvertierung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d9442-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d9442-129">Wenn ein dynamisches Objekt implementiert <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` Verfahren erhalten Vorrang vor, um dynamische Konvertierungen über eine benutzerdefinierte, statische Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="d9442-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-130">Im folgenden Beispiel wird die `CTypeDynamic` Methode, um ein dynamisches Objekt in eine Zeichenfolge zu konvertieren, indem die Konvertierung von dynamischen Objekts definiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="d9442-131">Arbeiten mit dynamischen Objekten (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="d9442-132">Exemplarische Vorgehensweise: Erstellen und Verwenden von dynamischen Objekten (C# und Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9442-133">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d9442-134">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-135">Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-136">Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen von der `Err` Objekt, mit dem letzten Laufzeitfehler angegeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d9442-137">Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="d9442-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d9442-138">Wenn keine Laufzeitfehler aufgetreten ist, `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) ("").</span><span class="sxs-lookup"><span data-stu-id="d9442-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d9442-139">In Visual Basic 6.0 und früheren Versionen wurde diese Funktionalität bereitgestellt, durch die `Error` Funktion.</span><span class="sxs-lookup"><span data-stu-id="d9442-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-140">Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Ziffern der angegebenen Fehlermeldung.</span><span class="sxs-lookup"><span data-stu-id="d9442-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-141">
            <paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="d9442-142">Dies ist optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-142">Optional.</span>
          </span>
          <span data-ttu-id="d9442-143">Eine beliebige gültige Fehlernummer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-144">Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-145">Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-146">Die `ErrorToString` Funktion untersucht die eigenschafteneinstellungen von der `Err` Objekt, mit dem letzten Laufzeitfehler angegeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d9442-147">Der Rückgabewert von der `ErrorToString` Funktion entspricht der `Description` Eigenschaft der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="d9442-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d9442-148">Wenn `ErrorNumber` , aber nicht definiert ist, wird eine gültige Fehlernummer `ErrorToString` gibt die Zeichenfolge `"Application-defined or object-defined error."` Wenn `ErrorNumber` ist ungültig, ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="d9442-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="d9442-149">Wenn `ErrorNumber` weggelassen wird, wird die Nachricht entsprechend der aktuellen Laufzeit Fehler wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="d9442-150">Wenn keine Laufzeitfehler aufgetreten ist oder `ErrorNumber` ist 0 (null) `ErrorToString` gibt eine Zeichenfolge der Länge 0 (null) ("").</span><span class="sxs-lookup"><span data-stu-id="d9442-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d9442-151">In Visual Basic 6.0 und früheren Versionen wurde diese Funktionalität bereitgestellt, durch die `Error` Funktion.</span><span class="sxs-lookup"><span data-stu-id="d9442-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-152">Der folgende code verwendet die `ErrorToString` -Funktion zur Anzeige von Fehlermeldungen, die entsprechen den Ziffern der angegebenen Fehlermeldung.</span><span class="sxs-lookup"><span data-stu-id="d9442-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-153">
            <paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9442-154">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-155">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-155">Required.</span>
          </span>
          <span data-ttu-id="d9442-156">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-157">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-157">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-158">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-159">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-160">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-161">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-162">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-163">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-164">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-165">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-166">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-167">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-168">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-169">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-170">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-171">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-172">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-173">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-174">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-175">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-176">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-177">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-178">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-179">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-180">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-180">Required.</span>
          </span>
          <span data-ttu-id="d9442-181">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-182">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-182">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-183">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-184">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-185">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-186">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-187">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-188">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-189">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-190">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-191">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-192">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-193">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-194">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-195">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-196">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-197">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-198">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-199">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-200">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-201">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-202">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-203">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-204">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-205">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-205">Required.</span>
          </span>
          <span data-ttu-id="d9442-206">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-207">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-207">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-208">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-209">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-210">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-211">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-212">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-213">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-214">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-215">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-216">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-217">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-218">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-219">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-220">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-221">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-222">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-223">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-224">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-225">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-226">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-227">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-228">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-229">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-230">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-230">Required.</span>
          </span>
          <span data-ttu-id="d9442-231">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-232">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-232">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-233">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-234">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-235">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-236">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-237">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-238">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-239">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-240">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-241">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-242">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-243">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-244">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-245">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-246">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-247">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-248">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-249">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-250">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-251">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-252">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-253">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-254">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-255">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-255">Required.</span>
          </span>
          <span data-ttu-id="d9442-256">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-257">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-257">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-258">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-259">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-260">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-261">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-262">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-263">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-264">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-265">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-266">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-267">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-268">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-269">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-270">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-271">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-272">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-273">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-274">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-275">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-276">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-277">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-278">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-279">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-280">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-280">Required.</span>
          </span>
          <span data-ttu-id="d9442-281">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-282">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-282">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-283">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-284">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-285">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-286">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-287">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-288">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-289">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-290">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-291">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-292">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-293">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-294">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-295">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-296">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-297">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-298">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-299">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-300">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-301">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-302">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-303">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-304">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-305">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-305">Required.</span>
          </span>
          <span data-ttu-id="d9442-306">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-307">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-307">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-308">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-309">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-310">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-311">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-312">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-313">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-314">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-315">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-316">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-317">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-318">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-319">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-320">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-321">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-322">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-323">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-324">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-325">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-326">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-327">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-328">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-329">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9442-330">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-331">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-331">Required.</span>
          </span>
          <span data-ttu-id="d9442-332">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-333">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-334">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-335">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-336">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-336">If `Number` is</span></span>|<span data-ttu-id="d9442-337">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-338">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-338">Empty</span></span>|<span data-ttu-id="d9442-339">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-339">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-340">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-340">Any numeric value</span></span>|<span data-ttu-id="d9442-341">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-342">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-343">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-344">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-345">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-346">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-347">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-348">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-349">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-349">Required.</span>
          </span>
          <span data-ttu-id="d9442-350">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-351">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-352">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-353">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-354">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-354">If `Number` is</span></span>|<span data-ttu-id="d9442-355">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-356">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-356">Empty</span></span>|<span data-ttu-id="d9442-357">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-357">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-358">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-358">Any numeric value</span></span>|<span data-ttu-id="d9442-359">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-360">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-361">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-362">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-363">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-364">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-365">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-366">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-367">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-367">Required.</span>
          </span>
          <span data-ttu-id="d9442-368">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-369">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-370">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-371">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-372">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-372">If `Number` is</span></span>|<span data-ttu-id="d9442-373">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-374">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-374">Empty</span></span>|<span data-ttu-id="d9442-375">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-375">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-376">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-376">Any numeric value</span></span>|<span data-ttu-id="d9442-377">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-378">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-379">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-380">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-381">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-382">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-383">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-384">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-385">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-385">Required.</span>
          </span>
          <span data-ttu-id="d9442-386">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-387">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-388">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-389">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-390">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-390">If `Number` is</span></span>|<span data-ttu-id="d9442-391">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-392">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-392">Empty</span></span>|<span data-ttu-id="d9442-393">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-393">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-394">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-394">Any numeric value</span></span>|<span data-ttu-id="d9442-395">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-396">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-397">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-398">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-399">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-400">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-401">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-402">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-403">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-403">Required.</span>
          </span>
          <span data-ttu-id="d9442-404">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-405">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-406">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-407">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-408">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-408">If `Number` is</span></span>|<span data-ttu-id="d9442-409">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-410">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-410">Empty</span></span>|<span data-ttu-id="d9442-411">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-411">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-412">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-412">Any numeric value</span></span>|<span data-ttu-id="d9442-413">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-414">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-415">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-416">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-417">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-418">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-419">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-420">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-421">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-421">Required.</span>
          </span>
          <span data-ttu-id="d9442-422">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-423">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-424">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-425">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-426">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-426">If `Number` is</span></span>|<span data-ttu-id="d9442-427">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-428">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-428">Empty</span></span>|<span data-ttu-id="d9442-429">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-429">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-430">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-430">Any numeric value</span></span>|<span data-ttu-id="d9442-431">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-432">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-433">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-434">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-435">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-436">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-437">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-438">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-439">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-439">Required.</span>
          </span>
          <span data-ttu-id="d9442-440">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-441">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-442">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-443">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-444">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-444">If `Number` is</span></span>|<span data-ttu-id="d9442-445">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-446">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-446">Empty</span></span>|<span data-ttu-id="d9442-447">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-447">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-448">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-448">Any numeric value</span></span>|<span data-ttu-id="d9442-449">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-450">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-451">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-452">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-453">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-454">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-455">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-456">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-457">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-457">Required.</span>
          </span>
          <span data-ttu-id="d9442-458">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-459">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-460">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-461">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-462">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-462">If `Number` is</span></span>|<span data-ttu-id="d9442-463">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-464">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-464">Empty</span></span>|<span data-ttu-id="d9442-465">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-465">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-466">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-466">Any numeric value</span></span>|<span data-ttu-id="d9442-467">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-468">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-469">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-470">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-471">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-472">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-473">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-474">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-475">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-475">Required.</span>
          </span>
          <span data-ttu-id="d9442-476">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-477">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-478">Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-479">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-480">Wenn `Number` ist</span><span class="sxs-lookup"><span data-stu-id="d9442-480">If `Number` is</span></span>|<span data-ttu-id="d9442-481">Hex gibt zurück</span><span class="sxs-lookup"><span data-stu-id="d9442-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-482">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-482">Empty</span></span>|<span data-ttu-id="d9442-483">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-483">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-484">Jeden beliebigen numerischen Wert</span><span class="sxs-lookup"><span data-stu-id="d9442-484">Any numeric value</span></span>|<span data-ttu-id="d9442-485">Bis zu 16 hexadezimale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9442-486">Sie können den hexadezimale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9442-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9442-487">Z. B. `&H10` decimal 16 in Hexadezimalschreibweise darstellt.</span><span class="sxs-lookup"><span data-stu-id="d9442-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-488">Dieses Beispiel verwendet die `Hex` Funktion, die den Hexadezimalwert einer Zahl zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-489">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-490">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-491">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="d9442-492">Gewusst wie: Konvertieren von Hexadezimalzeichenfolgen in Zahlen</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9442-493">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-494">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-494">Required.</span>
          </span>
          <span data-ttu-id="d9442-495">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-496">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-496">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-497">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-498">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-499">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-500">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-501">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-502">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-503">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-504">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-505">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-506">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-507">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-508">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-509">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-510">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-511">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-512">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-513">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-514">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-515">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-516">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-517">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-518">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-519">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-519">Required.</span>
          </span>
          <span data-ttu-id="d9442-520">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-521">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-521">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-522">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-523">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-524">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-525">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-526">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-527">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-528">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-529">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-530">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-531">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-532">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-533">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-534">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-535">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-536">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-537">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-538">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-539">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-540">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-541">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-542">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-543">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-544">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-544">Required.</span>
          </span>
          <span data-ttu-id="d9442-545">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-546">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-546">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-547">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-548">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-549">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-550">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-551">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-552">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-553">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-554">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-555">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-556">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-557">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-558">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-559">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-560">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-561">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-562">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-563">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-564">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-565">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-566">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-567">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-568">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-569">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-569">Required.</span>
          </span>
          <span data-ttu-id="d9442-570">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-571">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-571">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-572">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-573">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-574">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-575">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-576">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-577">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-578">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-579">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-580">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-581">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-582">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-583">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-584">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-585">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-586">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-587">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-588">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-589">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-590">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-591">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-592">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-593">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-594">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-594">Required.</span>
          </span>
          <span data-ttu-id="d9442-595">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-596">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-596">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-597">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-598">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-599">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-600">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-601">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-602">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-603">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-604">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-605">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-606">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-607">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-608">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-609">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-610">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-611">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-612">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-613">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-614">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-615">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-616">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-617">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-618">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-619">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-619">Required.</span>
          </span>
          <span data-ttu-id="d9442-620">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-621">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-621">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-622">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-623">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-624">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-625">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-626">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-627">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-628">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-629">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-630">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-631">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-632">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-633">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-634">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-635">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-636">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-637">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-638">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-639">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-640">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-641">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-642">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-643">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-644">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-644">Required.</span>
          </span>
          <span data-ttu-id="d9442-645">Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d9442-646">Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-646">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-647">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-648">Gibt den ganzzahligen Anteil einer Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-649">Sowohl die `Int` und `Fix` Funktionen entfernen Sie den Bruchteil `Number` und den resultierende ganzzahlige Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9442-650">Der Unterschied zwischen `Int` und `Fix` Funktionen ist, dass wenn `Number` negativ ist, `Int` gibt der ersten negativen ganze Zahl kleiner als oder gleich `Number`hingegen `Fix` gibt die erste negative ganze Zahl größer als oder gleich `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9442-651">Z. B. `Int` 8,4 9, und `Fix` 8,4 in-8 konvertiert.</span><span class="sxs-lookup"><span data-stu-id="d9442-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9442-652">`Fix(number)` ist gleich `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9442-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-653">In diesem Beispiel wird veranschaulicht, wie die `Int` und `Fix` Funktionen geben Ganzzahlbereiche von Zahlen zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9442-654">Bei einem negativen Number-Argument das `Int` Funktionsergebnis ist der ersten negativen ganze Zahl kleiner oder gleich der Zahl; die `Fix` Funktion gibt die erste negative ganze Zahl größer als oder gleich der Anzahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9442-655">Das folgende Beispiel muss Ihnen die Angabe `Option Strict Off` Da implizite typkonvertierungen aus `Double` eingeben `Integer` dürfen nicht unter `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9442-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9442-656">Sie können die `CInt` -Funktion zur expliziten Konvertierung von anderen Datentypen zum Typ `Integer` mit `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9442-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9442-657">Allerdings `CInt` Rundet auf die nächste ganze Zahl statt den Bruchteil von Zahlen abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="d9442-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9442-658">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9442-659">Können Sie die `CInt` hängt das Ergebnis eines Aufrufs von `Fix` oder `Int` um explizite Konvertierung in eine ganze Zahl ohne Rundung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="d9442-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9442-660">Zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="d9442-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9442-661">Weitere Informationen zu `CInt`, finden Sie unter [Typkonvertierungsfunktionen](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9442-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-662">Number ist nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-663">Number ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-664">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="d9442-665">Datentyp: Zusammenfassung (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="d9442-666">Mathematische Operationen: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="d9442-667">Mathematische Funktionen (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-668">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9442-669">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-670">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-670">Required.</span>
          </span>
          <span data-ttu-id="d9442-671">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-672">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-673">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-674">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-675">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-675">If Number is</span></span>|<span data-ttu-id="d9442-676">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-677">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-677">Empty</span></span>|<span data-ttu-id="d9442-678">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-678">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-679">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-679">Any other number</span></span>|<span data-ttu-id="d9442-680">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-681">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-682">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-683">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-684">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-685">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-686">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-687">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-688">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-688">Required.</span>
          </span>
          <span data-ttu-id="d9442-689">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-690">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-691">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-692">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-693">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-693">If Number is</span></span>|<span data-ttu-id="d9442-694">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-695">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-695">Empty</span></span>|<span data-ttu-id="d9442-696">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-696">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-697">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-697">Any other number</span></span>|<span data-ttu-id="d9442-698">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-699">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-700">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-701">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-702">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-703">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-704">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-705">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-706">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-706">Required.</span>
          </span>
          <span data-ttu-id="d9442-707">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-708">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-709">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-710">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-711">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-711">If Number is</span></span>|<span data-ttu-id="d9442-712">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-713">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-713">Empty</span></span>|<span data-ttu-id="d9442-714">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-714">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-715">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-715">Any other number</span></span>|<span data-ttu-id="d9442-716">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-717">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-718">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-719">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-720">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-721">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-722">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-723">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-724">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-724">Required.</span>
          </span>
          <span data-ttu-id="d9442-725">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-726">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-727">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-728">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-729">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-729">If Number is</span></span>|<span data-ttu-id="d9442-730">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-731">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-731">Empty</span></span>|<span data-ttu-id="d9442-732">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-732">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-733">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-733">Any other number</span></span>|<span data-ttu-id="d9442-734">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-735">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-736">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-737">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-738">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-739">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-740">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-741">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-742">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-742">Required.</span>
          </span>
          <span data-ttu-id="d9442-743">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-744">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-745">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-746">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-747">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-747">If Number is</span></span>|<span data-ttu-id="d9442-748">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-749">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-749">Empty</span></span>|<span data-ttu-id="d9442-750">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-750">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-751">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-751">Any other number</span></span>|<span data-ttu-id="d9442-752">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-753">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-754">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-755">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-756">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-757">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-758">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-759">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-760">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-760">Required.</span>
          </span>
          <span data-ttu-id="d9442-761">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-762">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-763">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-764">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-765">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-765">If Number is</span></span>|<span data-ttu-id="d9442-766">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-767">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-767">Empty</span></span>|<span data-ttu-id="d9442-768">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-768">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-769">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-769">Any other number</span></span>|<span data-ttu-id="d9442-770">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-771">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-772">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-773">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-774">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-775">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-776">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-777">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-778">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-778">Required.</span>
          </span>
          <span data-ttu-id="d9442-779">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-780">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-781">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-782">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-783">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-783">If Number is</span></span>|<span data-ttu-id="d9442-784">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-785">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-785">Empty</span></span>|<span data-ttu-id="d9442-786">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-786">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-787">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-787">Any other number</span></span>|<span data-ttu-id="d9442-788">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-789">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-790">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-791">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-792">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-793">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-794">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-795">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-796">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-796">Required.</span>
          </span>
          <span data-ttu-id="d9442-797">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-798">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-799">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-800">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-801">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-801">If Number is</span></span>|<span data-ttu-id="d9442-802">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-803">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-803">Empty</span></span>|<span data-ttu-id="d9442-804">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-804">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-805">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-805">Any other number</span></span>|<span data-ttu-id="d9442-806">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-807">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-808">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-809">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-810">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-811">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-812">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-813">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-814">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-814">Required.</span>
          </span>
          <span data-ttu-id="d9442-815">Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-816">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-817">Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-818">Wenn `Number` ist nicht bereits eine ganze Zahl ist, wird der Wert vor der Auswertung auf die nächste ganze Zahl gerundet.</span><span class="sxs-lookup"><span data-stu-id="d9442-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9442-819">Wenn die Anzahl ist</span><span class="sxs-lookup"><span data-stu-id="d9442-819">If Number is</span></span>|<span data-ttu-id="d9442-820">Oct-Rückgabe</span><span class="sxs-lookup"><span data-stu-id="d9442-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9442-821">Empty</span><span class="sxs-lookup"><span data-stu-id="d9442-821">Empty</span></span>|<span data-ttu-id="d9442-822">Null (0)</span><span class="sxs-lookup"><span data-stu-id="d9442-822">Zero (0)</span></span>|  
|<span data-ttu-id="d9442-823">Jede andere Zahl</span><span class="sxs-lookup"><span data-stu-id="d9442-823">Any other number</span></span>|<span data-ttu-id="d9442-824">Bis zu 22 oktale Zeichen</span><span class="sxs-lookup"><span data-stu-id="d9442-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9442-825">Sie können die oktale Zahlen darstellen, direkt vom vorherigen Zahlen in den richtigen Bereich mit `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9442-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9442-826">Z. B. `&O10` der Oktalnotation für decimal 8 ist.</span><span class="sxs-lookup"><span data-stu-id="d9442-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-827">Dieses Beispiel verwendet die `Oct` Funktion, die den Oktalwert einer Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-828">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-829">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-830">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-831">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d9442-832">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-832">Required.</span>
          </span>
          <span data-ttu-id="d9442-833">Ein <see langword="Object" />, das einen beliebigen gültigen numerischen Ausdruck enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-834">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-835">Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-836">Wenn Zahlen in Zeichenfolgen konvertiert werden, ist ein führendes Leerzeichen immer für das Vorzeichen des reserviert `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="d9442-837">Wenn `Number` positiv ist, enthält die zurückgegebene Zeichenfolge ein führendes Leerzeichen, und das Pluszeichen wird impliziert.</span><span class="sxs-lookup"><span data-stu-id="d9442-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="d9442-838">Eine negative Zahl ist, wird das Minuszeichen (-) und ohne führende Leerzeichen enthalten.</span><span class="sxs-lookup"><span data-stu-id="d9442-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="d9442-839">Verwenden der `Format` Funktion, um numerische Werte zu konvertieren, wie Datumsangaben, Uhrzeiten oder Währung oder in anderen benutzerdefinierten Formaten formatiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d9442-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="d9442-840">Im Gegensatz zu den `Str` -Funktion, die `Format` Funktion enthält keine für das Vorzeichen von ein führendes Leerzeichen `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9442-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9442-841">Die `Str` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="d9442-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9442-842">Wenn verschiedene Dezimaltrennzeichen (z. B. in internationale Anwendungen) verwendet werden, verwenden Sie die `CStr` oder `Format` Funktionen, um eine Zahl in eine Zeichenfolge konvertieren.</span><span class="sxs-lookup"><span data-stu-id="d9442-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="d9442-843">Um die Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur zu erhalten, verwenden Sie der Anzahl der `ToString(IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="d9442-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="d9442-844">Verwenden Sie z. B. <xref:System.Double.ToString%2A> beim Konvertieren eines Werts vom Typ `Double` in eine Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="d9442-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9442-845">Dieses Beispiel verwendet die `Str` -Funktion zum Zurückgeben einer `String` Zeichenfolgendarstellung einer Zahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="d9442-846">Wenn eine positive Zahl in eine Zeichenfolge konvertiert wird, wird ein führendes Leerzeichen bei seiner Anmeldung immer reserviert.</span><span class="sxs-lookup"><span data-stu-id="d9442-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9442-847">
            <paramref name="Number" /> wurde nicht angegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="d9442-848">
            <paramref name="Number" /> ist kein numerischer Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="d9442-849">Konvertierung: Zusammenfassung</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-850">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9442-851">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d9442-852">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-852">Required.</span>
          </span>
          <span data-ttu-id="d9442-853">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d9442-854">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-854">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-855">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-856">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-857">Die `Val` Funktion stoppt das Lesen der Zeichenfolge mit dem ersten Zeichen, die nicht als Teil einer Zahl erkannt.</span><span class="sxs-lookup"><span data-stu-id="d9442-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d9442-858">Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="d9442-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d9442-859">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="d9442-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d9442-860">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="d9442-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="d9442-861">Der folgende Aufruf gibt den Wert 1615198 zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="d9442-862">Der folgende Aufruf gibt den decimal-Wert-1.</span><span class="sxs-lookup"><span data-stu-id="d9442-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d9442-863">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="d9442-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9442-864">Wenn verschiedene Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, verwenden Sie `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d9442-865">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="d9442-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d9442-866">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="d9442-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9442-867">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="d9442-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d9442-868">Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="d9442-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d9442-869">Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen würde vom Compiler erkannt werden, wenn es in einer Zeichenfolge nicht enthalten waren.</span><span class="sxs-lookup"><span data-stu-id="d9442-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d9442-870">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d9442-871">`Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="d9442-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d9442-872">
            <paramref name="InputStr" /> ist zu groß.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-873">
            <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-874">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d9442-875">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-875">Required.</span>
          </span>
          <span data-ttu-id="d9442-876">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d9442-877">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-877">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-878">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-879">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-880">Die `Val` Funktion stoppt das Lesen der Zeichenfolge mit dem ersten Zeichen, die nicht als Teil einer Zahl erkannt.</span><span class="sxs-lookup"><span data-stu-id="d9442-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d9442-881">Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="d9442-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d9442-882">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="d9442-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d9442-883">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="d9442-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d9442-884">Der folgende Aufruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="d9442-885">Der folgende Aufruf gibt den decimal-Wert-1.</span><span class="sxs-lookup"><span data-stu-id="d9442-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d9442-886">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="d9442-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9442-887">Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d9442-888">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="d9442-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d9442-889">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="d9442-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9442-890">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="d9442-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d9442-891">Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="d9442-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d9442-892">Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen werden vom Compiler abgefangen werden, wenn der Konflikt in Zeichenfolgen nicht enthalten waren.</span><span class="sxs-lookup"><span data-stu-id="d9442-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d9442-893">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d9442-894">`Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="d9442-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d9442-895">
            <paramref name="InputStr" /> ist zu groß.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-896">
            <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-897">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="d9442-898">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-898">Required.</span>
          </span>
          <span data-ttu-id="d9442-899">Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d9442-900">Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-900">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9442-901">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9442-902">Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9442-903">Die `Val` Funktion stoppt das Lesen der Zeichenfolge mit dem ersten Zeichen, die nicht als Teil einer Zahl erkannt.</span><span class="sxs-lookup"><span data-stu-id="d9442-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d9442-904">Symbole und Zeichen, die häufig als Teil von numerischen Werten, z. B. Währungssymbole und Kommas, erkannt werden, werden nicht erkannt.</span><span class="sxs-lookup"><span data-stu-id="d9442-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d9442-905">Die Funktion erkennt jedoch die Basispräfixe `&O` (für oktal) und `&H` (für hexadezimal).</span><span class="sxs-lookup"><span data-stu-id="d9442-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d9442-906">Leerzeichen, Tabulatoren und Zeilenvorschubzeichen werden aus dem Argument entfernt.</span><span class="sxs-lookup"><span data-stu-id="d9442-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d9442-907">Der folgende Aufruf gibt den Wert 1234123 zurück.</span><span class="sxs-lookup"><span data-stu-id="d9442-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="d9442-908">Der folgende Aufruf gibt den decimal-Wert-1.</span><span class="sxs-lookup"><span data-stu-id="d9442-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d9442-909">Die `Val` Funktion erkennt nur den Punkt (`.`) als gültige Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="d9442-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9442-910">Verwenden Sie bei anderen Dezimaltrennzeichen, wie in internationale Anwendungen verwendet werden, `CDbl` oder `CInt` stattdessen zum Konvertieren einer Zeichenfolge in eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="d9442-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d9442-911">Um die angegebene Zeichenfolgendarstellung einer Zahl in einer bestimmten Kultur in einen numerischen Wert zu konvertieren, verwenden Sie des numerischen Typs `Parse(String, IFormatProvider)` Methode.</span><span class="sxs-lookup"><span data-stu-id="d9442-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d9442-912">Verwenden Sie z. B. <xref:System.Double.Parse%2A?displayProperty=nameWithType> beim Konvertieren einer Zeichenfolge zu einer `Double`.</span><span class="sxs-lookup"><span data-stu-id="d9442-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9442-913">Ein <xref:System.InvalidCastException> Ausnahme kann ausgelöst werden, als Reaktion auf bestimmte ungewöhnliche Zahlenformate.</span><span class="sxs-lookup"><span data-stu-id="d9442-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d9442-914">Im folgenden Code wird beispielsweise diese Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="d9442-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d9442-915">Der Konflikt zwischen der Anzahl als formatiert eine `Double` und die `Integer` und `Long` Typzeichen werden vom Compiler abgefangen werden, wenn der Konflikt in Zeichenfolgen nicht enthalten waren.</span><span class="sxs-lookup"><span data-stu-id="d9442-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d9442-916">Im folgenden Beispiel wird die `Val` Funktion, um die in jeder Zeichenfolge enthaltenen Zahlen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="d9442-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d9442-917">`Val` beendet die Konvertierung mit dem ersten Zeichen, das als eine Ziffer, numerischen Modifizierer, numerischen Satzzeichen oder Leerzeichen interpretiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="d9442-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d9442-918">
            <paramref name="InputStr" /> ist zu groß.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d9442-919">
            <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="d9442-920">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9442-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>
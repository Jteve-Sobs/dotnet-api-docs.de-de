<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a839268de8320891e9a6ff71157723a7626c5c67" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75154343" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Das <see langword="ErrObject" />-Modul enthält Eigenschaften und Prozeduren, mit denen Laufzeitfehler unter Verwendung des <see langword="Err" />-Objekts identifiziert und behandelt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das `ErrObject`-Modul unterstützt das `Err`-Objekt. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 In diesem Beispiel werden die Eigenschaften des `Err`-Objekts unter Erstellen eines Fehlermeldungs Dialogfelds verwendet. Beachten Sie, was geschieht, wenn Sie zuerst die `Clear`-Methode verwenden: Wenn Sie dann mit der `Raise`-Methode einen Visual Basic Fehler generieren, werden Visual Basic Standardwerte zu den Eigenschaften des `Err` Objekts.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error-Anweisung (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally-Anweisung (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht alle Eigenschafteneinstellungen des <see langword="Err" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie `Clear`, um das `Err` Objekt explizit zu löschen, nachdem ein Fehler behandelt wurde, z. b. Wenn Sie die verzögerte Fehlerbehandlung mit `On Error Resume Next`verwenden. Die `Clear`-Methode wird automatisch aufgerufen, wenn eine der folgenden-Anweisungen ausgeführt wird:  
  
-   Beliebiger Typ von `Resume` Anweisung  
  
-   `Exit Sub`, `Exit Function`oder `Exit Property`  
  
-   Any `On Error`-Anweisung  
  
-   Any `Try...Catch...Finally`-Anweisung  
  
    > [!NOTE]
    >  Beim Behandeln von Fehlern, die während des Zugriffs auf andere Objekte generiert werden, ist das `On Error Resume Next` Konstrukt möglicherweise `On Error GoTo` vorzuziehen. Wenn `Err` nach jeder Interaktion mit einem Objekt überprüft wird, ob der Code auf das Objekt zugreift, das durch den Code aufgerufen wurde: Sie können sicher sein, welches Objekt den Fehlercode in `Err.Number`abgelegt hat, und welches Objekt den Fehler ursprünglich generiert hat (das in `Err.Source`angegebene Objekt).  
  
   
  
## Examples  
 In diesem Beispiel wird die `Clear`-Methode des `Err` Objekts verwendet, um die numerischen Eigenschaften des `Err` Objekts auf 0 (null) und die zugehörigen Zeichen folgen Eigenschaften auf Zeichen folgen der Länge 0 (null) Ohne den Aufrufen von `Clear`würde der zweite `MsgBox` die gleiche Fehlermeldung anzeigen.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der eine einem Fehler zugeordnete beschreibende Zeichenfolge enthält, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen <see langword="String" />-Ausdruck zurück, der eine einem Fehler zugeordnete beschreibende Zeichenfolge enthält, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Description`-Eigenschafts Einstellung besteht aus einer kurzen Beschreibung des Fehlers. Verwenden Sie diese Eigenschaft, um den Benutzer auf einen Fehler aufmerksam zu machen, den Sie nicht oder nicht verarbeiten möchten. Wenn Sie einen benutzerdefinierten Fehler erzeugen, weisen Sie der Eigenschaft `Description` eine kurze Beschreibung Ihres Fehlers zu. Wenn die `Description`-Eigenschaft nicht ausgefüllt ist und der Wert der <xref:Microsoft.VisualBasic.ErrObject.Number%2A>-Eigenschaft einem Visual Basic Laufzeitfehler entspricht, wird die von der <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> Funktion zurückgegebene Zeichenfolge in der `Description`-Eigenschaft festgelegt, wenn der Fehler generiert wird.  
  
   
  
## Examples  
 In diesem Beispiel wird der `Description`-Eigenschaft des `Err`-Objekts eine benutzerdefinierte Meldung zugewiesen.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine ganze Zahl ab, die die Zeilennummer der letzten ausgeführten Anweisung angibt.</summary>
        <value>Die Zeilennummer der letzten ausgeführten Anweisung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Visual Basic keine Zeilennummern trifft, wird 0 zurückgegeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Erl`-Eigenschaft verwendet, um die Zeilennummer anzugeben.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetException() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Ausnahme zurück, die den aufgetretenen Fehler darstellt.</summary>
        <returns>Die Ausnahme, die den aufgetretenen Fehler darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `GetException`-Funktion ist nur in der `Err`-Objektklasse verfügbar. Es funktioniert mit der `Exception`-Eigenschaft des `Err`-Objekts, um den aufgetretenen Fehler anzuzeigen.  
  
   
  
## Examples  
 Der folgende Code zeigt die Meldung an, die der Ausnahme im `Err`-Objekt zugewiesen wurde:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine <see langword="Integer" /> zurück, die die Kontext-ID für ein Thema in einer Hilfedatei enthält, oder legt diese fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt eine <see langword="Integer" /> zurück, die die Kontext-ID für ein Thema in einer Hilfedatei enthält, oder legt diese fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `HelpContext`-Eigenschaft wird verwendet, um kontextbezogene Hilfe für eine Anwendung anzuzeigen. Wenn eine Hilfedatei in `HelpFile`angegeben wird, wird die Eigenschaft `HelpContext` verwendet, um automatisch die identifizierte Hilfedatei anzuzeigen. Wenn die Eigenschaften `HelpFile` und `HelpContext` leer sind, wird der Wert der Eigenschaft <xref:Microsoft.VisualBasic.ErrObject.Number%2A> aktiviert. Wenn der Wert der `Number`-Eigenschaft einem Visual Basic Lauf Zeit Fehlerwert entspricht, wird die Visual Basic Hilfe Kontext-ID für den Fehler verwendet. Wenn der Wert der `Number`-Eigenschaft keinem Visual Basic Fehler entspricht, wird der Inhalts Bildschirm für die Visual Basic Hilfedatei angezeigt.  
  
> [!NOTE]
>  Sie sollten Routinen in Ihre Anwendung schreiben, um typische Fehler zu behandeln. Wenn Sie mit einem-Objekt programmieren, können Sie die-Hilfedatei des Objekts verwenden, um die Qualität ihrer Fehlerbehandlung zu verbessern, oder Sie können dem Benutzer eine aussagekräftige Meldung anzeigen, wenn der Fehler nicht wieder hergestellt werden kann.  
  
   
  
## Examples  
 In diesem Beispiel wird die `HelpContext`-Eigenschaft des `Err`-Objekts verwendet, um das Visual Basic Hilfethema für den `Overflow` Fehler anzuzeigen.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der den vollqualifizierten Pfad zu einer Hilfedatei enthält, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen <see langword="String" />-Ausdruck zurück, der den vollqualifizierten Pfad zu einer Hilfedatei enthält, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Hilfedatei durch die `HelpFile`-Eigenschaft angegeben wird, wird Sie automatisch aufgerufen, wenn der Benutzer die Hilfe Taste (oder die F1-Taste) im Dialogfeld Fehlermeldung drückt. Wenn die `HelpContext`-Eigenschaft eine gültige Kontext-ID für die angegebene Datei enthält, wird dieses Thema automatisch angezeigt. Wenn keine `HelpFile` angegeben ist, wird die Visual Basic Hilfedatei angezeigt.  
  
> [!NOTE]
>  Sie sollten Routinen in Ihre Anwendung schreiben, um typische Fehler zu behandeln. Wenn Sie mit einem-Objekt programmieren, können Sie die-Hilfedatei des Objekts verwenden, um die Qualität ihrer Fehlerbehandlung zu verbessern, oder Sie können dem Benutzer eine aussagekräftige Meldung anzeigen, wenn der Fehler nicht wieder hergestellt werden kann.  
  
   
  
## Examples  
 In diesem Beispiel wird die `HelpFile`-Eigenschaft des `Err`-Objekts verwendet, um das Hilfesystem zu starten. Standardmäßig enthält die `HelpFile`-Eigenschaft den Namen der Visual Basic Hilfedatei.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen von einem Aufruf einer Dynamic Link Library (DLL) erzeugten Systemfehlercode ab.</summary>
        <value>Ein Systemfehler Code, der durch einen aufzurufenden Befehl einer Dynamic Link Library (dll) erzeugt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>-Eigenschaft gilt nur für DLL-Aufrufe, die von Visual Basic Code ausgelöst werden. Wenn ein solcher Aufruf erfolgt, gibt die aufgerufene Funktion in der Regel einen Code zurück, der einen Erfolg oder einen Fehler angibt, und die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>-Eigenschaft wird ausgefüllt. Überprüfen Sie die Dokumentation zu den Funktionen der dll, um die Rückgabewerte zu ermitteln, die auf Erfolg oder Fehler hinweisen. Wenn der Fehlercode zurückgegeben wird, sollte die Visual Basic Anwendung die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>-Eigenschaft sofort überprüfen. Es wird keine Ausnahme ausgelöst, wenn die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>-Eigenschaft festgelegt wird.  
  
> [!NOTE]
>  Die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>-Eigenschaft wird durch <xref:System.Security.Permissions.SecurityAction.LinkDemand>geschützt, wodurch verhindert wird, dass von nicht vertrauenswürdigem Code auf Sie zugegriffen wird. Allerdings erfordert <xref:System.Security.Permissions.SecurityAction.LinkDemand> nur den unmittelbaren Aufrufer, um über <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> Berechtigung zu verfügen. Wenn Ihr Code von teilweise vertrauenswürdigem Code aufgerufen werden kann, ist das verfügbar machen des Werts <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> ohne Validierung ein Sicherheitsrisiko.  
>   
>  Wichtige Einschränkungen bei der Verwendung des <xref:System.Security.Permissions.SecurityAction.LinkDemand>-Members finden Sie unter [Demand und LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Weitere Informationen zu Berechtigungen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Hinweis für intelligente Geräte gibt diese Eigenschaft immer 0 (null) zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie die `LastDllError`-Eigenschaft nach dem Aufrufen einer Funktion in der Windows-API verwenden können. Die `PrintWindowCoordinates` Prozedur nimmt ein Handle für ein Fenster an und ruft die `GetWindowRect`-Funktion auf. `GetWindowRect` füllt die RECT-Datenstruktur mit den Längen der Seiten des Rechtecks aus, die das Fenster bilden. Wenn Sie ein ungültiges Handle übergeben, tritt ein Fehler auf, und die Fehlernummer ist über die `LastDllError`-Eigenschaft verfügbar.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen numerischen Wert zurück, der einen Fehler angibt, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen numerischen Wert zurück, der einen Fehler angibt, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle `Raise` Argumente außer `Number` sind optional. Wenn Sie optionale Argumente weglassen und die Eigenschafts Einstellungen des `Err` Objekts Werte enthalten, die nicht gelöscht wurden, dienen diese Werte als Werte für den Fehler.  
  
 Da das `Err` Objekt umfangreichere Informationen liefert, als wenn Sie Fehler mit der `Error`-Anweisung generieren, ist `Raise` beim Schreiben von Klassen Modulen nützlich. Beispielsweise kann mit der `Raise`-Methode die Quelle, die den Fehler generiert hat, in der `Source`-Eigenschaft angegeben werden, die Online Hilfe für den Fehler kann referenziert werden usw.  
  
 Wenn Sie einen benutzerdefinierten Fehler von einem Objekt zurückgeben, legen Sie `Err.Number` fest, indem Sie die ausgewählte Zahl als Fehlercode der `VbObjectError` Konstante hinzufügen. Beispielsweise verwenden Sie den folgenden Code, um die Zahl 1051 als Fehlercode zurückzugeben:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht eine typische Verwendung der `Number`-Eigenschaft in einer Routine zur Fehlerbehandlung.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 In diesem Beispiel wird die `Raise`-Methode des `Err` Objekts verwendet, um einen ursprünglichen Fehler in einer Funktion zu generieren, die in Visual Basic geschrieben wurde. Die Aufruf Funktion kann den Fehler abfangen und an den Benutzer melden. Beachten Sie, dass die Prozedur `CallingProcedure` den Typ der Informationen, die Sie von einem `Err`-Objekt ableiten können, mit den Informationen vergleicht, die Sie von einem `Exception`-Objekt ableiten können.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist größer als 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich <see langword="Long" />-Integer, der die Art des Fehlers identifiziert. Visual Basic-Fehler liegen im Bereich 0–65535. Der Bereich 0–512 ist für Systemfehler reserviert. Der Bereich 513–65535 steht für benutzerdefinierte Fehler zur Verfügung. Beim Festlegen der <see langword="Number" />-Eigenschaft auf den eigenen Code in einem Klassenmodul fügen Sie der <see langword="vbObjectError" />-Konstante Ihre Fehlercodenummer hinzu. Um z.B. die Fehlernummer 513 zu generieren, weisen Sie <c>vbObjectError + 513</c> der <see langword="Number" />-Eigenschaft zu.</param>
        <param name="Source">Optional. <see langword="String" />-Ausdruck, der das Objekt oder die Anwendung nennt, das bzw. die den Fehler generiert hat. Wenn Sie diese Eigenschaft für ein Objekt festlegen, verwenden Sie das Format <c>Projekt</c>.<c>Klasse</c>. Wird <paramref name="Source" /> nicht angegeben, wird die Prozess-ID des aktuellen Visual Basic-Projekts verwendet.</param>
        <param name="Description">Optional. <see langword="String" />-Ausdruck, der den Fehler beschreibt. Ohne Angabe wird der Wert in der <see langword="Number" />-Eigenschaft überprüft. Wenn eine Zuordnung zu dem Code eines Visual Basic-Laufzeitfehlers möglich ist, wird die Zeichenfolge, die von der <see langword="Error" />-Funktion zurückgegeben wird, als <see langword="Description" />-Eigenschaft verwendet. Entspricht der <see langword="Number" />-Eigenschaft kein Visual Basic-Fehler, wird die Meldung "Anwendungs- oder objektdefinierter Fehler" verwendet.</param>
        <param name="HelpFile">Optional. Der vollqualifizierte Pfad zu der Hilfedatei, in der Hilfe zu diesem Fehler zur Verfügung steht. Ohne Angabe verwendet Visual Basic den vollqualifizierten Laufwerks-, Pfad- und Dateinamen der Visual Basic-Hilfedatei.</param>
        <param name="HelpContext">Optional. Die Kontext-ID, die ein Thema in <paramref name="HelpFile" /> identifiziert, das Hilfe für den Fehler bereitstellt. Wenn keine Angabe erfolgt, wird die Kontext-ID in der Visual Basic-Hilfedatei für den Fehler verwendet, der der <see langword="Number" />-Eigenschaft entspricht, sofern vorhanden.</param>
        <summary>Generiert einen Laufzeitfehler und kann statt der <see langword="Error" />-Anweisung verwendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle `Raise` Argumente außer `Number` sind optional. Wenn Sie optionale Argumente weglassen und die Eigenschafts Einstellungen des `Err` Objekts Werte enthalten, die nicht gelöscht wurden, dienen diese Werte als Werte für den Fehler.  
  
 Da das `Err` Objekt umfangreichere Informationen liefert, als wenn Sie Fehler mit der `Error`-Anweisung generieren, ist `Raise` beim Schreiben von Klassen Modulen nützlich. Beispielsweise kann mit der `Raise`-Methode die Quelle, die den Fehler generiert hat, in der `Source`-Eigenschaft angegeben werden, die Online Hilfe für den Fehler kann referenziert werden usw.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Raise`-Methode des `Err` Objekts verwendet, um einen Fehler in einer Funktion zu generieren, die in Visual Basic geschrieben ist. Die Aufruf Funktion kann den Fehler abfangen und mit einem Meldungs Feld an den Benutzer melden.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error-Anweisung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der den Namen des Objekts oder der Anwendung angibt, das bzw. die den Fehler ursprünglich generiert hat, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen <see langword="String" />-Ausdruck zurück, der den Namen des Objekts oder der Anwendung angibt, das bzw. die den Fehler ursprünglich generiert hat, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Source`-Eigenschaft gibt einen `String` Ausdruck an, der das Objekt darstellt, das den Fehler generiert hat. der Ausdruck ist normalerweise der Klassenname oder die Prozess-ID des Objekts. Verwenden Sie die `Source`-Eigenschaft, um Informationen bereitzustellen, wenn der Code einen Fehler nicht verarbeiten kann, der in einem Objekt mit Zugriff generiert wurde. Wenn Sie z. b. auf Microsoft Excel zugreifen und ein `Division by zero` Fehler generiert, legt Microsoft Excel `Err.Number` auf den Fehlercode für diesen Fehler fest und legt `Source` auf "Excel. Application" fest.  
  
 Wenn die Anwendung einen Fehler aus dem Code erzeugt, ist `Source` die programmgesteuerte ID Ihrer Anwendung. Innerhalb einer Klasse sollte `Source` einen Namen mit dem Formular *Projekt*enthalten. - *Klasse*. Wenn ein unerwarteter Fehler im Code auftritt, wird die `Source`-Eigenschaft automatisch ausgefüllt. Bei Fehlern in einem Modul enthält `Source` den Projektnamen.  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `Source`-Eigenschaft in einer typischen Fehler Behandlungs Routine veranschaulicht. Wenn ein Fehler von `Class1`ausgelöst wird, wird die Zeichenfolge `"Class1"` der `Source`-Eigenschaft des `Err` Objekts zugewiesen. Diese Zeichenfolge wird dann in einer informativen Meldung angezeigt, die die Quelle und die Nummer des Fehlers angibt.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>

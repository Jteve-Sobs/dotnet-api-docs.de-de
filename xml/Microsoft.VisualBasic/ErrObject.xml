<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b956e175a057d7318656b9527a06fcf8a634d67a" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173845" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Das <see langword="ErrObject" />-Modul enthält Eigenschaften und Prozeduren, mit denen Laufzeitfehler unter Verwendung des <see langword="Err" />-Objekts identifiziert und behandelt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ErrObject` Modul unterstützt die `Err` Objekt. Weitere Informationen finden Sie unter <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 In diesem Beispiel verwendet die Eigenschaften der `Err` Objekt in ein Dialogfeld Fehlermeldungen zu erstellen. Beachten Sie, was geschieht, wenn Sie die `Clear` Methode erste: beim Generieren Sie dann Visual Basic-Fehler mit der `Raise` -Methode, die Visual Basic Standardwerte zu den Eigenschaften des der `Err` Objekt.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht alle Eigenschafteneinstellungen des <see langword="Err" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie `Clear` explizit deaktivieren der `Err` Objekt, nachdem ein Fehler behandelt wurde, z. B. bei Verwendung der verzögerten Fehlerbehandlung mit `On Error Resume Next`. Die `Clear` Methode wird automatisch aufgerufen, wenn eine der folgenden Anweisungen ausführt:  
  
-   Jede Art von `Resume` Anweisung  
  
-   `Exit Sub`, `Exit Function`oder `Exit Property`  
  
-   Alle `On Error` Anweisung  
  
-   Alle `Try...Catch...Finally` Anweisung  
  
    > [!NOTE]
    >  Die `On Error Resume Next` Konstrukt möglicherweise vorzuziehen `On Error GoTo` bei der Behandlung von Fehlern während des Zugriffs auf andere Objekte generiert. Überprüfung `Err` nach jeder Interaktion mit einem Objekt der Code zugegriffen: Sie können sicher sein, welches Objekt den Fehlercode in platziert `Err.Number`, und welches Objekt den Fehler (das Objekt ursprünglich generiert hat im angegebenen `Err.Source`).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Err` des Objekts `Clear` Methode, um die numerischen Eigenschaften des Zurücksetzen der `Err` Objekt, das 0 (null) und seine Zeichenfolgeneigenschaften in leere Zeichenfolgen. Ohne den Aufruf von `Clear`, der zweite Aufruf von `MsgBox` würde die gleiche Fehlermeldung angezeigt.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der eine einem Fehler zugeordnete beschreibende Zeichenfolge enthält, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen <see langword="String" />-Ausdruck zurück, der eine einem Fehler zugeordnete beschreibende Zeichenfolge enthält, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Description` Einstellung der Eigenschaft besteht eine kurze Beschreibung des Fehlers. Verwenden Sie diese Eigenschaft, um die Benachrichtigung des Benutzers zu einem Fehler, die nicht oder nicht behandeln möchten. Wenn Sie eine benutzerdefinierte Fehlermeldung zu generieren, weisen Sie eine kurze Beschreibung des Fehlers zu den `Description` Eigenschaft. Wenn die `Description` Eigenschaft wird nicht ausgefüllt, und der Wert des der <xref:Microsoft.VisualBasic.ErrObject.Number%2A> Eigenschaft entspricht einer Visual Basic-Laufzeitfehler, und klicken Sie dann die Zeichenfolge zurückgegeben, durch die <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> Funktion festgelegt ist, der `Description` Eigenschaft, wenn der Fehler generiert wird.  
  
   
  
## Examples  
 In diesem Beispiel wird eine benutzerdefinierte Meldung an die `Description` Eigenschaft von der `Err` Objekt.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt. Schreibgeschützt.</summary>
        <value>Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt. Schreibgeschützt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Visual Basic keine Zeilennummern findet, wird 0 zurückgegeben.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Erl` Eigenschaft, um die Nummer der Zeile anzugeben.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Ausnahme zurück, die den aufgetretenen Fehler darstellt.</summary>
        <returns>Gibt die Ausnahme zurück, die den aufgetretenen Fehler darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `GetException` -Funktion steht nur aus den `Err` object-Klasse. Generische Vergleich funktioniert mit den `Exception` Eigenschaft von der `Err` Objekt, das den Fehler anzuzeigen, die aufgetreten ist.  
  
   
  
## Examples  
 Der folgende Code zeigt die Meldung, die zugewiesen werden, auf die Ausnahme in der `Err` Objekt:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine <see langword="Integer" /> zurück, die die Kontext-ID für ein Thema in einer Hilfedatei enthält, oder legt diese fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt eine <see langword="Integer" /> zurück, die die Kontext-ID für ein Thema in einer Hilfedatei enthält, oder legt diese fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `HelpContext` Eigenschaft wird verwendet, um kontextbezogene Hilfe für eine Anwendung angezeigt. Wenn in eine Hilfedatei angegeben ist `HelpFile`die `HelpContext` Eigenschaft wird verwendet, um die Hilfedatei identifiziert automatisch angezeigt. Wenn beide die `HelpFile` und `HelpContext` Eigenschaften sind leer, den Wert der <xref:Microsoft.VisualBasic.ErrObject.Number%2A> Eigenschaft aktiviert ist. Wenn der Wert der `Number` Eigenschaft entspricht der Wert eines Visual Basic-Laufzeitfehler, wird die Kontext-ID der Visual Basic-Hilfe verwendet. Wenn der Wert der `Number` Eigenschaft keiner Visual Basic-Fehler, der Inhalt-Bildschirm für die Visual Basic-Hilfedatei wird angezeigt.  
  
> [!NOTE]
>  Schreiben Sie Routinen in Ihrer Anwendung um typische Fehler zu behandeln. Beim Programmieren mit einem Objekt können Sie das Objekt Hilfedatei zur Verbesserung der Qualität der Fehlerbehandlung oder eine sinnvolle Meldung, die für Benutzer angezeigt, wenn der Fehler nicht behebbar ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `HelpContext` Eigenschaft von der `Err` -Objekt, das Visual Basic-Hilfethema für Anzeigen der `Overflow` Fehler.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der den vollqualifizierten Pfad zu einer Hilfedatei enthält, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen <see langword="String" />-Ausdruck zurück, der den vollqualifizierten Pfad zu einer Hilfedatei enthält, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Hilfedatei, wird angegeben wird die `HelpFile` -Eigenschaft, es wird automatisch aufgerufen, wenn der Benutzer die Hilfe-Taste (oder die F1-Taste) drückt im Dialogfeld mit der Fehlermeldung. Wenn die `HelpContext` Eigenschaft enthält einen gültigen Kontext-ID für die angegebene Datei, die in diesem Thema wird automatisch angezeigt. Wenn kein `HelpFile` angegeben ist, wird die Visual Basic-Hilfedatei wird angezeigt.  
  
> [!NOTE]
>  Schreiben Sie Routinen in Ihrer Anwendung um typische Fehler zu behandeln. Beim Programmieren mit einem Objekt können Sie das Objekt Hilfedatei zur Verbesserung der Qualität der Fehlerbehandlung oder eine sinnvolle Meldung, die für Benutzer angezeigt, wenn der Fehler nicht behebbar ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `HelpFile` Eigenschaft von der `Err` Objekt, um das Hilfesystem zu starten. Wird standardmäßig die `HelpFile` Eigenschaft enthält den Namen des Visual Basic-Hilfedatei.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen von einem Aufruf einer Dynamic Link Library (DLL) erzeugten Systemfehlercode zurück. Schreibgeschützt.</summary>
        <value>Gibt einen von einem Aufruf einer Dynamic Link Library (DLL) erzeugten Systemfehlercode zurück. Schreibgeschützt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Eigenschaft gilt nur für DLL-Aufrufe von Visual Basic-Code. Wenn ein Aufruf erfolgt ist, gibt die aufgerufene Funktion in der Regel einen Code, der angibt, Erfolg oder Fehler, und die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Eigenschaft gefüllt wird. Überprüfen Sie die Dokumentation für die DLL-Funktionen, die die Rückgabewerte zu bestimmen, die Erfolg oder Fehler anzeigt. Sobald der Fehlercode zurückgegeben wird, wird die Visual Basic-Anwendung muss sofort überprüfen die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Eigenschaft. Keine Ausnahme wird ausgelöst, wenn die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> festgelegt wird.  
  
> [!NOTE]
>  Die <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Eigenschaft ist geschützt, indem <xref:System.Security.Permissions.SecurityAction.LinkDemand>, welche verhindert, es vor nicht vertrauenswürdigem Code zugegriffen wird. Allerdings <xref:System.Security.Permissions.SecurityAction.LinkDemand> erfordert nur den unmittelbaren Aufrufer haben <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> Berechtigung. Wenn der Code aus teilweise vertrauenswürdigem Code aufgerufen werden kann, verfügbar machen den Wert des <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> ohne Validierung ein Sicherheitsrisiko dar.  
>   
>  Für wichtige Einschränkungen zur Verwendung der <xref:System.Security.Permissions.SecurityAction.LinkDemand> Member finden Sie unter ["Demand" im Vergleich. LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Weitere Informationen zu Berechtigungen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Beachten Sie, dass diese Eigenschaft gibt immer 0 (null) zurück für intelligente Geräte.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie verwenden, können die `LastDllError` Eigenschaft nach dem Aufrufen einer funktionsrückgabewerts in der Windows-API. Die `PrintWindowCoordinates` Prozedur akzeptiert ein Handle zu einem Fenster und ruft die `GetWindowRect` Funktion. `GetWindowRect` füllt die RECT-Datenstruktur mit den Seiten des Rechtecks, die das Fenster bilden. Wenn Sie ein ungültiges Handle übergeben, ein Fehler auftritt, und die Fehlernummer steht über die `LastDllError` Eigenschaft.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen numerischen Wert zurück, der einen Fehler angibt, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen numerischen Wert zurück, der einen Fehler angibt, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle von der `Raise` Argumente außer `Number` sind optional. Wenn Sie optionale Argumente und die eigenschafteneinstellungen des weglassen der `Err` Objekt enthalten Werte, die nicht gelöscht wurden, diese Werte dienen als Werte für den Fehler.  
  
 Da die `Err` Objekt gibt mehr Informationen als beim Generieren von Fehlern mit Assistenten für die `Error` -Anweisung `Raise` eignet sich zum Generieren von Fehlern beim Klassenmodule schreiben. Z. B. mit der `Raise` -Methode, die Quelle, die den Fehler generiert hat kann angegeben werden der `Source` -Eigenschaft, die Onlinehilfe für den Fehler verwiesen werden kann und so weiter.  
  
 Legen Sie einen benutzerdefinierten Fehler von einem Objekt zurückgeben, `Err.Number` durch Hinzufügen der Zahl, die Sie als Fehlercode ausgewählt der `VbObjectError` konstant. Beispielsweise verwenden Sie den folgenden Code, um die Anzahl 1051 als Fehlercode zurückzugeben:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Dieses Beispiel zeigt ein typisches Einsatzgebiet von der `Number` Eigenschaft in einer Routine für die Fehlerbehandlung.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 Dieses Beispiel verwendet die `Err` des Objekts `Raise` Methode zum Generieren der ursprüngliche Fehler innerhalb einer Funktion in Visual Basic geschrieben. Die aufrufende Funktion kann den Fehler abfangen und für den Benutzer melden. Beachten Sie diese Prozedur `CallingProcedure` steht im Gegensatz zu den Informationstyp, der Sie ableiten können eine `Err` Objekt mit den Informationen, die Sie ableiten können ein `Exception` Objekt.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> ist größer als 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Long" />-Integer, der die Art des Fehlers identifiziert. Visual Basic-Fehler liegen im Bereich 0 – 65535. Der Bereich 0 – 512 ist für Systemfehler reserviert. Der Bereich 513 – 65535 steht für benutzerdefinierte Fehler zur Verfügung. Beim Festlegen der <see langword="Number" />-Eigenschaft auf den eigenen Code in einem Klassenmodul fügen Sie der <see langword="vbObjectError" />-Konstante Ihre Fehlercodenummer hinzu. Um z.B. die Fehlernummer 513 zu generieren, weisen Sie <c>vbObjectError + 513</c> der <see langword="Number" />-Eigenschaft zu.</param>
        <param name="Source">Dies ist optional. <see langword="String" />-Ausdruck, der das Objekt oder die Anwendung nennt, das bzw. die den Fehler generiert hat. Wenn Sie diese Eigenschaft für ein Objekt festlegen, verwenden Sie das Format <c>Projekt</c>.<c>Klasse</c>. Wird <c>Quelle</c> nicht angegeben, wird die Prozess-ID des aktuellen Visual Basic-Projekts verwendet.</param>
        <param name="Description">Dies ist optional. <see langword="String" />-Ausdruck, der den Fehler beschreibt. Ohne Angabe wird der Wert in der <see langword="Number" />-Eigenschaft überprüft. Wenn eine Zuordnung zu dem Code eines Visual Basic-Laufzeitfehlers möglich ist, wird die Zeichenfolge, die von der <see langword="Error" />-Funktion zurückgegeben wird, als <see langword="Description" />-Eigenschaft verwendet. Entspricht der <see langword="Number" />-Eigenschaft kein Visual Basic-Fehler, wird die Meldung "Anwendungs- oder objektdefinierter Fehler" verwendet.</param>
        <param name="HelpFile">Dies ist optional. Der vollqualifizierte Pfad zu der Hilfedatei, in der Hilfe zu diesem Fehler zur Verfügung steht. Ohne Angabe verwendet Visual Basic den vollqualifizierten Laufwerks-, Pfad- und Dateinamen der Visual Basic-Hilfedatei.</param>
        <param name="HelpContext">Dies ist optional. Die Kontext-ID, die ein Thema in <c>HelpFile</c> identifiziert, das Hilfe für den Fehler bereitstellt. Wenn keine Angabe erfolgt, wird die Kontext-ID in der Visual Basic-Hilfedatei für den Fehler verwendet, der der <see langword="Number" />-Eigenschaft entspricht, sofern vorhanden.</param>
        <summary>Generiert einen Laufzeitfehler und kann statt der <see langword="Error" />-Anweisung verwendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle von der `Raise` Argumente außer `Number` sind optional. Wenn Sie optionale Argumente und die eigenschafteneinstellungen des weglassen der `Err` Objekt enthalten Werte, die nicht gelöscht wurden, diese Werte dienen als Werte für den Fehler.  
  
 Da die `Err` Objekt gibt mehr Informationen als beim Generieren von Fehlern mit Assistenten für die `Error` -Anweisung `Raise` eignet sich zum Generieren von Fehlern beim Klassenmodule schreiben. Z. B. mit der `Raise` -Methode, die Quelle, die den Fehler generiert hat kann angegeben werden der `Source` -Eigenschaft, die Onlinehilfe für den Fehler verwiesen werden kann und so weiter.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Err` des Objekts `Raise` Methode zum Generieren der Fehler innerhalb einer Funktion in Visual Basic geschrieben. Die aufrufende Funktion kann den Fehler abfangen und für den Benutzer ein Meldungsfeld melden.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der den Namen des Objekts oder der Anwendung angibt, das bzw. die den Fehler ursprünglich generiert hat, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
        <value>Gibt einen <see langword="String" />-Ausdruck zurück, der den Namen des Objekts oder der Anwendung angibt, das bzw. die den Fehler ursprünglich generiert hat, oder legt diesen fest. Lese-/Schreibzugriff.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Source` Eigenschaft gibt eine `String` Ausdruck, der das Objekt darstellt, die den Fehler generiert; der Ausdruck ist in der Regel Klassenname des Objekts oder der Prozess-ID. Verwenden der `Source` Eigenschaft, um Informationen bereitzustellen, wenn der Code einen Fehler in einem aufgerufenen Objekt verarbeiten kann. Angenommen, wenn Sie Zugriff auf Microsoft Excel und generiert eine `Division by zero` Fehler, Microsoft Excel wird `Err.Number` auf den Fehlercode für den Fehler und legt `Source` auf "Excel.Application".  
  
 Wenn die Anwendung einen Fehler aus dem Code generiert `Source` ist Ihre Anwendung programmgesteuerte-ID. Innerhalb einer Klasse `Source` einen Namen in das Formular enthalten sollte *Projekt*.* Klasse*. Tritt ein unerwarteter Fehler im Code, der `Source` Eigenschaft wird automatisch ausgefüllt. Fehler in einem Modul `Source` enthält den Namen des Projekts.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Source` Eigenschaft in einer typischen Fehlerbehandlungs-Routine. Wenn ein Fehler ausgelöst wird, von `Class1`, die Zeichenfolge `"Class1"` zugewiesen ist die `Source` Eigenschaft von der `Err` Objekt. Diese Zeichenfolge wird in eine informative Meldung, der angibt, die Quelle und die Nummer des Fehlers angezeigt.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f58bdf919ce57eab4533d9651e9747f7cefb6e9" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83954766" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="DateAndTime" />-Modul enthält Prozeduren und Eigenschaften, die in Datum- und Uhrzeitoperationen verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und die Lauf Zeit Bibliothekselemente, die das aktuelle Datum oder die aktuelle Uhrzeit erhalten, Datumsberechnungen durchführen, ein Datum oder eine Uhrzeit zurückgeben, das Datum oder die Uhrzeit oder die Dauer eines Prozesses festlegen.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Today`-Eigenschaft verwendet, um das aktuelle Systemdatum zurückzugeben.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/dates-and-times-summary">Datums- und Uhrzeitangaben: Zusammenfassung</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Die Funktion gibt einen <see langword="Date" />-Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das zu addierende Zeitintervall darstellt.</param>
        <param name="Number">Erforderlich. Gleitkommaausdruck, der die Zahl der hinzuzufügenden Intervalle darstellt. Er kann entweder positiv (zum Abrufen von Datums-/Zeitwerten in der Zukunft) oder negativ (zum Abrufen von Datums-/Zeitwerten in der Vergangenheit) sein. Er kann Nachkommastellen enthalten, wenn <paramref name="Interval" /> Stunden, Minuten oder Sekunden angibt. Bei anderen Werten von <paramref name="Interval" /> werden alle Dezimalstellen von <paramref name="Number" /> ignoriert.</param>
        <param name="DateValue">Erforderlich. Ein Ausdruck, der Datum und Uhrzeit angibt, zu denen das Intervall hinzuaddiert werden muss. <paramref name="DateValue" /> selbst wird im aufrufenden Programm nicht geändert.</param>
        <summary>Die Funktion gibt einen Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
        <returns>Ein Wert, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateAdd`-Funktion verwenden, um ein angegebenes Zeitintervall von einem Datum hinzuzufügen oder zu subtrahieren. Beispielsweise können Sie ein Datum berechnen, das 30 Tage ab heute liegt, oder eine Uhrzeit von 45 Minuten.  
  
 Wenn Sie `DateValue`Tage hinzufügen möchten, können Sie `DateInterval.Day`, `DateInterval.DayOfYear`oder `DateInterval.Weekday`verwenden. Diese werden als gleichwertig behandelt, da `DayOfYear` und `Weekday` keine sinnvollen Zeitintervalle sind.  
  
 Die `DateAdd` Funktion gibt nie ein ungültiges Datum zurück. Bei Bedarf wird der tagepart des resultierenden Datums nach unten an den letzten Tag des resultierenden Monats im resultierenden Jahr angepasst. Im folgenden Beispiel wird ein Monat zum 31. Januar hinzugefügt:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 In diesem Beispiel gibt `DateAdd` `#2/28/1995#`zurück, nicht `#2/31/1995#`. Wenn `DateValue` `#1/31/1996#`ist, wird `#2/29/1996#` zurückgegeben, da 1996 ein Schaltjahr ist.  
  
> [!NOTE]
>  `DateAdd` verwendet die aktuelle Kalender Einstellung aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft der <xref:System.Globalization.CultureInfo>-Klasse im <xref:System.Globalization>-Namespace. Die Standard <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Werte werden durch die Einstellungen der **Systemsteuerung** festgelegt.  
  
 Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, bietet seine-Methode zusätzliche Optionen zum Hinzufügen von Zeitintervallen. Beispielsweise können Sie die Anzahl der Tage, die auf die nächste Millisekunde gerundet werden, wie folgt auf eine `Date` Variable hinzufügen:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Das `Interval`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|String|Einheit des hinzu zufügenden Zeitintervalls|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Ertag auf integralen Wert gekürzt|  
|`DateInterval.DayOfYear`|y|Ertag auf integralen Wert gekürzt|  
|`DateInterval.Hour`|h.|Geöffneten gerundet auf die nächste Millisekunde|  
|`DateInterval.Minute`|n|Tiges gerundet auf die nächste Millisekunde|  
|`DateInterval.Month`|m|Ges auf integralen Wert gekürzt|  
|`DateInterval.Quarter`|q|Viertel auf integralen Wert gekürzt|  
|`DateInterval.Second`|s|Klässler gerundet auf die nächste Millisekunde|  
|`DateInterval.Weekday`|w|Ertag auf integralen Wert gekürzt|  
|`DateInterval.WeekOfYear`|ww|Mitte auf integralen Wert gekürzt|  
|`DateInterval.Year`|yyyy|Jährigen auf integralen Wert gekürzt|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum verwendet, und mit der `DateAdd`-Funktion wird ein entsprechendes Datum für eine angegebene Anzahl von Monaten in der Zukunft angezeigt.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Das berechnete Datum liegt vor 00:00:00 Uhr am 1. Januar des Jahres 1 oder nach 23:59:59 Uhr am 31. Dezember 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das zu addierende Zeitintervall darstellt.</param>
        <param name="Number">Erforderlich. Gleitkommaausdruck, der die Zahl der hinzuzufügenden Intervalle darstellt. <paramref name="Number" /> kann entweder positiv (zum Abrufen von Datums-/Zeitwerten in der Zukunft) oder negativ (zum Abrufen von Datums-/Zeitwerten in der Vergangenheit) sein. Er kann Nachkommastellen enthalten, wenn <paramref name="Interval" /> Stunden, Minuten oder Sekunden angibt. Bei anderen Werten von <paramref name="Interval" /> werden alle Dezimalstellen von <paramref name="Number" /> ignoriert.</param>
        <param name="DateValue">Erforderlich. Ein Ausdruck, der Datum und Uhrzeit angibt, zu denen das Intervall hinzuaddiert werden muss. <paramref name="DateValue" /> selbst wird im aufrufenden Programm nicht geändert.</param>
        <summary>Die Funktion gibt einen Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
        <returns>Ein Wert, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateAdd`-Funktion verwenden, um ein angegebenes Zeitintervall von einem Datum hinzuzufügen oder zu subtrahieren. Beispielsweise können Sie ein Datum berechnen, das 30 Tage ab heute liegt, oder eine Uhrzeit von 45 Minuten.  
  
 Wenn Sie `DateValue`Tage hinzufügen möchten, können Sie `DateInterval.Day`, `DateInterval.DayOfYear`oder `DateInterval.Weekday`verwenden. Diese werden als gleichwertig behandelt, da `DayOfYear` und `Weekday` keine sinnvollen Zeitintervalle sind.  
  
 Die `DateAdd` Funktion gibt nie ein ungültiges Datum zurück. Bei Bedarf wird der tagepart des resultierenden Datums nach unten an den letzten Tag des resultierenden Monats im resultierenden Jahr angepasst. Im folgenden Beispiel wird ein Monat zum 31. Januar hinzugefügt:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 In diesem Beispiel gibt `DateAdd` `#2/28/1995#`zurück, nicht `#2/31/1995#`. Wenn `DateValue` `#1/31/1996#`ist, wird `#2/29/1996#` zurückgegeben, da 1996 ein Schaltjahr ist.  
  
> [!NOTE]
>  `DateAdd` verwendet die aktuelle Kalender Einstellung aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft der <xref:System.Globalization.CultureInfo>-Klasse im <xref:System.Globalization>-Namespace. Die Standard <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Werte werden durch die Einstellungen der **Systemsteuerung** festgelegt.  
  
 Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, bietet seine-Methode zusätzliche Optionen zum Hinzufügen von Zeitintervallen. Beispielsweise können Sie die Anzahl der Tage, die auf die nächste Millisekunde gerundet werden, wie folgt auf eine `Date` Variable hinzufügen:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Das `Interval`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|String|Einheit des hinzu zufügenden Zeitintervalls|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Ertag auf integralen Wert gekürzt|  
|`DateInterval.DayOfYear`|y|Ertag auf integralen Wert gekürzt|  
|`DateInterval.Hour`|h.|Geöffneten gerundet auf die nächste Millisekunde|  
|`DateInterval.Minute`|n|Tiges gerundet auf die nächste Millisekunde|  
|`DateInterval.Month`|m|Ges auf integralen Wert gekürzt|  
|`DateInterval.Quarter`|q|Viertel auf integralen Wert gekürzt|  
|`DateInterval.Second`|s|Klässler gerundet auf die nächste Millisekunde|  
|`DateInterval.Weekday`|w|Ertag auf integralen Wert gekürzt|  
|`DateInterval.WeekOfYear`|ww|Mitte auf integralen Wert gekürzt|  
|`DateInterval.Year`|yyyy|Jährigen auf integralen Wert gekürzt|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum verwendet, und mit der `DateAdd`-Funktion wird ein entsprechendes Datum für eine angegebene Anzahl von Monaten in der Zukunft angezeigt.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Das berechnete Datum liegt vor 00:00:00 Uhr am 1. Januar des Jahres 1 oder nach 23:59:59 Uhr am 31. Dezember 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das Zeitintervall angibt, das Sie als Einheit für die Differenz zwischen <paramref name="Date1" /> und <paramref name="Date2" /> verwenden möchten.</param>
        <param name="Date1">Erforderlich. Der erste Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="Date2">Erforderlich. Der zweite Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="DayOfWeek">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="WeekOfYear">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen Long-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
        <returns>Ein Long-Wert, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateDiff`-Funktion verwenden, um zu bestimmen, wie viele angegebene Zeitintervalle zwischen zwei Datums-/Uhrzeitwerten vorhanden sind. Beispielsweise können Sie `DateDiff` verwenden, um die Anzahl von Tagen zwischen zwei Datumsangaben oder die Anzahl der Wochen zwischen dem heutigen Tag und dem Ende des Jahres zu berechnen.  
  
## <a name="behavior"></a>Verhalten  
  
-   **Behandlung von Parametern.** `DateDiff` den Wert `Date1` vom Wert von `Date2` subtrahiert, um den Unterschied zu ergeben. Der Wert wird im aufrufenden Programm nicht geändert.  
  
-   **Rückgabewerte.** Da `Date1` und `Date2` den `Date`-Datentyp aufweisen, enthalten Sie Datums-und Uhrzeitwerte, die auf 100-Nanosekunden-Ticks des Systemzeit Gebers zutreffen. Allerdings wird von `DateDiff` immer die Anzahl der Zeitintervalle als `Long` Wert zurückgegeben.  
  
     Wenn `Date1` eine spätere Datums-und Uhrzeitangaben als `Date2`darstellt, gibt `DateDiff` eine negative Zahl zurück.  
  
-   **Tages Intervalle.** Wenn `Interval` auf `DateInterval.DayOfYear`festgelegt ist, wird es wie `DateInterval.Day`behandelt, da `DayOfYear` für ein Zeitintervall keine sinnvolle Einheit ist.  
  
-   **Wochen Intervalle.** Wenn `Interval` auf `DateInterval.WeekOfYear`festgelegt ist, stellt der Rückgabewert die Anzahl der Wochen zwischen dem ersten Tag der Woche dar, die `Date1` und den ersten Tag der Woche mit `Date2`enthält. Im folgenden Beispiel wird gezeigt, wie dies unterschiedliche Ergebnisse aus `DateInterval.Weekday`erzeugt.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Im vorangehenden Beispiel gibt `DateDiff` 0 an `wD` zurück, da der Unterschied zwischen den beiden Datumsangaben weniger als sieben Tage beträgt, aber 1 an `wY` zurückgegeben wird, da es einen siebentägigen Unterschied zwischen den ersten Tagen der jeweiligen Kalenderwochen gibt.  
  
-   **Größere Intervalle.** Wenn `Interval` auf `DateInterval.Year`festgelegt ist, wird der Rückgabewert nur aus den Jahres Teilen von `Date1` und `Date2`berechnet. Entsprechend wird der Rückgabewert für `DateInterval.Month` ausschließlich aus den Teilen Jahr und Monat der Argumente und für `DateInterval.Quarter` aus den Quartalen, die die beiden Datumsangaben enthalten, berechnet.  
  
     Wenn z. b. der 31. Dezember zum 1. Januar des folgenden Jahrs verglichen wird, gibt `DateDiff` 1 für `DateInterval.Year`, `DateInterval.Quarter`oder `DateInterval.Month`zurück, auch wenn höchstens ein Tag vergangen ist.  
  
     Für Kulturen wie Japanisch, die mehrere Zeiträume aufweisen, gibt die `DateDiff`-Methode keinen Unterschied in Jahren zurück, wenn der Unterschied zwei oder mehr Zeiträume umfasst. Stattdessen können Sie den Unterschied in den Werten berechnen, die von der <xref:System.DateTime.Year%2A>-Eigenschaft zurückgegeben werden, wie im folgenden Beispiel gezeigt: `date2.Year - date1.Year`.  
  
-   **Weitere Intervalle.** Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, bietet seine-Methode zusätzliche Optionen für die Suche nach Zeitintervallen. Beispielsweise können Sie die `Subtract`-Methode in einem der überladenen Formen verwenden: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> Subtrahiert eine <xref:System.TimeSpan> von einer `Date` Variablen, um einen anderen `Date` Wert zurückzugeben, und <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> subtrahiert einen `Date` Wert, um einen <xref:System.TimeSpan>zurückzugeben. Sie können einen Prozesszeit, um herauszufinden, wie viele Millisekunden es dauert, wie im folgenden Beispiel gezeigt.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Das `Interval`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichen folgen Wert|Zeiteinheit (Differenz)|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day (Tag)|  
|`DateInterval.DayOfYear`|"y"|Day (Tag)|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|Nr|Minute|  
|`DateInterval.Month`|"m"|Month (Monat)|  
|`DateInterval.Quarter`|Q1|Quarter|  
|`DateInterval.Second`|"s"|Sekunde|  
|`DateInterval.Weekday`|"w"|Week|  
|`DateInterval.WeekOfYear`|"ww"|Kalenderwoche|  
|`DateInterval.Year`|"yyyy"|Jahr|  
  
 Das `DayOfWeek`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Der erste Tag der Woche ist in den Systemeinstellungen angegeben.|  
|`FirstDayOfWeek.Sunday`|1|Sonntag (Standard)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Tuesday|  
|`FirstDayOfWeek.Wednesday`|4|Wednesday|  
|`FirstDayOfWeek.Thursday`|5|Thursday|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Das `WeekOfYear`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in der der 1. Januar Eintritt (Standard)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche mit mindestens vier Tagen im neuen Jahr (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 In diesem Beispiel wird die `DateDiff`-Funktion verwendet, um die Anzahl der Tage zwischen einem bestimmten Datum und heute anzuzeigen.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" /> oder <paramref name="DayofWeek" /> liegt außerhalb des Bereichs.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> oder <paramref name="Date2" /> hat einen ungültigen Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das Zeitintervall angibt, das Sie als Einheit für die Differenz zwischen <paramref name="Date1" /> und <paramref name="Date2" /> verwenden möchten.</param>
        <param name="Date1">Erforderlich. Der erste Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="Date2">Erforderlich. Der zweite Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="DayOfWeek">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="WeekOfYear">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen Long-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
        <returns>Ein Long-Wert, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateDiff`-Funktion verwenden, um zu bestimmen, wie viele angegebene Zeitintervalle zwischen zwei Datums-/Uhrzeitwerten vorhanden sind. Beispielsweise können Sie `DateDiff` verwenden, um die Anzahl von Tagen zwischen zwei Datumsangaben oder die Anzahl der Wochen zwischen dem heutigen Tag und dem Ende des Jahres zu berechnen.  
  
## <a name="behavior"></a>Verhalten  
  
-   **Behandlung von Parametern.** `DateDiff` den Wert `Date1` vom Wert von `Date2` subtrahiert, um den Unterschied zu ergeben. Der Wert wird im aufrufenden Programm nicht geändert.  
  
-   **Rückgabewerte.** Da `Date1` und `Date2` den `Date`-Datentyp aufweisen, enthalten Sie Datums-und Uhrzeitwerte, die auf 100-Nanosekunden-Ticks des Systemzeit Gebers zutreffen. Allerdings wird von `DateDiff` immer die Anzahl der Zeitintervalle als `Long` Wert zurückgegeben.  
  
     Wenn `Date1` eine spätere Datums-und Uhrzeitangaben als `Date2`darstellt, gibt `DateDiff` eine negative Zahl zurück.  
  
-   **Tages Intervalle.** Wenn `Interval` auf `DateInterval.DayOfYear`festgelegt ist, wird es wie `DateInterval.Day`behandelt, da `DayOfYear` für ein Zeitintervall keine sinnvolle Einheit ist.  
  
-   **Wochen Intervalle.** Wenn `Interval` auf `DateInterval.WeekOfYear`festgelegt ist, stellt der Rückgabewert die Anzahl der Wochen zwischen dem ersten Tag der Woche dar, die `Date1` und den ersten Tag der Woche mit `Date2`enthält. Im folgenden Beispiel wird gezeigt, wie dies unterschiedliche Ergebnisse aus `DateInterval.Weekday`erzeugt.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Im vorangehenden Beispiel gibt `DateDiff` 0 an `wD` zurück, da der Unterschied zwischen den beiden Datumsangaben weniger als sieben Tage beträgt, aber 1 an `wY` zurückgegeben wird, da es einen siebentägigen Unterschied zwischen den ersten Tagen der jeweiligen Kalenderwochen gibt.  
  
-   **Größere Intervalle.** Wenn `Interval` auf `DateInterval.Year`festgelegt ist, wird der Rückgabewert nur aus den Jahres Teilen von `Date1` und `Date2`berechnet. Entsprechend wird der Rückgabewert für `DateInterval.Month` ausschließlich aus den Teilen Jahr und Monat der Argumente und für `DateInterval.Quarter` aus den Quartalen, die die beiden Datumsangaben enthalten, berechnet.  
  
     Wenn z. b. der 31. Dezember zum 1. Januar des folgenden Jahrs verglichen wird, gibt `DateDiff` 1 für `DateInterval.Year`, `DateInterval.Quarter`oder `DateInterval.Month`zurück, auch wenn höchstens ein Tag vergangen ist.  
  
     Für Kulturen wie Japanisch, die mehrere Zeiträume aufweisen, gibt die `DateDiff`-Methode keinen Unterschied in Jahren zurück, wenn der Unterschied zwei oder mehr Zeiträume umfasst. Stattdessen können Sie den Unterschied in den Werten berechnen, die von der <xref:System.DateTime.Year%2A>-Eigenschaft zurückgegeben werden, wie im folgenden Beispiel gezeigt: `date2.Year - date1.Year`.  
  
-   **Weitere Intervalle.** Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, bietet seine-Methode zusätzliche Optionen für die Suche nach Zeitintervallen. Beispielsweise können Sie die `Subtract`-Methode in einem der überladenen Formen verwenden: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> Subtrahiert eine <xref:System.TimeSpan> von einer `Date` Variablen, um einen anderen `Date` Wert zurückzugeben, und <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> subtrahiert einen `Date` Wert, um einen <xref:System.TimeSpan>zurückzugeben. Sie können einen Prozesszeit, um herauszufinden, wie viele Millisekunden es dauert, wie im folgenden Beispiel gezeigt.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Das `Interval`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichen folgen Wert|Zeiteinheit (Differenz)|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day (Tag)|  
|`DateInterval.DayOfYear`|"y"|Day (Tag)|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|Nr|Minute|  
|`DateInterval.Month`|"m"|Month (Monat)|  
|`DateInterval.Quarter`|Q1|Quarter|  
|`DateInterval.Second`|"s"|Sekunde|  
|`DateInterval.Weekday`|"w"|Week|  
|`DateInterval.WeekOfYear`|"ww"|Kalenderwoche|  
|`DateInterval.Year`|"yyyy"|Jahr|  
  
 Das `DayOfWeek`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Der erste Tag der Woche ist in den Systemeinstellungen angegeben.|  
|`FirstDayOfWeek.Sunday`|1|Sonntag (Standard)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Tuesday|  
|`FirstDayOfWeek.Wednesday`|4|Wednesday|  
|`FirstDayOfWeek.Thursday`|5|Thursday|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Das `WeekOfYear`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in der der 1. Januar Eintritt (Standard)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche mit mindestens vier Tagen im neuen Jahr (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 In diesem Beispiel wird die `DateDiff`-Funktion verwendet, um die Anzahl der Tage zwischen einem bestimmten Datum und heute anzuzeigen.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" /> oder <paramref name="DayofWeek" /> liegt außerhalb des Bereichs.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> oder <paramref name="Date2" /> hat einen ungültigen Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen ganzzahligen Wert zurück, der die angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der den Teil des Datums-/Zeitwerts darstellt, der zurückgegeben werden soll.</param>
        <param name="DateValue">Erforderlich. Der auszuwertende <see langword="Date" />-Wert.</param>
        <param name="FirstDayOfWeekValue">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="FirstWeekOfYearValue">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen ganzzahligen Wert zurück, der die angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</summary>
        <returns>Ein ganzzahliger Wert, der eine angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der `DatePart`-Funktion können Sie einen Datums-/Uhrzeitwert auswerten und eine bestimmte Komponente zurückgeben. Beispielsweise können Sie `DatePart` zum Berechnen des Wochentags oder der aktuellen Stunde verwenden.  
  
 Wenn Sie `DateInterval.Weekday` für das `Interval`-Argument auswählen, entspricht der zurückgegebene Wert den Werten der `FirstDayOfWeek`-Enumeration. Wenn Sie `DateInterval.WeekOfYear`auswählen, verwendet `DatePart` die Klassen <xref:System.Globalization.Calendar> und <xref:System.Globalization.CultureInfo> des <xref:System.Globalization>-Namespace, um die aktuellen Einstellungen zu bestimmen.  
  
 Das `FirstDayOfWeekValue`-Argument wirkt sich auf Berechnungen aus, die die `DateInterval.Weekday`-und `DateInterval.WeekOfYear` `Interval` Einstellungen verwenden. Das `FirstWeekOfYearValue`-Argument wirkt sich auf Berechnungen aus, die `DateInterval.WeekOfYear` für `Interval`angeben.  
  
 Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, haben seine Methoden zusätzliche Optionen zum Abrufen von Datums-/Uhrzeitteilen. Beispielsweise können Sie den gesamten Datumswert einer `Date` Variablen abrufen, wobei der Uhrzeitwert auf Mitternacht festgelegt ist:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Das `Interval`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|String|Teil des zurück zugebende Datums-/Uhrzeitwerts|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Tag des Monats (1 bis 31)|  
|`DateInterval.DayOfYear`|y|Tag des Jahres (1 bis 366)|  
|`DateInterval.Hour`|h.|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Month (Monat)|  
|`DateInterval.Quarter`|q|Quarter|  
|`DateInterval.Second`|s|Sekunde|  
|`DateInterval.Weekday`|w|Tag der Woche (1 bis 7)|  
|`DateInterval.WeekOfYear`|ww|Woche des Jahres (1 bis 53)|  
|`DateInterval.Year`|yyyy|Jahr|  
  
 Das `FirstDayOfWeekValue`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Der erste Tag der Woche ist in den Systemeinstellungen angegeben.|  
|`FirstDayOfWeek.Sunday`|1|Sonntag (Standard)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Tuesday|  
|`FirstDayOfWeek.Wednesday`|4|Wednesday|  
|`FirstDayOfWeek.Thursday`|5|Thursday|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Das `FirstWeekOfYearValue`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in der der 1. Januar Eintritt (Standard)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche mit mindestens vier Tagen im neuen Jahr (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum verwendet, und mit der `DatePart`-Funktion wird das Quartal des Jahres angezeigt, in dem es stattfindet.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> ist nicht gültig.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der den Teil des Datums-/Zeitwerts darstellt, der zurückgegeben werden soll.</param>
        <param name="DateValue">Erforderlich. Ein auszuwertender <see langword="Date" />-Wert.</param>
        <param name="DayOfWeek">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="WeekOfYear">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen Wert zurück, der eine angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</summary>
        <returns>Ein ganzzahliger Wert, der eine angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der `DatePart`-Funktion können Sie einen Datums-/Uhrzeitwert auswerten und eine bestimmte Komponente zurückgeben. Beispielsweise können Sie `DatePart` zum Berechnen des Wochentags oder der aktuellen Stunde verwenden.  
  
 Wenn Sie `DateInterval.Weekday` für das `Interval`-Argument auswählen, entspricht der zurückgegebene Wert den Werten der `FirstDayOfWeek`-Enumeration. Wenn Sie `DateInterval.WeekOfYear`auswählen, verwendet `DatePart` die Klassen <xref:System.Globalization.Calendar> und <xref:System.Globalization.CultureInfo> des <xref:System.Globalization>-Namespace, um die aktuellen Einstellungen zu bestimmen.  
  
 Das `FirstDayOfWeekValue`-Argument wirkt sich auf Berechnungen aus, die die `DateInterval.Weekday`-und `DateInterval.WeekOfYear` `Interval` Einstellungen verwenden. Das `FirstWeekOfYearValue`-Argument wirkt sich auf Berechnungen aus, die `DateInterval.WeekOfYear` für `Interval`angeben.  
  
 Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, haben seine Methoden zusätzliche Optionen zum Abrufen von Datums-/Uhrzeitteilen. Beispielsweise können Sie den gesamten Datumswert einer `Date` Variablen abrufen, wobei der Uhrzeitwert auf Mitternacht festgelegt ist:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Das `Interval`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|String|Teil des zurück zugebende Datums-/Uhrzeitwerts|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Tag des Monats (1 bis 31)|  
|`DateInterval.DayOfYear`|y|Tag des Jahres (1 bis 366)|  
|`DateInterval.Hour`|h.|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Month (Monat)|  
|`DateInterval.Quarter`|q|Quarter|  
|`DateInterval.Second`|s|Sekunde|  
|`DateInterval.Weekday`|w|Tag der Woche (1 bis 7)|  
|`DateInterval.WeekOfYear`|ww|Woche des Jahres (1 bis 53)|  
|`DateInterval.Year`|yyyy|Jahr|  
  
 Das `FirstDayOfWeekValue`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Der erste Tag der Woche ist in den Systemeinstellungen angegeben.|  
|`FirstDayOfWeek.Sunday`|1|Sonntag (Standard)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Tuesday|  
|`FirstDayOfWeek.Wednesday`|4|Wednesday|  
|`FirstDayOfWeek.Thursday`|5|Thursday|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Das `FirstWeekOfYearValue`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in der der 1. Januar Eintritt (Standard)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche mit mindestens vier Tagen im neuen Jahr (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum verwendet, und mit der `DatePart`-Funktion wird das Quartal des Jahres angezeigt, in dem es stattfindet.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Erforderlich. Ganzzahliger Ausdruck zwischen 1 und 9999. Werte unterhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Wenn <paramref name="Year" /> im Bereich von 0 bis 99 liegt, wird das Argument als Wert zwischen 1930 und 2029 interpretiert, wie unten im Abschnitt Hinweise erläutert. Ist <paramref name="Year" /> kleiner als 1, wird es vom aktuellen Jahr subtrahiert.</param>
        <param name="Month">Erforderlich. Ganzzahliger Ausdruck zwischen 1 und 12. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Month" /> wird um 1 verringert und auf den Januar des berechneten Jahres angewendet. Anders ausgedrückt: (<paramref name="Month" /> – 1) wird zu Januar addiert. Falls erforderlich, wird das Jahr neu berechnet. In den folgenden Ergebnissen wird dieser Effekt veranschaulicht: 
Wenn <paramref name="Month" /> 1 ist, ist das Ergebnis der Januar des berechneten Jahres.  
  
Wenn <paramref name="Month" /> 0 ist, ist das Ergebnis der Dezember des vorherigen Jahres.  
  
Wenn <paramref name="Month" /> -1 ist, ist das Ergebnis der November des vorherigen Jahres.  
  
Wenn <paramref name="Month" /> 13 ist, ist das Ergebnis der Januar des nächsten Jahres.</param>
        <param name="Day">Erforderlich. Ganzzahliger Ausdruck zwischen 1 und 31. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Day" /> wird um 1 verringert und auf den ersten Tag des berechneten Monats angewendet. Anders ausgedrückt: (<paramref name="Day" /> - 1) wird zum Monatsersten addiert. Falls erforderlich, werden der Monat und das Jahr neu berechnet. In den folgenden Ergebnissen wird dieser Effekt veranschaulicht: 
Wenn <paramref name="Day" /> 1 ist, ist das Ergebnis der erste Tag des berechneten Monats.  
  
Wenn <paramref name="Day" /> 0 ist, ist das Ergebnis der letzte Tag des vorherigen Monats.  
  
Wenn <paramref name="Day" /> -1 ist, ist das Ergebnis der vorletzte Tag des vorherigen Monats.  
  
Wenn <paramref name="Day" /> das Ende des aktuellen Monats überschreitet, ist das Ergebnis der entsprechende Tag des nächsten Monats. Wenn z. B. <paramref name="Month" /> 4 ist und <paramref name="Day" /> 31, dann lautet das Ergebnis 1. Mai.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der ein angegebenes Jahr, einen angegebenen Monat und einen angegebenen Tag darstellt und dessen Zeitangabe Mitternacht (00:00:00) lautet.</summary>
        <returns>Ein <see langword="Date" />-Wert, der ein angegebenes Jahr, einen angegebenen Monat und einen angegebenen Tag darstellt und dessen Zeitangabe Mitternacht (00:00:00) lautet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unter Windows 98 oder Windows 2000 werden zweistellige Jahres Angaben für das `Year`-Argument basierend auf den benutzerdefinierten Computereinstellungen interpretiert. Die Standardeinstellungen lauten, dass die Werte zwischen 0 und 29 als Jahre 2000-2029 interpretiert werden, und die Werte von 30 bis 99 werden als Jahre 1930-1999 interpretiert. Verwenden Sie für alle anderen `Year` Argumente eine vierstellige Jahres Angabe. Beispiel: 1924.  
  
 Frühere Versionen von Windows interpretieren zweistellige Jahres Angaben basierend auf den zuvor beschriebenen Standardwerten. Um sicherzustellen, dass die Funktion den richtigen Wert zurückgibt, verwenden Sie einen vierstelligen `Year`.  
  
 Im folgenden Beispiel werden negative, NULL und positive Argument Werte veranschaulicht. Hier gibt die `DateSerial`-Funktion eine `Date` zurück, die den Tag vor dem ersten Tag des März im Jahr 10 Jahre vor dem aktuellen Jahr darstellt. mit anderen Worten: der letzte Tag vor dem 10. Februar vor 10 Jahren.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Wenn `Month` oder `Day` den normalen Bereich überschreitet, wird er nach Bedarf auf die nächste größere Einheit angewendet. Wenn Sie z. b. 32 Tage angeben, wird dieser als ein Monat und von einem bis vier Tagen ausgewertet, abhängig vom Wert `Month`. Wenn `Year` größer als 9999 ist oder ein Argument außerhalb des Bereichs-2.147.483.648 bis 2.147.483.647 liegt, tritt ein <xref:System.ArgumentException> Fehler auf. Wenn das durch die drei Argumente angegebene Datum vor dem 1. Januar des Jahres 1 oder später als 23:59:59 am 31. Dezember 9999 00:00:00 liegt, tritt ein <xref:System.ArgumentOutOfRangeException> Fehler auf.  
  
 Der `Date`-Datentyp umfasst Zeit Komponenten. `DateSerial` alle Werte auf 0 (null) festgelegt, sodass der zurückgegebene Wert den Anfang des berechneten Tags darstellt.  
  
 Da jeder `Date` Wert von einer <xref:System.DateTime> Struktur unterstützt wird, stellen seine Methoden zusätzliche Optionen zum Zusammenstellen eines `Date` Werts zur Verfügung. Beispielsweise können Sie einen der überladenen <xref:System.DateTime.%23ctor%2A>-Konstruktoren verwenden, um eine `Date` Variable mithilfe der gewünschten Kombination von Komponenten aufzufüllen. Im folgenden Beispiel wird `NewDateTime` auf den 6. Mai, 1978 Uhr um 1 Zehntel einer Sekunde vor 8:30 Uhr festgelegt:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 In diesem Beispiel wird die `DateSerial`-Funktion verwendet, um das Datum für das angegebene Jahr, den Monat und den Tag zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen Zeichenfolgenwert zurück, der das aktuelle Datum gemäß Ihrem System darstellt, oder legt ihn fest.</summary>
        <value>Gibt einen Zeichenfolgenwert zurück, der das aktuelle Datum gemäß Ihrem System darstellt, oder legt ihn fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` gibt das Systemdatum im Format mm-dd-yyyy zurück, das den abgekürzten Monatsnamen verwendet. Die zulässigen Formate für das Datum lauten "m-d-yyyy", "m-d-y", "m/d/yyyy" und "m/d/y". Dies gilt für alle System Gebiets Schemas, mit Ausnahme derjenigen, die einen Doppelbyte-Zeichensatz (DBCS) verwenden. Wenn das System Gebiets Schema einen Doppelbyte-Zeichensatz verwendet, gibt `DateString` das Systemdatum im Format yyyy-mm-dd zurück. Das Gebiets Schema des Systems wird in der System **Steuerung**mithilfe des Elements " **Clock", "language" und "Region** " festgelegt.  
  
 **Hinweis** Die `DateString`-Eigenschaft gibt das Systemdatum nur im yyyy-mm-tt-Format für die `zh` (vereinfachtes Chinesisch), `ko` (Koreanisch) und `ja` (Japanisch) System Gebiets Schemas zurück, wenn Sie in Silverlight Visual Basic ausführen.  
  
 Um die aktuelle Systemzeit als `String`zu erhalten oder festzulegen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>-Eigenschaft.  
  
 Um das aktuelle Systemdatum oder die aktuelle Uhrzeit im Format Ihres Gebiets Schemas oder in einem benutzerdefinierten Format zu erhalten, geben Sie die <xref:Microsoft.VisualBasic.DateAndTime.Now%2A>-Eigenschaft für die <xref:Microsoft.VisualBasic.Strings.Format%2A>-Funktion an, und geben Sie entweder ein vordefiniertes oder benutzerdefiniertes Datums-/Uhrzeitformat an Das wird im folgenden Beispiel veranschaulicht.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Um auf das aktuelle Systemdatum als `Date`zuzugreifen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.Today%2A>-Eigenschaft.  
  
> [!IMPORTANT]
>  Wenn Sie das Systemdatum oder die Systemzeit festlegen, ist die Berechtigung für nicht verwalteten Code erforderlich, was sich auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirken kann Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `DateString`-Eigenschaft verwendet, um das aktuelle Systemdatum anzuzeigen.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ungültiges Format, mit dem der Wert von <see cref="P:Microsoft.VisualBasic.DateAndTime.DateString" /> festgelegt wurde.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateValue(string StringDate) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Erforderlich. Zeichenfolgenausdruck, der ein Datum und eine Uhrzeit zwischen 00:00:00 Uhr am 1. Januar des Jahres 1 und 23:59:59 Uhr am 31. Dezember 9999 darstellt.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der die Datumsangabe als Zeichenfolge enthält und dessen Zeitangabe Mitternacht (00:00:00) lautet.</summary>
        <returns>Ein <see langword="Date" />-Wert, der die Datumsangabe als Zeichenfolge enthält und dessen Zeitangabe Mitternacht (00:00:00) lautet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `StringDate` nur Zahlen von 1 bis 12 enthält, die durch gültige Datums Trennzeichen getrennt sind, `DateValue` die Reihenfolge von Monat, Tag und Jahr gemäß dem für das System festgelegten kurzen Datumsformat erkennen. `DateValue` verwendet die aktuelle Kalender Einstellung aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft der <xref:System.Globalization.CultureInfo>-Klasse im <xref:System.Globalization>-Namespace. Die Standard <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Werte werden durch die Einstellungen der **Systemsteuerung** festgelegt. Sie können das kurze Datumsformat überschreiben, indem Sie die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>-Eigenschaft der <xref:System.Globalization.DateTimeFormatInfo>-Klasse im <xref:System.Globalization>-Namespace festlegen.  
  
 `DateValue` erkennt Monatsnamen in langen, abgekürzten und numerischen Formularen. Beispielsweise erkennt `DateValue` zusätzlich zur Erkennung von 12/30/1991 und 12/30/91 auch den 30. Dezember 1991 und den 30. Dezember 1991.  
  
 Wenn der Jahres Teil `StringDate` weggelassen wird, verwendet `DateValue` das aktuelle Jahr aus dem Systemdatum Ihres Computers.  
  
 Wenn das `StringDate`-Argument Zeit Informationen enthält, wird es `DateValue` nicht in den zurückgegebenen Wert eingeschlossen. Wenn `StringDate` jedoch ungültige Zeit Informationen (z. b. "89:98") enthält, tritt ein <xref:System.InvalidCastException> Fehler auf.  
  
   
  
## Examples  
 In diesem Beispiel wird die `DateValue`-Funktion verwendet, um eine Zeichenfolge in ein Datum zu konvertieren. Sie können Datums Literale auch verwenden, um ein Datum direkt einem `Object` oder einer `Date` Variablen zuzuweisen, z. b. `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> enthält eine ungültige Zeitangabe.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Day(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem der Tag extrahiert werden soll.</param>
        <summary>Gibt einen ganzzahligen Wert von 1 bis 31 zurück, der den Tag des Monats darstellt.</summary>
        <returns>Ein ganzzahliger Wert von 1 bis 31, der den Tag des Monats darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die `Day`-Funktion verwenden, müssen Sie Sie möglicherweise mit dem `Microsoft.VisualBasic`-Namespace qualifizieren, da der <xref:System.Windows.Forms>-Namespace <xref:System.Windows.Forms.Day> als Enumeration definiert. Das folgende Beispiel zeigt, wie die qualifizierende `Day` diese Mehrdeutigkeit auflöst:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Sie können auch den Tag des Monats abrufen, indem Sie `DatePart` aufrufen und `DateInterval.Day` für das *Interval* -Argument angeben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Day`-Funktion verwendet, um den Tag des Monats ab einem angegebenen Datum abzurufen. In der Entwicklungsumgebung wird das Datumsliteral in Standard Kurzform (z. b. "02/12/1969") mithilfe der Gebiets Schema Einstellungen des Codes angezeigt.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` ist qualifiziert, um Sie von der <xref:System.Windows.Forms.Day?displayProperty=nameWithType> Enumeration zu unterscheiden.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Hour(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem die Stunde extrahiert werden soll.</param>
        <summary>Gibt einen ganzzahligen Wert von 0 bis 23 zurück, der eine Stunde des Tags darstellt.</summary>
        <returns>Ein ganzzahliger Wert von 0 bis 23, der eine Stunde des Tags darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch die Stunde des Tages abrufen, indem Sie `DatePart` aufrufen und `DateInterval.Hour` für das `Interval`-Argument angeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Hour`-Funktion verwendet, um die Stunde von einer angegebenen Zeit zu erhalten. In der Entwicklungsumgebung wird das Zeit Literale mit den Gebiets Schema Einstellungen des Codes im kurzen Zeitformat angezeigt.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Minute(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem die Minute extrahiert werden soll.</param>
        <summary>Gibt einen ganzzahligen Wert von 0 bis 59 zurück, der die Minute einer Stunde darstellt.</summary>
        <returns>Ein ganzzahliger Wert von 0 bis 59, der die Minute einer Stunde darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch die Minuten der Stunde abrufen, indem Sie `DatePart` aufrufen und `DateInterval.Minute` für das `Interval`-Argument angeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Minute`-Funktion verwendet, um die Minute der Stunde von einer angegebenen Zeit zu erhalten. In der Entwicklungsumgebung wird das Zeit Literale mit den Gebiets Schema Einstellungen des Codes im kurzen Zeitformat angezeigt.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Month(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem der Monat extrahiert werden soll.</param>
        <summary>Gibt einen ganzzahligen Wert von 1 bis 12 zurück, der den Monat eines Jahres darstellt.</summary>
        <returns>Ein ganzzahliger Wert von 1 bis 12, der den Monat eines Jahres darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Monat des Jahres auch abrufen, indem Sie `DatePart` aufrufen und `DateInterval.Month` für das `Interval`-Argument angeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Month`-Funktion verwendet, um den Monat von einem angegebenen Datum abzurufen. In der Entwicklungsumgebung wird das Datumsliteral mit den Gebiets Schema Einstellungen des Codes im kurzen Datumsformat angezeigt.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string MonthName(int32 Month, bool Abbreviate) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Erforderlich. Die numerische Bezeichnung des Monats von 1 bis 13, wobei 1 für Januar und 12 für Dezember steht. Den Wert 13 können Sie für einen 13-Monats-Kalender verwenden. Wenn im System ein 12-Monats-Kalender verwendet wird und <paramref name="Month" /> 13 ist, gibt <c>MonthName</c> eine leere Zeichenfolge zurück.</param>
        <param name="Abbreviate">Optional. <see langword="True" /> zum Abkürzen des Monatsnamens; andernfalls <see langword="False" />. Der Standardwert lautet <see langword="False" />.</param>
        <summary>Gibt einen Zeichenfolgenwert mit dem Namen des angegebenen Monats zurück.</summary>
        <returns>Ein Zeichenfolgenwert mit dem Namen des angegebenen Monats.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von `MonthName` zurückgegebene Zeichenfolge ist nicht nur von den Eingabe Argumenten, sondern auch von den in der Windows- **Systemsteuerung**angegebenen Einstellungen für **regionale Optionen** abhängig.  
  
> [!NOTE]
>  `MonthName` verwendet die aktuelle Kalender Einstellung aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft der <xref:System.Globalization.CultureInfo>-Klasse im <xref:System.Globalization>-Namespace. Die Standard <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Werte werden durch die Einstellungen der **Systemsteuerung** festgelegt.  
  
   
  
## Examples  
 In diesem Beispiel wird die `MonthName`-Funktion verwendet, um den Namen des Monats anhand der angegebenen Ganzzahl zu bestimmen. Der boolesche Wert bestimmt, ob der vollständige Name (`False`) oder der abgekürzte Name (`True`) angezeigt wird.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> ist größer als 1 oder größer als 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen Wert zurück, der das aktuelle Datum und die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</summary>
        <value>Das aktuelle Datum und die Uhrzeit gemäß Ihrem System.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um das Systemdatum festzulegen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.Today%2A>-Eigenschaft. Verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>-Eigenschaft, um die Systemzeit festzulegen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Now`-Eigenschaft verwendet, um das aktuelle Systemdatum und die aktuelle Systemzeit zurückzugeben.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Second(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem die Sekunde extrahiert werden soll.</param>
        <summary>Gibt einen ganzzahligen Wert von 0 bis 59 zurück, der die Sekunde einer Minute darstellt.</summary>
        <returns>Ein ganzzahliger Wert von 0 bis 59, der die Sekunde einer Minute darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch die zweite Minute abrufen, indem Sie `DatePart` aufrufen und `DateInterval.Second` für das `Interval`-Argument angeben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Second`-Funktion verwendet, um die zweite Minute aus einer angegebenen Zeit abzurufen. In der Entwicklungsumgebung wird das Zeit Literale mit den Gebiets Schema Einstellungen des Codes im kurzen Zeitformat angezeigt.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</summary>
        <value>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `Date`-Datentyp enthält Datums Komponenten. Wenn die Systemzeit zurückgegeben wird, `TimeOfDay` werden diese alle auf 1 festgelegt, sodass der zurückgegebene Wert den ersten Tag des Jahres 1 darstellt. Wenn Sie die Systemzeit festlegen, werden `TimeOfDay` die Datums Komponenten ignoriert.  
  
 Um auf die aktuelle Systemzeit als `String`zuzugreifen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>-Eigenschaft.  
  
 Um das aktuelle Systemdatum zu erhalten oder festzulegen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.Today%2A>-Eigenschaft.  
  
> [!IMPORTANT]
>  Wenn Sie das Systemdatum oder die Systemzeit festlegen, ist die Berechtigung für nicht verwalteten Code erforderlich, was sich auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirken kann Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 In diesem Beispiel wird die `TimeOfDay`-Eigenschaft verwendet, um die aktuelle Systemzeit zurückzugeben.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen Wert vom Typ <see cref="T:System.Double" /> zurück, der die Anzahl der seit Mitternacht vergangenen Sekunden angibt.</summary>
        <value>Ein-Wert, der die Anzahl der seit Mitternacht verstrichenen Sekunden darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Timer`-Eigenschaft gibt die Sekunden und die Millisekunden seit dem letzten Mitternacht zurück. Die Sekunden befinden sich im ganzzahligen Teil des Rückgabewerts, und die Millisekunden befinden sich in der Bruchteile.  
  
   
  
## Examples  
 In diesem Beispiel wird die `Timer`-Eigenschaft verwendet, um die Anwendung anzuhalten. Während der Pause kann eine andere Verarbeitung durchgeführt werden.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Beachten Sie, dass Sie die `Timer`-Eigenschaft mit dem <xref:Microsoft.VisualBasic?displayProperty=nameWithType>-Namespace qualifizieren müssen, da `Timer` auch eine definierte Klasse in den Namespaces <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>und <xref:System.Windows.Forms?displayProperty=nameWithType> ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Erforderlich. Ganzzahliger Ausdruck zwischen 0 und 23. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert.</param>
        <param name="Minute">Erforderlich. Ganzzahliger Ausdruck zwischen 0 und 59. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Minute" /> wird zu der berechneten Stunde addiert, sodass ein negativer Wert Minuten vor dieser Stunde angibt.</param>
        <param name="Second">Erforderlich. Ganzzahliger Ausdruck zwischen 0 und 59. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Second" /> wird zu der berechneten Minute addiert, sodass ein negativer Wert Sekunden vor dieser Minute angibt.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der eine bestimmte Stunde, Minute und Sekunde angibt und dessen Datum der 1. Januar des Jahres 1 ist.</summary>
        <returns>Ein <see langword="Date" />-Wert, der eine bestimmte Stunde, Minute und Sekunde angibt und dessen Datum der 1. Januar des Jahres 1 ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden Beispiel werden negative, NULL und positive Argument Werte veranschaulicht. Die `TimeSerial`-Funktion gibt eine Zeit zurück, die 15 Minuten vor drei Stunden vor 12 bis 12 Stunden oder 8:45:00 Uhr darstellt.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Wenn `Minute` oder `Second` den normalen Bereich überschreitet, wird er nach Bedarf auf die nächste größere Einheit angewendet. Wenn Sie z. b. 75 Minuten angeben, wird dieser als eine Stunde und 15 Minuten ausgewertet.  
  
 `TimeSerial` reduziert die Gesamtzahl der Sekunden Modulo 86.400, d. h. die Anzahl der Sekunden pro Tag. Daher ist die zurückgegebene Zeit immer zwischen 00:00:00 und 23:59:59.  
  
 Der `Date`-Datentyp enthält Datums Komponenten. `TimeSerial` legt alle Werte auf 1 fest, sodass der zurückgegebene Wert den ersten Tag des Jahres 1 darstellt. Wenn jedoch die Werte der Argumente bewirken, dass die berechnete Zeit 24 Stunden überschreitet, wird der Tag nach Bedarf erhöht. Im folgenden Beispiel ergeben die Werte von `Hour` und `Minute` eine kombinierte Zeit von mehr als 24 Stunden.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Wenn die Werte der Argumente zu einer negativen berechneten Zeit führen, werden die Datumsinformationen auf 1/1/0001 festgelegt, und die Uhrzeit Informationen werden so angepasst, dass Sie zwischen 00:00:00 und 23:59:59 liegen. Wenn die berechnete Zeit jedoch weniger als negative 24 Stunden beträgt, tritt ein <xref:System.ArgumentOutOfRangeException> Fehler auf.  
  
 Da jeder `Date` Wert von einer <xref:System.DateTime?displayProperty=nameWithType> Struktur unterstützt wird, stellen seine Methoden zusätzliche Optionen zum Zusammenstellen eines `Date` Werts zur Verfügung. Beispielsweise können Sie einen der überladenen <xref:System.DateTime.%23ctor%2A>-Konstruktoren verwenden, um eine `Date` Variable mithilfe der gewünschten Kombination von Komponenten aufzufüllen. Im folgenden Beispiel wird `newDateTime` auf den 6. Mai, 1978 Uhr um 1 Zehntel einer Sekunde vor 8:30 Uhr festgelegt:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `TimeSerial`-Funktion verwendet, um eine Uhrzeit für die angegebene Stunde, Minute und Sekunde zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein Argument liegt nicht im Bereich zwischen –2.147.483.648 und 2.147.483.647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Errechnete Zeit ist kleiner als der Wert für –24 Stunden</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen Zeichenfolgenwert zurück, der die aktuelle Tageszeit gemäß Ihrem System darstellt, oder legt ihn fest.</summary>
        <value>Gibt einen Zeichenfolgenwert zurück, der die aktuelle Tageszeit gemäß Ihrem System darstellt, oder legt ihn fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` gibt die Systemzeit immer als "hh: mm: SS" zurück, d. h. ein 24-Stunden-Format. Dieses Format ist Kultur invariant. Dies bedeutet, dass es sich nicht ändert, auch wenn Sie die **regionalen Optionen** in der **Systemsteuerung**ändern.  
  
 Um das aktuelle Systemdatum als `String`zu erhalten oder festzulegen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>-Eigenschaft.  
  
 Um das aktuelle Systemdatum oder die aktuelle Uhrzeit im Format Ihres Gebiets Schemas oder in einem benutzerdefinierten Format zu erhalten, geben Sie die <xref:Microsoft.VisualBasic.DateAndTime.Now%2A>-Eigenschaft für die <xref:Microsoft.VisualBasic.Strings.Format%2A>-Funktion an, und geben Sie entweder ein vordefiniertes oder benutzerdefiniertes Datums-/Uhrzeitformat an Das wird im folgenden Beispiel veranschaulicht.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Um auf die aktuelle Systemzeit als `Date`zuzugreifen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>-Eigenschaft.  
  
> [!IMPORTANT]
>  Wenn Sie das Systemdatum oder die Systemzeit festlegen, ist die Berechtigung "nicht verwalteter Code" erforderlich Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 In diesem Beispiel wird die `TimeString`-Eigenschaft verwendet, um die aktuelle Systemzeit anzuzeigen.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ungültiges Format, mit dem der Wert von <see langword="TimeString" /> festgelegt wurde.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime TimeValue(string StringTime) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Erforderlich. Ein Zeichenfolgenausdruck, der ein Datum und eine Uhrzeit zwischen 00:00:00 Uhr am 1. Januar des Jahres 1 und 23:59:59 Uhr am 31. Dezember 9999 darstellt.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der die Zeitangabe als Zeichenfolge enthält und dessen Datum der 1. Januar des Jahres 1 ist.</summary>
        <returns>Ein <see langword="Date" />-Wert, der die Zeitangabe als Zeichenfolge enthält und dessen Datum der 1. Januar des Jahres 1 ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können gültige Uhrzeiten mit einem 12-Stunden-oder 24-Stunden-Format eingeben. Beispielsweise sind `"2:24 P.M."` und `"14:24"` gültige `StringTime` Argumente.  
  
 Wenn das `StringTime`-Argument Datumsinformationen enthält, schließt `TimeValue` es nicht in den zurückgegebenen Wert ein. Wenn `StringTime` jedoch ungültige Datumsinformationen enthält, z. b. "Januar 32", tritt ein <xref:System.InvalidCastException> Fehler auf.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `TimeValue`-Funktion verwendet, um eine Zeichenfolge in eine Uhrzeit zu konvertieren. Sie können Datums Literale auch verwenden, um einer `Date` Variablen einen Zeitpunkt direkt zuzuweisen.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> enthält ungültige Datumsinformationen.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</summary>
        <value>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `Date`-Datentyp umfasst Zeit Komponenten. Beim Zurückgeben des Systemdatums `Today` werden alle diese Werte auf 0 festgelegt, sodass der zurückgegebene Wert Mitternacht (00:00:00) darstellt. Beim Festlegen des Systemdatums ignoriert `Today` die Zeit Komponenten.  
  
 Um auf das aktuelle Systemdatum als `String`zuzugreifen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>-Eigenschaft.  
  
 Um die aktuelle Systemzeit zu erhalten oder festzulegen, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>-Eigenschaft.  
  
> [!IMPORTANT]
>  Wenn Sie das Systemdatum oder die Systemzeit festlegen, ist die Berechtigung für nicht verwalteten Code erforderlich, was sich auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirken kann Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 In diesem Beispiel wird die `Today`-Eigenschaft verwendet, um das aktuelle Systemdatum zurückzugeben.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, für den der Wochentag ermittelt werden soll.</param>
        <param name="DayOfWeek">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
        <summary>Gibt einen ganzzahligen Wert mit einer Zahl zurück, die den Tag der Woche darstellt.</summary>
        <returns>Ein ganzzahliger Wert mit einer Zahl, die den Tag der Woche darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der von der `Weekday`-Funktion zurückgegeben wird, entspricht den Werten der `FirstDayOfWeek`-Enumeration. Das heißt, 1 gibt Sonntag und 7 den Samstag an.  
  
> [!NOTE]
>  `Weekday` verwendet die aktuelle Kalender Einstellung aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft der <xref:System.Globalization.CultureInfo>-Klasse im <xref:System.Globalization>-Namespace. Die Standard <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Werte werden durch die Einstellungen der **Systemsteuerung** festgelegt.  
  
 Das `DayOfWeek`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Der erste Tag der Woche ist in den Systemeinstellungen angegeben.|  
|`FirstDayOfWeek.Sunday`|1|Sonntag (Standard)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Tuesday|  
|`FirstDayOfWeek.Wednesday`|4|Wednesday|  
|`FirstDayOfWeek.Thursday`|5|Thursday|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Weekday`-Funktion verwendet, um den Wochentag von einem angegebenen Datum abzurufen.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> ist kleiner als 0 oder größer als 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Erforderlich. Eine ganze Zahl. Die numerische Bezeichnung des Wochentags von 1 bis 7, wobei 1 für den ersten und 7 für den letzten Tag der Woche steht. Welcher jeweils der erste und letzte Tag der Woche ist, hängt von der Einstellung für <paramref name="FirstDayOfWeekValue" /> ab.</param>
        <param name="Abbreviate">Optional. Ein <see langword="Boolean" />-Wert, der angibt, ob der Name des Wochentags abgekürzt werden soll. Wenn dieser Wert nicht angegeben wird, lautet der Standardwert <see langword="False" />, d. h., der Name des Wochentags wird nicht abgekürzt.</param>
        <param name="FirstDayOfWeekValue">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.System" /> verwendet.</param>
        <summary>Gibt einen Zeichenfolgenwert mit dem Namen des angegebenen Wochentags zurück.</summary>
        <returns>Ein Zeichenfolgenwert mit dem Namen des angegebenen Wochentags.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von `WeekdayName` zurückgegebene Zeichenfolge ist nicht nur von den Eingabe Argumenten, sondern auch von den in der Windows- **Systemsteuerung**angegebenen Einstellungen für **regionale Optionen** abhängig.  
  
> [!NOTE]
>  `WeekdayName` verwendet die aktuelle Kalender Einstellung aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft der <xref:System.Globalization.CultureInfo>-Klasse im <xref:System.Globalization>-Namespace. Die Standard <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Werte werden durch die Einstellungen der **Systemsteuerung** festgelegt.  
  
 Das `FirstDayOfWeekValue`-Argument kann eine der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|value|BESCHREIBUNG|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Der erste Tag der Woche ist in den Systemeinstellungen angegeben (Standard).|  
|`FirstDayOfWeek.Sunday`|1|Sonntag|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht dem ISO-Standard 8601, Abschnitt 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Tuesday|  
|`FirstDayOfWeek.Wednesday`|4|Wednesday|  
|`FirstDayOfWeek.Thursday`|5|Thursday|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Weekday`-Funktion verwendet, um den Wochentag von einem angegebenen Datum abzurufen, und dann die `WeekDayName`-Funktion, um den Namen des Wochentags aus der Nummer abzurufen.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> ist kleiner als 1 oder größer als 7, oder <paramref name="FirstDayOfWeekValue" /> ist kleiner als 0 oder größer als 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Year(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem das Jahr extrahiert werden soll.</param>
        <summary>Gibt einen ganzzahligen Wert von 1 bis 9.999 zurück, der das Jahr darstellt.</summary>
        <returns>Ein ganzzahliger Wert von 1 bis 9999, der das Jahr darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können das Jahr auch abrufen, indem Sie `DatePart` aufrufen und `DateInterval.Year` für das `Interval`-Argument angeben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Year`-Funktion verwendet, um das Jahr von einem angegebenen Datum abzurufen. In der Entwicklungsumgebung wird das Datumsliteral mit den Gebiets Schema Einstellungen des Codes im kurzen Datumsformat angezeigt.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5ca3632254c05cb7a3d84505f168ac9e2b4bdb30" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39771682" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="DateAndTime" />-Modul enthält Prozeduren und Eigenschaften, die in Datum- und Uhrzeitoperationen verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die das aktuelle Datum oder Uhrzeit zu erhalten, Durchführen von datumsberechnungen, zurückgeben, Datum oder Uhrzeit, Festlegen des Datums oder der Uhrzeit oder Zeit die Dauer eines Prozesses.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Today` Eigenschaft, die das aktuellen Datum zurückgegeben.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Die Funktion gibt einen <see langword="Date" />-Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Der <see langword="DateInterval" />-Enumerationswert oder der <see langword="String" />-Ausdruck, der das zu addierende Zeitintervall darstellt.</param>
        <param name="Number">Erforderlich. <see langword="Double" /> Gleitkommaausdruck, der die Zahl der hinzuzufügenden Intervalle darstellt. <c>Number</c> kann entweder positiv (zum Abrufen von Datums-/Zeitwerten in der Zukunft) oder negativ (zum Abrufen von Datums-/Zeitwerten in der Vergangenheit) sein. Der Wert kann Nachkommastellen enthalten, wenn <c>Interval</c> Stunden, Minuten oder Sekunden angibt. Bei anderen Werten von <c>Interval</c> werden alle Dezimalstellen von <c>Number</c> ignoriert.</param>
        <param name="DateValue">Erforderlich. <see langword="Date" /> Ein Ausdruck, der Datum und Uhrzeit angibt, zu denen das Intervall hinzuaddiert werden muss. <c>DateValue</c> selbst wird im aufrufenden Programm nicht geändert.</param>
        <summary>Die Funktion gibt einen <see langword="Date" />-Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
        <returns>Die Funktion gibt einen <see langword="Date" />-Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateAdd` Funktion hinzufügen oder entfernen ein angegebenes Zeitintervall aus einem Datum. Beispielsweise können Sie ein Datum 30 Tage ab heute oder eine Uhrzeit 45 Minuten, bevor Sie jetzt berechnen.  
  
 Tage hinzufügen `DateValue`, können Sie `DateInterval.Day`, `DateInterval.DayOfYear`, oder `DateInterval.Weekday`. Diese werden als gleichwertig behandelt, da `DayOfYear` und `Weekday` sind keine sinnvollen Zeitintervalle.  
  
 Die `DateAdd` Funktion nie ein ungültiges Datum zurückgibt. Bei Bedarf der Tagesteil von das resultierende Datum nach unten bis zum letzten Tag des berechneten Monats im resultierenden Jahr angepasst. Das folgende Beispiel fügt einen Monat bis zum 31. Januar:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 In diesem Beispiel `DateAdd` gibt `#2/28/1995#`, nicht `#2/31/1995#`. Wenn `DateValue` ist `#1/31/1996#`, gibt `#2/29/1996#` da 1996 ein Schaltjahr ist.  
  
> [!NOTE]
>  `DateAdd` verwendet die aktuelle Einstellung der Kalender von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft der <xref:System.Globalization.CultureInfo> -Klasse in der <xref:System.Globalization> Namespace. Der Standardwert <xref:System.Globalization.CultureInfo.CurrentCulture%2A> werden ermittelt, indem **Systemsteuerung** Einstellungen.  
  
 Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, dessen Methoden erhalten Sie zusätzliche Optionen beim Hinzufügen von Zeitintervallen. Sie können z. B. hinzufügen, eine Anzahl von Tagen, gerundet auf die nächste Millisekunde gerundet, zu einem `Date` Variable wie folgt:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Die `Interval` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichenfolge|Einheit des Zeitfensters hinzufügen|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|T|Tages. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.DayOfYear`|y|Tages. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Hour`|h|Stunde; auf die nächste Millisekunde gerundet|  
|`DateInterval.Minute`|n|Minute liegen. auf die nächste Millisekunde gerundet|  
|`DateInterval.Month`|m|Monat; auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Quarter`|q|Quartal; auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Second`|s|Sekunde ausgeführt. auf die nächste Millisekunde gerundet|  
|`DateInterval.Weekday`|m|Tages. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.WeekOfYear`|ww|Woche. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Year`|yyyy|Jahr auf den ganzzahligen Wert gekürzt.|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum mit der `DateAdd` funktioniert, zeigt ein entsprechenden Datum, das eine angegebene Anzahl von Monaten in der Zukunft.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Das berechnete Datum liegt vor 00:00:00 Uhr am 1. Januar des Jahres 1 oder nach 23:59:59 Uhr am 31. Dezember 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Der <see langword="DateInterval" />-Enumerationswert oder der <see langword="String" />-Ausdruck, der das zu addierende Zeitintervall darstellt.</param>
        <param name="Number">Erforderlich. <see langword="Double" /> Gleitkommaausdruck, der die Zahl der hinzuzufügenden Intervalle darstellt. <c>Number</c> kann entweder positiv (zum Abrufen von Datums-/Zeitwerten in der Zukunft) oder negativ (zum Abrufen von Datums-/Zeitwerten in der Vergangenheit) sein. Der Wert kann Nachkommastellen enthalten, wenn <c>Interval</c> Stunden, Minuten oder Sekunden angibt. Bei anderen Werten von <c>Interval</c> werden alle Dezimalstellen von <c>Number</c> ignoriert.</param>
        <param name="DateValue">Erforderlich. <see langword="Date" /> Ein Ausdruck, der Datum und Uhrzeit angibt, zu denen das Intervall hinzuaddiert werden muss. <c>DateValue</c> selbst wird im aufrufenden Programm nicht geändert.</param>
        <summary>Die Funktion gibt einen <see langword="Date" />-Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
        <returns>Die Funktion gibt einen <see langword="Date" />-Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateAdd` Funktion hinzufügen oder entfernen ein angegebenes Zeitintervall aus einem Datum. Beispielsweise können Sie ein Datum 30 Tage ab heute oder eine Uhrzeit 45 Minuten, bevor Sie jetzt berechnen.  
  
 Tage hinzufügen `DateValue`, können Sie `DateInterval.Day`, `DateInterval.DayOfYear`, oder `DateInterval.Weekday`. Diese werden als gleichwertig behandelt, da `DayOfYear` und `Weekday` sind keine sinnvollen Zeitintervalle.  
  
 Die `DateAdd` Funktion nie ein ungültiges Datum zurückgibt. Bei Bedarf der Tagesteil von das resultierende Datum nach unten bis zum letzten Tag des berechneten Monats im resultierenden Jahr angepasst. Das folgende Beispiel fügt einen Monat bis zum 31. Januar:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 In diesem Beispiel `DateAdd` gibt `#2/28/1995#`, nicht `#2/31/1995#`. Wenn `DateValue` ist `#1/31/1996#`, gibt `#2/29/1996#` da 1996 ein Schaltjahr ist.  
  
> [!NOTE]
>  `DateAdd` verwendet die aktuelle Einstellung der Kalender von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft der <xref:System.Globalization.CultureInfo> -Klasse in der <xref:System.Globalization> Namespace. Der Standardwert <xref:System.Globalization.CultureInfo.CurrentCulture%2A> werden ermittelt, indem **Systemsteuerung** Einstellungen.  
  
 Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, dessen Methoden erhalten Sie zusätzliche Optionen beim Hinzufügen von Zeitintervallen. Sie können z. B. hinzufügen, eine Anzahl von Tagen, gerundet auf die nächste Millisekunde gerundet, zu einem `Date` Variable wie folgt:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Die `Interval` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichenfolge|Einheit des Zeitfensters hinzufügen|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|T|Tages. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.DayOfYear`|y|Tages. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Hour`|h|Stunde; auf die nächste Millisekunde gerundet|  
|`DateInterval.Minute`|n|Minute liegen. auf die nächste Millisekunde gerundet|  
|`DateInterval.Month`|m|Monat; auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Quarter`|q|Quartal; auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Second`|s|Sekunde ausgeführt. auf die nächste Millisekunde gerundet|  
|`DateInterval.Weekday`|m|Tages. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.WeekOfYear`|ww|Woche. auf den ganzzahligen Wert gekürzt.|  
|`DateInterval.Year`|yyyy|Jahr auf den ganzzahligen Wert gekürzt.|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum mit der `DateAdd` funktioniert, zeigt ein entsprechenden Datum, das eine angegebene Anzahl von Monaten in der Zukunft.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Das berechnete Datum liegt vor 00:00:00 Uhr am 1. Januar des Jahres 1 oder nach 23:59:59 Uhr am 31. Dezember 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen <see langword="Long" />-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Der <see langword="DateInterval" />-Enumerationswert oder der <see langword="String" />-Ausdruck, der das Zeitintervall angibt, das Sie als Einheit für die Differenz zwischen <c>Date1</c> und <c>Date2</c> verwenden möchten.</param>
        <param name="Date1">Erforderlich. <see langword="Date" /> Der erste Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="Date2">Erforderlich. <see langword="Date" /> Der zweite Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="DayOfWeek">Dies ist optional. Ein Wert aus der <see langword="FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="WeekOfYear">Dies ist optional. Ein Wert aus der <see langword="FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen <see langword="Long" />-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
        <returns>Gibt einen <see langword="Long" />-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateDiff` Funktion, um zu bestimmen, wie viele angegebene Zeitintervalle zwischen zwei Datum/Uhrzeit-Werte vorhanden sind. Sie können z. B. verwenden `DateDiff` die Anzahl von Tagen zwischen zwei Datumsangaben oder die Anzahl der Wochen zwischen dem aktuellen und dem Ende des Jahres berechnet.  
  
## <a name="behavior"></a>Verhalten  
  
-   **Behandlung von Parametern.** `DateDiff` Subtrahiert den Wert der `Date1` aus dem Wert des `Date2` um den Unterschied zu erzeugen. Keiner der beiden Werte wird in das aufrufende Programm geändert.  
  
-   **Werden Werte zurückgegeben.** Da `Date1` und `Date2` sind von der `Date` -Datentyp, sie enthalten Datums-und Uhrzeitwerte Genauigkeit von 100-Nanosekunden-Ticks Systemzeitgeber. Allerdings `DateDiff` immer gibt die Anzahl der Zeitintervalle als eine `Long` Wert.  
  
     Wenn `Date1` stellt ein späteres Datum und Zeit als `Date2`, `DateDiff` gibt eine negative Zahl zurück.  
  
-   **-Tages-Intervallen.** Wenn `Interval` nastaven NA hodnotu `DateInterval.DayOfYear`, wird dies behandelt identisch `DateInterval.Day`, da `DayOfYear` ist keine sinnvolle Einheit für ein Zeitintervall.  
  
-   **Woche-Intervallen.** Wenn `Interval` nastaven NA hodnotu `DateInterval.WeekOfYear`, den Rückgabewert darstellt, die Anzahl der Wochen zwischen dem ersten Tag der Woche mit `Date1` und dem ersten Tag der Woche mit `Date2`. Das folgende Beispiel zeigt, wie dies andere Ergebnisse erzeugt `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Im vorherigen Beispiel `DateDiff` gibt 0, um `wD` zurück, da der Unterschied zwischen zwei Datumsangaben ist weniger als sieben Tage, 1 bis `wY` da es ein sieben Tage Unterschied zwischen den ersten Tagen des entsprechenden Kalenders Wochen.  
  
-   **Größere Intervalle.** Wenn `Interval` nastaven NA hodnotu `DateInterval.Year`, der Rückgabewert wird ausschließlich von der Jahreswerte berechnet `Date1` und `Date2`. Auf ähnliche Weise ist der Rückgabewert für `DateInterval.Month` wird nur aus den Jahres- und Monatswert Teilen der Argumente und für berechnet `DateInterval.Quarter` aus Quartalen mit den beiden Datumsangaben.  
  
     Beispielsweise wird für den Vergleich auf den 1. Januar des nächsten Jahres, 31. Dezember `DateDiff` gibt 1 für `DateInterval.Year`, `DateInterval.Quarter`, oder `DateInterval.Month`, auch wenn nur ein Tag verstrichen ist.  
  
     Für die Kulturen, z. B. Japanisch, die mehrere Zeiträume die `DateDiff` Methode gibt keinen Unterschied in Jahren zurück, wenn der Unterschied Zeiträume von zwei oder mehr umfasst. Stattdessen können Sie die unterschiedlichen Werte, die vom Berechnen der <xref:System.DateTime.Year%2A> -Eigenschaft, wie im folgenden Beispiel gezeigt: `date2.Year - date1.Year`.  
  
-   **Andere Intervalle.** Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, dessen Methoden erhalten Sie zusätzliche Optionen bei der Suche nach Zeitintervalle. Beispielsweise können Sie die `Subtract` -Methode in einer der überladenen Versionen: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> subtrahiert ein <xref:System.TimeSpan> aus eine `Date` zurückzugebenden eine andere Variable `Date` Wert und <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> subtrahiert eine `Date` Wert Zurückgeben einer <xref:System.TimeSpan>. Sie können Zeit, einen Prozess aus, um herauszufinden, wie viele Millisekunden dauert es, wie im folgenden Beispiel gezeigt.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Die `Interval` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichenfolgenwert|Einheit der Zeitunterschied|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y" |Day|  
|`DateInterval.Hour`|"h" |Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Monat|  
|`DateInterval.Quarter`|"Q"|Quartal|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Woche|  
|`DateInterval.WeekOfYear`|"ww"|Kalenderwoche|  
|`DateInterval.Year`|"yyyy" |Jahr|  
  
 Die `DayOfWeek` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Erster Tag der Woche, die in den Systemeinstellungen angegeben|  
|`FirstDayOfWeek.Sunday`|1|Sunday (Standardeinstellung)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Dienstag|  
|`FirstDayOfWeek.Wednesday`|4|Mittwoch|  
|`FirstDayOfWeek.Thursday`|5|Donnerstag|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Die `WeekOfYear` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in dem 1. Januar liegt (Standardwert)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche, die im neuen Jahr mindestens vier Tagen aufweist (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `DateDiff` Funktion, um die Anzahl von Tagen zwischen einem bestimmten Datum und heute anzuzeigen.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, <paramref name="Date2" /> oder <paramref name="DayofWeek" /> liegt außerhalb des Bereichs.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> oder <paramref name="Date2" /> hat einen ungültigen Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Der <see langword="DateInterval" />-Enumerationswert oder der <see langword="String" />-Ausdruck, der das Zeitintervall angibt, das Sie als Einheit für die Differenz zwischen <c>Date1</c> und <c>Date2</c> verwenden möchten.</param>
        <param name="Date1">Erforderlich. <see langword="Date" /> Der erste Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="Date2">Erforderlich. <see langword="Date" /> Der zweite Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
        <param name="DayOfWeek">Dies ist optional. Ein Wert aus der <see langword="FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="WeekOfYear">Dies ist optional. Ein Wert aus der <see langword="FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen <see langword="Long" />-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
        <returns>Gibt einen <see langword="Long" />-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DateDiff` Funktion, um zu bestimmen, wie viele angegebene Zeitintervalle zwischen zwei Datum/Uhrzeit-Werte vorhanden sind. Sie können z. B. verwenden `DateDiff` die Anzahl von Tagen zwischen zwei Datumsangaben oder die Anzahl der Wochen zwischen dem aktuellen und dem Ende des Jahres berechnet.  
  
## <a name="behavior"></a>Verhalten  
  
-   **Behandlung von Parametern.** `DateDiff` Subtrahiert den Wert der `Date1` aus dem Wert des `Date2` um den Unterschied zu erzeugen. Keiner der beiden Werte wird in das aufrufende Programm geändert.  
  
-   **Werden Werte zurückgegeben.** Da `Date1` und `Date2` sind von der `Date` -Datentyp, sie enthalten Datums-und Uhrzeitwerte Genauigkeit von 100-Nanosekunden-Ticks Systemzeitgeber. Allerdings `DateDiff` immer gibt die Anzahl der Zeitintervalle als eine `Long` Wert.  
  
     Wenn `Date1` stellt ein späteres Datum und Zeit als `Date2`, `DateDiff` gibt eine negative Zahl zurück.  
  
-   **-Tages-Intervallen.** Wenn `Interval` nastaven NA hodnotu `DateInterval.DayOfYear`, wird dies behandelt identisch `DateInterval.Day`, da `DayOfYear` ist keine sinnvolle Einheit für ein Zeitintervall.  
  
-   **Woche-Intervallen.** Wenn `Interval` nastaven NA hodnotu `DateInterval.WeekOfYear`, den Rückgabewert darstellt, die Anzahl der Wochen zwischen dem ersten Tag der Woche mit `Date1` und dem ersten Tag der Woche mit `Date2`. Das folgende Beispiel zeigt, wie dies andere Ergebnisse erzeugt `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Im vorherigen Beispiel `DateDiff` gibt 0, um `wD` zurück, da der Unterschied zwischen zwei Datumsangaben ist weniger als sieben Tage, 1 bis `wY` da es ein sieben Tage Unterschied zwischen den ersten Tagen des entsprechenden Kalenders Wochen.  
  
-   **Größere Intervalle.** Wenn `Interval` nastaven NA hodnotu `DateInterval.Year`, der Rückgabewert wird ausschließlich von der Jahreswerte berechnet `Date1` und `Date2`. Auf ähnliche Weise ist der Rückgabewert für `DateInterval.Month` wird nur aus den Jahres- und Monatswert Teilen der Argumente und für berechnet `DateInterval.Quarter` aus Quartalen mit den beiden Datumsangaben.  
  
     Beispielsweise wird für den Vergleich auf den 1. Januar des nächsten Jahres, 31. Dezember `DateDiff` gibt 1 für `DateInterval.Year`, `DateInterval.Quarter`, oder `DateInterval.Month`, auch wenn nur ein Tag verstrichen ist.  
  
     Für die Kulturen, z. B. Japanisch, die mehrere Zeiträume die `DateDiff` Methode gibt keinen Unterschied in Jahren zurück, wenn der Unterschied Zeiträume von zwei oder mehr umfasst. Stattdessen können Sie die unterschiedlichen Werte, die vom Berechnen der <xref:System.DateTime.Year%2A> -Eigenschaft, wie im folgenden Beispiel gezeigt: `date2.Year - date1.Year`.  
  
-   **Andere Intervalle.** Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, dessen Methoden erhalten Sie zusätzliche Optionen bei der Suche nach Zeitintervalle. Beispielsweise können Sie die `Subtract` -Methode in einer der überladenen Versionen: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> subtrahiert ein <xref:System.TimeSpan> aus eine `Date` zurückzugebenden eine andere Variable `Date` Wert und <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> subtrahiert eine `Date` Wert Zurückgeben einer <xref:System.TimeSpan>. Sie können Zeit, einen Prozess aus, um herauszufinden, wie viele Millisekunden dauert es, wie im folgenden Beispiel gezeigt.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Die `Interval` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichenfolgenwert|Einheit der Zeitunterschied|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y" |Day|  
|`DateInterval.Hour`|"h" |Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Monat|  
|`DateInterval.Quarter`|"Q"|Quartal|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Woche|  
|`DateInterval.WeekOfYear`|"ww"|Kalenderwoche|  
|`DateInterval.Year`|"yyyy" |Jahr|  
  
 Die `DayOfWeek` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Erster Tag der Woche, die in den Systemeinstellungen angegeben|  
|`FirstDayOfWeek.Sunday`|1|Sunday (Standardeinstellung)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Dienstag|  
|`FirstDayOfWeek.Wednesday`|4|Mittwoch|  
|`FirstDayOfWeek.Thursday`|5|Donnerstag|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Die `WeekOfYear` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in dem 1. Januar liegt (Standardwert)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche, die im neuen Jahr mindestens vier Tagen aufweist (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `DateDiff` Funktion, um die Anzahl von Tagen zwischen einem bestimmten Datum und heute anzuzeigen.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, <paramref name="Date2" /> oder <paramref name="DayofWeek" /> liegt außerhalb des Bereichs.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> oder <paramref name="Date2" /> hat einen ungültigen Typ.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen Wert vom Typ <see langword="Integer" /> zurück, der eine bestimmte Komponente eines angegebenen <see langword="Date" />-Wertes enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Der <see langword="DateInterval" />-Enumerationswert oder der <see langword="String" />-Ausdruck, der den Teil des Datums-/Zeitwerts darstellt, der zurückgegeben werden soll.</param>
        <param name="DateValue">Erforderlich. Der auszuwertende <see langword="Date" />-Wert.</param>
        <param name="FirstDayOfWeekValue">Dies ist optional. Ein Wert aus der <see langword="FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="FirstWeekOfYearValue">Dies ist optional. Ein Wert aus der <see langword="FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Integer" /> zurück, der eine bestimmte Komponente eines angegebenen <see langword="Date" />-Wertes enthält.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Integer" /> zurück, der eine bestimmte Komponente eines angegebenen <see langword="Date" />-Wertes enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DatePart` -Funktion zum Auswerten von Datum/Uhrzeit-Wert und eine bestimmte Komponente zurückgegeben. Sie können z. B. verwenden `DatePart` den Tag der Woche oder die aktuelle Stunde berechnen.  
  
 Auf Wunsch `DateInterval.Weekday` für die `Interval` Argument der Rückgabewert ist konsistent mit den Werten der der `FirstDayOfWeek` Enumeration. Auf Wunsch `DateInterval.WeekOfYear`, `DatePart` verwendet die <xref:System.Globalization.Calendar> und <xref:System.Globalization.CultureInfo> Klassen von der <xref:System.Globalization> Namespace, um die aktuellen Einstellungen zu bestimmen.  
  
 Die `FirstDayOfWeekValue` Argument wirkt sich auf Berechnungen, mit denen die `DateInterval.Weekday` und `DateInterval.WeekOfYear` `Interval` Einstellungen. Die `FirstWeekOfYearValue` Argument wirkt sich auf Berechnungen, die angeben, `DateInterval.WeekOfYear` für `Interval`.  
  
 Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, die Methoden ermöglichen den zusätzliche Optionen im Abrufen von Datum/Uhrzeit-teilen. Sie erhalten beispielsweise den gesamten Date-Wert, der eine `Date` Variable mit dem Zeitwert Mitternacht festgelegt, wie folgt:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Die `Interval` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichenfolge|Teil des Datum/Uhrzeit-Wert zurückgeben|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|T|Tag des Monats (1 bis 31)|  
|`DateInterval.DayOfYear`|y|Tag des Jahres (1 bis 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Monat|  
|`DateInterval.Quarter`|q|Quartal|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|m|Tag der Woche (1 bis 7)|  
|`DateInterval.WeekOfYear`|ww|Woche des Jahres (1 bis 53)|  
|`DateInterval.Year`|yyyy|Jahr|  
  
 Die `FirstDayOfWeekValue` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Erster Tag der Woche, die in den Systemeinstellungen angegeben|  
|`FirstDayOfWeek.Sunday`|1|Sunday (Standardeinstellung)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Dienstag|  
|`FirstDayOfWeek.Wednesday`|4|Mittwoch|  
|`FirstDayOfWeek.Thursday`|5|Donnerstag|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Die `FirstWeekOfYearValue` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in dem 1. Januar liegt (Standardwert)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche, die im neuen Jahr mindestens vier Tagen aufweist (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum mit der `DatePart` funktioniert, zeigt das Quartal des Jahres, in dem er auftritt.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> ist nicht gültig.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Erforderlich. Der <see langword="DateInterval" />-Enumerationswert oder der <see langword="String" />-Ausdruck, der den Teil des Datums-/Zeitwerts darstellt, der zurückgegeben werden soll.</param>
        <param name="DateValue">Erforderlich. Der auszuwertende <see langword="Date" />-Wert.</param>
        <param name="DayOfWeek">Dies ist optional. Ein Wert aus der <see langword="FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.Sunday" /> verwendet.</param>
        <param name="WeekOfYear">Dies ist optional. Ein Wert aus der <see langword="FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstWeekOfYear.Jan1" /> verwendet.</param>
        <summary>Gibt einen Wert vom Typ <see langword="Integer" /> zurück, der eine bestimmte Komponente eines angegebenen <see langword="Date" />-Wertes enthält.</summary>
        <returns>Gibt einen Wert vom Typ <see langword="Integer" /> zurück, der eine bestimmte Komponente eines angegebenen <see langword="Date" />-Wertes enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die `DatePart` -Funktion zum Auswerten von Datum/Uhrzeit-Wert und eine bestimmte Komponente zurückgegeben. Sie können z. B. verwenden `DatePart` den Tag der Woche oder die aktuelle Stunde berechnen.  
  
 Auf Wunsch `DateInterval.Weekday` für die `Interval` Argument der Rückgabewert ist konsistent mit den Werten der der `FirstDayOfWeek` Enumeration. Auf Wunsch `DateInterval.WeekOfYear`, `DatePart` verwendet die <xref:System.Globalization.Calendar> und <xref:System.Globalization.CultureInfo> Klassen von der <xref:System.Globalization> Namespace, um die aktuellen Einstellungen zu bestimmen.  
  
 Die `FirstDayOfWeekValue` Argument wirkt sich auf Berechnungen, mit denen die `DateInterval.Weekday` und `DateInterval.WeekOfYear` `Interval` Einstellungen. Die `FirstWeekOfYearValue` Argument wirkt sich auf Berechnungen, die angeben, `DateInterval.WeekOfYear` für `Interval`.  
  
 Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, die Methoden ermöglichen den zusätzliche Optionen im Abrufen von Datum/Uhrzeit-teilen. Sie erhalten beispielsweise den gesamten Date-Wert, der eine `Date` Variable mit dem Zeitwert Mitternacht festgelegt, wie folgt:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Die `Interval` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Zeichenfolge|Teil des Datum/Uhrzeit-Wert zurückgeben|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|T|Tag des Monats (1 bis 31)|  
|`DateInterval.DayOfYear`|y|Tag des Jahres (1 bis 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Monat|  
|`DateInterval.Quarter`|q|Quartal|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|m|Tag der Woche (1 bis 7)|  
|`DateInterval.WeekOfYear`|ww|Woche des Jahres (1 bis 53)|  
|`DateInterval.Year`|yyyy|Jahr|  
  
 Die `FirstDayOfWeekValue` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Erster Tag der Woche, die in den Systemeinstellungen angegeben|  
|`FirstDayOfWeek.Sunday`|1|Sunday (Standardeinstellung)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Dienstag|  
|`FirstDayOfWeek.Wednesday`|4|Mittwoch|  
|`FirstDayOfWeek.Thursday`|5|Donnerstag|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
 Die `FirstWeekOfYearValue` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Erste Woche des Jahres in den Systemeinstellungen angegeben|  
|`FirstWeekOfYear.Jan1`|1|Woche, in dem 1. Januar liegt (Standardwert)|  
|`FirstWeekOfYear.FirstFourDays`|2|Woche, die im neuen Jahr mindestens vier Tagen aufweist (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Erste vollständige Woche im neuen Jahr|  
  
   
  
## Examples  
 In diesem Beispiel wird ein Datum mit der `DatePart` funktioniert, zeigt das Quartal des Jahres, in dem er auftritt.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Erforderlich. <see langword="Integer" />-Ausdruck zwischen 1 und 9999. Werte unterhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Wenn <c>Year</c> im Bereich von 0 bis 99 liegt, wird das Argument wie unten im Abschnitt „Hinweise“ erläutert als Wert zwischen 1930 und 2029 interpretiert. Ist <c>Year</c> kleiner als 1, wird es vom aktuellen Jahr subtrahiert.</param>
        <param name="Month">Erforderlich. <see langword="Integer" />-Ausdruck zwischen 1 und 12. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <c>Month</c> wird um 1 verringert und auf den Januar des berechneten Jahres angewendet. Anders ausgedrückt wird (<c>Month</c> – 1) zu Januar hinzugefügt. Falls erforderlich, wird das Jahr neu berechnet. In den folgenden Ergebnissen wird dieser Effekt veranschaulicht: 
Wenn <c>Month</c> 1 ist, ist das Ergebnis der Januar des berechneten Jahres.  
  
Wenn <c>Month</c> 0 ist, ist das Ergebnis der Dezember des vorherigen Jahres.  
  
Wenn <c>Month</c> –1 ist, ist das Ergebnis der November des vorherigen Jahres.  
  
Wenn <c>Month</c> 13 ist, ist das Ergebnis der Januar des nächsten Jahres.</param>
        <param name="Day">Erforderlich. <see langword="Integer" />-Ausdruck zwischen 1 und 31. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <c>Day</c> wird um 1 verringert und auf den ersten Tag des berechneten Monats angewendet. Anders ausgedrückt wird (<c>Day</c> – 1) zum Monatsersten addiert. Falls erforderlich, werden der Monat und das Jahr neu berechnet. In den folgenden Ergebnissen wird dieser Effekt veranschaulicht: 
Wenn <c>Day</c> 1 ist, ist das Ergebnis der erste Tag des berechneten Monats.  
  
Wenn <c>Day</c> 0 ist, ist das Ergebnis der letzte Tag des vorherigen Monats.  
  
Wenn <c>Day</c> –1 ist, ist das Ergebnis der vorletzte Tag des vorherigen Monats.  
  
Wenn <c>Day</c> das Ende des aktuellen Monats überschreitet, ist das Ergebnis der entsprechende Tag des nächsten Monats. Wenn <c>Month</c> beispielsweise 4 und <c>Day</c> 31 ist, ist das Ergebnis der 1. Mai.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der ein angegebenes Jahr, einen angegebenen Monat und einen angegebenen Tag darstellt und dessen Zeitangabe Mitternacht (00:00:00) lautet.</summary>
        <returns>Gibt einen <see langword="Date" />-Wert zurück, der ein angegebenes Jahr, einen angegebenen Monat und einen angegebenen Tag darstellt und dessen Zeitangabe Mitternacht (00:00:00) lautet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unter Windows 98 oder Windows 2000 zweistelliger Jahresangaben für die `Year` Argument basierend auf benutzerdefinierten computereinstellungen interpretiert werden. Die Standardeinstellungen sind Werte von 0 bis 29 als die Jahre 2000 bis 2029 interpretiert und die Werte von 30 bis 99 werden als die Jahre 1930 – 1999 interpretiert. Für alle anderen `Year` Argumente, verwenden ein vierstelliges Jahr, z. B. 1924.  
  
 Frühere Versionen von Windows interpretieren zweistelliger Jahre basierend auf den Standardeinstellungen, die zuvor beschriebenen. Um sicherzustellen, dass die Funktion den korrekten Wert zurückgibt, verwenden Sie eine vierstellige Jahresangabe `Year`.  
  
 Das folgende Beispiel zeigt negativ, 0 (null) und positive Argumentwerte. Hier die `DateSerial` -Funktion zurückgegeben wird ein `Date` für den Tag vor dem ersten Tag der im März des Jahres 10 Jahre vor dem aktuellen Jahr; das heißt, den letzten Tag des Februar vor zehn Jahren.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Wenn entweder `Month` oder `Day` den normalen Bereich überschreitet, wird Sie auf die nächstgrößere Einheit entsprechend angewendet. Z. B. Wenn Sie 32 Tage angeben, wird Sie ausgewertet als einen Monat und eine bis vier Tage, abhängig vom Wert `Month`. Wenn `Year` ist größer als 9999 oder ein der Argumente ist außerhalb des Bereichs zwischen – 2.147.483.648 und 2.147.483.647 sein, eine <xref:System.ArgumentException> Fehler auftritt. Wenn das angegebenen Datum die durch die drei Argumente vor 00:00:00, 1. Januar des Jahres 1 oder höher ist als 23:59:59 am 31. Dezember 9999 liegt eine <xref:System.ArgumentOutOfRangeException> Fehler auftritt.  
  
 Die `Date` Datentyp enthält Zeitkomponenten. `DateSerial` Legt aller Werte auf 0 (null) fest, damit der zurückgegebene Wert den Anfang des berechneten Tag darstellt.  
  
 Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime> Struktur, dessen Methoden erhalten Sie zusätzliche Optionen beim Erstellen einer `Date` Wert. Beispielsweise können Sie eine der überladenen <xref:System.DateTime.%23ctor%2A> von Konstruktoren zum Auffüllen einer `Date` Variable, die mit der gewünschten Kombination von Komponenten. Im folgenden Beispiel wird `NewDateTime` , 6. Mai 1978 auf ein Zehntel Sekunde vor 8:30 Uhr:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `DateSerial` Funktion zum Zurückgeben des Datums für den angegebenen Werten für Jahr, Monat und Tag.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Wert zurück bzw. legt einen String-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</summary>
        <value>Gibt einen <see langword="String" />-Wert zurück bzw. legt einen String-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` Gibt das Systemdatum zurück, im Format MM-TT-JJJJ, das den abgekürzten Monatsnamen verwendet. Die akzeptierte Formate für das Datum werden die M-d-JJJJ, M-d-y, m/JJJJ und m/y. Dies gilt für alle Systemgebietsschemas, mit Ausnahme derjenigen, die einen Doppelbyte-Zeichensatz (DBCS) verwenden. Wenn das Gebietsschema des Systems einen Doppelbyte-Zeichensatz verwendet `DateString` gibt das Systemdatum zurück, im Format JJJJ-MM-TT. Das Gebietsschema des Systems festgelegt ist, mithilfe der **Zeit, Sprache und Region** Element **Systemsteuerung**.  
  
 **Beachten Sie** der `DateString` Eigenschaft gibt das Systemdatum zurück, nur im Format JJJJ-MM-TT für die `zh` (Chinesisch-vereinfacht), `ko` (Koreanisch), und `ja` (Japanisch) Systemgebietsschemas, wenn Sie Visual Basic als Bestandteil ausführen Silverlight.  
  
 Zum Abrufen oder Festlegen der aktuellen Systemzeit als eine `String`, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> Eigenschaft.  
  
 Um das aktuelle System Datum oder Uhrzeit im Format Ihres Gebietsschemas oder in einem benutzerdefinierten Format abzurufen, geben Sie die <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> Eigenschaft, um die <xref:Microsoft.VisualBasic.Strings.Format%2A> Funktion, die entweder eine vordefinierte oder benutzerdefinierte Datum/Uhrzeit-Format angeben. Dies wird im folgenden Beispiel veranschaulicht:  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Das aktuelle Systemdatum als den Zugriff auf eine `Date`, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> Eigenschaft.  
  
> [!IMPORTANT]
>  Das Einstellen des Datums- oder Zeitwert erfordert eine Berechtigung nicht verwalteten Code die Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `DateString` Eigenschaft, um das aktuelle Datum anzuzeigen.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ungültiges Format, mit dem der Wert von <see langword="DateString" /> festgelegt wurde.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Erforderlich. <see langword="String" />-Ausdruck, der ein Datum und eine Uhrzeit zwischen 00:00:00 Uhr am 1. Januar des Jahres 1 und 23:59:59 Uhr am 31. Dezember 9999 darstellt.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der die Datumsangabe als Zeichenfolge enthält und dessen Zeitangabe Mitternacht (00:00:00) lautet.</summary>
        <returns>Ein <see langword="Date" />-Wert, der die Datumsangabe als Zeichenfolge enthält und dessen Zeitangabe Mitternacht (00:00:00) lautet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `StringDate` umfasst nur Zahlen von 1 bis 12, getrennt durch das Datumstrennzeichen, `DateValue` erkennt die Reihenfolge für Monat, Tag und Jahr entsprechend dem kurzen Datumsformat für Ihr System angegeben. `DateValue` verwendet die aktuelle Einstellung der Kalender von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft der <xref:System.Globalization.CultureInfo> -Klasse in der <xref:System.Globalization> Namespace. Der Standardwert <xref:System.Globalization.CultureInfo.CurrentCulture%2A> werden ermittelt, indem **Systemsteuerung** Einstellungen. Sie können das kurze Datumsformat überschreiben, indem Sie die Einstellung der <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> Eigenschaft der <xref:System.Globalization.DateTimeFormatInfo> -Klasse in der <xref:System.Globalization> Namespace.  
  
 `DateValue` erkennt die Monatsnamen in langen, abgekürzten und numerische Format. Neben der erkennt, 12/30/1991 "und" 12/30/91 sein, z. B. `DateValue` erkennt außerdem 30. Dezember 1991 und 30. Dezember 1991.  
  
 Wenn der Jahresteil des `StringDate` weggelassen wird, `DateValue` verwendet das aktuelle Jahr Systemdatum des Computers.  
  
 Wenn die `StringDate` Argument enthält eine Zeitangabe, `DateValue` nicht in den zurückgegebenen Wert enthalten. Jedoch wenn `StringDate` enthält ungültige Zeitinformationen, wie z. B. "89: 98", ein <xref:System.InvalidCastException> Fehler auftritt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `DateValue` Funktion zum Konvertieren einer Zeichenfolge in ein Datum. Sie können auch Datumsliterale verwenden, ein Datum für Direktes Zuweisen einer `Object` oder `Date` Variablen, z. B. `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringDate" /> enthält eine ungültige Zeitangabe.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Der <see langword="Date" />-Wert, aus dem der Tag extrahiert werden soll.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert von 1 bis 31 für den Tag des Monats zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert von 1 bis 31 für den Tag des Monats zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Verwendung der `Day` -Funktion möglicherweise müssen Sie zusammen mit der `Microsoft.VisualBasic` -Namespace, da die <xref:System.Windows.Forms> -Namespace definiert <xref:System.Windows.Forms.Day> als eine Enumeration. Das folgende Beispiel zeigt wie qualifizierenden `Day` diese Mehrdeutigkeit aufgelöst:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Sie können auch den Tag des Monats abrufen, durch den Aufruf `DatePart` und `DateInterval.Day` für die *Intervall* Argument.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Day` Funktion, die den Tag des Monats aus einem bestimmten Datum zu erhalten. In der Entwicklungsumgebung wird das Datumsliteral standard Kurzformat (z. B. "02/12/1969)" mithilfe von den gebietsschemaeinstellungen des Codes.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` ist qualifiziert, um die Unterscheidung von den <xref:System.Windows.Forms.Day?displayProperty=nameWithType> Enumeration.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Erforderlich. Der <see langword="Date" />-Wert, aus dem die Stunde extrahiert werden soll.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert von 0 bis 23 für die Stunde des Tages zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert von 0 bis 23 für die Stunde des Tages zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch die Stunde des Tages abrufen, durch den Aufruf `DatePart` und `DateInterval.Hour` für die `Interval` Argument.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Hour` Funktion, die die Stunde aus einem bestimmten Zeitpunkt zu ermitteln. In der Entwicklungsumgebung wird die Uhrzeit-Literal in kurze Uhrzeitformat, die mit den gebietsschemaeinstellungen des Codes angezeigt.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Erforderlich. Der <see langword="Date" />-Wert, aus dem die Minute extrahiert werden soll.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert von 0 bis 59 für die Minute in der Stunde zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert von 0 bis 59 für die Minute in der Stunde zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch die Minute der Stunde abrufen, durch den Aufruf `DatePart` und `DateInterval.Minute` für die `Interval` Argument.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Minute` Funktion, die die Minute der Stunde aus einem bestimmten Zeitpunkt zu ermitteln. In der Entwicklungsumgebung wird die Uhrzeit-Literal in kurze Uhrzeitformat, die mit den gebietsschemaeinstellungen des Codes angezeigt.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Der <see langword="Date" />-Wert, aus dem der Monat extrahiert werden soll.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert von 1 bis 12 für den Monat des Jahres zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert von 1 bis 12 für den Monat des Jahres zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch den Monat des Jahres abrufen, durch den Aufruf `DatePart` und `DateInterval.Month` für die `Interval` Argument.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Month` Funktion, die den Monat aus einem bestimmten Datum zu ermitteln. In der Entwicklungsumgebung das Datum, das Literal, kurz gesagt angezeigt wird Datumsformat mithilfe von den gebietsschemaeinstellungen des Codes.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Erforderlich. <see langword="Integer" /> Die numerische Bezeichnung des Monats von 1 bis 13, wobei 1 für Januar und 12 für Dezember steht. Den Wert 13 können Sie für einen 13-Monats-Kalender verwenden. Wenn im System ein 12-Monats-Kalender verwendet wird und <c>Month</c> 13 ist, gibt <see langword="MonthName" /> eine leere Zeichenfolge zurück.</param>
        <param name="Abbreviate">Dies ist optional. Ein <see langword="Boolean" />-Wert, der angibt, ob der Monatsname abgekürzt werden soll. Wenn dieses Argument nicht angegeben wird, lautet der Standardwert <see langword="False" />, d. h., der Monatsname wird nicht abgekürzt.</param>
        <summary>Gibt einen <see langword="String" />-Wert zurück, der den Namen des angegebenen Monats enthält.</summary>
        <returns>Gibt einen <see langword="String" />-Wert zurück, der den Namen des angegebenen Monats enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichenfolge, die vom `MonthName` hängt nicht nur von den Eingabeargumenten, sondern auch die **Ländereinstellungen** Einstellungen in der Windows **Systemsteuerung**.  
  
> [!NOTE]
>  `MonthName` verwendet die aktuelle Einstellung der Kalender von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft der <xref:System.Globalization.CultureInfo> -Klasse in der <xref:System.Globalization> Namespace. Der Standardwert <xref:System.Globalization.CultureInfo.CurrentCulture%2A> werden ermittelt, indem **Systemsteuerung** Einstellungen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `MonthName` Funktion, die den Namen des Monats, um angegebene ganze Zahl zu bestimmen. Der boolesche Wert bestimmt, ob der vollständige Name (`False`) oder den abgekürzten Namen (`True`) wird angezeigt.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Month" /> ist größer als 1 oder größer als 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der das aktuelle Datum und die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</summary>
        <value>Gibt einen <see langword="Date" />-Wert zurück, der das aktuelle Datum und die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie zum Festlegen des Systemdatums der <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> Eigenschaft. Verwenden Sie zum Festlegen der Systemzeit der <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Now` Eigenschaft, um das aktuelle Systemdatum und die Uhrzeit zurückzugeben.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Erforderlich. Der <see langword="Date" />-Wert, aus dem die Sekunde extrahiert werden soll.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert von 0 bis 59 für die Sekunde in der Minute zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert von 0 bis 59 für die Sekunde in der Minute zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch die Sekunde einer Minute abrufen, durch den Aufruf `DatePart` und `DateInterval.Second` für die `Interval` Argument.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Second` Funktion, die die Sekunde einer Minute aus einem bestimmten Zeitpunkt zu ermitteln. In der Entwicklungsumgebung wird die Uhrzeit-Literal in kurze Uhrzeitformat, die mit den gebietsschemaeinstellungen des Codes angezeigt.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</summary>
        <value>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Date` Datentyp enthält Datumskomponenten. Bei der Rückgabe der Systemzeit `TimeOfDay` diese alle auf 1 festgelegt, damit der zurückgegebene Wert den ersten Tag des Jahres 1 darstellt. Beim Festlegen der Systemzeit `TimeOfDay` ignoriert die Datenkomponenten.  
  
 Die aktuelle Systemzeit als den Zugriff auf eine `String`, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> Eigenschaft.  
  
 Verwenden Sie zum Abrufen oder Festlegen des aktuellen Systemdatums, die <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> Eigenschaft.  
  
> [!IMPORTANT]
>  Das Einstellen des Datums- oder Zeitwert erfordert eine Berechtigung nicht verwalteten Code die Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `TimeOfDay` Eigenschaft, um die aktuelle Systemzeit zurückzugeben.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Anzahl der seit Mitternacht vergangenen Sekunden angibt.</summary>
        <value>Gibt einen Wert vom Typ <see langword="Double" /> zurück, der die Anzahl der seit Mitternacht vergangenen Sekunden angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Timer` Eigenschaft gibt sowohl die Sekunden als auch die Millisekunden seit dem letzten zurück. Dabei werden die Sekunden in den ganzzahligen Teil der zurückgegebene Wert, und die Millisekunden den Nachkommateil.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Timer` Eigenschaft, um die Anwendung zu unterbrechen. Sie können andere Verarbeitung während der Pause ausführen.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Qualifizieren müssen die `Timer` Eigenschaft mit dem die <xref:Microsoft.VisualBasic?displayProperty=nameWithType> -Namespace, da `Timer` ist auch eine definierte Klasse in der <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>, und <xref:System.Windows.Forms?displayProperty=nameWithType> Namespaces.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Erforderlich. <see langword="Integer" />-Ausdruck zwischen 0 und 23. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert.</param>
        <param name="Minute">Erforderlich. <see langword="Integer" />-Ausdruck zwischen 0 und 59. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <c>Minute</c> wird zu der berechneten Stunde addiert, sodass ein negativer Wert die Minuten vor dieser Stunde angibt.</param>
        <param name="Second">Erforderlich. <see langword="Integer" />-Ausdruck zwischen 0 und 59. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <c>Second</c> wird zu der berechneten Minute addiert, sodass ein negativer Wert die Sekunden vor dieser Minute angibt.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der eine bestimmte Stunde, Minute und Sekunde angibt und dessen Datum der 1. Januar des Jahres 1 ist.</summary>
        <returns>Gibt einen <see langword="Date" />-Wert zurück, der eine bestimmte Stunde, Minute und Sekunde angibt und dessen Datum der 1. Januar des Jahres 1 ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das folgende Beispiel zeigt negativ, 0 (null) und positive Argumentwerte. Die `TimeSerial` Funktionsergebnis ist eine Zeit, die 15 Minuten vor drei Stunden vor Mittag oder 8:45:00 Uhr darstellt.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Wenn entweder `Minute` oder `Second` den normalen Bereich überschreitet, wird Sie auf die nächstgrößere Einheit entsprechend angewendet. Wenn Sie 75 Minuten angeben, wird es z. B. als eine Stunde und 15 Minuten ausgewertet.  
  
 `TimeSerial` verringert die Gesamtanzahl von Sekunden modulo 86.400, also die Anzahl der Sekunden an einem Tag. Aus diesem Grund ist die zurückgegebene Zeit immer zwischen 00:00:00 und 23:59:59.  
  
 Die `Date` Datentyp enthält Datumskomponenten. `TimeSerial` Legt aller dieser auf 1 fest, damit der zurückgegebene Wert den ersten Tag des Jahres 1 darstellt. Wenn die Werte der Argumente dazu führen, die berechnete Zeit 24 Stunden nicht überschreiten dass, wird der Tag jedoch nach Bedarf erhöht. Im folgenden Beispiel die Werte der `Hour` und `Minute` in einem kombinierten mehr als 24 Stunden führen.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Wenn die Werte der Argumente zu einer negativen berechnete Zeit führen, die Datumsinformationen auf 1/1/0001 festgelegt ist, und die Zeitinformationen wird angepasst, um zwischen 00:00:00 und 23:59:59 liegen. Jedoch, wenn die berechnete Zeit weniger als negative 24 Stunden, ist ein <xref:System.ArgumentOutOfRangeException> Fehler auftritt.  
  
 Da jede `Date` Wert wird von unterstützt eine <xref:System.DateTime?displayProperty=nameWithType> Struktur, dessen Methoden erhalten Sie zusätzliche Optionen beim Erstellen einer `Date` Wert. Beispielsweise können Sie nutzen eine der überladenen <xref:System.DateTime.%23ctor%2A> von Konstruktoren zum Auffüllen einer `Date` Variable, die mit der gewünschten Kombination von Komponenten. Im folgenden Beispiel wird `newDateTime` , 6. Mai 1978 auf ein Zehntel Sekunde vor 8:30 Uhr:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `TimeSerial` Funktion, um die Zeit für die angegebene Stunde, Minute und Sekunde zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein Argument liegt nicht im Bereich zwischen –2.147.483.648 und 2.147.483.647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Errechnete Zeit ist kleiner als der Wert für –24 Stunden</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="String" />-Wert zurück, der die aktuelle Uhrzeit gemäß der Systemeinstellung angibt, oder legt diesen fest.</summary>
        <value>Gibt einen <see langword="String" />-Wert zurück, der die aktuelle Uhrzeit gemäß der Systemeinstellung angibt, oder legt diesen fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` die Systemzeit als "Hh", wird immer gibt, wird ein 24-Stunden-Format. Dieses Format ist invarianter Kultur, d. h., es wird nicht geändert, auch wenn Sie ändern die **Ländereinstellungen** in **Systemsteuerung**.  
  
 Zum Abrufen oder Festlegen des aktuellen Systemdatums als eine `String`, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> Eigenschaft.  
  
 Um das aktuelle System Datum oder Uhrzeit im Format Ihres Gebietsschemas oder in einem benutzerdefinierten Format abzurufen, geben Sie die <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> Eigenschaft, um die <xref:Microsoft.VisualBasic.Strings.Format%2A> Funktion, die entweder eine vordefinierte oder benutzerdefinierte Datum/Uhrzeit-Format angeben. Dies wird im folgenden Beispiel veranschaulicht:  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Die aktuelle Systemzeit als den Zugriff auf eine `Date`, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> Eigenschaft.  
  
> [!IMPORTANT]
>  Einstellen des Datums- oder Zeitwert erfordert die Berechtigung nicht verwalteten Code die Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `TimeString` Eigenschaft, um die aktuelle Systemzeit anzuzeigen.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ungültiges Format, mit dem der Wert von <see langword="TimeString" /> festgelegt wurde.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Erforderlich. <see langword="String" />-Ausdruck, der ein Datum und eine Uhrzeit zwischen 00:00:00 Uhr am 1. Januar des Jahres 1 und 23:59:59 Uhr am 31. Dezember 9999 darstellt.</param>
        <summary>Gibt einen <see langword="Date" />-Wert zurück, der die Zeitangabe als Zeichenfolge enthält und dessen Datum der 1. Januar des Jahres 1 ist.</summary>
        <returns>Gibt einen <see langword="Date" />-Wert zurück, der die Zeitangabe als Zeichenfolge enthält und dessen Datum der 1. Januar des Jahres 1 ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können gültige Zeitangaben 12- oder 24-Stunden-Format. Z. B. `"2:24 P.M."` und `"14:24"` sind beide gültig `StringTime` Argumente.  
  
 Wenn die `StringTime` Argument enthält aktuelle Informationen, `TimeValue` nicht in den zurückgegebenen Wert enthalten. Aber wenn `StringTime` enthält ungültige Datumsinformationen, z. B. "Januar 32," eine <xref:System.InvalidCastException> Fehler auftritt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `TimeValue` Funktion zum Konvertieren einer Zeichenfolge in eine Uhrzeit. Sie können auch Datumsliterale verwenden, um direkt eine Zeit, um eine `Date` Variable.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringTime" /> enthält ungültige Datumsinformationen.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</summary>
        <value>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Date` Datentyp enthält Zeitkomponenten. Bei der Rückgabe des Systemdatums `Today` diese festgelegt auf 0, sodass der zurückgegebene Wert Mitternacht (00: 00:00). Beim Festlegen des Systemdatums `Today` ignoriert die Zeitkomponenten.  
  
 Das aktuelle Systemdatum als den Zugriff auf eine `String`, verwenden Sie die <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> Eigenschaft.  
  
 Verwenden Sie zum Abrufen oder Festlegen der aktuellen Systemzeit, die <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> Eigenschaft.  
  
> [!IMPORTANT]
>  Das Einstellen des Datums- oder Zeitwert erfordert eine Berechtigung nicht verwalteten Code die Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Today` Eigenschaft, die das aktuellen Datum zurückgegeben.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Der <see langword="Date" />-Wert, für den der Wochentag ermittelt werden soll.</param>
        <param name="DayOfWeek">Dies ist optional. Ein Wert aus der <see langword="FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.Sunday" /> verwendet.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert mit einer Zahl zurück, die den Wochentag darstellt.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert mit einer Zahl zurück, die den Wochentag darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von der `Weekday` Funktion entspricht den Werten der der `FirstDayOfWeek` Enumeration; d. h. 1 Sonntag und 7 steht Samstag.  
  
> [!NOTE]
>  `Weekday` verwendet die aktuelle Einstellung der Kalender von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft der <xref:System.Globalization.CultureInfo> -Klasse in der <xref:System.Globalization> Namespace. Der Standardwert <xref:System.Globalization.CultureInfo.CurrentCulture%2A> werden ermittelt, indem **Systemsteuerung** Einstellungen.  
  
 Die `DayOfWeek` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Erster Tag der Woche, die in den Systemeinstellungen angegeben|  
|`FirstDayOfWeek.Sunday`|1|Sunday (Standardeinstellung)|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Dienstag|  
|`FirstDayOfWeek.Wednesday`|4|Mittwoch|  
|`FirstDayOfWeek.Thursday`|5|Donnerstag|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Weekday` Funktion, die den Tag der Woche ab einem angegebenen Datum abzurufen.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="DayOfWeek" /> ist kleiner als 0 oder größer als 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Erforderlich. <see langword="Integer" /> Die numerische Bezeichnung des Wochentags von 1 bis 7, wobei 1 für den ersten und 7 für den letzten Tag der Woche steht. Welcher jeweils der erste und letzte Tag der Woche ist, hängt von der Einstellung für <c>FirstDayOfWeekValue</c> ab.</param>
        <param name="Abbreviate">Dies ist optional. Ein <see langword="Boolean" />-Wert, der angibt, ob der Name des Wochentags abgekürzt werden soll. Wenn dieser Wert nicht angegeben wird, lautet der Standardwert <see langword="False" />, d. h., der Name des Wochentags wird nicht abgekürzt.</param>
        <param name="FirstDayOfWeekValue">Dies ist optional. Ein Wert aus der <see langword="FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.System" /> verwendet.</param>
        <summary>Gibt einen <see langword="String" />-Wert zurück, der den Namen des angegebenen Wochentags enthält.</summary>
        <returns>Gibt einen <see langword="String" />-Wert zurück, der den Namen des angegebenen Wochentags enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichenfolge, die vom `WeekdayName` hängt nicht nur von den Eingabeargumenten, sondern auch die **Ländereinstellungen** Einstellungen in der Windows **Systemsteuerung**.  
  
> [!NOTE]
>  `WeekdayName` verwendet die aktuelle Einstellung der Kalender von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft der <xref:System.Globalization.CultureInfo> -Klasse in der <xref:System.Globalization> Namespace. Der Standardwert <xref:System.Globalization.CultureInfo.CurrentCulture%2A> werden ermittelt, indem **Systemsteuerung** Einstellungen.  
  
 Die `FirstDayOfWeekValue` Argument kann einen der folgenden Einstellungen aufweisen.  
  
|Enumerationswert|Wert|Beschreibung |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Erster Tag der Woche, die im System angegebene Einstellungen (Standard)|  
|`FirstDayOfWeek.Sunday`|1|Sonntag|  
|`FirstDayOfWeek.Monday`|2|Montag (entspricht ISO-standard 8601, Abschnitt 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Dienstag|  
|`FirstDayOfWeek.Wednesday`|4|Mittwoch|  
|`FirstDayOfWeek.Thursday`|5|Donnerstag|  
|`FirstDayOfWeek.Friday`|6|Freitag|  
|`FirstDayOfWeek.Saturday`|7|Samstag|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Weekday` Funktion zum Abrufen der Tag der Woche ab einem angegebenen Datum, und klicken Sie dann die `WeekDayName` Funktion, die den Namen des Wochentags aus der Anzahl zu erhalten.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Weekday" /> ist kleiner als 1 oder größer als 7, oder <paramref name="FirstDayOfWeekValue" /> ist kleiner als 0 oder größer als 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Erforderlich. Der <see langword="Date" />-Wert, aus dem das Jahr extrahiert werden soll.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert von 1 bis 9999 für das Jahr zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert von 1 bis 9999 für das Jahr zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch das Jahr abrufen, durch den Aufruf `DatePart` und `DateInterval.Year` für die `Interval` Argument.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Year` Funktion, um das Jahr aus einem bestimmten Datum zu ermitteln. In der Entwicklungsumgebung das Datum, das Literal, kurz gesagt angezeigt wird Datumsformat mithilfe von den gebietsschemaeinstellungen des Codes.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>
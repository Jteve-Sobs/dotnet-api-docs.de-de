<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36685a226b8e7df21134b6d114193b54700dc49b" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73377263" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Strings" />-Modul enthält Prozeduren, mit denen Zeichenfolgenoperationen ausgeführt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und die Lauf Zeit Bibliothekselemente, die Zeichen folgen bearbeiten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge in ihren Leerzeichen aufgeteilt wird.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(char String) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` gibt den *Codepunkt*oder den Zeichencode für das Eingabezeichen zurück. Dies kann zwischen 0 und 255 für SBCS-Werte (Single-Byte Character Set) und-32768 bis 32767 für Double-Byte-Zeichensatz Werte (DBCS) liegen.  
  
 `AscW` gibt den Unicode-Codepunkt für das Eingabezeichen zurück. Dieser Wert kann zwischen 0 und 65535 liegen. Der zurückgegebene Wert ist unabhängig von der Kultur und den Codepage-Einstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die Funktion "`AscB`" früherer Versionen von Visual Basic gibt anstelle eines Zeichens einen Code für ein Byte zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic 2005-Zeichen folgen sind in Unicode, und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc`-Funktion verwendet, um `Integer`-Zeichen Codes zurückzugeben, die dem ersten Buchstaben in jeder Zeichenfolge entsprechen.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funktionen (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(string String) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` gibt den *Codepunkt*oder den Zeichencode für das Eingabezeichen zurück. Dies kann zwischen 0 und 255 für SBCS-Werte (Single-Byte Character Set) und-32768 bis 32767 für Double-Byte-Zeichensatz Werte (DBCS) liegen.  
  
 `AscW` gibt den Unicode-Codepunkt für das Eingabezeichen zurück. Dieser Wert kann zwischen 0 und 65535 liegen. Der zurückgegebene Wert ist unabhängig von der Kultur und den Codepage-Einstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die Funktion "`AscB`" früherer Versionen von Visual Basic gibt anstelle eines Zeichens einen Code für ein Byte zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic 2005-Zeichen folgen sind in Unicode, und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc`-Funktion verwendet, um `Integer`-Zeichen Codes zurückzugeben, die dem ersten Buchstaben in jeder Zeichenfolge entsprechen.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funktionen (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(char String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` gibt den *Codepunkt*oder den Zeichencode für das Eingabezeichen zurück. Dies kann zwischen 0 und 255 für SBCS-Werte (Single-Byte Character Set) und-32768 bis 32767 für Double-Byte-Zeichensatz Werte (DBCS) liegen.  
  
 `AscW` gibt den Unicode-Codepunkt für das Eingabezeichen zurück. Dieser Wert kann zwischen 0 und 65535 liegen. Der zurückgegebene Wert ist unabhängig von der Kultur und den Codepage-Einstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die Funktion "`AscB`" früherer Versionen von Visual Basic gibt anstelle eines Zeichens einen Code für ein Byte zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic 2005-Zeichen folgen sind in Unicode, und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc`-Funktion verwendet, um `Integer`-Zeichen Codes zurückzugeben, die dem ersten Buchstaben in jeder Zeichenfolge entsprechen.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funktionen (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(string String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
        <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` gibt den *Codepunkt*oder den Zeichencode für das Eingabezeichen zurück. Dies kann zwischen 0 und 255 für SBCS-Werte (Single-Byte Character Set) und-32768 bis 32767 für Double-Byte-Zeichensatz Werte (DBCS) liegen.  
  
 `AscW` gibt den Unicode-Codepunkt für das Eingabezeichen zurück. Dieser Wert kann zwischen 0 und 65535 liegen. Der zurückgegebene Wert ist unabhängig von der Kultur und den Codepage-Einstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die Funktion "`AscB`" früherer Versionen von Visual Basic gibt anstelle eines Zeichens einen Code für ein Byte zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic 2005-Zeichen folgen sind in Unicode, und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc`-Funktion verwendet, um `Integer`-Zeichen Codes zurückzugeben, die dem ersten Buchstaben in jeder Zeichenfolge entsprechen.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funktionen (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Chr(int32 CharCode) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der den <c>Codepunkt</c> oder Zeichencode für das Zeichen darstellt.</param>
        <summary>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</summary>
        <returns>Das dem angegebenen Zeichencode zugeordnete Zeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der für `CharCode` akzeptierte asymmetrische Bereich kompensiert die Speicher Unterschiede zwischen dem `Short` und dem `Integer`. Beispielsweise ist-29183 eine `Short`, aber + 36353 ist ein `Integer`. Dies erleichtert auch die Kompatibilität mit Visual Basic 6,0.  
  
 `Chr` verwendet die <xref:System.Text.Encoding>-Klasse im <xref:System.Text?displayProperty=nameWithType>-Namespace, um zu bestimmen, ob der aktuelle Thread einen Single-Byte-Zeichensatz (SBCS) oder einen Doppelbyte-Zeichensatz (Double-Byte Character Set, DBCS) verwendet. Dann nimmt er `CharCode` als Codepunkt im entsprechenden Satz. Der Bereich kann zwischen 0 und 255 für SBCS-Zeichen und-32768 bis 65535 für DBCS-Zeichen liegen.  
  
 Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread ab, der in der <xref:System.Globalization.TextInfo.ANSICodePage%2A>-Eigenschaft der <xref:System.Globalization.TextInfo>-Klasse im <xref:System.Globalization>-Namespace enthalten ist. Sie können <xref:System.Globalization.TextInfo.ANSICodePage%2A> abrufen, indem Sie `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage` angeben.  
  
 `ChrW` nimmt `CharCode` als Unicode-Codepunkt auf. Der Bereich ist unabhängig von der Kultur und den Codepage-Einstellungen für den aktuellen Thread. Werte von-32768 bis-1 werden wie Werte im Bereich + 32768 bis + 65535 behandelt.  
  
 Zahlen von 0 bis 31 sind identisch mit den standardmäßigen nicht druckbaren ASCII-Codes. Beispielsweise gibt `Chr(10)` ein Zeilenvorschub Zeichen zurück.  
  
> [!NOTE]
>  Die `ChrB`-Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Zeichen folgen in Visual Basic und die-.NET Framework sind in Unicode, und `ChrB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Chr`-Funktion verwendet, um das dem angegebenen Zeichencode zugeordnete Zeichen zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; 0 oder &gt; 255 für <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ChrW(int32 CharCode) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der den <c>Codepunkt</c> oder Zeichencode für das Zeichen darstellt.</param>
        <summary>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</summary>
        <returns>Das dem angegebenen Zeichencode zugeordnete Zeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der für `CharCode` akzeptierte asymmetrische Bereich kompensiert die Speicher Unterschiede zwischen dem `Short` und dem `Integer`. Beispielsweise ist-29183 eine `Short`, aber + 36353 ist ein `Integer`. Dies erleichtert auch die Kompatibilität mit Visual Basic 6,0.  
  
 `Chr` verwendet die <xref:System.Text.Encoding>-Klasse im <xref:System.Text?displayProperty=nameWithType>-Namespace, um zu bestimmen, ob der aktuelle Thread einen Single-Byte-Zeichensatz (SBCS) oder einen Doppelbyte-Zeichensatz (Double-Byte Character Set, DBCS) verwendet. Dann nimmt er `CharCode` als Codepunkt im entsprechenden Satz. Der Bereich kann zwischen 0 und 255 für SBCS-Zeichen und-32768 bis 65535 für DBCS-Zeichen liegen.  
  
 Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread ab, der in der <xref:System.Globalization.TextInfo.ANSICodePage%2A>-Eigenschaft der <xref:System.Globalization.TextInfo>-Klasse im <xref:System.Globalization>-Namespace enthalten ist. Sie können <xref:System.Globalization.TextInfo.ANSICodePage%2A> abrufen, indem Sie `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage` angeben.  
  
 `ChrW` nimmt `CharCode` als Unicode-Codepunkt auf. Der Bereich ist unabhängig von der Kultur und den Codepage-Einstellungen für den aktuellen Thread. Werte von-32768 bis-1 werden wie Werte im Bereich + 32768 bis + 65535 behandelt.  
  
 Zahlen von 0 bis 31 sind identisch mit den standardmäßigen nicht druckbaren ASCII-Codes. Beispielsweise gibt `Chr(10)` ein Zeilenvorschub Zeichen zurück.  
  
> [!NOTE]
>  Die `ChrB`-Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Zeichen folgen in Visual Basic und die-.NET Framework sind in Unicode, und `ChrB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Chr`-Funktion verwendet, um das dem angegebenen Zeichencode zugeordnete Zeichen zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; – 32768 oder &gt; 65535 für <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</param>
        <param name="Match">Erforderlich. Die zu suchende Zeichenfolge.</param>
        <param name="Include">Optional. Ein <see langword="Boolean" />-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <paramref name="Match" /> einschließen oder ausschließen. Wenn <paramref name="Include" /> <see langword="True" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> als eine untergeordnete Zeichenfolge enthält. Wenn <paramref name="Include" /> <see langword="False" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> nicht als eine untergeordnete Zeichenfolge enthält.</param>
        <param name="Compare">Dies ist optional. Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
        <returns>Ein nullbasiertes Array, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn in `Source` keine Übereinstimmungen von `Match` gefunden werden, gibt die Funktion `Filter` ein leeres Array zurück. Wenn `Source` auf `Nothing` festgelegt ist oder kein eindimensionales Array ist, tritt ein Fehler auf.  
  
 Das Array, das von der `Filter`-Funktion zurückgegeben wird, enthält nur genügend Elemente, die die Anzahl der übereinstimmenden Elemente enthalten  
  
 Das Argument "`Compare`" kann die folgenden Werte aufweisen.  
  
|Konstante|Beschreibung|  
|-|-|  
|Konstante|Beschreibung|  
|`CompareMethod.Binary`|Führt einen binären Vergleich aus.|  
|`CompareMethod.Text`|Führt einen Textvergleich aus.|  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `Filter`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> ist <see langword="Nothing" /> oder kein eindimensionales Array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</param>
        <param name="Match">Erforderlich. Die zu suchende Zeichenfolge.</param>
        <param name="Include">Dies ist optional. Ein <see langword="Boolean" />-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <paramref name="Match" /> einschließen oder ausschließen. Wenn <paramref name="Include" /> <see langword="True" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> als eine untergeordnete Zeichenfolge enthält. Wenn <paramref name="Include" /> <see langword="False" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> nicht als eine untergeordnete Zeichenfolge enthält.</param>
        <param name="Compare">Optional. Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
        <returns>Ein nullbasiertes Array, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn in `Source` keine Übereinstimmungen von `Match` gefunden werden, gibt die Funktion `Filter` ein leeres Array zurück. Wenn `Source` auf `Nothing` festgelegt ist oder kein eindimensionales Array ist, tritt ein Fehler auf.  
  
 Das Array, das von der `Filter`-Funktion zurückgegeben wird, enthält nur genügend Elemente, die die Anzahl der übereinstimmenden Elemente enthalten  
  
 Das Argument "`Compare`" kann die folgenden Werte aufweisen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`CompareMethod.Binary`|Führt einen binären Vergleich aus.|  
|`CompareMethod.Text`|Führt einen Textvergleich aus.|  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `Filter`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> ist <see langword="Nothing" /> oder kein eindimensionales Array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(object Expression, string Style) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Jeder gültige Ausdruck.</param>
        <param name="Style">Dies ist optional. Ein gültiger benannter oder benutzerdefinierter Format-<see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</summary>
        <returns>Eine Zeichenfolge, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.String.Format%2A?displayProperty=nameWithType>-Methode bietet auch eine ähnliche Funktionalität.  
  
 Wenn Sie eine nicht lokalisierte numerische Zeichenfolge formatieren, sollten Sie ein benutzerdefiniertes numerisches Format verwenden, um sicherzustellen, dass Sie das gewünschte Aussehen erhalten.  
  
 Wenn Sie versuchen, eine Zahl zu formatieren, ohne `Style` anzugeben, bietet die Funktion "`Format`" ähnliche Funktionen wie die Funktion "`Str`", obwohl Sie International bekannt ist. Positive Zahlen, die als Zeichen folgen mit der Funktion "`Format`" formatiert sind, enthalten jedoch keinen führenden Platz, der für das Vorzeichen des Werts reserviert ist. mit der `Str`-Funktion konvertierte werden das führende Leerzeichen beibehalten.  
  
## <a name="different-formats-for-different-numeric-values"></a>Verschiedene Formate für verschiedene numerische Werte  
 Ein benutzerdefinierter Format Ausdruck für Zahlen kann von einem bis drei durch Semikolons getrennte Abschnitte aufweisen. Wenn das `Style`-Argument der `Format`-Funktion eines der vordefinierten numerischen Formate enthält, ist nur ein Abschnitt zulässig.  
  
|Bei Verwendung von|Dies ist das Ergebnis|  
|-|-|  
|Nur ein Abschnitt|Der Format Ausdruck gilt für alle Werte.|  
|Zwei Abschnitte|Der erste Abschnitt gilt für positive Werte und Nullen. die zweite gilt für negative Werte.|  
|Drei Abschnitte|Der erste Abschnitt gilt für positive Werte, der zweite für negative Werte und der dritte für Nullen.|  
  
 Das folgende Beispiel enthält zwei Abschnitte: das erste definiert das Format für positive Werte und Nullen. der zweite Abschnitt definiert das Format für negative Werte. Da das `Style`-Argument der `Format`-Funktion eine Zeichenfolge annimmt, wird es in Anführungszeichen eingeschlossen.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Wenn Sie Semikolons ohne etwas dazwischen einfügen, wird der fehlende Abschnitt im Format des positiven Werts gedruckt. Das folgende Format zeigt beispielsweise positive und negative Werte mit dem Format im ersten Abschnitt an und zeigt `Zero` an, wenn der Wert 0 (null) ist.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Vordefinierte numerische Formate  
 In der folgenden Tabelle sind die vordefinierten numerischen Format Namen aufgeführt. Diese können nach Name als `Style`-Argument für die `Format`-Funktion verwendet werden:  
  
|Formatname|Beschreibung|  
|-|-|  
|`General Number`, `G`oder `g`|Zeigt die Zahl ohne Tausender Trennzeichen an.<br /><br /> Beispielsweise gibt `Format(&H3FA, "g")` `1018`zurück.|  
|`Currency`, `C`oder `c`|Zeigt die Zahl mit Tausender Trennzeichen an, falls zutreffend. zeigt zwei Ziffern rechts vom Dezimaltrennzeichen an. Die Ausgabe basiert auf den Gebiets Schema Einstellungen des Systems.<br /><br /> Beispielsweise gibt `Format(1234567, "c")` `$1,234,567.00`zurück.|  
|`Fixed`, `F`oder `f`|Zeigt mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Beispielsweise gibt `Format(1234567, "f")` `1234567.00`zurück.|  
|`Standard`, `N`oder `n`|Zeigt die Zahl mit Tausender Trennzeichen, mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Beispielsweise gibt `Format(1234567, "n")` `1,234,567.00`zurück.|  
|`Percent`|Zeigt die Zahl multipliziert mit 100 mit einem Prozentzeichen (%) an. direkt rechts angefügt. zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Beispielsweise gibt `Format(0.4744, "Percent")` `47.44%`zurück.|  
|`P` oder `p`|Zeigt die Zahl mit Tausendstel Trennzeichen multipliziert mit 100 mit einem Prozentzeichen (%) an. an den rechten angefügt und durch ein einzelnes Leerzeichen getrennt; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Beispielsweise gibt `Format(0.80345, "p")` `80.35 %`zurück.|  
|`Scientific`|Verwendet die standardmäßige wissenschaftliche Schreibweise und stellt zwei bedeutende Ziffern bereit.<br /><br /> Beispielsweise gibt `Format(1234567, "Scientific")` `1.23E+06`zurück.|  
|`E` oder `e`|Verwendet die standardmäßige wissenschaftliche Schreibweise und stellt sechs bedeutende Ziffern bereit.<br /><br /> Beispielsweise gibt `Format(1234567, "e")` `1.234567e+006`zurück.|  
|`D` oder `d`|Zeigt die Zahl als Zeichenfolge an, die den Wert der Zahl im Dezimal Format (Basis 10) enthält. Diese Option wird nur für ganzzahlige Typen (`Byte`, `Short`, `Integer`, `Long`) unterstützt.<br /><br /> Beispielsweise gibt `Format(&H7F, "d")` `127`zurück.|  
|`X` oder `x`|Zeigt die Zahl als Zeichenfolge an, die den Wert der Zahl im Hexadezimal Format (Basis 16) enthält. Diese Option wird nur für ganzzahlige Typen (`Byte`, `Short`, `Integer`, `Long`) unterstützt.<br /><br /> Beispielsweise gibt `Format(127, "x")` `7f`zurück.|  
|`Yes/No`|Zeigt `No` an, wenn die Zahl 0 ist. Andernfalls zeigt `Yes` an.<br /><br /> Beispielsweise gibt `Format(0, "Yes/No")` `No`zurück.|  
|`True/False`|Zeigt `False` an, wenn die Zahl 0 ist. Andernfalls zeigt `True` an.<br /><br /> Beispielsweise gibt `Format(1, "True/False")` `True`zurück.|  
|`On/Off`|Zeigt `Off` an, wenn die Zahl 0 ist. Andernfalls zeigt `On` an.<br /><br /> Beispielsweise gibt `Format(1, "On/Off")` `On`zurück.|  
  
### <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die Formate "`Yes/No`", "`True/False`" und "`On/Off`" werden nicht unterstützt.  
  
## <a name="user-defined-numeric-formats"></a>Benutzerdefinierte numerische Formate  
 In der folgenden Tabelle sind die Zeichen aufgeführt, die Sie zum Erstellen von benutzerdefinierten Zahlenformaten verwenden können. Diese können verwendet werden, um das `Style`-Argument für die `Format`-Funktion zu erstellen:  
  
|Zeichen|Beschreibung|  
|-|-|  
|Keine|Zeigt die Zahl ohne Formatierung an.|  
|(`0`)|Ziffern Platzhalter. Zeigt eine Ziffer oder eine NULL an. Wenn der Ausdruck an der Position, an der NULL in der Format Zeichenfolge angezeigt wird, eine Ziffer aufweist, zeigen Sie ihn an. Andernfalls wird an dieser Position ein NULL-Wert angezeigt.<br /><br /> Wenn die Zahl weniger Ziffern hat, als im Format Ausdruck Nullen (auf beiden Seiten des Dezimal Trennzeichens) vorhanden sind, werden führende oder nachfolgende Nullen angezeigt. Wenn die Zahl mehr Ziffern rechts vom Dezimaltrennzeichen aufweist, als im Format Ausdruck rechts vom Dezimaltrennzeichen Nullen vorhanden sind, wird die Zahl auf so viele Dezimalstellen gerundet, wie Nullen vorhanden sind. Wenn die Zahl links vom Dezimaltrennzeichen mehr Ziffern enthält, als im Format Ausdruck links vom Dezimaltrennzeichen Nullen vorhanden sind, werden die zusätzlichen Ziffern ohne Änderung angezeigt.|  
|(`#`)|Ziffern Platzhalter. Zeigt eine Ziffer oder nichts an. Wenn der Ausdruck an der Position, an der das `#`-Zeichen in der Format Zeichenfolge angezeigt wird, eine Ziffer aufweist, wird Sie angezeigt. Andernfalls wird an dieser Position nichts angezeigt.<br /><br /> Dieses Symbol funktioniert wie der Platzhalter für die `0`-Ziffer, mit dem Unterschied, dass führende und nachfolgende Nullen nicht angezeigt werden, wenn die Zahl weniger Ziffern hat, als `#` Zeichen auf beiden Seiten des Dezimal Trennzeichens im Format Ausdruck vorhanden sind.|  
|(`.`)|Dezimal Platzhalter. Der dezimalplatz Halter bestimmt, wie viele Ziffern links und rechts vom Dezimaltrennzeichen angezeigt werden. , Wenn der Format Ausdruck nur `#`-Zeichen links neben diesem Symbol enthält. Zahlen, die kleiner als 1 sind, beginnen mit einem Dezimaltrennzeichen. Wenn eine führende Null angezeigt werden soll, die mit Bruchzahlen angezeigt wird, verwenden Sie 0 (null) als ersten Ziffern Platzhalter auf der linken Seite des Dezimal Trennzeichens. In manchen Gebiets Schemas wird ein Komma als Dezimaltrennzeichen verwendet. Welches Zeichen tatsächlich als Dezimaltrennzeichen in der formatierten Ausgabe verwendet wird, hängt von dem Zahlenformat ab, das vom System erkannt wird. Daher sollten Sie den Punkt als Dezimal Platzhalter in den Formaten verwenden, auch wenn Sie sich in einem Gebiets Schema befinden, das ein Komma als Dezimaltrennzeichen verwendet. Die formatierte Zeichenfolge wird im richtigen Format für das Gebiets Schema angezeigt.|  
|(`%`)|Prozent Platzhalter. Multipliziert den Ausdruck mit 100. Das Prozentzeichen (`%`) wird an der Position eingefügt, an der es in der Format Zeichenfolge angezeigt wird.|  
|(`,`)|Tausender Trennzeichen. Das Tausender Trennzeichen trennt Tausende von Hunderten in einer Zahl, die vier oder mehr Stellen links vom Dezimaltrennzeichen enthält. Die Standard mäßige Verwendung des Tausender Trennzeichens wird angegeben, wenn das Format ein Tausender Trennzeichen enthält, das von Ziffern Platzhaltern (`0` oder `#`) umgeben ist.<br /><br /> Ein Tausender Trennzeichen direkt links vom Dezimaltrennzeichen (unabhängig davon, ob ein Dezimaltrennzeichen angegeben ist oder nicht) oder als das äußteste Zeichen in der Zeichenfolge bedeutet "Skalieren Sie die Zahl durch Division durch 1.000, Rundung bei Bedarf". Zahlen, die kleiner als 1.000, aber größer oder gleich 500 sind, werden als `1` angezeigt, und Ziffern, die kleiner als 500 sind, werden als `0` angezeigt. Zwei benachbarte Tausender Trennzeichen an dieser Position Skalieren mit dem Faktor 1 Million und einem zusätzlichen Faktor von 1.000 für jedes weitere Trennzeichen.<br /><br /> Mehrere Trennzeichen in jeder anderen Position als direkt links vom Dezimaltrennzeichen oder der äußersten rechten Position in der Zeichenfolge werden einfach so behandelt, als würden Sie die Verwendung eines Tausender Trennzeichens angeben. In manchen Gebiets Schemas wird ein Zeitraum als Tausender Trennzeichen verwendet. Welches Zeichen tatsächlich als Tausender Trennzeichen in der formatierten Ausgabe verwendet wird, hängt von dem Zahlen Format ab, das vom System erkannt wird. Daher sollten Sie das Komma als Tausender Trennzeichen in ihren Formaten verwenden, auch wenn Sie sich in einem Gebiets Schema befinden, das einen Zeitraum als Tausender Trennzeichen verwendet. Die formatierte Zeichenfolge wird im richtigen Format für das Gebiets Schema angezeigt.<br /><br /> Beachten Sie z. b. die folgenden drei Format Zeichenfolgen:<br /><br /> -   `"#,0."`, bei dem das Tausender Trennzeichen verwendet wird, um die Zahl 100 Millionen als die Zeichenfolge "100 Millionen" zu formatieren.<br />-   `"#0,."`, bei dem die Skalierung mit dem Faktor 1000 verwendet wird, um die Zahl 100 Millionen als die Zeichenfolge "100000" zu formatieren.<br />-   `"#,0,."`, bei dem das Tausender Trennzeichen und die Skalierung um 1000 verwendet werden, um die Zahl 100 Millionen als die Zeichenfolge "100.000" zu formatieren.|  
|(`:`)|Zeit Trennzeichen. In manchen Gebiets Schemas können andere Zeichen verwendet werden, um das Zeit Trennzeichen darzustellen. Das Zeit Trennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden. Welches Zeichen tatsächlich als Zeit Trennzeichen in der formatierten Ausgabe verwendet wird, hängt von den Systemeinstellungen ab.|  
|(`/`)|Datums Trennzeichen. In manchen Gebiets Schemas können andere Zeichen verwendet werden, um das Datums Trennzeichen darzustellen. Das Datums Trennzeichen trennt den Tag, den Monat und das Jahr, wenn Datumswerte formatiert werden. Welches Zeichen tatsächlich als Datums Trennzeichen in der formatierten Ausgabe verwendet wird, hängt von den Systemeinstellungen ab.|  
|(`E-``E+``e-``e+`)|Wissenschaftliches Format. Wenn der Format Ausdruck mindestens einen Ziffern Platzhalter (`0` oder `#`) Links von `E-`, `E+`, `e-` oder `e+` enthält, wird die Zahl im wissenschaftlichen Format angezeigt, und `E` oder `e` wird zwischen der Zahl und dem Exponenten eingefügt. Die Anzahl der Ziffern Platzhalter auf der linken Seite bestimmt die Anzahl der Ziffern im Exponenten. Verwenden Sie `E-` oder `e-`, um ein Minuszeichen neben negativen Exponenten zu platzieren. Verwenden Sie `E+` oder `e+`, um ein Minuszeichen neben negativen Exponenten und ein Pluszeichen neben positiven Exponenten zu platzieren. Sie müssen auch Ziffern Platzhalter rechts neben diesem Symbol einschließen, um die korrekte Formatierung zu erhalten.|  
|`-` `+` `$` ( )|Literalzeichen. Diese Zeichen werden genau so angezeigt, wie Sie in der Format Zeichenfolge eingegeben werden. Um ein anderes Zeichen als eines der aufgelisteten anzuzeigen, stellen Sie ihm einen umgekehrten Schrägstrich (`\`) voran, oder schließen Sie ihn in doppelte Anführungszeichen ("") ein.|  
|(`\`)|Zeigt das nächste Zeichen in der Format Zeichenfolge an. Um ein Zeichen anzuzeigen, das eine besondere Bedeutung als Literalzeichen aufweist, stellen Sie ihm einen umgekehrten Schrägstrich (`\`) voran. Der umgekehrte Schrägstrich wird nicht angezeigt. Die Verwendung eines umgekehrten Schrägstrichs ist identisch mit dem einschließen des nächsten Zeichens in doppelte Anführungszeichen. Um einen umgekehrten Schrägstrich anzuzeigen, verwenden Sie zwei umgekehrte Schrägstriche (`\\`).<br /><br /> Beispiele für Zeichen, die nicht als Literalzeichen angezeigt werden können, sind die Datums-und Zeit Formatierungszeichen (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `w`, `y`, `/`und `:`), die numerischen Formatierungszeichen (`#`, `0`, `%`, `E`, `e`, Komma und Zeitraum) und die Zeichen folgen Formatierungszeichen (`@`, `&``<`, `>`und `!`).`t`|  
|(`"``ABC``"`)|Zeigt die Zeichenfolge innerhalb der doppelten Anführungszeichen ("") an. Wenn Sie eine Zeichenfolge aus dem Code in das Style-Argument einschließen möchten, müssen Sie `Chr(34)` verwenden, um den Text einzuschließen (`34` ist der Zeichencode für ein Anführungszeichen (")).|  
  
### <a name="legacy-code-example"></a>Legacy-Codebeispiel  
 Die folgende Tabelle enthält einige Beispiel-Format Ausdrücke für Zahlen. (Bei diesen Beispielen wird davon ausgegangen, dass die Gebiets Schema Einstellung des Systems auf Englisch-U. s festgelegt ist.) Die erste Spalte enthält die Format Zeichenfolgen für das `Style`-Argument der `Format`-Funktion. die anderen Spalten enthalten die resultierende Ausgabe, wenn die formatierten Daten den Wert aufweisen, der in den Spaltenüberschriften angegeben ist.  
  
|Format (`Style`)|"5" formatiert als|"-5" formatiert als|"0,5" formatiert als|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Vordefinierte Datums-/Uhrzeitformate  
 In der folgenden Tabelle sind die vordefinierten Datums-und Uhrzeit Format Namen aufgeführt. Diese können nach Namen als Format Argument für die `Format`-Funktion verwendet werden:  
  
|Formatname|Beschreibung|  
|-|-|  
|`General Date` oder `G`|Zeigt ein Datum und/oder eine Uhrzeit an. Beispielsweise `3/12/2008 11:07:31 AM`. Die Datumsanzeige wird durch den aktuellen Kultur Wert Ihrer Anwendung bestimmt.|  
|`Long Date`, `Medium Date`oder `D`|Zeigt ein Datum gemäß dem langen Datumsformat Ihrer aktuellen Kultur an. Beispielsweise `Wednesday, March 12, 2008`.|  
|`Short Date` oder `d`|Zeigt ein Datum unter Verwendung des kurzen Datums Formats Ihrer aktuellen Kultur an. Beispielsweise `3/12/2008`.<br /><br /> Das Zeichen "`d`" zeigt den Tag in einem benutzerdefinierten Datumsformat an.|  
|`Long Time`, `Medium Time`oder `T`|Zeigt eine Uhrzeit mit dem langen Zeitformat Ihrer aktuellen Kultur an. umfasst in der Regel Stunden, Minuten und Sekunden. Beispielsweise `11:07:31 AM`.|  
|`Short Time` oder `t`|Zeigt eine Uhrzeit im kurzen Zeitformat Ihrer aktuellen Kultur an. Beispielsweise `11:07 AM`.<br /><br /> Das Zeichen "`t`" zeigt `AM`-oder `PM`-Werte für Gebiets Schemas an, die ein 12-Stunden-Format in einem benutzerdefinierten Zeitformat verwenden.|  
|`f`|Zeigt das lange Datum und die kurze Uhrzeit gemäß dem Format Ihrer aktuellen Kultur an. Beispielsweise `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Zeigt das lange Datum und die lange Uhrzeit gemäß dem Format Ihrer aktuellen Kultur an. Beispielsweise `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Zeigt das kurze Datum und die kurze Uhrzeit gemäß dem Format Ihrer aktuellen Kultur an. Beispielsweise `3/12/2008 11:07 AM`.|  
|`M`, `m`|Zeigt den Monat und den Tag eines Datums an. Beispielsweise `March 12`.<br /><br /> Das Zeichen "`M`" zeigt den Monat in einem benutzerdefinierten Datumsformat an. Das Zeichen "`m`" zeigt die Minuten in einem benutzerdefinierten Zeitformat an.|  
|`R`, `r`|Formatiert das Datum gemäß der <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>-Eigenschaft. Beispielsweise `Wed, 12 Mar 2008 11:07:31 GMT`. Das formatierte Datum passt nicht den Wert des Datums und der Uhrzeit an. Sie müssen den Datums-/Uhrzeitwert in GMT ändern, bevor Sie die `Format`-Funktion aufrufen.|  
|`s`|Formatiert das Datum und die Uhrzeit als sortierbaren Index. Beispielsweise `2008-03-12T11:07:31`.<br /><br /> Das Zeichen "`s`" zeigt die Sekunden in einem benutzerdefinierten Zeitformat an.|  
|`u`|Formatiert das Datum und die Uhrzeit als sortierbaren GMT-Index. Beispielsweise `2008-03-12 11:07:31Z`.|  
|`U`|Formatiert das Datum und die Uhrzeit mit dem langen Datum und der langen Zeit als GMT. Beispielsweise `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formatiert das Datum als Jahr und Monat. Beispielsweise `March, 2008`.<br /><br /> In den Zeichen "`Y`" und "`y`" wird das Jahr in einem benutzerdefinierten Datumsformat angezeigt.|  
  
 Weitere Informationen zu den aktuellen Kultur Informationen der Anwendung finden Sie unter [so wirkt sich die Kultur auf Zeichen folgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)aus.  
  
## <a name="user-defined-datetime-formats"></a>Benutzerdefinierte Datums-/Uhrzeitformate  
 In der folgenden Tabelle sind die Zeichen aufgeführt, mit denen Sie benutzerdefinierte Datums-/Uhrzeitformate erstellen können. Anders als in früheren Versionen von Visual Basic wird bei diesen Formatzeichen die Groß-/Kleinschreibung beachtet.  
  
|Zeichen|Beschreibung|  
|-|-|  
|(`:`)|Zeit Trennzeichen. In manchen Gebiets Schemas können andere Zeichen verwendet werden, um das Zeit Trennzeichen darzustellen. Das Zeit Trennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden. Das eigentliche Zeichen, das als Zeit Trennzeichen in der formatierten Ausgabe verwendet wird, hängt vom aktuellen Kultur Wert Ihrer Anwendung ab.|  
|(`/`)|Datums Trennzeichen. In manchen Gebiets Schemas können andere Zeichen verwendet werden, um das Datums Trennzeichen darzustellen. Das Datums Trennzeichen trennt den Tag, den Monat und das Jahr, wenn Datumswerte formatiert werden. Welches Zeichen tatsächlich als Datums Trennzeichen in der formatierten Ausgabe verwendet wird, hängt von der aktuellen Kultur ihrer Anwendung ab.|  
|(`%`)|Wird verwendet, um anzugeben, dass das folgende Zeichen ohne Berücksichtigung der nachfolgenden Buchstaben als Einzelbuchstaben-Format gelesen werden soll. Wird auch verwendet, um anzugeben, dass ein Format mit einem einzelnen Buchstaben als benutzerdefiniertes Format gelesen wird. Weitere Informationen finden Sie im folgenden.|  
|`d`|Zeigt den Tag als Zahl ohne führende Null an (z. b. `1`). Verwenden Sie `%d`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`dd`|Zeigt den Tag als Zahl mit einer führenden Null an (z. b. `01`).|  
|`ddd`|Zeigt den Tag als Abkürzung an (z. b. `Sun`).|  
|`dddd`|Zeigt den Tag als vollständigen Namen an (z. b. `Sunday`).|  
|`M`|Zeigt den Monat als Zahl ohne führende Null an (z. b. wird der Januar als `1` dargestellt). Verwenden Sie `%M`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`MM`|Zeigt den Monat als Zahl mit einer führenden Null an (z. b. `01/12/01`).|  
|`MMM`|Zeigt den Monat als Abkürzung an (z. b. `Jan`).|  
|`MMMM`|Zeigt den Monat als vollständigen Monatsnamen an (z. b. `January`).|  
|`gg`|Zeigt die Zeichenfolge für den Zeitraum/das Zeichen an (z. b. `A.D.`).|  
|`h`|Zeigt die Stunde als Zahl ohne führende Nullen im 12-Stunden-Format an (z. b. `1:15:15 PM`). Verwenden Sie `%h`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`hh`|Zeigt die Stunde als Zahl mit führenden Nullen im 12-Stunden-Format an (z. b. `01:15:15 PM`).|  
|`H`|Zeigt die Stunde als Zahl ohne führende Nullen im 24-Stunden-Format an (z. b. `1:15:15`). Verwenden Sie `%H`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`HH`|Zeigt die Stunde als Zahl mit führenden Nullen im 24-Stunden-Format an (z. b. `01:15:15`).|  
|`m`|Zeigt die Minute als Zahl ohne führende Nullen an (z. b. `12:1:15`). Verwenden Sie `%m`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`mm`|Zeigt die Minute als Zahl mit führenden Nullen an (z. b. `12:01:15`).|  
|`s`|Zeigt die Sekunde als Zahl ohne führende Nullen an (z. b. `12:15:5`). Verwenden Sie `%s`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`ss`|Zeigt die Sekunde als Zahl mit führenden Nullen an (z. b. `12:15:05`).|  
|`f`|Zeigt Sekundenbruchteile an. Beispielsweise `ff` die Hundertstel Sekunden anzeigt, während `ffff` zehntausendstel Sekunden anzeigt. Sie können bis zu sieben `f`-Symbole in Ihrem benutzerdefinierten Format verwenden. Verwenden Sie `%f`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`t`|Verwendet das 12-Stunden-Format und zeigt einen Großbuchstaben `A` für jede Stunde vor 12 Uhr mittags an. zeigt für jede Stunde zwischen 12 Uhr mittags und 11:59 Uhr einen Großbuchstaben `P` an. Verwenden Sie `%t`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`tt`|Für Gebiets Schemas, die ein 12-Stunden-Format verwenden, wird ein Großbuchstabe `AM` mit einer beliebigen Stunde vor 12 Uhr mittags angezeigt. zeigt einen Großbuchstaben `PM` mit einer Stunde zwischen 12 Uhr mittags und 11:59 Uhr<br /><br /> Für Gebiets Schemas, die das 24-Stunden-Format verwenden, wird nichts angezeigt.|  
|`y`|Zeigt die Jahreszahl (0-9) ohne führende Nullen an. Verwenden Sie `%y`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`yy`|Zeigt das Jahr im zweistelligen numerischen Format mit einer führenden Null an, falls zutreffend.|  
|`yyy`|Zeigt das Jahr in einem vierstelligen numerischen Format an.|  
|`yyyy`|Zeigt das Jahr in einem vierstelligen numerischen Format an.|  
|`z`|Zeigt den Zeit Zonen Offset ohne führende Null an (z. b. `-8`). Verwenden Sie `%z`, wenn dies das einzige Zeichen im benutzerdefinierten numerischen Format ist.|  
|`zz`|Zeigt den Zeit Zonen Offset mit einer führenden Null an (z. b. `-08`).|  
|`zzz`|Zeigt den vollständigen Zeit Zonen Offset an (z. b. `-08:00`).|  
  
### <a name="legacy-code-example"></a>Legacy-Codebeispiel  
 Im folgenden finden Sie Beispiele für benutzerdefinierte Datums-und Uhrzeit Formate für `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Anzeige|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die minimale Zeitauflösung für ein Gerät wird vom Hersteller des Geräts bestimmt. Wenn die Zeitauflösung für das Gerät grob genug ist, gibt das Formatzeichen "`f`" 0 zurück, wenn es auf dem Gerät ausgeführt wird.  
  
   
  
## Examples  
 Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der `Format`-Funktion zur Formatierung von Werten mit `String`-Formaten und benutzerdefinierten Formaten. Die tatsächlich von Ihrem System ausgegebene Formatierung von Datumstrennzeichen (`/`), Trennzeichen für Zeitangaben (`:`) und AM/PM-Indikatoren (`t` und `tt`) richtet sich nach den Gebietsschemaeinstellungen des Codes. Wenn Datums- und Zeitangaben in der Entwicklungsumgebung angezeigt werden, werden das 24-Stunden-Zeitformat und das kurze Datumsformat des für den Code ausgewählten Gebietsschemas verwendet.  
  
> [!NOTE]
>  Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigen die AM/PM-Indikatoren (`t` und `tt`) nichts an.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
        <param name="NumDigitsAfterDecimal">Dies ist optional. Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob bei Bruchwerten eine führende Null angezeigt wird. Weitere Informationen finden Sie in den Hinweisen zu Werten.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob negative Werte in Klammern gesetzt werden. Weitere Informationen finden Sie in den Hinweisen zu Werten.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob Zahlen mithilfe des Gruppentrennzeichens gruppiert werden, das in den regionalen Einstellungen des Computers definiert ist. Weitere Informationen finden Sie in den Hinweisen zu Werten.</param>
        <summary>Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</summary>
        <returns>Ein mit dem in der Systemsteuerung festgelegten Währungssymbol als Währungsbetrag formatierter Ausdruck.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein oder mehrere optionale Argumente ausgelassen werden, werden stattdessen die entsprechenden Werte für die regionale Einstellungen des Computers verwendet.  
  
 Die Position des Währungs Symbols in Relation zum Währungswert wird durch die regionalen Einstellungen des Systems bestimmt.  
  
> [!NOTE]
>  Alle Einstellungs Informationen stammen aus dem Gebiets Schema der Anwendung. Standardmäßig handelt es sich dabei um das in der Systemsteuerung festgelegte Gebiets Schema. Sie kann jedoch Programm gesteuert mithilfe der .NET Framework geändert werden, mit Ausnahme der führenden Null, die von der Registerkarte "`Number`" stammt.  
  
 Die Argumente "`IncludeLeadingDigit`", "`UseParensForNegativeNumbers`" und "`GroupDigits`" akzeptieren die folgenden Werte für die "Enumeration".  
  
|Wert|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Die regionalen Einstellungen des Computers|  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `FormatCurrency`-Funktion.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Anzahl der Stellen nach dem Dezimalzeichen ist größer als 99.</exception>
        <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende <see langword="Date" />-Ausdruck.</param>
        <param name="NamedFormat">Dies ist optional. Numerischer Wert, der das verwendete Datum-/Zeitformat angibt. Wird der Wert nicht angegeben, so wird <see langword="DateFormat.GeneralDate" /> verwendet.</param>
        <summary>Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</summary>
        <returns>Ein Zeichenfolgenausdruck, der einen Datums-/Zeitwert darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `Date`-Datentyp enthält immer Datums-und Uhrzeit Informationen. Für den Zweck der Typkonvertierung berücksichtigt Visual Basic 1/1/1 (1. Januar des Jahres 1) als neutralen Wert für das Datum und 00:00:00 (Mitternacht) als neutralen Wert für die Zeit. Wenn Sie einen `Date`-Wert als Datums-/Uhrzeit-Zeichenfolge formatieren, enthält `FormatDateTime` keine neutralen Werte in die resultierende Zeichenfolge. Wenn Sie z. b. #1/1/0001 9:30:00 # in eine Zeichenfolge konvertieren, lautet das Ergebnis "9:30:00 am"; die Datumsinformationen werden unterdrückt. Die Datumsinformationen sind jedoch weiterhin im ursprünglichen `Date`-Wert vorhanden und können mit Funktionen wie `DatePart` wieder hergestellt werden.  
  
> [!NOTE]
>  Wenn Sie das Argument "`Expression`" als `String`-Literale übergeben, interpretiert `FormatDateTime` es gemäß der Einstellung "<xref:System.Globalization.CultureInfo.CurrentCulture%2A>" Ihrer Anwendung. Wenn Sie es jedoch als `Date`-Literale übergeben, verwenden Sie das Format #mm/dd/yyyy #, da `FormatDateTime` immer ein `Date`-Literale gemäß der Kultur Englisch (USA) interpretiert. Dies ist erforderlich, da, wenn eine Anwendung mit `Date`-literalen aus einer Kultur entwickelt und codiert wird, dann jedoch auf einer Plattform mit einer anderen Kultur ausgeführt wird, die `Date`-Literale falsch analysiert werden können.  
  
 Das `NamedFormat`-Argument weist die folgenden Einstellungen auf.  
  
|Konstante|Beschreibung|  
|-|-|  
|`DateFormat.GeneralDate`|Zeigt ein Datum und/oder eine Uhrzeit an. Zeigt einen Datums Teil als kurzes Datum an. Wenn ein Zeit Teil vorhanden ist, zeigen Sie ihn als lange Zeit an. Wenn vorhanden, werden beide Teile angezeigt.|  
|`DateFormat.LongDate`|Zeigt ein Datum mit dem langen Datumsformat an, das in den regionalen Einstellungen des Computers angegeben wurde.|  
|`DateFormat.ShortDate`|Zeigt ein Datum unter Verwendung des kurzen Datums Formats an, das in den regionalen Einstellungen des Computers angegeben wurde.|  
|`DateFormat.LongTime`|Zeigen Sie eine Uhrzeit mit dem Zeitformat an, das in den regionalen Einstellungen des Computers angegeben wurde.|  
|`DateFormat.ShortTime`|Zeigt eine Uhrzeit mit dem 24-Stunden-Format (hh: mm) an.|  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `FormatDateTime`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Einstellung <paramref name="NamedFormat" /> ist nicht gültig.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
        <param name="NumDigitsAfterDecimal">Dies ist optional. Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</param>
        <param name="IncludeLeadingDigit">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Bruchwerten eine führende 0 angezeigt wird. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="GroupDigits">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt einen als Zahl formatierten Ausdruck zurück.</summary>
        <returns>Ein als Zahl formatierter Ausdruck.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mindestens ein optionales Argument weggelassen wird, werden die Werte für ausgelassene Argumente von den Gebiets Schema Einstellungen bereitgestellt.  
  
> [!NOTE]
>  Alle Einstellungs Informationen stammen aus dem Gebiets Schema der Anwendung. Standardmäßig handelt es sich dabei um das in der Systemsteuerung festgelegte Gebiets Schema. Sie kann jedoch mithilfe der .NET Framework Programm gesteuert geändert werden.  
  
 Die Argumente "`IncludeLeadingDigit`", "`UseParensForNegativeNumbers`" und "`GroupDigits`" haben die folgenden Einstellungen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Die regionalen Einstellungen des Computers|  
  
   
  
## Examples  
 In diesem Beispiel wird die `FormatNumber`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numerischer Wert, der angibt, wie viele Stellen rechts neben dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1, was darauf hinweist, dass die Einstellungen des Gebietsschemas verwendet werden.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Dezimalzahlen eine führende Null angezeigt werden soll. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="UseParensForNegativeNumbers">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="GroupDigits">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</summary>
        <returns>Ein als Prozentangabe (d. h. multipliziert mit 100) und mit einem abschließenden %-Zeichen formatierter Ausdruck.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein oder mehrere optionale Argumente ausgelassen werden, werden die Werte für ausgelassene Argumente von den Gebiets Schema Einstellungen bereitgestellt.  
  
> [!NOTE]
>  Alle Einstellungs Informationen stammen aus dem Gebiets Schema der Anwendung. Standardmäßig handelt es sich dabei um das in der Systemsteuerung festgelegte Gebiets Schema. Sie kann jedoch mithilfe der .NET Framework Programm gesteuert geändert werden.  
  
 Die Argumente "`IncludeLeadingDigit`", "`UseParensForNegativeNumbers`" und "`GroupDigits`" haben die folgenden Einstellungen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Die regionalen Einstellungen des Computers|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der Funktion "`FormatPercent`".  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <param name="Index">Erforderlich. <see langword="Integer" />-Ausdruck. Der (1-basierte) Index des Zeichens in <paramref name="str" />, der zurückgegeben werden soll.</param>
        <summary>Gibt einen <see langword="Char" />-Wert zurück, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</summary>
        <returns><see langword="Char" />-Wert, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Index` kleiner als 1 oder größer als der Index des letzten Zeichens in `str` ist, wird eine `ArgumentException` ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird gezeigt, wie die `GetChar`-Funktion verwendet wird, um ein Zeichen aus einem angegebenen Index in einem `String` zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> ist <see langword="Nothing" />, <paramref name="Index" /> &lt; 1 oder <paramref name="Index" /> ist größer als der Index des letzten Zeichens von <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.  Die Ganzzahl ist ein auf Eins basierter Index, wenn eine Übereinstimmung gefunden wird.  Wenn keine Übereinstimmung gefunden wird, gibt die Funktion 0 (null) zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Erforderlich. <see langword="String" />-Ausdruck, der durchsucht wird.</param>
        <param name="String2">Erforderlich. Gesuchter <see langword="String" />-Ausdruck.</param>
        <param name="Compare">Optional. Gibt den Typ des Zeichenfolgenvergleichs an. Wenn <paramref name="Compare" /> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</param>
        <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> Rückgabewert von InStr 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</term>
              <description> Die Startposition für die Suche, mit Standard an der ersten Zeichenposition.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> wird nicht gefunden. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> wurde in <paramref name="String1" /> gefunden.</term>
              <description> Position, an der die gefundene Zeichenfolge beginnt 
 </description>
            </item>
            <item>
              <term>
              </term>
              <description>
              </description>
            </item>
          </list>
.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel wird die `InStr`-Funktion verwendet, wenn Zeichen folgen verarbeitet werden.  
  
> [!NOTE]
>  Die `InStrB`-Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstelle einer Zeichenposition zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic 2005-Zeichen folgen sind in Unicode, und `InStrB` wird nicht mehr unterstützt.  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Wert|Beschreibung|  
|-|-|-|  
|`Binary`|0|Führt einen binären Vergleich aus.|  
|`Text`|1|Führt einen Textvergleich aus.|  
  
   
  
## Examples  
 In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare-Anweisung</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (StartPos, String1, String2, Compare)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Dies ist optional. Numerischer Ausdruck, der die Anfangsposition für jede Suche festlegt. Wenn dieser ausgelassen wird, beginnt die Suche an der ersten Zeichenposition. Der Anfangsindex ist 1-basiert.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">Erforderlich. <see langword="String" />-Ausdruck, der durchsucht wird.</param>
        <param name="String2">Erforderlich. Gesuchter <see langword="String" />-Ausdruck.</param>
        <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs an. Wenn <paramref name="Compare" /> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</param>
        <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> Rückgabewert von InStr 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> wird nicht gefunden. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> wurde in <paramref name="String1" /> gefunden.</term>
              <description> Position, an der die gefundene Zeichenfolge beginnt 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; Länge von <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list>
.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel wird die `InStr`-Funktion verwendet, wenn Zeichen folgen verarbeitet werden.  
  
> [!NOTE]
>  Die `InStrB`-Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstelle einer Zeichenposition zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic 2005-Zeichen folgen sind in Unicode, und `InStrB` wird nicht mehr unterstützt.  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Wert|Beschreibung|  
|-|-|-|  
|`Binary`|0|Führt einen binären Vergleich aus.|  
|`Text`|1|Führt einen Textvergleich aus.|  
  
   
  
## Examples  
 In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare-Anweisung</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Erforderlich. Der gesuchte Zeichenfolgenausdruck.</param>
        <param name="StringMatch">Erforderlich. Der gesuchte Zeichenfolgenausdruck.</param>
        <param name="Start">Optional. Numerischer Ausdruck, der die 1-basierte Anfangsposition für jede Suche festlegt, beginnend auf der linken Seite der Zeichenfolge. Wenn <paramref name="Start" /> weggelassen wird, wird –1 verwendet, d. h., dass die Suche an der letzten Zeichenposition beginnt. Die Suche wird dann von rechts nach links fortgesetzt.</param>
        <param name="Compare">Dies ist optional. Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird. Wenn dieser ausgelassen wird, wird ein binärer Vergleich durchgeführt. Werte finden Sie im Abschnitt "Einstellungen".</param>
        <summary>Gibt die Position des ersten Vorkommens einer Zeichenfolge innerhalb einer anderen Zeichenfolge von rechts nach links gesehen zurück.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStrRev gibt Folgendes zurück 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> ist eine Zeichenfolge mit der Länge 0 (null) 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> ist eine Zeichenfolge mit der Länge 0 (null) 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> wird nicht gefunden. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> wurde in <paramref name="StringCheck" /> gefunden.</term>
              <description> Position, an der die erste Übereinstimmung gefunden wird, beginnend mit der rechten Seite der Zeichenfolge.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> ist größer als die Länge von <paramref name="StringMatch" />.</term>
              <description> 0 
 </description>
            </item>
          </list>
.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass die Syntax für die `InStrRev`-Funktion nicht mit der Syntax für die `InStr`-Funktion identisch ist.  
  
 Das Argument "`Compare`" kann die folgenden Werte aufweisen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich durch.|  
|`Text`|Führt einen Textvergleich durch.|  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `InStrRev`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 oder <paramref name="Start" /> &lt; –1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Erforderlich. Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</param>
        <param name="Delimiter">Optional. Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden. Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet. Wenn <paramref name="Delimiter" /> eine leere Zeichenfolge ("") oder <see langword="Nothing" /> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</param>
        <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
        <returns>Eine Zeichenfolge, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine Parität zwischen den Funktionen `Join` und `Split`. Die `Join`-Funktion nimmt ein Array von Zeichen folgen an und fügt Sie mithilfe einer Trenn Zeichenfolge ein, um eine einzelne Zeichenfolge zurückzugeben. Die `Split`-Funktion nimmt eine Zeichenfolge an und trennt Sie am Trennzeichen, um ein Array von Zeichen folgen zurückzugeben. Ein wichtiger Unterschied besteht jedoch darin, dass `Join` Zeichen folgen mit einer beliebigen Trenn Zeichenfolge verketten kann, `Split` nur Zeichen folgen mit einem einzelnen Zeichen Trennzeichen trennen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die `Join`-Funktion verwendet wird, um eine Liste aus mehreren Zeichen folgen zu erstellen.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> ist nicht eindimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Erforderlich. Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</param>
        <param name="Delimiter">Optional. Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden. Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet. Wenn <paramref name="Delimiter" /> eine leere Zeichenfolge ("") oder <see langword="Nothing" /> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</param>
        <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
        <returns>Eine Zeichenfolge, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine Parität zwischen den Funktionen `Join` und `Split`. Die `Join`-Funktion nimmt ein Array von Zeichen folgen an und fügt Sie mithilfe einer Trenn Zeichenfolge ein, um eine einzelne Zeichenfolge zurückzugeben. Die `Split`-Funktion nimmt eine Zeichenfolge an und trennt Sie am Trennzeichen, um ein Array von Zeichen folgen zurückzugeben. Ein wichtiger Unterschied besteht jedoch darin, dass `Join` Zeichen folgen mit einer beliebigen Trenn Zeichenfolge verketten kann, `Split` nur Zeichen folgen mit einem einzelnen Zeichen Trennzeichen trennen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die `Join`-Funktion verwendet wird, um eine Liste aus mehreren Zeichen folgen zu erstellen.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> ist nicht eindimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char LCase(char Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
        <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das in Kleinbuchstaben konvertiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Großbuchstaben werden in Kleinbuchstaben konvertiert. alle Kleinbuchstaben und Zeichen ohne Buchstaben bleiben unverändert.  
  
 Diese Funktion verwendet die Kultur Informationen der Anwendung bei der Bearbeitung der Zeichenfolge, sodass die Fall Änderungen für das Gebiets Schema geeignet sind, in dem die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung Sicherheitsentscheidungen auf Grundlage des Ergebnisses eines Vergleichs oder einer Änderung der Fall Änderung trifft, sollte der Vorgang die <xref:System.String.Compare%2A?displayProperty=nameWithType>-Methode verwenden und <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für das `comparisonType`-Argument übergeben. Weitere Informationen finden Sie unter [so wirkt sich die Kultur auf Zeichen folgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)aus.  
  
   
  
## Examples  
 In diesem Beispiel wird die `LCase`-Funktion verwendet, um eine klein geschriebene Version einer Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LCase(string Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
        <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das in Kleinbuchstaben konvertiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Großbuchstaben werden in Kleinbuchstaben konvertiert. alle Kleinbuchstaben und Zeichen ohne Buchstaben bleiben unverändert.  
  
 Diese Funktion verwendet die Kultur Informationen der Anwendung bei der Bearbeitung der Zeichenfolge, sodass die Fall Änderungen für das Gebiets Schema geeignet sind, in dem die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung Sicherheitsentscheidungen auf Grundlage des Ergebnisses eines Vergleichs oder einer Änderung der Fall Änderung trifft, sollte der Vorgang die <xref:System.String.Compare%2A?displayProperty=nameWithType>-Methode verwenden und <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für das `comparisonType`-Argument übergeben. Weitere Informationen finden Sie unter [so wirkt sich die Kultur auf Zeichen folgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)aus.  
  
   
  
## Examples  
 In diesem Beispiel wird die `LCase`-Funktion verwendet, um eine klein geschriebene Version einer Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Left(string str, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />-Ausdruck, von dem die äußersten linken Zeichen zurückgegeben werden.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />-Ausdruck. Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen. Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben. Wenn der Wert größer oder gleich der Anzahl von Zeichen in <paramref name="str" /> ist, wird die ganze Zeichenfolge zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</summary>
        <returns>Eine Zeichenfolge, die eine angegebene Anzahl Zeichen von der linken Seite einer Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die `Len`-Funktion, um die Anzahl der Zeichen in `str` zu ermitteln. Wenn Sie in einer Windows Forms Anwendung oder einer anderen Klasse mit einer `Left`-Eigenschaft verwendet wird, müssen Sie die Funktion vollständig mit `Microsoft.VisualBasic.Left` qualifizieren.  
  
> [!NOTE]
>  Die `LeftB`-Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LeftB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Left`-Funktion verwendet wird, um eine Teil Zeichenfolge einer angegebenen `String` zurückzugeben. In einer Klasse, die über eine `Left`-Eigenschaft verfügt, kann es erforderlich sein, die `Left`-Funktion vollständig zu qualifizieren.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(bool Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(char Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float64 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int16 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int32 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int64 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(object Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int8 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float32 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(string Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
        <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
        <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei benutzerdefinierten Typen und `Object`-Variablen gibt die `Len`-Funktion die Größe zurück, wie Sie von der `FilePut`-Funktion in die Datei geschrieben wird. Wenn ein `Object` einen `String` enthält, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` einen anderen Typ enthält, wird die Größe des Objekts zurückgegeben, da es von der `FilePut`-Funktion in die Datei geschrieben wird.  
  
 Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in-Objekten angewendet werden, um die Größe der Zeichenfolge in Bytes anzugeben, wenn Sie auf den Datenträger geschrieben wird. Die Funktion "`Len`" verwendet das Attribut "`VBFixedString`", falls verfügbar, beim Bestimmen der Größe von `Object`-Variablen.  
  
> [!NOTE]
>  Die `Len`-Funktion kann möglicherweise nicht die tatsächliche Anzahl der erforderlichen Speicher Bytes ermitteln, wenn Sie mit Zeichen folgen variabler Länge in benutzerdefinierten Datentypen verwendet wird.  
  
> [!NOTE]
>  Die `LenB`-Funktion in früheren Versionen von Visual Basic gibt die Anzahl von Bytes in einer Zeichenfolge anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwickler Hinweise zu intelligenten Geräten  
 Die `Len`-Funktion akzeptiert nur `String`-und `Object`-Variablen als Parameter. Wenn ein `Object` einen `String` enthält, wird die Länge des `String` zurückgegeben. Wenn ein Parameter ein NULL-`Object`-Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` einen anderen Typ enthält, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. <see langword="String" />-Ausdruck. Name der Zeichenfolgenvariablen.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />-Ausdruck. Länge der zurückgegebenen Zeichenfolge.</param>
        <summary>Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</summary>
        <returns>Eine links ausgerichtete Zeichenfolge, die die an die angegebene Länge angepasste angegebene Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird die zurückgegebene Zeichenfolge auf die angegebene Länge verkürzt. Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden am rechten Ende der zurückgegebenen Zeichenfolge Leerzeichen hinzugefügt, um die entsprechende Länge zu erhalten.  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `LSet`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Effiziente Verwendung von Datentypen</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LTrim(string str) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</summary>
        <returns>Eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Funktionen "`LTrim`", "`RTrim`" und "`Trim`" entfernen Leerzeichen von den Enden von Zeichen folgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die Zeichen aus einer festgelegten Zeichenfolge enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />-Ausdruck, aus dem Zeichen zurückgegeben werden.</param>
        <param name="Start">Erforderlich. <see langword="Integer" />-Ausdruck. Anfangsposition der zurückzugebenden Zeichen. Wenn <paramref name="Start" /> größer als die Anzahl der Zeichen in <paramref name="str" /> ist, gibt die <see langword="Mid" />-Funktion eine Zeichenfolge ("") der Länge 0 zurück. <paramref name="Start" /> ist 1-basiert.</param>
        <summary>Gibt eine Zeichenfolge zurück, die alle Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</summary>
        <returns>Eine Zeichenfolge, die aus allen Zeichen beginnend bei der angegebenen Position in der Zeichenfolge besteht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die `Len`-Funktion, um die Anzahl der Zeichen in `str` zu ermitteln.  
  
 Visual Basic verfügt über eine `Mid`-Funktion und eine `Mid`-Anweisung. Diese Elemente funktionieren beide mit einer angegebenen Anzahl von Zeichen in einer Zeichenfolge, aber die `Mid`-Funktion gibt die Zeichen zurück, während die Zeichen `Mid`-Anweisung die Zeichen ersetzt. Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Die `MidB`-Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic Zeichenfolgen sind in Unicode, und `MidB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 In der letzten Zeile dieses Beispiels wird diese Überladung der `Mid`-Funktion verwendet, um das fünfte und nachfolgende Zeichen aus einer Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 oder <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid-Anweisung</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />-Ausdruck, aus dem Zeichen zurückgegeben werden.</param>
        <param name="Start">Erforderlich. <see langword="Integer" />-Ausdruck. Anfangsposition der zurückzugebenden Zeichen. Wenn <paramref name="Start" /> größer als die Anzahl der Zeichen in <paramref name="str" /> ist, gibt die <see langword="Mid" />-Funktion eine Zeichenfolge ("") der Länge 0 zurück. <paramref name="Start" /> ist 1-basiert.</param>
        <param name="Length">Dies ist optional. <see langword="Integer" />-Ausdruck. Die Anzahl der zurückzugebenden Zeichen. Wenn der Ausdruck ausgelassen wird oder weniger als <paramref name="Length" /> Zeichen im Text enthalten sind (einschließlich des Zeichens an Position <paramref name="Start" />), werden alle Zeichen von der Anfangs- bis zur Endposition der Zeichenfolge zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge zurück, die eine angegebene Anzahl von Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</summary>
        <returns>Eine Zeichenfolge, die aus der angegebenen Anzahl von Zeichen besteht, beginnend bei der angegebenen Position in der Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die `Len`-Funktion, um die Anzahl der Zeichen in `str` zu ermitteln.  
  
 Visual Basic verfügt über eine `Mid`-Funktion und eine `Mid`-Anweisung. Diese Elemente funktionieren beide mit einer angegebenen Anzahl von Zeichen in einer Zeichenfolge, aber die `Mid`-Funktion gibt die Zeichen zurück, während die Zeichen `Mid`-Anweisung die Zeichen ersetzt. Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Die `MidB`-Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle Visual Basic Zeichenfolgen sind in Unicode, und `MidB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Die ersten beiden Funktionen `Mid` in diesem Beispiel geben die angegebene Anzahl von Zeichen aus einer Zeichenfolge zurück, beginnend bei den angegebenen Positionen. (Die Last-Funktion veranschaulicht die <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29>-Überladung und gibt nur den Anfangspunkt für die Zeichen folgen Extraktion an.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 oder <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid-Anweisung</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Zeichenfolgenausdruck mit der zu ersetzenden untergeordneten Zeichenfolge.</param>
        <param name="Find">Erforderlich. Die gesuchte untergeordnete Zeichenfolge.</param>
        <param name="Replacement">Erforderlich. Untergeordnete Ersetzungszeichenfolge.</param>
        <param name="Start">Dies ist optional. Position in <paramref name="Expression" />, die eine für die Ersetzung verwendete Teilzeichenfolge startet. Der Rückgabewert von <see langword="Replace" /> ist eine Zeichenfolge, die bei <paramref name="Start" /> beginnt, mit entsprechenden Ersetzungen. Wenn der Wert nicht angegeben wird, wird 1 angenommen.</param>
        <param name="Count">Dies ist optional. Die Anzahl der durchzuführenden Ersetzungen für untergeordnete Zeichenfolgen. Wenn der Wert nicht angegeben wird, ist der Standardwert –1, d. h., dass alle möglichen Ersetzungen vorgenommen werden.</param>
        <param name="Compare">Dies ist optional. Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird. Werte finden Sie im Abschnitt "Einstellungen".</param>
        <summary>Gibt eine Zeichenfolge zurück, in der eine bestimmte untergeordnete Zeichenfolge so oft wie angegeben durch eine andere Zeichenfolge ersetzt wurde.</summary>
        <returns><see langword="Replace" /> gibt die folgenden Werte zurück.  
  
 <list type="table"><item><term> If 
 </term><description> Replace gibt Folgendes zurück 
 </description></item><item><term><paramref name="Find" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</term><description> Kopie von <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> ist eine Zeichenfolge mit der Länge 0 (null) 
 </term><description> Kopie von <paramref name="Expression" /> ohne Vorkommen von <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />, oder <paramref name="Start" /> ist größer als die Länge von <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> ist 0 
 </term><description> Kopie von <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert der `Replace`-Funktion ist eine Zeichenfolge, die an der durch `Start` angegebenen Position beginnt und am Ende der `Expression`-Zeichenfolge endet, wobei die Ersetzungen gemäß den Werten `Find` und `Replace` festgelegt wurden.  
  
 Das Argument "`Compare`" kann die folgenden Werte aufweisen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich aus.|  
|`Text`|Führt einen Textvergleich aus.|  
  
   
  
## Examples  
 In diesem Beispiel wird die `Replace`-Funktion veranschaulicht.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; –1 oder <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Right(string str, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />-Ausdruck, von dem die äußersten rechten Zeichen zurückgegeben werden.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />. Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen. Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben. Wenn der Wert größer oder gleich der Anzahl von Zeichen in <paramref name="str" /> ist, wird die ganze Zeichenfolge zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</summary>
        <returns>Eine Zeichenfolge mit einer angegebenen Anzahl von Zeichen von der rechten Seite einer Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die `Len`-Funktion, um die Anzahl der Zeichen in `str` zu ermitteln. Wenn Sie in einem Windows Form oder einer anderen Klasse verwendet werden, die über eine `Right`-Eigenschaft verfügt, müssen Sie die Funktion vollständig mit `Microsoft.VisualBasic.Strings.Right` qualifizieren.  
  
> [!NOTE]
>  Die `RightB`-Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstelle von Zeichen zurück. Es wird hauptsächlich zum Umrechnen von Zeichen folgen in DBCS-Anwendungen (Double-Byte Character Set) verwendet. Alle aktuellen Visual Basic Zeichenfolgen sind in Unicode, und `RightB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie die `Right`-Funktion verwendet wird, um eine Teil Zeichenfolge einer angegebenen `String` zurückzugeben. In einer Klasse, die über eine `Right`-Eigenschaft verfügt, kann es erforderlich sein, die `Right`-Funktion vollständig zu qualifizieren.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. <see langword="String" />-Ausdruck. Name der Zeichenfolgenvariablen.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />-Ausdruck. Länge der zurückgegebenen Zeichenfolge.</param>
        <summary>Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</summary>
        <returns>Eine rechts ausgerichtete Zeichenfolge, die die an die angegebene Länge angepasste angegebene Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Source` länger als `Length` ist, platziert `RSet` nur die äußersten linken Zeichen bis zur Länge von `Source` in der zurückgegebenen Zeichenfolge. Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen am linken Ende der Zeichenfolge hinzugefügt, um die entsprechende Länge zu erhalten. Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird Sie auf die angegebene Länge verkürzt.  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung der `RSet`-Funktion veranschaulicht.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Effiziente Verwendung von Datentypen</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RTrim(string str) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</summary>
        <returns>Eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Funktionen "`LTrim`", "`RTrim`" und "`Trim`" entfernen Leerzeichen von den Enden von Zeichen folgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Space(int32 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Anzahl der gewünschten Leerzeichen in der Zeichenfolge.</param>
        <summary>Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</summary>
        <returns>Eine Zeichenfolge mit der angegebenen Anzahl Leerzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Funktion "`Space`" ist nützlich für das Formatieren der Ausgabe und das Löschen von Daten in Zeichen folgen fester Länge.  
  
   
  
## Examples  
 In diesem Beispiel wird die Funktion `Space` verwendet, um eine Zeichenfolge zurückzugeben, die aus einer angegebenen Anzahl von Leerzeichen besteht.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="String" />-Ausdruck mit untergeordneten Zeichenfolgen und Trennzeichen.</param>
        <param name="Delimiter">Optional. Jedes einzelne Zeichen, mit dem Grenzen von untergeordneten Zeichenfolgen gekennzeichnet werden. Wenn <paramref name="Delimiter" /> nicht angegeben wird, wird als Trennzeichen das Leerzeichen (" ") angenommen.</param>
        <param name="Limit">Dies ist optional. Die maximale Anzahl von untergeordneten Zeichenfolgen, in die die Eingabezeichenfolge geteilt werden soll. Der Standardwert –1 gibt an, dass die Eingabezeichenfolge an jedem Vorkommen der <paramref name="Delimiter" />-Zeichenfolge getrennt werden soll.</param>
        <param name="Compare">Optional. Numerischer Wert, der den Vergleich angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt ein nullbasiertes, eindimensionales Array zurück, das eine angegebene Anzahl von Teilzeichenfolgen enthält.</summary>
        <returns><see langword="String" /> -Array. Wenn <paramref name="Expression" /> eine Zeichenfolge ("") der Länge 0 (null) ist, gibt <see langword="Split" /> ein Array mit einem Element zurück, das eine Zeichenfolge der Länge 0 (null) enthält. Wenn <paramref name="Delimiter" /> eine Zeichenfolge der Länge 0 (null) ist oder nicht in <paramref name="Expression" /> vorkommt, gibt <see langword="Split" /> ein Array mit einem Element zurück, das die gesamte <paramref name="Expression" />-Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig oder wenn `Limit` gleich-1 ist, wird die Eingabe Zeichenfolge von der `Split`-Funktion bei jedem Vorkommen der Trenn Zeichenfolge aufgeteilt und die Teil Zeichenfolgen in einem Array zurückgegeben. Wenn der `Limit`-Parameter größer als 0 (null) ist, teilt die `Split`-Funktion die Zeichenfolge bei den ersten `Limit`-1-Vorkommen des Trenn Zeichens auf und gibt ein Array mit den resultierenden Teil Zeichenfolgen zurück. `Split("a:b:c", ":")` gibt z. b. das Array `{"a", "b", "c"}`zurück, während `Split("a:b:c", ":", 2)` das Array `{"a", "b:c"}`zurückgibt.  
  
 Wenn die `Split`-Funktion zwei Trennzeichen in einer Zeile oder ein Trennzeichen am Anfang oder Ende der Zeichenfolge findet, interpretiert Sie diese als eine leere Zeichenfolge (""). `Split("xx", "x")` gibt z. b. das Array zurück, das drei leere Zeichen folgen enthält: eine zwischen dem Anfang der Zeichenfolge und dem ersten "x", eine aus den beiden "x"-Zeichen folgen und eine zwischen dem letzten "x" und dem Ende der Zeichenfolge.  
  
 Diese Tabelle veranschaulicht, wie die optionalen Parameter "`Delimiter`", "`Limit`" und "`Compare`" das Verhalten der `Split`-Funktion ändern können.  
  
|Split-Befehl|Rückgabewert|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice und Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"Person", "example.com"}|  
  
 Das Argument "`Compare`" kann die folgenden Werte aufweisen.  
  
|Konstante|Beschreibung|Wert|  
|-|-|-|  
|`CompareMethod.Binary`|Führt einen binären Vergleich aus.|0|  
|`CompareMethod.Text`|Führt einen Textvergleich aus.|1|  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge in ihren Leerzeichen aufgeteilt wird.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie Zeichen folgen mit mehreren Trennzeichen in einer Zeile aufgeteilt und leere Zeichen folgen herausgefiltert werden.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <param name="String2">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs an. Wenn <paramref name="Compare" /> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</param>
        <summary>Gibt abhängig vom Ergebnis eines Zeichenfolgenvergleichs den Wert -1, 0 oder 1 zurück.</summary>
        <returns>Die <see langword="StrComp" />-Funktion besitzt die folgenden Rückgabewerte.  
  
 <list type="table"><item><term> If 
 </term><description> Rückgabewert von StrComp 
 </description></item><item><term><paramref name="String1" /> Sortierung vor <paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" /> ist gleich <paramref name="String2" />.</term><description> 0 
 </description></item><item><term><paramref name="String1" /> Sortierung nach <paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichen folgen werden mit alphanumerischen Sortier Werten verglichen, beginnend mit dem ersten Zeichen. Weitere Informationen zu binären vergleichen, Text vergleichen und der Sortierreihenfolge finden Sie unter [Option Compare-Anweisung](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich basierend auf einer Sortierreihenfolge aus, die von den internen binären Darstellungen der Zeichen abgeleitet wurde.|  
|`Text`|Führt einen Textvergleich aus, der auf einer Text Sortierreihenfolge ohne Beachtung der Groß-/Kleinschreibung basiert, die vom `LocaleID`-Wert Ihres Systems|  
  
   
  
## Examples  
 In diesem Beispiel wird die `StrComp`-Funktion verwendet, um die Ergebnisse eines Zeichen folgen Vergleichs zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="Compare" />-Wert ist ungültig.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Der zu konvertierende <see langword="String" />-Ausdruck.</param>
        <param name="Conversion">Erforderlich. <see cref="T:Microsoft.VisualBasic.VbStrConv" />-Member. Der Enumerationswert, der den Typ der auszuführenden Konvertierung angibt.</param>
        <param name="LocaleID">Optional. Der <see langword="LocaleID" />-Wert, wenn dieser sich vom <see langword="LocaleID" />-Wert des Systems unterscheidet. (Der <see langword="LocaleID" />-Wert des Systems ist der Standardwert.)</param>
        <summary>Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</summary>
        <returns>Eine wie angegeben konvertierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konstanten "`VbStrConv.Wide`", "`VbStrConv.Narrow`", "`VbStrConv.SimplifiedChinese`", "`VbStrConv.TraditionalChinese`", "`VbStrConv.Katakana`" und "`VbStrConv.Hiragana`" können Laufzeitfehler verursachen, wenn Sie in Gebiets Schemas verwendet werden, die nicht zutreffen, aber nicht immer: die Konstanten `VbStrConv.Katakana` und `VbStrConv.Hiragana` können in einem nicht japanischen System mit japanischer Sprache verwendet Paket installiert. Außerdem wird die Verwendung der Konstanten `VbStrConv.Wide` und `VbStrConv.Narrow` auf jedem System unterstützt, auf dem eine ostasiatische Sprache installiert ist.  
  
 Diese Funktion verwendet die Kultur Informationen der Anwendung bei der Bearbeitung der Zeichenfolge, sodass die Fall Änderungen für das Gebiets Schema geeignet sind, in dem die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung Sicherheitsentscheidungen auf Grundlage des Ergebnisses eines Vergleichs oder einer Änderung der Fall Änderung trifft, sollte der Vorgang die <xref:System.String.Compare%2A?displayProperty=nameWithType>-Methode verwenden und <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für das `comparisonType`-Argument übergeben. Weitere Informationen finden Sie unter [so wirkt sich die Kultur auf Zeichen folgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)aus.  
  
 Die `Conversion`-Argumenteinstellungen lauten:  
  
|Enumerationsmember|Beschreibung|  
|-|-|  
|`VbStrConv.None`|Führt keine Konvertierung aus.|  
|`VbStrConv.LinguisticCasing`|Verwendet linguistische Regeln für die Groß-und Kleinschreibung anstelle des Dateisystems (Standard). Gültig mit `VbStrConv.UpperCase` und nur `VbStrConv.LowerCase`.|  
|`VbStrConv.UpperCase`|Konvertiert die Zeichenfolge in Großbuchstaben.|  
|`VbStrConv.LowerCase`|Konvertiert die Zeichenfolge in Kleinbuchstaben.|  
|`VbStrConv.ProperCase`|Konvertiert den ersten Buchstaben jedes Worts in einer Zeichenfolge in einen Großbuchstaben.|  
|`VbStrConv.Wide` <sup>*</sup>|Konvertiert schmale Zeichen (halbbreite) in der Zeichenfolge in Breite Zeichen (Breite). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Konvertiert Breite Zeichen (ganze Breite) in der Zeichenfolge in schmale Zeichen (halbe Breite).|  
|`VbStrConv.Katakana` <sup>**</sup>|Konvertiert Hiragana-Zeichen in der Zeichenfolge in Katakana-Zeichen.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Konvertiert Katakana-Zeichen in der Zeichenfolge in Hiragana-Zeichen.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Konvertiert herkömmliche chinesische Zeichen in vereinfachtes Chinesisch.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Konvertiert vereinfachte chinesische Zeichen in Chinesisch (traditionell).|  
  
 <sup>*</sup> Gilt für asiatische Gebiets Schemas.  
  
 <sup>**</sup> Gilt nur für Japan.  
  
> [!NOTE]
>  Diese Konstanten werden in der .NET Framework Common Language Runtime angegeben. Daher können Sie an beliebiger Stelle im Code anstelle der tatsächlichen Werte verwendet werden. Die meisten können (z. b. `UpperCase + Wide`) kombiniert werden, außer wenn Sie sich gegenseitig ausschließen (z. b. `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Im folgenden sind gültige Wort Trennzeichen für die richtige Schreibweise aufgeführt: NULL (`Chr$(0)`), horizontale Registerkarte (`Chr$(9)`), Zeilenvorschub (`Chr$(10)`), vertikale Registerkarte (`Chr$(11)`), Formular Vorschub (`Chr$(12)`), Wagen Rücklauf (`Chr$(13)`), Leerzeichen (Einzel Byte-Zeichensatz) (`Chr$(32)`). Der tatsächliche Wert für ein Leerzeichen, das voll oder halb breit sein kann, variiert je nach Land/Region für ostasiatische Kulturen.  
  
   
  
## Examples  
 In diesem Beispiel wird Text in alle Kleinbuchstaben konvertiert.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="LocaleID" /> nicht unterstützt, <paramref name="Conversion" /> &lt; 0 oder &gt; 2048, oder nicht unterstützte Konvertierung für das angegebene Gebietsschema.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Länge der zurückzugebenden Zeichenfolge.</param>
        <param name="Character">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke. Es wird nur das erste Zeichen des Ausdrucks verwendet. Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</param>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
        <returns>Eine Zeichenfolge oder ein Objekt, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` zurück, die aus wiederholten Zeichen besteht. Das Zeichen, das die Zeichenfolge bildet, ist das erste Zeichen im `Character`-Argument und wird `Number` mehrmals dupliziert.  
  
   
  
## Examples  
 In diesem Beispiel wird die `StrDup`-Funktion verwendet, um eine Zeichenfolge doppelter Zeichen zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> ist <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Länge der zurückzugebenden Zeichenfolge.</param>
        <param name="Character">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke. Es wird nur das erste Zeichen des Ausdrucks verwendet. Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</param>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
        <returns>Eine Zeichenfolge oder ein Objekt, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` zurück, die aus wiederholten Zeichen besteht. Das Zeichen, das die Zeichenfolge bildet, ist das erste Zeichen im `Character`-Argument und wird `Number` mehrmals dupliziert.  
  
   
  
## Examples  
 In diesem Beispiel wird die `StrDup`-Funktion verwendet, um eine Zeichenfolge doppelter Zeichen zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> ist <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Länge der zurückzugebenden Zeichenfolge.</param>
        <param name="Character">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke. Es wird nur das erste Zeichen des Ausdrucks verwendet. Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</param>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
        <returns>Eine Zeichenfolge oder ein Objekt, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` zurück, die aus wiederholten Zeichen besteht. Das Zeichen, das die Zeichenfolge bildet, ist das erste Zeichen im `Character`-Argument und wird `Number` mehrmals dupliziert.  
  
   
  
## Examples  
 In diesem Beispiel wird die `StrDup`-Funktion verwendet, um eine Zeichenfolge doppelter Zeichen zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> ist <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrReverse(string Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Zeichenfolgenausdruck, dessen Zeichen umgekehrt werden müssen. Wenn <paramref name="Expression" /> eine Zeichenfolge der Länge 0 ("") ist, wird eine Zeichenfolge der Länge 0 (null) zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</summary>
        <returns>Eine Zeichenfolge, in der die Reihenfolge der Zeichen in einer angegebenen Zeichenfolge umgekehrt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `StrReverse`-Funktion gibt eine Zeichenfolge zurück, die die gleichen Zeichen wie `Expression`, jedoch in umgekehrter Reihenfolge enthält.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Trim(string str) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</summary>
        <returns>Eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Funktionen "`LTrim`", "`RTrim`" und "`Trim`" entfernen Leerzeichen von den Enden von Zeichen folgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char UCase(char Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
        <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das die angegebene Zeichenfolge in Großbuchstaben konvertiert enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Kleinbuchstaben werden in Großbuchstaben konvertiert. alle Großbuchstaben und Zeichen ohne Buchstaben bleiben unverändert.  
  
 Diese Funktion verwendet die Kultur Informationen der Anwendung bei der Bearbeitung der Zeichenfolge, sodass die Fall Änderungen für das Gebiets Schema geeignet sind, in dem die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung Sicherheitsentscheidungen auf Grundlage des Ergebnisses eines Vergleichs oder einer Änderung der Fall Änderung trifft, sollte der Vorgang die <xref:System.String.Compare%2A?displayProperty=nameWithType>-Methode verwenden und <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für das `comparisonType`-Argument übergeben. Weitere Informationen finden Sie unter [so wirkt sich die Kultur auf Zeichen folgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)aus.  
  
   
  
## Examples  
 In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UCase(string Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
        <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das die angegebene Zeichenfolge in Großbuchstaben konvertiert enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Kleinbuchstaben werden in Großbuchstaben konvertiert. alle Großbuchstaben und Zeichen ohne Buchstaben bleiben unverändert.  
  
 Diese Funktion verwendet die Kultur Informationen der Anwendung bei der Bearbeitung der Zeichenfolge, sodass die Fall Änderungen für das Gebiets Schema geeignet sind, in dem die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung Sicherheitsentscheidungen auf Grundlage des Ergebnisses eines Vergleichs oder einer Änderung der Fall Änderung trifft, sollte der Vorgang die <xref:System.String.Compare%2A?displayProperty=nameWithType>-Methode verwenden und <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für das `comparisonType`-Argument übergeben. Weitere Informationen finden Sie unter [so wirkt sich die Kultur auf Zeichen folgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)aus.  
  
   
  
## Examples  
 In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Zeichenfolgenbearbeitung: Zusammenfassung</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Zeichenfolgen in Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Einführung in Zeichenfolgen in Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>

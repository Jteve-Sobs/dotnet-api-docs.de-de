<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="21181-101">Das <see langword="Strings" />-Modul enthält Prozeduren, mit denen Zeichenfolgenoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-102">Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Zeichenfolgen bearbeiten.</span><span class="sxs-lookup"><span data-stu-id="21181-102">This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-103">Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge an ihren Leerzeichen geteilt.</span><span class="sxs-lookup"><span data-stu-id="21181-103">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-104">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-104">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="21181-105">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-105">Required.</span></span> <span data-ttu-id="21181-106">Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-106">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="21181-107">Wenn <c>String</c> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-107">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="21181-108">Wenn <c>String</c> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="21181-108">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="21181-109">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-109">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="21181-110">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-110">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-111">`Asc` Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-111">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="21181-112">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</span><span class="sxs-lookup"><span data-stu-id="21181-112">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="21181-113">`AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-113">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="21181-114">Dies kann 0 bis 65535 sein.</span><span class="sxs-lookup"><span data-stu-id="21181-114">This can be 0 through 65535.</span></span> <span data-ttu-id="21181-115">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</span><span class="sxs-lookup"><span data-stu-id="21181-115">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-116">Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-116">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="21181-117">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-117">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-118">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-118">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-119">Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-119">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="21181-120">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-120">Required.</span></span> <span data-ttu-id="21181-121">Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-121">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="21181-122">Wenn <c>String</c> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-122">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="21181-123">Wenn <c>String</c> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="21181-123">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="21181-124">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-124">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="21181-125">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-125">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-126">`Asc` Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-126">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="21181-127">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</span><span class="sxs-lookup"><span data-stu-id="21181-127">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="21181-128">`AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-128">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="21181-129">Dies kann 0 bis 65535 sein.</span><span class="sxs-lookup"><span data-stu-id="21181-129">This can be 0 through 65535.</span></span> <span data-ttu-id="21181-130">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</span><span class="sxs-lookup"><span data-stu-id="21181-130">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-131">Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-131">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="21181-132">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-132">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-133">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-133">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-134">Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-134">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-135">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-135">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="21181-136">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-136">Required.</span></span> <span data-ttu-id="21181-137">Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-137">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="21181-138">Wenn <c>String</c> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-138">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="21181-139">Wenn <c>String</c> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="21181-139">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="21181-140">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-140">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="21181-141">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-141">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-142">`Asc` Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-142">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="21181-143">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</span><span class="sxs-lookup"><span data-stu-id="21181-143">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="21181-144">`AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-144">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="21181-145">Dies kann 0 bis 65535 sein.</span><span class="sxs-lookup"><span data-stu-id="21181-145">This can be 0 through 65535.</span></span> <span data-ttu-id="21181-146">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</span><span class="sxs-lookup"><span data-stu-id="21181-146">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-147">Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-147">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="21181-148">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-148">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-149">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-149">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-150">Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-150">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="21181-151">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-151">Required.</span></span> <span data-ttu-id="21181-152">Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-152">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="21181-153">Wenn <c>String</c> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-153">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="21181-154">Wenn <c>String</c> <see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="21181-154">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="21181-155">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-155">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="21181-156">Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-156">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-157">`Asc` Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-157">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="21181-158">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</span><span class="sxs-lookup"><span data-stu-id="21181-158">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="21181-159">`AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-159">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="21181-160">Dies kann 0 bis 65535 sein.</span><span class="sxs-lookup"><span data-stu-id="21181-160">This can be 0 through 65535.</span></span> <span data-ttu-id="21181-161">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</span><span class="sxs-lookup"><span data-stu-id="21181-161">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-162">Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-162">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="21181-163">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-163">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-164">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-164">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-165">Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</span><span class="sxs-lookup"><span data-stu-id="21181-165">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="21181-166">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-166">Required.</span></span> <span data-ttu-id="21181-167">Ein <see langword="Integer" />-Ausdruck, der den <c>Codepunkt</c> oder Zeichencode für das Zeichen darstellt.</span><span class="sxs-lookup"><span data-stu-id="21181-167">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="21181-168">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-168">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="21181-169">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-169">Returns the character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-170">Akzeptierte asymmetrische Bereich für `CharCode` kompensiert die Speicherunterschiede zwischen den `Short` und `Integer`.</span><span class="sxs-lookup"><span data-stu-id="21181-170">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="21181-171">Z. B.-29183 ein `Short` 36353 ist jedoch ein `Integer`.</span><span class="sxs-lookup"><span data-stu-id="21181-171">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="21181-172">Dies vereinfacht auch die Kompatibilität mit Visual Basic 6.0.</span><span class="sxs-lookup"><span data-stu-id="21181-172">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="21181-173">`Chr` verwendet die <xref:System.Text.Encoding> -Klasse in der <xref:System.Text?displayProperty=nameWithType> festlegen (DBCS) Namespaces zu bestimmen, ob der aktuelle Thread ein Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-173">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="21181-174">Klicken Sie dann dauert `CharCode` als Codepunkt in die entsprechende Gruppe.</span><span class="sxs-lookup"><span data-stu-id="21181-174">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="21181-175">Der Bereich kann zwischen 0 und 255 Zeichen SBCS- und zwischen-32768 und 65535 für DBCS-Zeichen sein.</span><span class="sxs-lookup"><span data-stu-id="21181-175">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="21181-176">Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <xref:System.Globalization.TextInfo.ANSICodePage%2A> Eigenschaft von der <xref:System.Globalization.TextInfo> -Klasse in der <xref:System.Globalization> Namespace.</span><span class="sxs-lookup"><span data-stu-id="21181-176">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="21181-177">Sie erhalten <xref:System.Globalization.TextInfo.ANSICodePage%2A> durch Angabe `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span><span class="sxs-lookup"><span data-stu-id="21181-177">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="21181-178">`ChrW` nimmt `CharCode` als Unicode-Codepunkt.</span><span class="sxs-lookup"><span data-stu-id="21181-178">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="21181-179">Der Bereich ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</span><span class="sxs-lookup"><span data-stu-id="21181-179">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="21181-180">Werte zwischen-32768 und-1 werden behandelt als Werte im Bereich zwischen + 32768 und + 65535.</span><span class="sxs-lookup"><span data-stu-id="21181-180">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="21181-181">Zahlen von 0 bis 31 entsprechen standard nicht druckbaren ASCII-Codes.</span><span class="sxs-lookup"><span data-stu-id="21181-181">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="21181-182">Beispielsweise `Chr(10)` gibt ein Zeilenvorschubzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-182">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-183">Die `ChrB` -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-183">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="21181-184">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-184">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-185">Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und `ChrB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-185">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-186">Im folgenden Beispiel wird die `Chr` Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-186">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-187"><paramref name="CharCode" /> &lt; 0 oder &gt; 255 für <see langword="Chr" />.</span><span class="sxs-lookup"><span data-stu-id="21181-187"><paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="21181-188">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-188">Required.</span></span> <span data-ttu-id="21181-189">Ein <see langword="Integer" />-Ausdruck, der den <c>Codepunkt</c> oder Zeichencode für das Zeichen darstellt.</span><span class="sxs-lookup"><span data-stu-id="21181-189">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="21181-190">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-190">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="21181-191">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-191">Returns the character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-192">Akzeptierte asymmetrische Bereich für `CharCode` kompensiert die Speicherunterschiede zwischen den `Short` und `Integer`.</span><span class="sxs-lookup"><span data-stu-id="21181-192">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="21181-193">Z. B.-29183 ein `Short` 36353 ist jedoch ein `Integer`.</span><span class="sxs-lookup"><span data-stu-id="21181-193">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="21181-194">Dies vereinfacht auch die Kompatibilität mit Visual Basic 6.0.</span><span class="sxs-lookup"><span data-stu-id="21181-194">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="21181-195">`Chr` verwendet die <xref:System.Text.Encoding> -Klasse in der <xref:System.Text?displayProperty=nameWithType> festlegen (DBCS) Namespaces zu bestimmen, ob der aktuelle Thread ein Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-195">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="21181-196">Klicken Sie dann dauert `CharCode` als Codepunkt in die entsprechende Gruppe.</span><span class="sxs-lookup"><span data-stu-id="21181-196">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="21181-197">Der Bereich kann zwischen 0 und 255 Zeichen SBCS- und zwischen-32768 und 65535 für DBCS-Zeichen sein.</span><span class="sxs-lookup"><span data-stu-id="21181-197">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="21181-198">Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <xref:System.Globalization.TextInfo.ANSICodePage%2A> Eigenschaft von der <xref:System.Globalization.TextInfo> -Klasse in der <xref:System.Globalization> Namespace.</span><span class="sxs-lookup"><span data-stu-id="21181-198">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="21181-199">Sie erhalten <xref:System.Globalization.TextInfo.ANSICodePage%2A> durch Angabe `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span><span class="sxs-lookup"><span data-stu-id="21181-199">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="21181-200">`ChrW` nimmt `CharCode` als Unicode-Codepunkt.</span><span class="sxs-lookup"><span data-stu-id="21181-200">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="21181-201">Der Bereich ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</span><span class="sxs-lookup"><span data-stu-id="21181-201">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="21181-202">Werte zwischen-32768 und-1 werden behandelt als Werte im Bereich zwischen + 32768 und + 65535.</span><span class="sxs-lookup"><span data-stu-id="21181-202">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="21181-203">Zahlen von 0 bis 31 entsprechen standard nicht druckbaren ASCII-Codes.</span><span class="sxs-lookup"><span data-stu-id="21181-203">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="21181-204">Beispielsweise `Chr(10)` gibt ein Zeilenvorschubzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-204">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-205">Die `ChrB` -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-205">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="21181-206">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-206">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-207">Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und `ChrB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-207">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-208">Im folgenden Beispiel wird die `Chr` Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-208">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-209"><paramref name="CharCode" /> &lt; – 32768 oder &gt; 65535 für <see langword="ChrW" />.</span><span class="sxs-lookup"><span data-stu-id="21181-209"><paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-210">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-210">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="21181-211">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-211">Required.</span></span> <span data-ttu-id="21181-212">Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-212">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="21181-213">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-213">Required.</span></span> <span data-ttu-id="21181-214">Die zu suchende Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-214">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="21181-215">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-215">Optional.</span></span> <span data-ttu-id="21181-216">Ein <see langword="Boolean" />-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <c>Match</c> einschließen oder ausschließen.</span><span class="sxs-lookup"><span data-stu-id="21181-216"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span></span> <span data-ttu-id="21181-217">Wenn <c>Include</c> <see langword="True" />ist, gibt die <see langword="Filter" />-Funktion die Teilmenge des Arrays zurück, die <c>Match</c> als eine untergeordnete Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-217">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span></span> <span data-ttu-id="21181-218">Wenn <c>Include</c> <see langword="False" />ist, gibt die <see langword="Filter" />-Funktion die Teilmenge des Arrays zurück, die <c>Match</c> nicht als untergeordnete Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-218">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-219">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-219">Optional.</span></span> <span data-ttu-id="21181-220">Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-220">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="21181-221">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-221">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="21181-222">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-222">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="21181-223">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-223">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-224">Wenn keine Übereinstimmungen von `Match` befinden sich in `Source`die `Filter` Funktion ein leeres Array zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-224">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="21181-225">Ein Fehler tritt auf, wenn `Source` festgelegt ist, um `Nothing` oder ist kein eindimensionales Array.</span><span class="sxs-lookup"><span data-stu-id="21181-225">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="21181-226">Das zurückgegebene Array die `Filter` Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.</span><span class="sxs-lookup"><span data-stu-id="21181-226">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="21181-227">Die `Compare` Argument kann die folgenden Werte haben.</span><span class="sxs-lookup"><span data-stu-id="21181-227">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="21181-228">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-228">Constant</span></span>|<span data-ttu-id="21181-229">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-229">Description</span></span>|  
|-|-|  
|<span data-ttu-id="21181-230">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-230">Constant</span></span>|<span data-ttu-id="21181-231">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-231">Description</span></span>|  
|`CompareMethod.Binary`|<span data-ttu-id="21181-232">Führt einen binären Vergleich</span><span class="sxs-lookup"><span data-stu-id="21181-232">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="21181-233">Führt einen Vergleich aus Text</span><span class="sxs-lookup"><span data-stu-id="21181-233">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-234">Dieses Beispiel veranschaulicht die Verwendung von der `Filter` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-234">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-235"><paramref name="Source" /> ist <see langword="Nothing" /> oder kein eindimensionales Array.</span><span class="sxs-lookup"><span data-stu-id="21181-235"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="21181-236">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-236">Required.</span></span> <span data-ttu-id="21181-237">Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-237">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="21181-238">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-238">Required.</span></span> <span data-ttu-id="21181-239">Die zu suchende Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-239">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="21181-240">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-240">Optional.</span></span> <span data-ttu-id="21181-241">Ein <see langword="Boolean" />-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <c>Match</c> einschließen oder ausschließen.</span><span class="sxs-lookup"><span data-stu-id="21181-241"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span></span> <span data-ttu-id="21181-242">Wenn <c>Include</c> <see langword="True" />ist, gibt die <see langword="Filter" />-Funktion die Teilmenge des Arrays zurück, die <c>Match</c> als eine untergeordnete Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-242">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span></span> <span data-ttu-id="21181-243">Wenn <c>Include</c> <see langword="False" />ist, gibt die <see langword="Filter" />-Funktion die Teilmenge des Arrays zurück, die <c>Match</c> nicht als untergeordnete Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-243">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-244">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-244">Optional.</span></span> <span data-ttu-id="21181-245">Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-245">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="21181-246">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-246">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="21181-247">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-247">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="21181-248">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-248">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-249">Wenn keine Übereinstimmungen von `Match` befinden sich in `Source`die `Filter` Funktion ein leeres Array zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-249">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="21181-250">Ein Fehler tritt auf, wenn `Source` festgelegt ist, um `Nothing` oder ist kein eindimensionales Array.</span><span class="sxs-lookup"><span data-stu-id="21181-250">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="21181-251">Das zurückgegebene Array die `Filter` Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.</span><span class="sxs-lookup"><span data-stu-id="21181-251">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="21181-252">Die `Compare` Argument kann die folgenden Werte haben.</span><span class="sxs-lookup"><span data-stu-id="21181-252">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="21181-253">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-253">Constant</span></span>|<span data-ttu-id="21181-254">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-254">Description</span></span>|  
|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="21181-255">Führt einen binären Vergleich</span><span class="sxs-lookup"><span data-stu-id="21181-255">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="21181-256">Führt einen Vergleich aus Text</span><span class="sxs-lookup"><span data-stu-id="21181-256">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-257">Dieses Beispiel veranschaulicht die Verwendung von der `Filter` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-257">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-258"><paramref name="Source" /> ist <see langword="Nothing" /> oder kein eindimensionales Array.</span><span class="sxs-lookup"><span data-stu-id="21181-258"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-259">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-259">Required.</span></span> <span data-ttu-id="21181-260">Jeder gültige Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-260">Any valid expression.</span></span></param>
        <param name="Style"><span data-ttu-id="21181-261">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-261">Optional.</span></span> <span data-ttu-id="21181-262">Ein gültiger benannter oder benutzerdefinierter Format-<see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-262">A valid named or user-defined format <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-263">Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</span><span class="sxs-lookup"><span data-stu-id="21181-263">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></summary>
        <returns><span data-ttu-id="21181-264">Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</span><span class="sxs-lookup"><span data-stu-id="21181-264">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-265">Die <xref:System.String.Format%2A?displayProperty=nameWithType> Methode verfügt auch über ähnliche Funktionen.</span><span class="sxs-lookup"><span data-stu-id="21181-265">The <xref:System.String.Format%2A?displayProperty=nameWithType> method also provides similar functionality.</span></span>  
  
 <span data-ttu-id="21181-266">Wenn Sie eine nicht lokalisierte numerische Zeichenfolge formatieren, sollten Sie ein benutzerdefinierten numerisches Format verwenden, um sicherzustellen, dass das Aussehen gewünschten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="21181-266">If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</span></span>  
  
 <span data-ttu-id="21181-267">Wenn Sie versuchen, formatieren Sie eine Zahl ohne `Style`, `Format` Funktion bietet ähnliche Funktionen der `Str` -Funktion an, obwohl er das Gebietsschema berücksichtigt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-267">If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware.</span></span> <span data-ttu-id="21181-268">Allerdings positive Zahlen mithilfe als Zeichenfolgen formatiert die `Format` Funktion nicht mit ein führendes Leerzeichen zur Angabe des Vorzeichens einschließen, mit denen konvertiert die `Str` Funktion behalten das führende Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-268">However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.</span></span>  
  
## <a name="different-formats-for-different-numeric-values"></a><span data-ttu-id="21181-269">Verschiedene Formate für verschiedene numerische Werte</span><span class="sxs-lookup"><span data-stu-id="21181-269">Different Formats for Different Numeric Values</span></span>  
 <span data-ttu-id="21181-270">Ein benutzerdefiniertes Formatausdruck für Zahlen kann ein bis drei durch Semikolons getrennte Abschnitte haben.</span><span class="sxs-lookup"><span data-stu-id="21181-270">A user-defined format expression for numbers can have from one to three sections separated by semicolons.</span></span> <span data-ttu-id="21181-271">Wenn die `Style` Argument der `Format` Funktion enthält einen der vordefinierten numerischen Formate, die nur ein Abschnitt zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="21181-271">If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.</span></span>  
  
|<span data-ttu-id="21181-272">Bei Verwendung von</span><span class="sxs-lookup"><span data-stu-id="21181-272">If you use</span></span>|<span data-ttu-id="21181-273">Dies ist das Ergebnis</span><span class="sxs-lookup"><span data-stu-id="21181-273">This is the result</span></span>|  
|-|-|  
|<span data-ttu-id="21181-274">Nur ein Abschnitt</span><span class="sxs-lookup"><span data-stu-id="21181-274">One section only</span></span>|<span data-ttu-id="21181-275">Der Formatausdruck gilt für alle Werte.</span><span class="sxs-lookup"><span data-stu-id="21181-275">The format expression applies to all values.</span></span>|  
|<span data-ttu-id="21181-276">Zwei Abschnitte</span><span class="sxs-lookup"><span data-stu-id="21181-276">Two sections</span></span>|<span data-ttu-id="21181-277">Der erste Abschnitt gilt für positive Werte und Nullen; die zweite gilt für negative Werte.</span><span class="sxs-lookup"><span data-stu-id="21181-277">The first section applies to positive values and zeros; the second applies to negative values.</span></span>|  
|<span data-ttu-id="21181-278">Drei Abschnitte</span><span class="sxs-lookup"><span data-stu-id="21181-278">Three sections</span></span>|<span data-ttu-id="21181-279">Der erste Abschnitt gilt für positive Werte, die zweite gilt für negative Werte und die dritte betrifft Nullen.</span><span class="sxs-lookup"><span data-stu-id="21181-279">The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</span></span>|  
  
 <span data-ttu-id="21181-280">Das folgende Beispiel enthält zwei Abschnitte unterteilt: der erste definiert das Format für positive Werte und Nullen; der zweite Abschnitt definiert das Format für negative Werte.</span><span class="sxs-lookup"><span data-stu-id="21181-280">The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</span></span> <span data-ttu-id="21181-281">Da die `Style` Argument der `Format` Funktion akzeptiert eine Zeichenfolge, die er in Anführungszeichen eingeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="21181-281">Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.</span></span>  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 <span data-ttu-id="21181-282">Wenn Sie zwei Semikolons ohne etwas dazwischen einfügen, wird der fehlende Abschnitt mit dem Format des positiven Wertes ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-282">If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</span></span> <span data-ttu-id="21181-283">Beispielsweise das folgende Format zeigt positive und Negative Werte mit dem Format im ersten Abschnitt und zeigt `Zero` ist der Wert 0 (null).</span><span class="sxs-lookup"><span data-stu-id="21181-283">For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.</span></span>  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a><span data-ttu-id="21181-284">Vordefinierte numerische Formate</span><span class="sxs-lookup"><span data-stu-id="21181-284">Predefined Numeric Formats</span></span>  
 <span data-ttu-id="21181-285">Die folgende Tabelle zeigt die vordefinierten numerischen Formate.</span><span class="sxs-lookup"><span data-stu-id="21181-285">The following table identifies the predefined numeric format names.</span></span> <span data-ttu-id="21181-286">Diese können verwendet werden, anhand des Namens der `Style` Argument für die `Format` Funktion:</span><span class="sxs-lookup"><span data-stu-id="21181-286">These may be used by name as the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="21181-287">Formatname</span><span class="sxs-lookup"><span data-stu-id="21181-287">Format name</span></span>|<span data-ttu-id="21181-288">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-288">Description</span></span>|  
|-|-|  
|<span data-ttu-id="21181-289">`General Number`, `G`oder `g`</span><span class="sxs-lookup"><span data-stu-id="21181-289">`General Number`, `G`, or `g`</span></span>|<span data-ttu-id="21181-290">Zeigt eine Zahl ohne Tausendertrennzeichen an.</span><span class="sxs-lookup"><span data-stu-id="21181-290">Displays number with no thousand separator.</span></span><br /><br /> <span data-ttu-id="21181-291">Beispielsweise `Format(&H3FA, "g")` gibt `1018`.</span><span class="sxs-lookup"><span data-stu-id="21181-291">For example, `Format(&H3FA, "g")` returns `1018`.</span></span>|  
|<span data-ttu-id="21181-292">`Currency`, `C`oder `c`</span><span class="sxs-lookup"><span data-stu-id="21181-292">`Currency`, `C`, or `c`</span></span>|<span data-ttu-id="21181-293">Zeigt eine Zahl ggf. mit Tausendertrennzeichen an; zeigt zwei Ziffern rechts vom Dezimaltrennzeichen an.</span><span class="sxs-lookup"><span data-stu-id="21181-293">Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</span></span> <span data-ttu-id="21181-294">Ausgabe hängt vom verwendeten Systemgebietsschema ab.</span><span class="sxs-lookup"><span data-stu-id="21181-294">Output is based on system locale settings.</span></span><br /><br /> <span data-ttu-id="21181-295">Beispielsweise `Format(1234567, "c")` gibt `$1,234,567.00`.</span><span class="sxs-lookup"><span data-stu-id="21181-295">For example, `Format(1234567, "c")` returns `$1,234,567.00`.</span></span>|  
|<span data-ttu-id="21181-296">`Fixed`, `F`oder `f`</span><span class="sxs-lookup"><span data-stu-id="21181-296">`Fixed`, `F`, or `f`</span></span>|<span data-ttu-id="21181-297">Zeigt mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-297">Displays at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="21181-298">Beispielsweise `Format(1234567, "f")` gibt `1234567.00`.</span><span class="sxs-lookup"><span data-stu-id="21181-298">For example, `Format(1234567, "f")` returns `1234567.00`.</span></span>|  
|<span data-ttu-id="21181-299">`Standard`, `N`oder `n`</span><span class="sxs-lookup"><span data-stu-id="21181-299">`Standard`, `N`, or `n`</span></span>|<span data-ttu-id="21181-300">Zeigt die Zahl mit Tausendertrennzeichen, mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen an.</span><span class="sxs-lookup"><span data-stu-id="21181-300">Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="21181-301">Beispielsweise `Format(1234567, "n")` gibt `1,234,567.00`.</span><span class="sxs-lookup"><span data-stu-id="21181-301">For example, `Format(1234567, "n")` returns `1,234,567.00`.</span></span>|  
|`Percent`|<span data-ttu-id="21181-302">Zeigt die Zahl multipliziert mit 100 mit einem Prozentzeichen (%) auf der rechten Seite angefügt an; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-302">Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="21181-303">Beispielsweise `Format(0.4744, "Percent")` gibt `47.44%`.</span><span class="sxs-lookup"><span data-stu-id="21181-303">For example, `Format(0.4744, "Percent")` returns `47.44%`.</span></span>|  
|<span data-ttu-id="21181-304">`P`, oder `p`</span><span class="sxs-lookup"><span data-stu-id="21181-304">`P`, or `p`</span></span>|<span data-ttu-id="21181-305">Zeigt eine Zahl mit Tausendertrennzeichen multipliziert mit 100 mit einem Prozentzeichen (%) nach rechts und getrennt durch ein einzelnes Leerzeichen angefügt; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-305">Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="21181-306">Beispielsweise `Format(0.80345, "p")` gibt `80.35 %`.</span><span class="sxs-lookup"><span data-stu-id="21181-306">For example, `Format(0.80345, "p")` returns `80.35 %`.</span></span>|  
|`Scientific`|<span data-ttu-id="21181-307">Verwendet standardmäßige wissenschaftliche Schreibweise und stellt zwei signifikante Stellen bereit.</span><span class="sxs-lookup"><span data-stu-id="21181-307">Uses standard scientific notation, providing two significant digits.</span></span><br /><br /> <span data-ttu-id="21181-308">Beispielsweise `Format(1234567, "Scientific")` gibt `1.23E+06`.</span><span class="sxs-lookup"><span data-stu-id="21181-308">For example, `Format(1234567, "Scientific")` returns `1.23E+06`.</span></span>|  
|<span data-ttu-id="21181-309">`E`, oder `e`</span><span class="sxs-lookup"><span data-stu-id="21181-309">`E`, or `e`</span></span>|<span data-ttu-id="21181-310">Verwendet standardmäßige wissenschaftliche Schreibweise und stellt sechs signifikante Stellen bereit.</span><span class="sxs-lookup"><span data-stu-id="21181-310">Uses standard scientific notation, providing six significant digits.</span></span><br /><br /> <span data-ttu-id="21181-311">Beispielsweise `Format(1234567, "e")` gibt `1.234567e+006`.</span><span class="sxs-lookup"><span data-stu-id="21181-311">For example, `Format(1234567, "e")` returns `1.234567e+006`.</span></span>|  
|<span data-ttu-id="21181-312">`D`, oder `d`</span><span class="sxs-lookup"><span data-stu-id="21181-312">`D`, or `d`</span></span>|<span data-ttu-id="21181-313">Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl in Dezimalzahl (Basis 10)-Format enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-313">Displays number as a string that contains the value of the number in Decimal (base 10) format.</span></span> <span data-ttu-id="21181-314">Diese Option wird für ganzzahlige Typen unterstützt (`Byte`, `Short`, `Integer`, `Long`) nur.</span><span class="sxs-lookup"><span data-stu-id="21181-314">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="21181-315">Beispielsweise `Format(&H7F, "d")` gibt `127`.</span><span class="sxs-lookup"><span data-stu-id="21181-315">For example, `Format(&H7F, "d")` returns `127`.</span></span>|  
|<span data-ttu-id="21181-316">`X`, oder `x`</span><span class="sxs-lookup"><span data-stu-id="21181-316">`X`, or `x`</span></span>|<span data-ttu-id="21181-317">Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl im Hexadezimalformat (Basis 16) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-317">Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</span></span> <span data-ttu-id="21181-318">Diese Option wird für ganzzahlige Typen unterstützt (`Byte`, `Short`, `Integer`, `Long`) nur.</span><span class="sxs-lookup"><span data-stu-id="21181-318">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="21181-319">Beispielsweise `Format(127, "x")` gibt `7f`.</span><span class="sxs-lookup"><span data-stu-id="21181-319">For example, `Format(127, "x")` returns `7f`.</span></span>|  
|`Yes/No`|<span data-ttu-id="21181-320">Zeigt `No` Wenn Zahl, andernfalls 0 ist, zeigt `Yes`.</span><span class="sxs-lookup"><span data-stu-id="21181-320">Displays `No` if number is 0; otherwise, displays `Yes`.</span></span><br /><br /> <span data-ttu-id="21181-321">Beispielsweise `Format(0, "Yes/No")` gibt `No`.</span><span class="sxs-lookup"><span data-stu-id="21181-321">For example, `Format(0, "Yes/No")` returns `No`.</span></span>|  
|`True/False`|<span data-ttu-id="21181-322">Zeigt `False` Wenn Zahl, andernfalls 0 ist, zeigt `True`.</span><span class="sxs-lookup"><span data-stu-id="21181-322">Displays `False` if number is 0; otherwise, displays `True`.</span></span><br /><br /> <span data-ttu-id="21181-323">Beispielsweise `Format(1, "True/False")` gibt `True`.</span><span class="sxs-lookup"><span data-stu-id="21181-323">For example, `Format(1, "True/False")` returns `True`.</span></span>|  
|`On/Off`|<span data-ttu-id="21181-324">Zeigt `Off` Wenn Zahl, andernfalls 0 ist, zeigt `On`.</span><span class="sxs-lookup"><span data-stu-id="21181-324">Displays `Off` if number is 0; otherwise, displays `On`.</span></span><br /><br /> <span data-ttu-id="21181-325">Beispielsweise `Format(1, "On/Off")` gibt `On`.</span><span class="sxs-lookup"><span data-stu-id="21181-325">For example, `Format(1, "On/Off")` returns `On`.</span></span>|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-326">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-326">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-327">Die `Yes/No`, `True/False`, und `On/Off` pfadformate werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-327">The `Yes/No`, `True/False`, and `On/Off` formats are not supported.</span></span>  
  
## <a name="user-defined-numeric-formats"></a><span data-ttu-id="21181-328">Benutzerdefinierte numerische Formate</span><span class="sxs-lookup"><span data-stu-id="21181-328">User-Defined Numeric Formats</span></span>  
 <span data-ttu-id="21181-329">In der folgenden Tabelle identifiziert die Zeichen, mit denen Sie benutzerdefinierte Zahlenformate erstellen können.</span><span class="sxs-lookup"><span data-stu-id="21181-329">The following table identifies characters you can use to create user-defined number formats.</span></span> <span data-ttu-id="21181-330">Diese können verwendet werden, zum Erstellen der `Style` Argument für die `Format` Funktion:</span><span class="sxs-lookup"><span data-stu-id="21181-330">These may be used to build the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="21181-331">Zeichen</span><span class="sxs-lookup"><span data-stu-id="21181-331">Character</span></span>|<span data-ttu-id="21181-332">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-332">Description</span></span>|  
|-|-|  
|<span data-ttu-id="21181-333">Keiner</span><span class="sxs-lookup"><span data-stu-id="21181-333">None</span></span>|<span data-ttu-id="21181-334">Zeigt die Zahl ohne Formatierung an.</span><span class="sxs-lookup"><span data-stu-id="21181-334">Displays the number with no formatting.</span></span>|  
|<span data-ttu-id="21181-335">(`0`)</span><span class="sxs-lookup"><span data-stu-id="21181-335">(`0`)</span></span>|<span data-ttu-id="21181-336">Ziffernplatzhalter.</span><span class="sxs-lookup"><span data-stu-id="21181-336">Digit placeholder.</span></span> <span data-ttu-id="21181-337">Zeigt eine Ziffer oder eine 0 (null).</span><span class="sxs-lookup"><span data-stu-id="21181-337">Displays a digit or a zero.</span></span> <span data-ttu-id="21181-338">Wenn der Ausdruck eine Ziffer an der Position, wo die 0 (null) in der Formatzeichenfolge angezeigt wird, angezeigt. Andernfalls wird an dieser Position eine Null angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-338">If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</span></span><br /><br /> <span data-ttu-id="21181-339">Hat die Zahl sind weniger Ziffern als Nullen (auf beiden Seiten des Dezimaltrennzeichens) im Formatausdruck, führende oder nachfolgende Nullen angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-339">If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</span></span> <span data-ttu-id="21181-340">Hat die Zahl mehr Ziffern rechts vom Dezimaltrennzeichen als stehen Nullen rechts des Dezimaltrennzeichens im Formatausdruck, rundet die Zahl auf so viele Dezimalstellen wie Nullen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="21181-340">If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</span></span> <span data-ttu-id="21181-341">Hat die Zahl mehr Stellen links vom Dezimaltrennzeichen als stehen Nullen auf der linken Seite des Dezimaltrennzeichens im Formatausdruck, zeigt die zusätzlichen Ziffern unverändert.</span><span class="sxs-lookup"><span data-stu-id="21181-341">If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</span></span>|  
|<span data-ttu-id="21181-342">(`#`)</span><span class="sxs-lookup"><span data-stu-id="21181-342">(`#`)</span></span>|<span data-ttu-id="21181-343">Ziffernplatzhalter.</span><span class="sxs-lookup"><span data-stu-id="21181-343">Digit placeholder.</span></span> <span data-ttu-id="21181-344">Zeigt eine Ziffer oder nichts an.</span><span class="sxs-lookup"><span data-stu-id="21181-344">Displays a digit or nothing.</span></span> <span data-ttu-id="21181-345">Wenn der Ausdruck eine Ziffer an der Position, in dem die `#` Zeichen vorkommt, wird in der Formatzeichenfolge angezeigt; andernfalls wird nichts an dieser Stelle angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-345">If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.</span></span><br /><br /> <span data-ttu-id="21181-346">Dieses Symbol funktioniert wie die `0` Ziffernplatzhalter, mit der Ausnahme, die führenden und nachfolgenden Nullen angezeigt werden, hat die Zahl weniger Ziffern als vorhanden sind `#` -Zeichen auf beiden Seiten des Dezimaltrennzeichens im Formatausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-346">This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.</span></span>|  
|<span data-ttu-id="21181-347">(`.`)</span><span class="sxs-lookup"><span data-stu-id="21181-347">(`.`)</span></span>|<span data-ttu-id="21181-348">Dezimalplatzhalter.</span><span class="sxs-lookup"><span data-stu-id="21181-348">Decimal placeholder.</span></span> <span data-ttu-id="21181-349">Der dezimalplatzhalter legt fest, wie viele Ziffern links und rechts vom Dezimaltrennzeichen angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-349">The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</span></span> <span data-ttu-id="21181-350">Wenn der Formatausdruck nur enthält `#` Zeichen links von diesem Symbol; Zahlen, die kleiner als 1 mit einem Dezimaltrennzeichen beginnen.</span><span class="sxs-lookup"><span data-stu-id="21181-350">If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</span></span> <span data-ttu-id="21181-351">Verwenden Sie zum Anzeigen einer führenden Null angezeigt werden, sollen Bruchzahlen mit 0 (null) als ersten Ziffernplatzhalter links vom Dezimaltrennzeichen an.</span><span class="sxs-lookup"><span data-stu-id="21181-351">To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</span></span> <span data-ttu-id="21181-352">In manchen Gebietsschemas wird ein Komma als Dezimaltrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-352">In some locales, a comma is used as the decimal separator.</span></span> <span data-ttu-id="21181-353">Welches Zeichen tatsächliche als Dezimaltrennzeichen in der formatierten Ausgabe verwendet hängt das Zahlenformat, das vom System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-353">The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</span></span> <span data-ttu-id="21181-354">Daher sollten Sie den Zeitraum als dezimalplatzalter in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die ein Komma als Dezimaltrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-354">Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</span></span> <span data-ttu-id="21181-355">Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-355">The formatted string will appear in the format correct for the locale.</span></span>|  
|<span data-ttu-id="21181-356">(`%`)</span><span class="sxs-lookup"><span data-stu-id="21181-356">(`%`)</span></span>|<span data-ttu-id="21181-357">Prozentplatzhalter.</span><span class="sxs-lookup"><span data-stu-id="21181-357">Percent placeholder.</span></span> <span data-ttu-id="21181-358">Den Ausdruck multipliziert mit 100.</span><span class="sxs-lookup"><span data-stu-id="21181-358">Multiplies the expression by 100.</span></span> <span data-ttu-id="21181-359">Das Prozentzeichen (`%`) in die Position, wo es angezeigt, in der Formatzeichenfolge wird, eingefügt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-359">The percent character (`%`) is inserted in the position where it appears in the format string.</span></span>|  
|<span data-ttu-id="21181-360">(`,`)</span><span class="sxs-lookup"><span data-stu-id="21181-360">(`,`)</span></span>|<span data-ttu-id="21181-361">Tausendertrennzeichen an.</span><span class="sxs-lookup"><span data-stu-id="21181-361">Thousand separator.</span></span> <span data-ttu-id="21181-362">Das Tausendertrennzeichen trennt Tausender von den Hundertern in eine Zahl mit vier oder mehr Stellen links vom Dezimaltrennzeichen an.</span><span class="sxs-lookup"><span data-stu-id="21181-362">The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</span></span> <span data-ttu-id="21181-363">Standardmäßige Verwendung des Tausendertrennzeichens wird angegeben, wenn das Format ein Tausendertrennzeichen Ziffernplatzhalter enthaltender enthält (`0` oder `#`).</span><span class="sxs-lookup"><span data-stu-id="21181-363">Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).</span></span><br /><br /> <span data-ttu-id="21181-364">Ein Tausendertrennzeichen direkt links vom Dezimaltrennzeichen (fest, ob ein Dezimaltrennzeichen angegeben ist) oder der äußersten rechten Zeichen in der Zeichenfolge bedeutet Folgendes "Skalieren die Zahl durch Division durch 1000, gegebenenfalls mit Rundung".</span><span class="sxs-lookup"><span data-stu-id="21181-364">A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</span></span> <span data-ttu-id="21181-365">Zahlen, die kleiner als 1.000 und größer als oder gleich 500 werden angezeigt, als `1`, und Zahlen, die kleiner als 500, als angezeigt werden `0`.</span><span class="sxs-lookup"><span data-stu-id="21181-365">Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`.</span></span> <span data-ttu-id="21181-366">Zwei benachbarte Tausendertrennzeichen an dieser Position skalieren, indem Sie einen Faktor von 1 Million sowie einem zusätzlichen Faktor von 1000 für jedes zusätzliche Trennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-366">Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</span></span><br /><br /> <span data-ttu-id="21181-367">Mehrere Trennzeichen, die in alle anderen Position als direkt links vom Dezimaltrennzeichen oder ganz rechts in der Zeichenfolge werden behandelt, als die Verwendung eines Tausendertrennzeichens angeben.</span><span class="sxs-lookup"><span data-stu-id="21181-367">Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</span></span> <span data-ttu-id="21181-368">In manchen Gebietsschemas wird der Punkt als Tausendertrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-368">In some locales, a period is used as a thousand separator.</span></span> <span data-ttu-id="21181-369">Welches Zeichen tatsächliche als Tausendertrennzeichen in der formatierten Ausgabe verwendet hängt das Zahlenformat, die vom System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-369">The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</span></span> <span data-ttu-id="21181-370">Daher sollten Sie das Komma als Tausendertrennzeichen in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die einen Punkt als Tausendertrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-370">Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</span></span> <span data-ttu-id="21181-371">Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-371">The formatted string will appear in the format correct for the locale.</span></span><br /><br /> <span data-ttu-id="21181-372">Betrachten Sie beispielsweise die folgenden drei Formatzeichenfolgen:</span><span class="sxs-lookup"><span data-stu-id="21181-372">For example, consider the three following format strings:</span></span><br /><br /> <span data-ttu-id="21181-373">-   `"#,0."`, welches wird das Tausendertrennzeichen verwendet, um die Zahl 100 Millionen als die Zeichenfolge "100,000,000" zu formatieren.</span><span class="sxs-lookup"><span data-stu-id="21181-373">-   `"#,0."`, which uses the thousands separator to format the number 100 million as the string "100,000,000".</span></span><br /><span data-ttu-id="21181-374">-   `"#0,."`, die mit dem Faktor Tausendstel Skalierung so formatieren Sie die Zahl 100 Millionen als die Zeichenfolge "100000" verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-374">-   `"#0,."`, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</span></span><br /><span data-ttu-id="21181-375">-   `"#,0,."`, welches wird das Tausendertrennzeichen verwendet und mit einem Faktor von auf die Zahl 100 Millionen als die Zeichenfolge "100,000" zu formatieren.</span><span class="sxs-lookup"><span data-stu-id="21181-375">-   `"#,0,."`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</span></span>|  
|<span data-ttu-id="21181-376">(`:`)</span><span class="sxs-lookup"><span data-stu-id="21181-376">(`:`)</span></span>|<span data-ttu-id="21181-377">Zeittrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-377">Time separator.</span></span> <span data-ttu-id="21181-378">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Zeittrennzeichen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-378">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="21181-379">Das Zeittrennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden.</span><span class="sxs-lookup"><span data-stu-id="21181-379">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="21181-380">Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird von den Systemeinstellungen bestimmt.</span><span class="sxs-lookup"><span data-stu-id="21181-380">The actual character used as the time separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="21181-381">(`/`)</span><span class="sxs-lookup"><span data-stu-id="21181-381">(`/`)</span></span>|<span data-ttu-id="21181-382">Trennzeichen für Datumsangaben.</span><span class="sxs-lookup"><span data-stu-id="21181-382">Date separator.</span></span> <span data-ttu-id="21181-383">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Datumstrennzeichen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-383">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="21181-384">Das Datumstrennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden.</span><span class="sxs-lookup"><span data-stu-id="21181-384">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="21181-385">Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird von den Systemeinstellungen bestimmt.</span><span class="sxs-lookup"><span data-stu-id="21181-385">The actual character used as the date separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="21181-386">(`E-``E+``e-``e+`)</span><span class="sxs-lookup"><span data-stu-id="21181-386">(`E-``E+``e-``e+`)</span></span>|<span data-ttu-id="21181-387">Wissenschaftliches Format.</span><span class="sxs-lookup"><span data-stu-id="21181-387">Scientific format.</span></span> <span data-ttu-id="21181-388">Wenn der Formatausdruck mindestens einen Ziffernplatzhalter enthält (`0` oder `#`) auf der linken Seite des `E-`, `E+`, `e-`, oder `e+`, wird die Zahl im wissenschaftlichen Format angezeigt und `E` oder `e` wird zwischen der Zahl und dem Exponenten eingefügt.</span><span class="sxs-lookup"><span data-stu-id="21181-388">If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent.</span></span> <span data-ttu-id="21181-389">Die Anzahl der Ziffernplatzhalter auf der linken Seite bestimmt die Anzahl der Ziffern im Exponenten.</span><span class="sxs-lookup"><span data-stu-id="21181-389">The number of digit placeholders to the left determines the number of digits in the exponent.</span></span> <span data-ttu-id="21181-390">Verwendung `E-` oder `e-` ein Minuszeichen neben negativen Exponenten zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="21181-390">Use `E-` or `e-` to place a minus sign next to negative exponents.</span></span> <span data-ttu-id="21181-391">Verwendung `E+` oder `e+` um negativen Exponenten ein Minuszeichen und positiven Exponenten ein Pluszeichen einzufügen.</span><span class="sxs-lookup"><span data-stu-id="21181-391">Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents.</span></span> <span data-ttu-id="21181-392">Sie müssen auch Ziffernplatzhalter rechts von diesem Symbol, um die richtige Formatierung einschließen.</span><span class="sxs-lookup"><span data-stu-id="21181-392">You must also include digit placeholders to the right of this symbol to get correct formatting.</span></span>|  
|<span data-ttu-id="21181-393">`-` `+` `$` ( )</span><span class="sxs-lookup"><span data-stu-id="21181-393">`-` `+` `$` ( )</span></span>|<span data-ttu-id="21181-394">Literalzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-394">Literal characters.</span></span> <span data-ttu-id="21181-395">Diese Zeichen werden genau wie in der Formatzeichenfolge eingegeben angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-395">These characters are displayed exactly as typed in the format string.</span></span> <span data-ttu-id="21181-396">Um ein anderes Zeichen als die hier aufgeführten anzuzeigen, fügen sie davor ein umgekehrter Schrägstrich (`\`) oder schließen Sie ihn in doppelte Anführungszeichen ("").</span><span class="sxs-lookup"><span data-stu-id="21181-396">To display a character other than one of those listed, precede it with a backslash (`\`) or enclose it in double quotation marks (" ").</span></span>|  
|<span data-ttu-id="21181-397">(`\`)</span><span class="sxs-lookup"><span data-stu-id="21181-397">(`\`)</span></span>|<span data-ttu-id="21181-398">Zeigt das nächste Zeichen in der Formatzeichenfolge an.</span><span class="sxs-lookup"><span data-stu-id="21181-398">Displays the next character in the format string.</span></span> <span data-ttu-id="21181-399">Um ein Zeichen anzuzeigen, die besondere Bedeutung als Literalzeichen hat, fügen sie davor ein umgekehrter Schrägstrich (`\`).</span><span class="sxs-lookup"><span data-stu-id="21181-399">To display a character that has special meaning as a literal character, precede it with a backslash (`\`).</span></span> <span data-ttu-id="21181-400">Der umgekehrte Schrägstrich selbst wird nicht angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-400">The backslash itself isn't displayed.</span></span> <span data-ttu-id="21181-401">Mit einem umgekehrten Schrägstrich entspricht dem einschließen des nächsten Zeichens in doppelte Anführungszeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-401">Using a backslash is the same as enclosing the next character in double quotation marks.</span></span> <span data-ttu-id="21181-402">Um einen umgekehrten Schrägstrich anzuzeigen, verwenden Sie zwei umgekehrte Schrägstriche (`\\`).</span><span class="sxs-lookup"><span data-stu-id="21181-402">To display a backslash, use two backslashes (`\\`).</span></span><br /><br /> <span data-ttu-id="21181-403">Beispiele für Zeichen, die nicht angezeigt werden können, als Literalzeichen Formatieren von Datums- und uhrzeitformatierungen Zeichen sind (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, und `:`), die Zeichen zum Formatieren von numerischen (`#`, `0`, `%`, `E`, `e`, Komma und Punkt), und die Zeichen zum Formatieren von Zeichenfolgen (`@`, `&`, `<`, `>`, und `!`).</span><span class="sxs-lookup"><span data-stu-id="21181-403">Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).</span></span>|  
|<span data-ttu-id="21181-404">(`"``ABC``"`)</span><span class="sxs-lookup"><span data-stu-id="21181-404">(`"``ABC``"`)</span></span>|<span data-ttu-id="21181-405">Zeigt die Zeichenfolge in doppelte Anführungszeichen ("").</span><span class="sxs-lookup"><span data-stu-id="21181-405">Displays the string inside the double quotation marks (" ").</span></span> <span data-ttu-id="21181-406">Um eine Zeichenfolge im Formatargument innerhalb des Codes einzuschließen, verwenden Sie `Chr(34)` , schließen Sie den Text (`34` ist der Zeichencode für ein Anführungszeichen (")).</span><span class="sxs-lookup"><span data-stu-id="21181-406">To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (")).</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="21181-407">Legacy-Codebeispiel</span><span class="sxs-lookup"><span data-stu-id="21181-407">Legacy Code Example</span></span>  
 <span data-ttu-id="21181-408">Die folgende Tabelle enthält einige Beispielausdrücke-Format für Zahlen.</span><span class="sxs-lookup"><span data-stu-id="21181-408">The following table contains some sample format expressions for numbers.</span></span> <span data-ttu-id="21181-409">(Allen diesen Beispielen wird davon ausgegangen, dass Ihre Systemgebietsschema Englisch-USA ist) Die erste Spalte enthält die Formatzeichenfolgen für die `Style` Argument der `Format` -Funktion; die anderen Spalten enthalten die resultierende Ausgabe, wenn die formatierten Daten der in den Spaltenüberschriften angegebenen Wert verfügt.</span><span class="sxs-lookup"><span data-stu-id="21181-409">(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</span></span>  
  
|<span data-ttu-id="21181-410">Format (`Style`)</span><span class="sxs-lookup"><span data-stu-id="21181-410">Format (`Style`)</span></span>|<span data-ttu-id="21181-411">"5" formatiert als</span><span class="sxs-lookup"><span data-stu-id="21181-411">"5" formatted as</span></span>|<span data-ttu-id="21181-412">"-5" formatiert als</span><span class="sxs-lookup"><span data-stu-id="21181-412">"-5" formatted as</span></span>|<span data-ttu-id="21181-413">"0,5" formatiert als</span><span class="sxs-lookup"><span data-stu-id="21181-413">"0.5" formatted as</span></span>|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a><span data-ttu-id="21181-414">Vordefinierte Datums-/Zeitformate</span><span class="sxs-lookup"><span data-stu-id="21181-414">Predefined Date/Time Formats</span></span>  
 <span data-ttu-id="21181-415">Die folgende Tabelle identifiziert die vordefinierten Datums- und Zeitformate.</span><span class="sxs-lookup"><span data-stu-id="21181-415">The following table identifies the predefined date and time format names.</span></span> <span data-ttu-id="21181-416">Diese möglicherweise nach Namen als Formatargument für verwendet werden die `Format` Funktion:</span><span class="sxs-lookup"><span data-stu-id="21181-416">These may be used by name as the style argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="21181-417">Formatname</span><span class="sxs-lookup"><span data-stu-id="21181-417">Format Name</span></span>|<span data-ttu-id="21181-418">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-418">Description</span></span>|  
|-|-|  
|<span data-ttu-id="21181-419">`General Date`, oder `G`</span><span class="sxs-lookup"><span data-stu-id="21181-419">`General Date`, or `G`</span></span>|<span data-ttu-id="21181-420">Zeigt ein Datum und/oder eine Uhrzeit.</span><span class="sxs-lookup"><span data-stu-id="21181-420">Displays a date and/or time.</span></span> <span data-ttu-id="21181-421">Beispielsweise `3/12/2008 11:07:31 AM`.</span><span class="sxs-lookup"><span data-stu-id="21181-421">For example, `3/12/2008 11:07:31 AM`.</span></span> <span data-ttu-id="21181-422">Datumsanzeige wird vom aktuellen Kulturwert der Anwendung bestimmt.</span><span class="sxs-lookup"><span data-stu-id="21181-422">Date display is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="21181-423">`Long Date`, `Medium Date`oder `D`</span><span class="sxs-lookup"><span data-stu-id="21181-423">`Long Date`, `Medium Date`, or `D`</span></span>|<span data-ttu-id="21181-424">Zeigt ein Datum entsprechend dem langen Datumsformat Ihrer aktuellen kultureinstellung an.</span><span class="sxs-lookup"><span data-stu-id="21181-424">Displays a date according to your current culture's long date format.</span></span> <span data-ttu-id="21181-425">Beispielsweise `Wednesday, March 12, 2008`.</span><span class="sxs-lookup"><span data-stu-id="21181-425">For example, `Wednesday, March 12, 2008`.</span></span>|  
|<span data-ttu-id="21181-426">`Short Date`, oder `d`</span><span class="sxs-lookup"><span data-stu-id="21181-426">`Short Date`, or `d`</span></span>|<span data-ttu-id="21181-427">Zeigt ein Datum unter Verwendung der aktuellen Kultur kurzen Datumsformat.</span><span class="sxs-lookup"><span data-stu-id="21181-427">Displays a date using your current culture's short date format.</span></span> <span data-ttu-id="21181-428">Beispielsweise `3/12/2008`.</span><span class="sxs-lookup"><span data-stu-id="21181-428">For example, `3/12/2008`.</span></span><br /><br /> <span data-ttu-id="21181-429">Die `d` Zeichen zeigt den Tag in einem benutzerdefinierten Datumsformat.</span><span class="sxs-lookup"><span data-stu-id="21181-429">The `d` character displays the day in a user-defined date format.</span></span>|  
|<span data-ttu-id="21181-430">`Long Time`, `Medium Time`oder `T`</span><span class="sxs-lookup"><span data-stu-id="21181-430">`Long Time`, `Medium Time`, or `T`</span></span>|<span data-ttu-id="21181-431">Zeigt eine Uhrzeit mit lange Uhrzeitformat Ihrer aktuellen kultureinstellung an. in der Regel umfasst, Stunden, Minuten und Sekunden.</span><span class="sxs-lookup"><span data-stu-id="21181-431">Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</span></span> <span data-ttu-id="21181-432">Beispielsweise `11:07:31 AM`.</span><span class="sxs-lookup"><span data-stu-id="21181-432">For example, `11:07:31 AM`.</span></span>|  
|<span data-ttu-id="21181-433">`Short Time` oder `t`</span><span class="sxs-lookup"><span data-stu-id="21181-433">`Short Time` or `t`</span></span>|<span data-ttu-id="21181-434">Zeigt eine Uhrzeit entsprechend Ihrer aktuellen kultureinstellung kurzen Zeitformat.</span><span class="sxs-lookup"><span data-stu-id="21181-434">Displays a time using your current culture's short time format.</span></span> <span data-ttu-id="21181-435">Beispielsweise `11:07 AM`.</span><span class="sxs-lookup"><span data-stu-id="21181-435">For example, `11:07 AM`.</span></span><br /><br /> <span data-ttu-id="21181-436">Die `t` Zeichen zeigt `AM` oder `PM` Werte für Gebietsschemas, die in einem benutzerdefinierten Uhrzeitformat 12-Stunden-Format verwenden.</span><span class="sxs-lookup"><span data-stu-id="21181-436">The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.</span></span>|  
|`f`|<span data-ttu-id="21181-437">Zeigt den langen Datums- und des kurzen Format Ihrer aktuellen kultureinstellung an.</span><span class="sxs-lookup"><span data-stu-id="21181-437">Displays the long date and short time according to your current culture's format.</span></span> <span data-ttu-id="21181-438">Beispielsweise `Wednesday, March 12, 2008 11:07 AM`.</span><span class="sxs-lookup"><span data-stu-id="21181-438">For example, `Wednesday, March 12, 2008 11:07 AM`.</span></span>|  
|`F`|<span data-ttu-id="21181-439">Zeigt das lange Datum und lange Format Ihrer aktuellen kultureinstellung.</span><span class="sxs-lookup"><span data-stu-id="21181-439">Displays the long date and long time according to your current culture's format.</span></span> <span data-ttu-id="21181-440">Beispielsweise `Wednesday, March 12, 2008 11:07:31 AM`.</span><span class="sxs-lookup"><span data-stu-id="21181-440">For example, `Wednesday, March 12, 2008 11:07:31 AM`.</span></span>|  
|`g`|<span data-ttu-id="21181-441">Zeigt das kurzes Datum und kurze Zeit entsprechend Ihrer aktuellen kultureinstellung-Format.</span><span class="sxs-lookup"><span data-stu-id="21181-441">Displays the short date and short time according to your current culture's format.</span></span> <span data-ttu-id="21181-442">Beispielsweise `3/12/2008 11:07 AM`.</span><span class="sxs-lookup"><span data-stu-id="21181-442">For example, `3/12/2008 11:07 AM`.</span></span>|  
|<span data-ttu-id="21181-443">`M`, `m`</span><span class="sxs-lookup"><span data-stu-id="21181-443">`M`, `m`</span></span>|<span data-ttu-id="21181-444">Zeigt den Monat und Tag eines Datums.</span><span class="sxs-lookup"><span data-stu-id="21181-444">Displays the month and the day of a date.</span></span> <span data-ttu-id="21181-445">Beispielsweise `March 12`.</span><span class="sxs-lookup"><span data-stu-id="21181-445">For example, `March 12`.</span></span><br /><br /> <span data-ttu-id="21181-446">Die `M` Zeichen zeigt den Monat in einem benutzerdefinierten Datumsformat.</span><span class="sxs-lookup"><span data-stu-id="21181-446">The `M` character displays the month in a user-defined date format.</span></span> <span data-ttu-id="21181-447">Die `m` Zeichen zeigt die Minuten in einem benutzerdefinierten Uhrzeitformat an.</span><span class="sxs-lookup"><span data-stu-id="21181-447">The `m` character displays the minutes in a user-defined time format.</span></span>|  
|<span data-ttu-id="21181-448">`R`, `r`</span><span class="sxs-lookup"><span data-stu-id="21181-448">`R`, `r`</span></span>|<span data-ttu-id="21181-449">Formatiert das Datum gemäß der <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="21181-449">Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property.</span></span> <span data-ttu-id="21181-450">Beispielsweise `Wed, 12 Mar 2008 11:07:31 GMT`.</span><span class="sxs-lookup"><span data-stu-id="21181-450">For example, `Wed, 12 Mar 2008 11:07:31 GMT`.</span></span> <span data-ttu-id="21181-451">Den Wert von Datum und Uhrzeit formatierte Datum nicht angepasst.</span><span class="sxs-lookup"><span data-stu-id="21181-451">The formatted date does not adjust the value of the date and time.</span></span> <span data-ttu-id="21181-452">Sie müssen den Datums-/Uhrzeitwert an GMT anpassen, vor dem Aufruf der `Format` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-452">You must adjust the Date/Time value to GMT before calling the `Format` function.</span></span>|  
|`s`|<span data-ttu-id="21181-453">Formatiert das Datum und die Uhrzeit als sortierbaren Index.</span><span class="sxs-lookup"><span data-stu-id="21181-453">Formats the date and time as a sortable index.</span></span> <span data-ttu-id="21181-454">Beispielsweise `2008-03-12T11:07:31`.</span><span class="sxs-lookup"><span data-stu-id="21181-454">For example, `2008-03-12T11:07:31`.</span></span><br /><br /> <span data-ttu-id="21181-455">Die `s` Zeichen zeigt die Sekunden in einem benutzerdefinierten Uhrzeitformat an.</span><span class="sxs-lookup"><span data-stu-id="21181-455">The `s` character displays the seconds in a user-defined time format.</span></span>|  
|`u`|<span data-ttu-id="21181-456">Formatiert das Datum und die Uhrzeit als sortierbaren GMT-Index.</span><span class="sxs-lookup"><span data-stu-id="21181-456">Formats the date and time as a GMT sortable index.</span></span> <span data-ttu-id="21181-457">Beispielsweise `2008-03-12 11:07:31Z`.</span><span class="sxs-lookup"><span data-stu-id="21181-457">For example, `2008-03-12 11:07:31Z`.</span></span>|  
|`U`|<span data-ttu-id="21181-458">Formatiert das Datum und Uhrzeit mit das lange Datum und lange Zeit als GMT.</span><span class="sxs-lookup"><span data-stu-id="21181-458">Formats the date and time with the long date and long time as GMT.</span></span> <span data-ttu-id="21181-459">Beispielsweise `Wednesday, March 12, 2008 6:07:31 PM`.</span><span class="sxs-lookup"><span data-stu-id="21181-459">For example, `Wednesday, March 12, 2008 6:07:31 PM`.</span></span>|  
|<span data-ttu-id="21181-460">`Y`, `y`</span><span class="sxs-lookup"><span data-stu-id="21181-460">`Y`, `y`</span></span>|<span data-ttu-id="21181-461">Formatiert das Datum als Jahr und Monat an.</span><span class="sxs-lookup"><span data-stu-id="21181-461">Formats the date as the year and month.</span></span> <span data-ttu-id="21181-462">Beispielsweise `March, 2008`.</span><span class="sxs-lookup"><span data-stu-id="21181-462">For example, `March, 2008`.</span></span><br /><br /> <span data-ttu-id="21181-463">Die `Y` und `y` Zeichen zeigt das Jahr in einem benutzerdefinierten Datumsformat.</span><span class="sxs-lookup"><span data-stu-id="21181-463">The `Y` and `y` characters display the year in a user-defined date format.</span></span>|  
  
 <span data-ttu-id="21181-464">Weitere Informationen zu aktuellen Kulturwert der Anwendung, finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="21181-464">For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
## <a name="user-defined-datetime-formats"></a><span data-ttu-id="21181-465">Benutzerdefinierte Datums-/Zeitformate</span><span class="sxs-lookup"><span data-stu-id="21181-465">User-Defined Date/Time Formats</span></span>  
 <span data-ttu-id="21181-466">In der folgenden Tabelle sind die Zeichen, dass Sie zum Erstellen von benutzerdefinierten Datums-/Zeitformate verwenden können.</span><span class="sxs-lookup"><span data-stu-id="21181-466">The following table shows characters you can use to create user-defined date/time formats.</span></span> <span data-ttu-id="21181-467">Anders als in früheren Versionen von [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], diesen Formatzeichen Groß-/Kleinschreibung beachtet.</span><span class="sxs-lookup"><span data-stu-id="21181-467">Unlike in earlier versions of [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], these format characters are case-sensitive.</span></span>  
  
|<span data-ttu-id="21181-468">Zeichen</span><span class="sxs-lookup"><span data-stu-id="21181-468">Character</span></span>|<span data-ttu-id="21181-469">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-469">Description</span></span>|  
|-|-|  
|<span data-ttu-id="21181-470">(`:`)</span><span class="sxs-lookup"><span data-stu-id="21181-470">(`:`)</span></span>|<span data-ttu-id="21181-471">Zeittrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-471">Time separator.</span></span> <span data-ttu-id="21181-472">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Zeittrennzeichen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-472">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="21181-473">Das Zeittrennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden.</span><span class="sxs-lookup"><span data-stu-id="21181-473">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="21181-474">Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird, wird vom aktuellen Kulturwert der Anwendung bestimmt.</span><span class="sxs-lookup"><span data-stu-id="21181-474">The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="21181-475">(`/`)</span><span class="sxs-lookup"><span data-stu-id="21181-475">(`/`)</span></span>|<span data-ttu-id="21181-476">Trennzeichen für Datumsangaben.</span><span class="sxs-lookup"><span data-stu-id="21181-476">Date separator.</span></span> <span data-ttu-id="21181-477">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Datumstrennzeichen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-477">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="21181-478">Das Datumstrennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden.</span><span class="sxs-lookup"><span data-stu-id="21181-478">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="21181-479">Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird, richtet sich nach der aktuellen Kultur der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="21181-479">The actual character that is used as the date separator in formatted output is determined by your application's current culture.</span></span>|  
|<span data-ttu-id="21181-480">(`%`)</span><span class="sxs-lookup"><span data-stu-id="21181-480">(`%`)</span></span>|<span data-ttu-id="21181-481">Verwendet, um anzugeben, dass die folgenden Zeichen als unabhängig von der alle nachfolgenden Buchstaben ein Einzelbuchstabenformat gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-481">Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</span></span> <span data-ttu-id="21181-482">Außerdem verwendet, um anzugeben, dass ein Einzelbuchstabenformat als benutzerdefiniertes Format gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="21181-482">Also used to indicate that a single-letter format is read as a user-defined format.</span></span> <span data-ttu-id="21181-483">Finden Sie weitere Details folgt.</span><span class="sxs-lookup"><span data-stu-id="21181-483">See what follows for additional details.</span></span>|  
|`d`|<span data-ttu-id="21181-484">Zeigt den Tag als Zahl ohne führende Null an (z. B. `1`).</span><span class="sxs-lookup"><span data-stu-id="21181-484">Displays the day as a number without a leading zero (for example, `1`).</span></span> <span data-ttu-id="21181-485">Verwendung `%d` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-485">Use `%d` if this is the only character in your user-defined numeric format.</span></span>|  
|`dd`|<span data-ttu-id="21181-486">Zeigt den Tag als Zahl mit einer führenden Null an (z. B. `01`).</span><span class="sxs-lookup"><span data-stu-id="21181-486">Displays the day as a number with a leading zero (for example, `01`).</span></span>|  
|`ddd`|<span data-ttu-id="21181-487">Zeigt den Tag als Abkürzung an (z. B. `Sun`).</span><span class="sxs-lookup"><span data-stu-id="21181-487">Displays the day as an abbreviation (for example, `Sun`).</span></span>|  
|`dddd`|<span data-ttu-id="21181-488">Zeigt den Tag mit vollem Namen an (z. B. `Sunday`).</span><span class="sxs-lookup"><span data-stu-id="21181-488">Displays the day as a full name (for example, `Sunday`).</span></span>|  
|`M`|<span data-ttu-id="21181-489">Zeigt den Monat als Zahl ohne führende Null an (Januar wird z. B. dargestellt, als `1`).</span><span class="sxs-lookup"><span data-stu-id="21181-489">Displays the month as a number without a leading zero (for example, January is represented as `1`).</span></span> <span data-ttu-id="21181-490">Verwendung `%M` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-490">Use `%M` if this is the only character in your user-defined numeric format.</span></span>|  
|`MM`|<span data-ttu-id="21181-491">Zeigt den Monat als Zahl mit einer führenden Null an (z. B. `01/12/01`).</span><span class="sxs-lookup"><span data-stu-id="21181-491">Displays the month as a number with a leading zero (for example, `01/12/01`).</span></span>|  
|`MMM`|<span data-ttu-id="21181-492">Zeigt den Monat als Abkürzung an (z. B. `Jan`).</span><span class="sxs-lookup"><span data-stu-id="21181-492">Displays the month as an abbreviation (for example, `Jan`).</span></span>|  
|`MMMM`|<span data-ttu-id="21181-493">Zeigt den Monat als vollständigen Monatsnamen an (z. B. `January`).</span><span class="sxs-lookup"><span data-stu-id="21181-493">Displays the month as a full month name (for example, `January`).</span></span>|  
|`gg`|<span data-ttu-id="21181-494">Zeigt die Zeichenfolge Zeitraum (z. B. `A.D.`).</span><span class="sxs-lookup"><span data-stu-id="21181-494">Displays the period/era string (for example, `A.D.`).</span></span>|  
|`h`|<span data-ttu-id="21181-495">Zeigt die Stunde als Zahl ohne führende Nullen im 12-Stunden-Format (z. B. `1:15:15 PM`).</span><span class="sxs-lookup"><span data-stu-id="21181-495">Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`).</span></span> <span data-ttu-id="21181-496">Verwendung `%h` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-496">Use `%h` if this is the only character in your user-defined numeric format.</span></span>|  
|`hh`|<span data-ttu-id="21181-497">Zeigt die Stunde als Zahl mit führenden Nullen im 12-Stunden-Format (z. B. `01:15:15 PM`).</span><span class="sxs-lookup"><span data-stu-id="21181-497">Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).</span></span>|  
|`H`|<span data-ttu-id="21181-498">Zeigt die Stunde als Zahl ohne führende Nullen im 24-Stunden-Format (z. B. `1:15:15`).</span><span class="sxs-lookup"><span data-stu-id="21181-498">Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`).</span></span> <span data-ttu-id="21181-499">Verwendung `%H` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-499">Use `%H` if this is the only character in your user-defined numeric format.</span></span>|  
|`HH`|<span data-ttu-id="21181-500">Zeigt die Stunde als Zahl mit führenden Nullen im 24-Stunden-Format (z. B. `01:15:15`).</span><span class="sxs-lookup"><span data-stu-id="21181-500">Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).</span></span>|  
|`m`|<span data-ttu-id="21181-501">Zeigt die Minute als Zahl ohne führende Nullen an (z. B. `12:1:15`).</span><span class="sxs-lookup"><span data-stu-id="21181-501">Displays the minute as a number without leading zeros (for example, `12:1:15`).</span></span> <span data-ttu-id="21181-502">Verwendung `%m` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-502">Use `%m` if this is the only character in your user-defined numeric format.</span></span>|  
|`mm`|<span data-ttu-id="21181-503">Zeigt die Minute als Zahl mit führenden Nullen an (z. B. `12:01:15`).</span><span class="sxs-lookup"><span data-stu-id="21181-503">Displays the minute as a number with leading zeros (for example, `12:01:15`).</span></span>|  
|`s`|<span data-ttu-id="21181-504">Zeigt die Sekunde als Zahl ohne führende Nullen an (z. B. `12:15:5`).</span><span class="sxs-lookup"><span data-stu-id="21181-504">Displays the second as a number without leading zeros (for example, `12:15:5`).</span></span> <span data-ttu-id="21181-505">Verwendung `%s` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-505">Use `%s` if this is the only character in your user-defined numeric format.</span></span>|  
|`ss`|<span data-ttu-id="21181-506">Zeigt die Sekunde als Zahl mit führenden Nullen an (z. B. `12:15:05`).</span><span class="sxs-lookup"><span data-stu-id="21181-506">Displays the second as a number with leading zeros (for example, `12:15:05`).</span></span>|  
|`f`|<span data-ttu-id="21181-507">Zeigt Sekundenbruchteile an.</span><span class="sxs-lookup"><span data-stu-id="21181-507">Displays fractions of seconds.</span></span> <span data-ttu-id="21181-508">Z. B. `ff` zeigt Hundertstelsekunden an, während `ffff` Zehntausendstelsekunden Sekunden angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-508">For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds.</span></span> <span data-ttu-id="21181-509">Sie können bis zu sieben `f` Symbole im benutzerdefinierten Format.</span><span class="sxs-lookup"><span data-stu-id="21181-509">You may use up to seven `f` symbols in your user-defined format.</span></span> <span data-ttu-id="21181-510">Verwendung `%f` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-510">Use `%f` if this is the only character in your user-defined numeric format.</span></span>|  
|`t`|<span data-ttu-id="21181-511">Verwendet ein 12-Stunden-Format und Großbuchstaben `A` für jede Stunde vor Mittag zeigt einen Großbuchstaben `P` für jede Stunde zwischen Mittag und 23:59 Uhr</span><span class="sxs-lookup"><span data-stu-id="21181-511">Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M.</span></span> <span data-ttu-id="21181-512">Verwendung `%t` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-512">Use `%t` if this is the only character in your user-defined numeric format.</span></span>|  
|`tt`|<span data-ttu-id="21181-513">Für Gebietsschemas, 12-Stunden-Format verwenden, zeigt einen Großbuchstaben `AM` für jede Stunde vor Mittag zeigt einen Großbuchstaben `PM` hinter jeder Stunde zwischen Mittag und 23:59 Uhr</span><span class="sxs-lookup"><span data-stu-id="21181-513">For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.</span></span><br /><br /> <span data-ttu-id="21181-514">Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigt nichts an.</span><span class="sxs-lookup"><span data-stu-id="21181-514">For locales that use a 24-hour clock, displays nothing.</span></span>|  
|`y`|<span data-ttu-id="21181-515">Zeigt die Jahreszahl (0-9) ohne führende Nullen an.</span><span class="sxs-lookup"><span data-stu-id="21181-515">Displays the year number (0-9) without leading zeros.</span></span> <span data-ttu-id="21181-516">Verwendung `%y` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-516">Use `%y` if this is the only character in your user-defined numeric format.</span></span>|  
|`yy`|<span data-ttu-id="21181-517">Zeigt das Jahr im numerischen Format von zwei Ziffern mit einer führenden Null an, falls zutreffend.</span><span class="sxs-lookup"><span data-stu-id="21181-517">Displays the year in two-digit numeric format with a leading zero, if applicable.</span></span>|  
|`yyy`|<span data-ttu-id="21181-518">Zeigt das Jahr im numerischen Format vierstellige an.</span><span class="sxs-lookup"><span data-stu-id="21181-518">Displays the year in four-digit numeric format.</span></span>|  
|`yyyy`|<span data-ttu-id="21181-519">Zeigt das Jahr im numerischen Format vierstellige an.</span><span class="sxs-lookup"><span data-stu-id="21181-519">Displays the year in four-digit numeric format.</span></span>|  
|`z`|<span data-ttu-id="21181-520">Zeigt den Zeitzonenunterschied ohne führende Null an (z. B. `-8`).</span><span class="sxs-lookup"><span data-stu-id="21181-520">Displays the timezone offset without a leading zero (for example, `-8`).</span></span> <span data-ttu-id="21181-521">Verwendung `%z` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</span><span class="sxs-lookup"><span data-stu-id="21181-521">Use `%z` if this is the only character in your user-defined numeric format.</span></span>|  
|`zz`|<span data-ttu-id="21181-522">Zeigt den Zeitzonenunterschied mit einer führenden Null an (z. B. `-08`)</span><span class="sxs-lookup"><span data-stu-id="21181-522">Displays the timezone offset with a leading zero (for example, `-08`)</span></span>|  
|`zzz`|<span data-ttu-id="21181-523">Zeigt den vollständigen Zeitzonenunterschied (z. B. `-08:00`)</span><span class="sxs-lookup"><span data-stu-id="21181-523">Displays the full timezone offset (for example, `-08:00`)</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="21181-524">Legacy-Codebeispiel</span><span class="sxs-lookup"><span data-stu-id="21181-524">Legacy Code Example</span></span>  
 <span data-ttu-id="21181-525">Im folgenden sind Beispiele für benutzerdefinierte Datums- und Zeitformate für `December 7, 1958, 8:50 PM, 35 seconds`:</span><span class="sxs-lookup"><span data-stu-id="21181-525">The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:</span></span>  
  
|<span data-ttu-id="21181-526">Format</span><span class="sxs-lookup"><span data-stu-id="21181-526">Format</span></span>|<span data-ttu-id="21181-527">Anzeige</span><span class="sxs-lookup"><span data-stu-id="21181-527">Displays</span></span>|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-528">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-528">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-529">Die minimale zeitauflösung für ein Gerät wird vom Hersteller des Geräts bestimmt.</span><span class="sxs-lookup"><span data-stu-id="21181-529">The minimum time resolution for a device is determined by the manufacturer of the device.</span></span> <span data-ttu-id="21181-530">Wenn die Auflösung der Uhrzeit für das Gerät genug, grob gehalten ist die `f` Formatzeichen gibt 0 bei Ausführung auf diesem Gerät.</span><span class="sxs-lookup"><span data-stu-id="21181-530">If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-531">Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der `Format`-Funktion zur Formatierung von Werten mit `String`-Formaten und benutzerdefinierten Formaten.</span><span class="sxs-lookup"><span data-stu-id="21181-531">This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats.</span></span> <span data-ttu-id="21181-532">Die tatsächlich von Ihrem System ausgegebene Formatierung von Datumstrennzeichen (`/`), Trennzeichen für Zeitangaben (`:`) und AM/PM-Indikatoren (`t` und `tt`) richtet sich nach den Gebietsschemaeinstellungen des Codes.</span><span class="sxs-lookup"><span data-stu-id="21181-532">For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using.</span></span> <span data-ttu-id="21181-533">Wenn Datums- und Zeitangaben in der Entwicklungsumgebung angezeigt werden, werden das 24-Stunden-Zeitformat und das kurze Datumsformat des für den Code ausgewählten Gebietsschemas verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-533">When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-534">Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigen die AM/PM-Indikatoren (`t` und `tt`) nichts an.</span><span class="sxs-lookup"><span data-stu-id="21181-534">For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.</span></span>  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-535">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-535">Required.</span></span> <span data-ttu-id="21181-536">Der zu formatierende Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-536">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="21181-537">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-537">Optional.</span></span> <span data-ttu-id="21181-538">Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-538">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="21181-539">Der Standardwert ist -1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-539">Default value is –1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="21181-540">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-540">Optional.</span></span> <span data-ttu-id="21181-541"><see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob bei Bruchwerten eine führende Null angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-541"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span></span> <span data-ttu-id="21181-542">Weitere Informationen finden Sie in den Hinweisen zu Werten.</span><span class="sxs-lookup"><span data-stu-id="21181-542">See "Remarks" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="21181-543">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-543">Optional.</span></span> <span data-ttu-id="21181-544"><see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob negative Werte in Klammern gesetzt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-544"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="21181-545">Weitere Informationen finden Sie in den Hinweisen zu Werten.</span><span class="sxs-lookup"><span data-stu-id="21181-545">See "Remarks" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="21181-546">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-546">Optional.</span></span> <span data-ttu-id="21181-547"><see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob Zahlen mithilfe des Gruppentrennzeichens gruppiert werden, das in den regionalen Einstellungen des Computers definiert ist.</span><span class="sxs-lookup"><span data-stu-id="21181-547"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span></span> <span data-ttu-id="21181-548">Weitere Informationen finden Sie in den Hinweisen zu Werten.</span><span class="sxs-lookup"><span data-stu-id="21181-548">See "Remarks" for values.</span></span></param>
        <summary><span data-ttu-id="21181-549">Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</span><span class="sxs-lookup"><span data-stu-id="21181-549">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></summary>
        <returns><span data-ttu-id="21181-550">Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</span><span class="sxs-lookup"><span data-stu-id="21181-550">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-551">Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden stattdessen des Computers entsprechende regionale Einstellungen Werte verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-551">When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</span></span>  
  
 <span data-ttu-id="21181-552">Die Position des Währungssymbols relativ zu den Currency-Wert wird von den regionalen Systemeinstellungen bestimmt.</span><span class="sxs-lookup"><span data-stu-id="21181-552">The position of the currency symbol relative to the currency value is determined by the system's regional settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-553">Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="21181-553">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="21181-554">Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt.</span><span class="sxs-lookup"><span data-stu-id="21181-554">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="21181-555">Allerdings es möglicherweise geändert werden programmgesteuert mithilfe von .NET Framework, außer dem führenden Null an, die aus stammt die `Number` Registerkarte.</span><span class="sxs-lookup"><span data-stu-id="21181-555">However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.</span></span>  
  
 <span data-ttu-id="21181-556">Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente akzeptiert die folgenden TriState-Enumerationswerte.</span><span class="sxs-lookup"><span data-stu-id="21181-556">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.</span></span>  
  
|<span data-ttu-id="21181-557">Wert</span><span class="sxs-lookup"><span data-stu-id="21181-557">Value</span></span>|<span data-ttu-id="21181-558">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-558">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="21181-559">True</span><span class="sxs-lookup"><span data-stu-id="21181-559">True</span></span>|  
|`TriState.False`|<span data-ttu-id="21181-560">False</span><span class="sxs-lookup"><span data-stu-id="21181-560">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="21181-561">Regionale Einstellungen des Computers</span><span class="sxs-lookup"><span data-stu-id="21181-561">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-562">Das folgende Beispiel veranschaulicht die Verwendung der `FormatCurrency`-Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-562">The following example illustrates the use of the `FormatCurrency` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="21181-563">Anzahl der Stellen nach dem Dezimalzeichen ist größer als 99.</span><span class="sxs-lookup"><span data-stu-id="21181-563">Number of digits after decimal point is greater than 99.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="21181-564">Typ ist nicht numerisch.</span><span class="sxs-lookup"><span data-stu-id="21181-564">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-565">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-565">Required.</span></span> <span data-ttu-id="21181-566">Der zu formatierende <see langword="Date" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-566"><see langword="Date" /> expression to be formatted.</span></span></param>
        <param name="NamedFormat"><span data-ttu-id="21181-567">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-567">Optional.</span></span> <span data-ttu-id="21181-568">Numerischer Wert, der das verwendete Datum-/Zeitformat angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-568">Numeric value that indicates the date/time format used.</span></span> <span data-ttu-id="21181-569">Wird der Wert nicht angegeben, so wird <see langword="DateFormat.GeneralDate" /> verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-569">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span></span></param>
        <summary><span data-ttu-id="21181-570">Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-570">Returns a string expression representing a date/time value.</span></span></summary>
        <returns><span data-ttu-id="21181-571">Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-571">Returns a string expression representing a date/time value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-572">Die `Date` -Datentyp enthält immer die Datums-und Uhrzeitinformationen.</span><span class="sxs-lookup"><span data-stu-id="21181-572">The `Date` data type always contains both date and time information.</span></span> <span data-ttu-id="21181-573">Zwecken Typumwandlung berücksichtigt Visual Basic 1/1/1 (1. Januar des Jahres 1) für das Datum und 00:00:00 (Mitternacht) ist eine neutrale Wert für die Zeit ein neutrale Wert sein.</span><span class="sxs-lookup"><span data-stu-id="21181-573">For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</span></span> <span data-ttu-id="21181-574">Wenn Sie nicht Formatieren einer `Date` Wert als Datum/Uhrzeit-Zeichenfolge `FormatDateTime` neutralen Werte nicht in der Ergebniszeichenfolge enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="21181-574">If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string.</span></span> <span data-ttu-id="21181-575">Angenommen, Sie #1/1/0001 konvertieren 9:30:00 # in eine Zeichenfolge, die das Ergebnis wird "9:30:00 AM"; Die Datumsinformationen wird unterdrückt.</span><span class="sxs-lookup"><span data-stu-id="21181-575">For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</span></span> <span data-ttu-id="21181-576">Die Datumsinformationen ist jedoch weiterhin vorhanden, in der ursprünglichen `Date` Wert und können mit Funktionen wie z. B. wiederhergestellt werden `DatePart`.</span><span class="sxs-lookup"><span data-stu-id="21181-576">However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-577">Wenn Sie übergeben die `Expression` Argument als ein `String` literal, `FormatDateTime` interpretiert gemäß der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Ihrer Anwendung festlegen.</span><span class="sxs-lookup"><span data-stu-id="21181-577">If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application.</span></span> <span data-ttu-id="21181-578">Jedoch wenn Sie ihn als übergeben einer `Date` literal, verwenden Sie das Format #mm/tt/jjjj-da `FormatDateTime` immer interpretiert eine `Date` Zeichenfolgenliteral entsprechend der Kultur Englisch (USA).</span><span class="sxs-lookup"><span data-stu-id="21181-578">However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture.</span></span> <span data-ttu-id="21181-579">Dies ist erforderlich, da, wenn eine Anwendung entwickelt und codiert `Date` Literale aus einer Kultur, aber klicken Sie dann auf einer Plattform mit einer anderen Kultur ausgeführt wird die `Date` Literale konnte nicht ordnungsgemäß analysiert werden.</span><span class="sxs-lookup"><span data-stu-id="21181-579">This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.</span></span>  
  
 <span data-ttu-id="21181-580">Die `NamedFormat` Argument hat die folgenden Einstellungen.</span><span class="sxs-lookup"><span data-stu-id="21181-580">The `NamedFormat` argument has the following settings.</span></span>  
  
|<span data-ttu-id="21181-581">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-581">Constant</span></span>|<span data-ttu-id="21181-582">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-582">Description</span></span>|  
|-|-|  
|`DateFormat.GeneralDate`|<span data-ttu-id="21181-583">Zeigen Sie ein Datum und/oder eine Uhrzeit ein.</span><span class="sxs-lookup"><span data-stu-id="21181-583">Display a date and/or time.</span></span> <span data-ttu-id="21181-584">Einen Datumsteil als kurzes Datum angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-584">Display a date part as a short date.</span></span> <span data-ttu-id="21181-585">Bei ein Uhrzeitteil wird als eine lange Zeit anzeigen.</span><span class="sxs-lookup"><span data-stu-id="21181-585">If there is a time part, display it as a long time.</span></span> <span data-ttu-id="21181-586">Falls vorhanden, werden beide Teile angezeigt.</span><span class="sxs-lookup"><span data-stu-id="21181-586">If present, both parts display.</span></span>|  
|`DateFormat.LongDate`|<span data-ttu-id="21181-587">Zeigt ein Datum unter Verwendung des lange Datumsformat in regionalen Einstellungen des Computers angegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-587">Display a date using the long date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortDate`|<span data-ttu-id="21181-588">Zeigt ein Datum unter Verwendung des kurzen Datumsformat in regionalen Einstellungen des Computers angegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-588">Display a date using the short date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.LongTime`|<span data-ttu-id="21181-589">Zeigt eine Uhrzeit das Uhrzeitformat in den regionalen Einstellungen des Computers angegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-589">Display a time using the time format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortTime`|<span data-ttu-id="21181-590">Zeigt eine Uhrzeit mit dem 24-Stunden-Format (hh: mm).</span><span class="sxs-lookup"><span data-stu-id="21181-590">Display a time using the 24-hour format (hh:mm).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-591">Dieses Beispiel veranschaulicht die Verwendung von der `FormatDateTime` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-591">This example demonstrates the use of the `FormatDateTime` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-592">Die Einstellung <paramref name="NamedFormat" /> ist nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="21181-592"><paramref name="NamedFormat" /> setting is not valid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-593">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-593">Required.</span></span> <span data-ttu-id="21181-594">Der zu formatierende Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-594">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="21181-595">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-595">Optional.</span></span> <span data-ttu-id="21181-596">Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-596">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="21181-597">Der Standardwert ist -1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-597">The default value is –1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="21181-598">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-598">Optional.</span></span> <span data-ttu-id="21181-599"><see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Bruchwerten eine führende 0 angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-599"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span></span> <span data-ttu-id="21181-600">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-600">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="21181-601">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-601">Optional.</span></span> <span data-ttu-id="21181-602"><see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-602"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span></span> <span data-ttu-id="21181-603">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-603">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="21181-604">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-604">Optional.</span></span> <span data-ttu-id="21181-605"><see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-605"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="21181-606">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-606">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="21181-607">Gibt einen als Zahl formatierten Ausdruck zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-607">Returns an expression formatted as a number.</span></span></summary>
        <returns><span data-ttu-id="21181-608">Gibt einen als Zahl formatierten Ausdruck zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-608">Returns an expression formatted as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-609">Wenn eine oder mehrere optionale Argumente ausgelassen werden werden durch die gebietsschemaeinstellungen ausgelassenes Argumentwerte bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="21181-609">When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-610">Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="21181-610">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="21181-611">Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt.</span><span class="sxs-lookup"><span data-stu-id="21181-611">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="21181-612">Allerdings kann es programmgesteuert geändert werden mithilfe von .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="21181-612">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="21181-613">Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente über die folgenden Einstellungen verfügen.</span><span class="sxs-lookup"><span data-stu-id="21181-613">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="21181-614">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-614">Constant</span></span>|<span data-ttu-id="21181-615">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-615">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="21181-616">True</span><span class="sxs-lookup"><span data-stu-id="21181-616">True</span></span>|  
|`TriState.False`|<span data-ttu-id="21181-617">False</span><span class="sxs-lookup"><span data-stu-id="21181-617">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="21181-618">Regionale Einstellungen des Computers</span><span class="sxs-lookup"><span data-stu-id="21181-618">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-619">Dieses Beispiel zeigt die `FormatNumber` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-619">This example demonstrates the `FormatNumber` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="21181-620">Typ ist nicht numerisch.</span><span class="sxs-lookup"><span data-stu-id="21181-620">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-621">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-621">Required.</span></span> <span data-ttu-id="21181-622">Der zu formatierende Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-622">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="21181-623">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-623">Optional.</span></span> <span data-ttu-id="21181-624">Numerischer Wert, der angibt, wie viele Stellen rechts neben dem Dezimaltrennzeichen angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-624">Numeric value indicating how many places to the right of the decimal are displayed.</span></span> <span data-ttu-id="21181-625">Der Standardwert ist –1, was darauf hinweist, dass die Einstellungen des Gebietsschemas verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-625">Default value is –1, which indicates that the locale settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="21181-626">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-626">Optional.</span></span> <span data-ttu-id="21181-627"><see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Dezimalzahlen eine führende Null angezeigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-627"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span></span> <span data-ttu-id="21181-628">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-628">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="21181-629">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-629">Optional.</span></span> <span data-ttu-id="21181-630"><see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-630"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="21181-631">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-631">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="21181-632">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-632">Optional.</span></span> <span data-ttu-id="21181-633"><see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-633"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="21181-634">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-634">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="21181-635">Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-635">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></summary>
        <returns><span data-ttu-id="21181-636">Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-636">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-637">Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden die Werte für Argumente ausgelassen durch die gebietsschemaeinstellungen bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="21181-637">When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-638">Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="21181-638">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="21181-639">Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt.</span><span class="sxs-lookup"><span data-stu-id="21181-639">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="21181-640">Allerdings kann es programmgesteuert geändert werden mithilfe von .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="21181-640">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="21181-641">Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente über die folgenden Einstellungen verfügen.</span><span class="sxs-lookup"><span data-stu-id="21181-641">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="21181-642">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-642">Constant</span></span>|<span data-ttu-id="21181-643">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-643">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="21181-644">True</span><span class="sxs-lookup"><span data-stu-id="21181-644">True</span></span>|  
|`TriState.False`|<span data-ttu-id="21181-645">False</span><span class="sxs-lookup"><span data-stu-id="21181-645">False</span></span>|  
|`TriState.Default`|<span data-ttu-id="21181-646">Regionale Einstellungen des Computers</span><span class="sxs-lookup"><span data-stu-id="21181-646">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-647">Dieses Beispiel veranschaulicht die Verwendung der `FormatPercent` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-647">This example illustrates the use of the `FormatPercent` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="21181-648">Typ ist nicht numerisch.</span><span class="sxs-lookup"><span data-stu-id="21181-648">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-649">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-649">Required.</span></span> <span data-ttu-id="21181-650">Jeder gültige <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-650">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Index"><span data-ttu-id="21181-651">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-651">Required.</span></span> <span data-ttu-id="21181-652"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-652"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-653">Der (1-basierte) Index des Zeichens in <c>str</c>, der zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-653">The (1-based) index of the character in <c>str</c> to be returned.</span></span></param>
        <summary><span data-ttu-id="21181-654">Gibt einen <see langword="Char" />-Wert zurück, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="21181-654">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></summary>
        <returns>
          <span data-ttu-id="21181-655"><see langword="Char" />-Wert, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="21181-655"><see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-656">Wenn `Index` ist kleiner als 1 oder größer als der Index des letzten Zeichens in `str`, wird eine `ArgumentException` ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="21181-656">If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-657">Dieses Beispiel zeigt, wie die `GetChar` Funktion zurückzugebende ein Zeichen aus einem angegebenen Index in einer `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-657">This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.</span></span>  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-658"><paramref name="str" /> ist <see langword="Nothing" />, <paramref name="Index" /> &lt; 1 oder <paramref name="Index" /> ist größer als der Index des letzten Zeichens von <paramref name="str" />.</span><span class="sxs-lookup"><span data-stu-id="21181-658"><paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-659">Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-659">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span>  <span data-ttu-id="21181-660">Die Ganzzahl ist ein auf Eins basierter Index, wenn eine Übereinstimmung gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="21181-660">The integer is a one-based index if a match is found.</span></span>  <span data-ttu-id="21181-661">Wenn keine Übereinstimmung gefunden wird, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-661">If no match is found, the function returns zero.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="21181-662">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-662">Required.</span></span> <span data-ttu-id="21181-663"><see langword="String" />-Ausdruck, der durchsucht wird.</span><span class="sxs-lookup"><span data-stu-id="21181-663"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="21181-664">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-664">Required.</span></span> <span data-ttu-id="21181-665">Gesuchter <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-665"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-666">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-666">Optional.</span></span> <span data-ttu-id="21181-667">Gibt den Typ des Zeichenfolgenvergleichs an.</span><span class="sxs-lookup"><span data-stu-id="21181-667">Specifies the type of string comparison.</span></span> <span data-ttu-id="21181-668">Wenn <c>Compare</c> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</span><span class="sxs-lookup"><span data-stu-id="21181-668">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="21181-669">Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-669">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns>
          <list type="table">
            <item>
              <term> <span data-ttu-id="21181-670">If</span><span class="sxs-lookup"><span data-stu-id="21181-670">If</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-671">Rückgabewert von InStr</span><span class="sxs-lookup"><span data-stu-id="21181-671">InStr returns</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-672"><paramref name="String1" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-672"><paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="21181-673">0</span><span class="sxs-lookup"><span data-stu-id="21181-673">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-674"><paramref name="String2" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-674"><paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="21181-675">Die Startposition für die Suche, mit Standard an der ersten Zeichenposition.</span><span class="sxs-lookup"><span data-stu-id="21181-675">The starting position for the search, which defaults to the first character position.</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-676"><paramref name="String2" /> wird nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="21181-676"><paramref name="String2" /> is not found</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-677">0</span><span class="sxs-lookup"><span data-stu-id="21181-677">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-678"><paramref name="String2" /> wurde in <paramref name="String1" /> gefunden.</span><span class="sxs-lookup"><span data-stu-id="21181-678"><paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="21181-679">Position, an der die gefundene Zeichenfolge beginnt</span><span class="sxs-lookup"><span data-stu-id="21181-679">Position where match begins</span></span>  
  
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-680">In der Regel die `InStr` Funktion wird beim Analysieren von Zeichenfolgen verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-680">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-681">Die `InStrB` Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt eine Zeichenposition.</span><span class="sxs-lookup"><span data-stu-id="21181-681">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="21181-682">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-682">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-683">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `InStrB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-683">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="21181-684">Die `Compare`-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="21181-684">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="21181-685">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-685">Constant</span></span>|<span data-ttu-id="21181-686">Wert</span><span class="sxs-lookup"><span data-stu-id="21181-686">Value</span></span>|<span data-ttu-id="21181-687">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-687">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="21181-688">0</span><span class="sxs-lookup"><span data-stu-id="21181-688">0</span></span>|<span data-ttu-id="21181-689">Führt einen binären Vergleich</span><span class="sxs-lookup"><span data-stu-id="21181-689">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="21181-690">1</span><span class="sxs-lookup"><span data-stu-id="21181-690">1</span></span>|<span data-ttu-id="21181-691">Führt einen Textvergleich aus</span><span class="sxs-lookup"><span data-stu-id="21181-691">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-692">In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-692">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start"><span data-ttu-id="21181-693">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-693">Optional.</span></span> <span data-ttu-id="21181-694">Numerischer Ausdruck, der die Anfangsposition für jede Suche festlegt.</span><span class="sxs-lookup"><span data-stu-id="21181-694">Numeric expression that sets the starting position for each search.</span></span> <span data-ttu-id="21181-695">Wenn dieser ausgelassen wird, beginnt die Suche an der ersten Zeichenposition.</span><span class="sxs-lookup"><span data-stu-id="21181-695">If omitted, search begins at the first character position.</span></span> <span data-ttu-id="21181-696">Der Anfangsindex ist 1-basiert.</span><span class="sxs-lookup"><span data-stu-id="21181-696">The start index is 1-based.</span></span></param>
        <param name="String1"><span data-ttu-id="21181-697">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-697">Required.</span></span> <span data-ttu-id="21181-698"><see langword="String" />-Ausdruck, der durchsucht wird.</span><span class="sxs-lookup"><span data-stu-id="21181-698"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="21181-699">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-699">Required.</span></span> <span data-ttu-id="21181-700">Gesuchter <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-700"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-701">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-701">Optional.</span></span> <span data-ttu-id="21181-702">Gibt den Typ des Zeichenfolgenvergleichs an.</span><span class="sxs-lookup"><span data-stu-id="21181-702">Specifies the type of string comparison.</span></span> <span data-ttu-id="21181-703">Wenn <c>Compare</c> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</span><span class="sxs-lookup"><span data-stu-id="21181-703">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="21181-704">Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-704">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns>
          <list type="table">
            <item>
              <term> <span data-ttu-id="21181-705">If</span><span class="sxs-lookup"><span data-stu-id="21181-705">If</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-706">Rückgabewert von InStr</span><span class="sxs-lookup"><span data-stu-id="21181-706">InStr returns</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-707"><paramref name="String1" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-707"><paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="21181-708">0</span><span class="sxs-lookup"><span data-stu-id="21181-708">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-709"><paramref name="String2" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-709"><paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-710"><paramref name="String2" /> wird nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="21181-710"><paramref name="String2" /> is not found</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-711">0</span><span class="sxs-lookup"><span data-stu-id="21181-711">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-712"><paramref name="String2" /> wurde in <paramref name="String1" /> gefunden.</span><span class="sxs-lookup"><span data-stu-id="21181-712"><paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="21181-713">Position, an der die gefundene Zeichenfolge beginnt</span><span class="sxs-lookup"><span data-stu-id="21181-713">Position where match begins</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-714"><paramref name="Start" /> &gt; Länge des <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="21181-714"><paramref name="Start" /> &gt; length of <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="21181-715">0</span><span class="sxs-lookup"><span data-stu-id="21181-715">0</span></span>  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-716">In der Regel die `InStr` Funktion wird beim Analysieren von Zeichenfolgen verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-716">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-717">Die `InStrB` Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt eine Zeichenposition.</span><span class="sxs-lookup"><span data-stu-id="21181-717">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="21181-718">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-718">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-719">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `InStrB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-719">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="21181-720">Die `Compare`-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="21181-720">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="21181-721">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-721">Constant</span></span>|<span data-ttu-id="21181-722">Wert</span><span class="sxs-lookup"><span data-stu-id="21181-722">Value</span></span>|<span data-ttu-id="21181-723">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-723">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="21181-724">0</span><span class="sxs-lookup"><span data-stu-id="21181-724">0</span></span>|<span data-ttu-id="21181-725">Führt einen binären Vergleich</span><span class="sxs-lookup"><span data-stu-id="21181-725">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="21181-726">1</span><span class="sxs-lookup"><span data-stu-id="21181-726">1</span></span>|<span data-ttu-id="21181-727">Führt einen Textvergleich aus</span><span class="sxs-lookup"><span data-stu-id="21181-727">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-728">In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-728">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-729"><paramref name="Start" /> &lt; 1.</span><span class="sxs-lookup"><span data-stu-id="21181-729"><paramref name="Start" /> &lt; 1.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck"><span data-ttu-id="21181-730">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-730">Required.</span></span> <span data-ttu-id="21181-731">Der gesuchte Zeichenfolgenausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-731">String expression being searched.</span></span></param>
        <param name="StringMatch"><span data-ttu-id="21181-732">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-732">Required.</span></span> <span data-ttu-id="21181-733">Der gesuchte Zeichenfolgenausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-733">String expression being searched for.</span></span></param>
        <param name="Start"><span data-ttu-id="21181-734">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-734">Optional.</span></span> <span data-ttu-id="21181-735">Numerischer Ausdruck, der die 1-basierte Anfangsposition für jede Suche festlegt, beginnend auf der linken Seite der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-735">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span></span> <span data-ttu-id="21181-736">Wenn <c>Start</c> weggelassen wird, wird – 1 verwendet, d.h., dass die Suche an der letzten Zeichenposition beginnt.</span><span class="sxs-lookup"><span data-stu-id="21181-736">If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position.</span></span> <span data-ttu-id="21181-737">Die Suche wird dann von rechts nach links fortgesetzt.</span><span class="sxs-lookup"><span data-stu-id="21181-737">Search then proceeds from right to left.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-738">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-738">Optional.</span></span> <span data-ttu-id="21181-739">Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-739">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="21181-740">Wenn dieser ausgelassen wird, wird ein binärer Vergleich durchgeführt.</span><span class="sxs-lookup"><span data-stu-id="21181-740">If omitted, a binary comparison is performed.</span></span> <span data-ttu-id="21181-741">Werte finden Sie im Abschnitt "Einstellungen".</span><span class="sxs-lookup"><span data-stu-id="21181-741">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="21181-742">Gibt die Position des ersten Vorkommens einer Zeichenfolge innerhalb einer anderen Zeichenfolge von rechts nach links gesehen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-742">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span></span></summary>
        <returns>
          <list type="table">
            <item>
              <term> <span data-ttu-id="21181-743">If</span><span class="sxs-lookup"><span data-stu-id="21181-743">If</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-744">InStrRev gibt Folgendes zurück</span><span class="sxs-lookup"><span data-stu-id="21181-744">InStrRev returns</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-745"><paramref name="StringCheck" /> ist eine Zeichenfolge mit der Länge 0 (null)</span><span class="sxs-lookup"><span data-stu-id="21181-745"><paramref name="StringCheck" /> is zero-length</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-746">0</span><span class="sxs-lookup"><span data-stu-id="21181-746">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-747"><paramref name="StringMatch" /> ist eine Zeichenfolge mit der Länge 0 (null)</span><span class="sxs-lookup"><span data-stu-id="21181-747"><paramref name="StringMatch" /> is zero-length</span></span>  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-748"><paramref name="StringMatch" /> wird nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="21181-748"><paramref name="StringMatch" /> is not found</span></span>  
  
 </term>
              <description> <span data-ttu-id="21181-749">0</span><span class="sxs-lookup"><span data-stu-id="21181-749">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-750"><paramref name="StringMatch" /> wurde in <paramref name="StringCheck" /> gefunden.</span><span class="sxs-lookup"><span data-stu-id="21181-750"><paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></span></span></term>
              <description> <span data-ttu-id="21181-751">Position, an der die erste Übereinstimmung gefunden wird, beginnend mit der rechten Seite der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-751">Position at which the first match is found, starting with the right side of the string.</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="21181-752"><paramref name="Start" /> ist größer als die Länge von <paramref name="StringMatch" />.</span><span class="sxs-lookup"><span data-stu-id="21181-752"><paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></span></span></term>
              <description> <span data-ttu-id="21181-753">0</span><span class="sxs-lookup"><span data-stu-id="21181-753">0</span></span>  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-754">Beachten Sie, dass die Syntax für die `InStrRev` Funktion ist nicht identisch mit der Syntax für die `InStr` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-754">Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.</span></span>  
  
 <span data-ttu-id="21181-755">Die `Compare` Argument kann die folgenden Werte haben.</span><span class="sxs-lookup"><span data-stu-id="21181-755">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="21181-756">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-756">Constant</span></span>|<span data-ttu-id="21181-757">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-757">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="21181-758">Führt einen binären Vergleich durch.</span><span class="sxs-lookup"><span data-stu-id="21181-758">Performs a binary comparison.</span></span>|  
|`Text`|<span data-ttu-id="21181-759">Führt einen Textvergleich durch.</span><span class="sxs-lookup"><span data-stu-id="21181-759">Performs a textual comparison.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-760">Dieses Beispiel veranschaulicht die Verwendung von der `InStrRev` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-760">This example demonstrates the use of the `InStrRev` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-761"><paramref name="Start" /> = 0 oder <paramref name="Start" /> &lt; –1.</span><span class="sxs-lookup"><span data-stu-id="21181-761"><paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-762">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-762">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="21181-763">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-763">Required.</span></span> <span data-ttu-id="21181-764">Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-764">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="21181-765">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-765">Optional.</span></span> <span data-ttu-id="21181-766">Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-766">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="21181-767">Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-767">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="21181-768">Wenn <c>Delimiter</c> eine leere Zeichenfolge ("") oder <see langword="Nothing" /> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</span><span class="sxs-lookup"><span data-stu-id="21181-768">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="21181-769">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-769">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="21181-770">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-770">Returns a string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-771">Es gibt eine Parität zwischen der `Join` und `Split` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="21181-771">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="21181-772">Die `Join` -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-772">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="21181-773">Die `Split` Funktion akzeptiert eine Zeichenfolge, und trennt diese am Trennzeichen, und gibt ein Array von Zeichenfolgen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-773">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="21181-774">Der wesentliche Unterschied besteht, liegt `Join` können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten `Split` nur Zeichenfolgen, die mit einem einzelnen Trennzeichen trennen kann.</span><span class="sxs-lookup"><span data-stu-id="21181-774">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-775">Im folgenden Beispiel wird veranschaulicht, wie die `Join` Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="21181-775">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-776"><paramref name="SourceArray" /> ist nicht eindimensional.</span><span class="sxs-lookup"><span data-stu-id="21181-776"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="21181-777">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-777">Required.</span></span> <span data-ttu-id="21181-778">Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-778">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="21181-779">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-779">Optional.</span></span> <span data-ttu-id="21181-780">Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="21181-780">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="21181-781">Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-781">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="21181-782">Wenn <c>Delimiter</c> eine leere Zeichenfolge ("") oder <see langword="Nothing" /> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</span><span class="sxs-lookup"><span data-stu-id="21181-782">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="21181-783">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-783">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="21181-784">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-784">Returns a string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-785">Es gibt eine Parität zwischen der `Join` und `Split` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="21181-785">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="21181-786">Die `Join` -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-786">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="21181-787">Die `Split` Funktion akzeptiert eine Zeichenfolge, und trennt diese am Trennzeichen, und gibt ein Array von Zeichenfolgen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-787">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="21181-788">Der wesentliche Unterschied besteht, liegt `Join` können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten `Split` nur Zeichenfolgen, die mit einem einzelnen Trennzeichen trennen kann.</span><span class="sxs-lookup"><span data-stu-id="21181-788">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-789">Im folgenden Beispiel wird veranschaulicht, wie die `Join` Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="21181-789">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-790"><paramref name="SourceArray" /> ist nicht eindimensional.</span><span class="sxs-lookup"><span data-stu-id="21181-790"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-791">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-791">Returns a string or character converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="21181-792">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-792">Required.</span></span> <span data-ttu-id="21181-793">Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-793">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-794">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-794">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="21181-795">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-795">Returns a string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-796">Es werden nur Großbuchstaben konvertiert in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.</span><span class="sxs-lookup"><span data-stu-id="21181-796">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="21181-797">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-797">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="21181-798">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument.</span><span class="sxs-lookup"><span data-stu-id="21181-798">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="21181-799">Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="21181-799">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-800">Dieses Beispiel verwendet die `LCase` Funktion zum Zurückgeben einer Zeichenfolge in Kleinbuchstaben.</span><span class="sxs-lookup"><span data-stu-id="21181-800">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="21181-801">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-801">Required.</span></span> <span data-ttu-id="21181-802">Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-802">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-803">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-803">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="21181-804">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-804">Returns a string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-805">Es werden nur Großbuchstaben konvertiert in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.</span><span class="sxs-lookup"><span data-stu-id="21181-805">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="21181-806">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-806">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="21181-807">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument.</span><span class="sxs-lookup"><span data-stu-id="21181-807">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="21181-808">Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="21181-808">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-809">Dieses Beispiel verwendet die `LCase` Funktion zum Zurückgeben einer Zeichenfolge in Kleinbuchstaben.</span><span class="sxs-lookup"><span data-stu-id="21181-809">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-810">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-810">Required.</span></span> <span data-ttu-id="21181-811"><see langword="String" />-Ausdruck, von dem die äußersten linken Zeichen zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="21181-811"><see langword="String" /> expression from which the leftmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="21181-812">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-812">Required.</span></span> <span data-ttu-id="21181-813"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-813"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-814">Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-814">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="21181-815">Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-815">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="21181-816">Wenn der Wert größer oder gleich der Anzahl von Zeichen in <c>str</c> ist, wird die ganze Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-816">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="21181-817">Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-817">Returns a string containing a specified number of characters from the left side of a string.</span></span></summary>
        <returns><span data-ttu-id="21181-818">Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-818">Returns a string containing a specified number of characters from the left side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-819">Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-819">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="21181-820">Bei der Verwendung in einer Windows Forms-Anwendung oder eine andere Klasse mit einem `Left` -Eigenschaft, Sie müssen vollqualifiziert-Funktion mit `Microsoft.VisualBasic.Left`.</span><span class="sxs-lookup"><span data-stu-id="21181-820">If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-821">Die `LeftB` Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-821">The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="21181-822">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-822">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-823">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LeftB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-823">All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-824">Dieses Beispiel veranschaulicht die Verwendung von der `Left` Funktion eine Teilzeichenfolge des zurückzugebenden einer bestimmten `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-824">This example demonstrates the use of the `Left` function to return a substring of a given `String`.</span></span> <span data-ttu-id="21181-825">In einer Klasse mit einem `Left` -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der `Left` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-825">In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-826"><paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="21181-826"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-827">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-827">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-828">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-828">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-829">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-829">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-830">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-830">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-831">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-831">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-832">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-832">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-833">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-833">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-834">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-834">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-835">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-835">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-836">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-836">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-837">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-837">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-838">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-838">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-839">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-839">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-840">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-840">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-841">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-841">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-842">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-842">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-843">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-843">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-844">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-844">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-845">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-845">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-846">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-846">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-847">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-847">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-848">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-848">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-849">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-849">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-850">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-850">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-851">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-851">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-852">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-852">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-853">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-853">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-854">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-854">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-855">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-855">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-856">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-856">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-857">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-857">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-858">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-858">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-859">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-859">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-860">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-860">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-861">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-861">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-862">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-862">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-863">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-863">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-864">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-864">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-865">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-865">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-866">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-866">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-867">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-867">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-868">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-868">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-869">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-869">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-870">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-870">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-871">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-871">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-872">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-872">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-873">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-873">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-874">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-874">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-875">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-875">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-876">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-876">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-877">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-877">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-878">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-878">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-879">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-879">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-880">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-880">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-881">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-881">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-882">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-882">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-883">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-883">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-884">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-884">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-885">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-885">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-886">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-886">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-887">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-887">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-888">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-888">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-889">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-889">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-890">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-890">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-891">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-891">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-892">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-892">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-893">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-893">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-894">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-894">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-895">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-895">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-896">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-896">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-897">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-897">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-898">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-898">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-899">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-899">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-900">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-900">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-901">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-901">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-902">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-902">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-903">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-903">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-904">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-904">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-905">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-905">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-906">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-906">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-907">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-907">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-908">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-908">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-909">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-909">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-910">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-910">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-911">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-911">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-912">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-912">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-913">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-913">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-914">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-914">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-915">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-915">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-916">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-916">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-917">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-917">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-918">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-918">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-919">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-919">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-920">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-920">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-921">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-921">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-922">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-922">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-923">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-923">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-924">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-924">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-925">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-925">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-926">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-926">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-927">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-927">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-928">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-928">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-929">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-929">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-930">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-930">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-931">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-931">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-932">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-932">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-933">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-933">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-934">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-934">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-935">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-935">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-936">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-936">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-937">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-937">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-938">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-938">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-939">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-939">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-940">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-940">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-941">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-941">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-942">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-942">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-943">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-943">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-944">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-944">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-945">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-945">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-946">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-946">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-947">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-947">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-948">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-948">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-949">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-949">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-950">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-950">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-951">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-951">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-952">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-952">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-953">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-953">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-954">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-954">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-955">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-955">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-956">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-956">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-957">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-957">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-958">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-958">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-959">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-959">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-960">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-960">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-961">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-961">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-962">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-962">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-963">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-963">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-964">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-964">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-965">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-965">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-966">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-966">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-967">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-967">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-968">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-968">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-969">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-969">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-970">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-970">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-971">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-971">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-972">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-972">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-973">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-973">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-974">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-974">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-975">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-975">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-976">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-976">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-977">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-977">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-978">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-978">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-979">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-979">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-980">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-980">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-981">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-981">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-982">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-982">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-983">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-983">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-984">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-984">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-985">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-985">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-986">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-986">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-987">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-987">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-988">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-988">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-989">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-989">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-990">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-990">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-991">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-991">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-992">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-992">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-993">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-993">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-994">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-994">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-995">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-995">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-996">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-996">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-997">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-997">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-998">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-998">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-999">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-999">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1000">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1000">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1001">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1001">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1002">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1002">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1003">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1003">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1004">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1004">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1005">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1005">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1006">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1006">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1007">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1007">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1008">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1008">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1009">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1009">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1010">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1010">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1011">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1011">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1012">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1012">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1013">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1013">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1014">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1014">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1015">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1015">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1016">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1016">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1017">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1017">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1018">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-1018">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1019">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1019">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1020">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1020">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1021">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1021">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1022">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1022">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1023">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1023">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1024">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1024">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1025">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1025">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1026">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1026">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1027">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1027">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1028">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1028">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1029">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1029">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1030">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1030">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1031">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1031">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1032">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1032">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1033">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1033">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1034">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1034">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1035">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1035">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1036">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1036">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1037">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-1037">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1038">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1038">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1039">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1039">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1040">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1040">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1041">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1041">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1042">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1042">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1043">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1043">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1044">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1044">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1045">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1045">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1046">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1046">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1047">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1047">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1048">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1048">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1049">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1049">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1050">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1050">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1051">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1051">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1052">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1052">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1053">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1053">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1054">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1054">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1055">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1055">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1056">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-1056">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1057">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1057">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1058">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1058">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1059">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1059">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1060">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1060">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1061">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1061">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1062">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1062">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1063">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1063">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1064">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1064">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1065">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1065">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1066">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1066">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1067">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1067">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1068">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1068">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1069">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1069">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1070">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1070">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1071">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1071">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1072">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1072">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1073">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1073">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1074">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1074">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1075">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-1075">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1076">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1076">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1077">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1077">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1078">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1078">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1079">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1079">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1080">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1080">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1081">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1081">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1082">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1082">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1083">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1083">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1084">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1084">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1085">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1085">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1086">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1086">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1087">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1087">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1088">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1088">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1089">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1089">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1090">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1090">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1091">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1091">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1092">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1092">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1093">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1093">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1094">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-1094">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1095">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1095">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1096">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1096">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1097">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1097">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1098">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1098">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1099">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1099">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1100">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1100">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1101">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1101">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1102">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1102">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1103">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1103">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1104">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1104">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1105">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1105">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1106">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1106">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1107">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1107">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1108">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1108">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1109">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1109">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1110">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1110">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1111">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1111">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1112">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1112">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1113">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname.</span><span class="sxs-lookup"><span data-stu-id="21181-1113">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="21181-1114">Wenn <c>Expression</c> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1114">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="21181-1115">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1115">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="21181-1116">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1116">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1117">Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1117">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="21181-1118">Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1118">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="21181-1119">Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1119">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="21181-1120">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="21181-1120">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="21181-1121">Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1121">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1122">Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1122">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1123">Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1123">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="21181-1124">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1124">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1125">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1125">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="21181-1126">Entwicklerhinweise für intelligente Geräte</span><span class="sxs-lookup"><span data-stu-id="21181-1126">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="21181-1127">Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter.</span><span class="sxs-lookup"><span data-stu-id="21181-1127">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="21181-1128">Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1128">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="21181-1129">Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1129">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="21181-1130">Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="21181-1130">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1131">In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1131">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="21181-1132">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1132">Required.</span></span> <span data-ttu-id="21181-1133"><see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1133"><see langword="String" /> expression.</span></span> <span data-ttu-id="21181-1134">Name der Zeichenfolgenvariablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1134">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="21181-1135">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1135">Required.</span></span> <span data-ttu-id="21181-1136"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1136"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1137">Länge der zurückgegebenen Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1137">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="21181-1138">Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1138">Returns a left-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="21181-1139">Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1139">Returns a left-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1140">Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird die zurückgegebene Zeichenfolge in der vorgegebenen Länge gekürzt.</span><span class="sxs-lookup"><span data-stu-id="21181-1140">If the specified string is longer than the specified length, the returned string is shortened to the specified length.</span></span> <span data-ttu-id="21181-1141">Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen und dem rechten Ende der zurückgegebenen Zeichenfolge, die die entsprechende Länge erzeugt hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="21181-1141">If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1142">Dieses Beispiel veranschaulicht die Verwendung von der `LSet` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1142">This example demonstrates the use of the `LSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1143">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1143">Required.</span></span> <span data-ttu-id="21181-1144">Jeder gültige <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1144">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-1145">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1145">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="21181-1146">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1146">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1147">Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.</span><span class="sxs-lookup"><span data-stu-id="21181-1147">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1148">In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt.</span><span class="sxs-lookup"><span data-stu-id="21181-1148">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="21181-1149">Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.</span><span class="sxs-lookup"><span data-stu-id="21181-1149">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-1150">Gibt eine Zeichenfolge zurück, die Zeichen aus einer festgelegten Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1150">Returns a string that contains characters from a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1151">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1151">Required.</span></span> <span data-ttu-id="21181-1152"><see langword="String" />-Ausdruck, aus dem Zeichen zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="21181-1152"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="21181-1153">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1153">Required.</span></span> <span data-ttu-id="21181-1154"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1154"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1155">Anfangsposition der zurückzugebenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1155">Starting position of the characters to return.</span></span> <span data-ttu-id="21181-1156">Wenn <c>Start</c> größer als die Anzahl der Zeichen in <c>str</c> ist, gibt die <see langword="Mid" />-Funktion eine Zeichenfolge ("") der Länge 0 zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1156">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="21181-1157"><c>Start</c> ist 1-basiert.</span><span class="sxs-lookup"><span data-stu-id="21181-1157"><c>Start</c> is one-based.</span></span></param>
        <summary><span data-ttu-id="21181-1158">Gibt eine Zeichenfolge zurück, die alle Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1158">Returns a string that contains all the characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="21181-1159">Eine Zeichenfolge, die aus allen Zeichen beginnend bei der angegebenen Position in der Zeichenfolge besteht.</span><span class="sxs-lookup"><span data-stu-id="21181-1159">A string that consists of all the characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1160">Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1160">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="21181-1161">Visual Basic verfügt über eine `Mid` Funktion und eine `Mid` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="21181-1161">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="21181-1162">Diese Elemente, die beide auf eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die `Mid` Funktion gibt die Zeichen, während die `Mid` Anweisung ersetzt die Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1162">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="21181-1163">Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span><span class="sxs-lookup"><span data-stu-id="21181-1163">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1164">Die `MidB` Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1164">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="21181-1165">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1165">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1166">Alle Visual Basic-Zeichenfolgen werden in Unicode und `MidB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1166">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1167">Die letzte Zeile in diesem Beispiel verwendet diese Überladung der `Mid` Funktion, um die fünfte und nachfolgende Zeichen aus einer Zeichenfolge zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1167">The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1168"><paramref name="Start" /> &lt;= 0 oder <paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="21181-1168"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1169">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1169">Required.</span></span> <span data-ttu-id="21181-1170"><see langword="String" />-Ausdruck, aus dem Zeichen zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="21181-1170"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="21181-1171">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1171">Required.</span></span> <span data-ttu-id="21181-1172"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1172"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1173">Anfangsposition der zurückzugebenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1173">Starting position of the characters to return.</span></span> <span data-ttu-id="21181-1174">Wenn <c>Start</c> größer als die Anzahl der Zeichen in <c>str</c> ist, gibt die <see langword="Mid" />-Funktion eine Zeichenfolge ("") der Länge 0 zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1174">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="21181-1175"><c>Start</c> ist 1-basiert.</span><span class="sxs-lookup"><span data-stu-id="21181-1175"><c>Start</c> is one based.</span></span></param>
        <param name="Length"><span data-ttu-id="21181-1176">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1176">Optional.</span></span> <span data-ttu-id="21181-1177"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1177"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1178">Die Anzahl der zurückzugebenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1178">Number of characters to return.</span></span> <span data-ttu-id="21181-1179">Wenn der Ausdruck ausgelassen wird oder weniger als <c>Length</c> Zeichen im Text enthalten sind (einschließlich des Zeichens an Position <c>Start</c>), werden alle Zeichen von der Anfangs- bis zur Endposition der Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1179">If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</span></span></param>
        <summary><span data-ttu-id="21181-1180">Gibt eine Zeichenfolge zurück, die eine angegebene Anzahl von Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1180">Returns a string that contains a specified number of characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="21181-1181">Eine Zeichenfolge, die aus der angegebenen Anzahl von Zeichen besteht, beginnend bei der angegebenen Position in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1181">A string that consists of the specified number of characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1182">Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1182">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="21181-1183">Visual Basic verfügt über eine `Mid` Funktion und eine `Mid` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="21181-1183">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="21181-1184">Diese Elemente, die beide auf eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die `Mid` Funktion gibt die Zeichen, während die `Mid` Anweisung ersetzt die Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1184">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="21181-1185">Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span><span class="sxs-lookup"><span data-stu-id="21181-1185">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1186">Die `MidB` Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1186">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="21181-1187">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1187">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1188">Alle Visual Basic-Zeichenfolgen werden in Unicode und `MidB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1188">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1189">Die ersten beiden `Mid` Funktionen in diesem Beispiel wird die angegebene Anzahl von Zeichen aus einer Zeichenfolge, beginnend mit den angegebenen Positionen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1189">The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions.</span></span> <span data-ttu-id="21181-1190">(Die letzte Funktion veranschaulicht die <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> überladen und gibt nur den Ausgangspunkt für die Extrahierung Zeichenfolge.)</span><span class="sxs-lookup"><span data-stu-id="21181-1190">(The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1191"><paramref name="Start" /> &lt;= 0 oder <paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="21181-1191"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1192">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1192">Required.</span></span> <span data-ttu-id="21181-1193">Zeichenfolgenausdruck mit der zu ersetzenden untergeordneten Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1193">String expression containing substring to replace.</span></span></param>
        <param name="Find"><span data-ttu-id="21181-1194">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1194">Required.</span></span> <span data-ttu-id="21181-1195">Die gesuchte untergeordnete Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1195">Substring being searched for.</span></span></param>
        <param name="Replacement"><span data-ttu-id="21181-1196">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1196">Required.</span></span> <span data-ttu-id="21181-1197">Untergeordnete Ersetzungszeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1197">Replacement substring.</span></span></param>
        <param name="Start"><span data-ttu-id="21181-1198">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1198">Optional.</span></span> <span data-ttu-id="21181-1199">Position in <c>Expression</c>, die eine für die Ersetzung verwendete Teilzeichenfolge startet.</span><span class="sxs-lookup"><span data-stu-id="21181-1199">Position within <c>Expression</c> that starts a substring used for replacement.</span></span> <span data-ttu-id="21181-1200">Der Rückgabewert von <see langword="Replace" /> ist eine Zeichenfolge, die bei <c>Start</c> beginnt, mit entsprechenden Ersetzungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1200">The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions.</span></span> <span data-ttu-id="21181-1201">Wenn der Wert nicht angegeben wird, wird 1 angenommen.</span><span class="sxs-lookup"><span data-stu-id="21181-1201">If omitted, 1 is assumed.</span></span></param>
        <param name="Count"><span data-ttu-id="21181-1202">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1202">Optional.</span></span> <span data-ttu-id="21181-1203">Die Anzahl der durchzuführenden Ersetzungen für untergeordnete Zeichenfolgen.</span><span class="sxs-lookup"><span data-stu-id="21181-1203">Number of substring substitutions to perform.</span></span> <span data-ttu-id="21181-1204">Wenn der Wert nicht angegeben wird, ist der Standardwert -1, d. h., dass alle möglichen Ersetzungen vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="21181-1204">If omitted, the default value is –1, which means "make all possible substitutions."</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-1205">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1205">Optional.</span></span> <span data-ttu-id="21181-1206">Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1206">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="21181-1207">Werte finden Sie im Abschnitt "Einstellungen".</span><span class="sxs-lookup"><span data-stu-id="21181-1207">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="21181-1208">Gibt eine Zeichenfolge zurück, in der eine bestimmte untergeordnete Zeichenfolge so oft wie angegeben durch eine andere Zeichenfolge ersetzt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-1208">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span></span></summary>
        <returns>
          <span data-ttu-id="21181-1209"><see langword="Replace" /> gibt die folgenden Werte zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1209"><see langword="Replace" /> returns the following values.</span></span>  
  
 <span data-ttu-id="21181-1210"><list type="table"><item><term> Wenn</span><span class="sxs-lookup"><span data-stu-id="21181-1210"><list type="table"><item><term> If</span></span>  
  
 <span data-ttu-id="21181-1211"></term><description> Gibt Replace Folgendes zurück</span><span class="sxs-lookup"><span data-stu-id="21181-1211"></term><description> Replace returns</span></span>  
  
 <span data-ttu-id="21181-1212"></description></item><item><term><paramref name="Find" /> hat die Länge 0 (null) oder <see langword="Nothing" /></term><description> Kopie von <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> hat die Länge 0 (null)</span><span class="sxs-lookup"><span data-stu-id="21181-1212"></description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length</span></span>  
  
 <span data-ttu-id="21181-1213"></term><description> Kopie von <paramref name="Expression" /> ohne Vorkommen von <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> hat die Länge 0 (null) oder <see langword="Nothing" />, oder <paramref name="Start" /> ist größer als die Länge von <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> ist 0</span><span class="sxs-lookup"><span data-stu-id="21181-1213"></term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0</span></span>  
  
 <span data-ttu-id="21181-1214"></term><description> Kopie von <paramref name="Expression" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="21181-1214"></term><description> Copy of <paramref name="Expression" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1215">Der Rückgabewert von der `Replace` Funktion ist eine Zeichenfolge, die an der angegebenen Position beginnt `Start` und endet am Ende der `Expression` Zeichenfolge mit de vorgenommenen Ersetzungen nach den Angaben von der `Find` und `Replace` Werte.</span><span class="sxs-lookup"><span data-stu-id="21181-1215">The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.</span></span>  
  
 <span data-ttu-id="21181-1216">Die `Compare` Argument kann die folgenden Werte haben.</span><span class="sxs-lookup"><span data-stu-id="21181-1216">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="21181-1217">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-1217">Constant</span></span>|<span data-ttu-id="21181-1218">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-1218">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="21181-1219">Führt einen binären Vergleich</span><span class="sxs-lookup"><span data-stu-id="21181-1219">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="21181-1220">Führt einen Vergleich aus Text</span><span class="sxs-lookup"><span data-stu-id="21181-1220">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-1221">Dieses Beispiel zeigt die `Replace` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1221">This example demonstrates the `Replace` function.</span></span>  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1222"><paramref name="Count" /> &lt; –1 oder <paramref name="Start" /> &lt;= 0.</span><span class="sxs-lookup"><span data-stu-id="21181-1222"><paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1223">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1223">Required.</span></span> <span data-ttu-id="21181-1224"><see langword="String" />-Ausdruck, von dem die äußersten rechten Zeichen zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="21181-1224"><see langword="String" /> expression from which the rightmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="21181-1225">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1225">Required.</span></span> <span data-ttu-id="21181-1226"><see langword="Integer" /></span><span class="sxs-lookup"><span data-stu-id="21181-1226"><see langword="Integer" />.</span></span> <span data-ttu-id="21181-1227">Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="21181-1227">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="21181-1228">Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1228">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="21181-1229">Wenn der Wert größer oder gleich der Anzahl von Zeichen in <c>str</c> ist, wird die ganze Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1229">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="21181-1230">Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1230">Returns a string containing a specified number of characters from the right side of a string.</span></span></summary>
        <returns><span data-ttu-id="21181-1231">Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1231">Returns a string containing a specified number of characters from the right side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1232">Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1232">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="21181-1233">Bei der Verwendung in einem Windows Form oder eine andere Klasse mit einem `Right` -Eigenschaft, Sie müssen vollqualifiziert-Funktion mit `Microsoft.VisualBasic.Strings.Right`.</span><span class="sxs-lookup"><span data-stu-id="21181-1233">If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1234">Die `RightB` -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstatt Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1234">The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</span></span> <span data-ttu-id="21181-1235">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="21181-1235">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="21181-1236">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `RightB` wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1236">All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1237">Dieses Beispiel veranschaulicht die Verwendung von der `Right` Funktion eine Teilzeichenfolge des zurückzugebenden einer bestimmten `String`.</span><span class="sxs-lookup"><span data-stu-id="21181-1237">This example demonstrates the use of the `Right` function to return a substring of a given `String`.</span></span> <span data-ttu-id="21181-1238">In einer Klasse mit einem `Right` -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der `Right` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1238">In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1239"><paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="21181-1239"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="21181-1240">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1240">Required.</span></span> <span data-ttu-id="21181-1241"><see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1241"><see langword="String" /> expression.</span></span> <span data-ttu-id="21181-1242">Name der Zeichenfolgenvariablen.</span><span class="sxs-lookup"><span data-stu-id="21181-1242">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="21181-1243">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1243">Required.</span></span> <span data-ttu-id="21181-1244"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1244"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1245">Länge der zurückgegebenen Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1245">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="21181-1246">Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1246">Returns a right-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="21181-1247">Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1247">Returns a right-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1248">Wenn `Source` ist länger als `Length`, `RSet` fügt nur die am weitesten links stehende Zeichen bis zur Länge der `Source`, in der zurückgegebenen Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1248">If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string.</span></span> <span data-ttu-id="21181-1249">Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen zum linken Ende der Zeichenfolge, die die entsprechende Länge hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="21181-1249">If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</span></span> <span data-ttu-id="21181-1250">Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird es in der vorgegebenen Länge gekürzt.</span><span class="sxs-lookup"><span data-stu-id="21181-1250">If the specified string is longer than the specified length, it is shortened to the specified length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1251">Dieses Beispiel veranschaulicht die Verwendung von der `RSet` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1251">This example demonstrates the use of the `RSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1252">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1252">Required.</span></span> <span data-ttu-id="21181-1253">Jeder gültige <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1253">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-1254">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1254">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="21181-1255">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1255">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1256">Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.</span><span class="sxs-lookup"><span data-stu-id="21181-1256">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1257">In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt.</span><span class="sxs-lookup"><span data-stu-id="21181-1257">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="21181-1258">Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.</span><span class="sxs-lookup"><span data-stu-id="21181-1258">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="21181-1259">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1259">Required.</span></span> <span data-ttu-id="21181-1260"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1260"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1261">Die Anzahl der gewünschten Leerzeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1261">The number of spaces you want in the string.</span></span></param>
        <summary><span data-ttu-id="21181-1262">Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1262">Returns a string consisting of the specified number of spaces.</span></span></summary>
        <returns><span data-ttu-id="21181-1263">Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1263">Returns a string consisting of the specified number of spaces.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1264">Die `Space` Funktion eignet sich zum Formatieren der Ausgabe und Löschen von Daten in Zeichenfolgen mit fester Länge.</span><span class="sxs-lookup"><span data-stu-id="21181-1264">The `Space` function is useful for formatting output and clearing data in fixed-length strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1265">Dieses Beispiel verwendet die `Space` -Funktion eine Zeichenfolge mit einer angegebenen Anzahl von Leerzeichen zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="21181-1265">This example uses the `Space` function to return a string consisting of a specified number of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1266"><paramref name="Number" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="21181-1266"><paramref name="Number" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1267">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1267">Required.</span></span> <span data-ttu-id="21181-1268"><see langword="String" />-Ausdruck mit untergeordneten Zeichenfolgen und Trennzeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1268"><see langword="String" /> expression containing substrings and delimiters.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="21181-1269">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1269">Optional.</span></span> <span data-ttu-id="21181-1270">Jedes einzelne Zeichen, mit dem Grenzen von untergeordneten Zeichenfolgen gekennzeichnet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-1270">Any single character used to identify substring limits.</span></span> <span data-ttu-id="21181-1271">Wenn <c>Delimiter</c> nicht angegeben wird, wird als Trennzeichen das Leerzeichen (" ") angenommen.</span><span class="sxs-lookup"><span data-stu-id="21181-1271">If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</span></span></param>
        <param name="Limit"><span data-ttu-id="21181-1272">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1272">Optional.</span></span> <span data-ttu-id="21181-1273">Die maximale Anzahl von untergeordneten Zeichenfolgen, in die die Eingabezeichenfolge geteilt werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-1273">Maximum number of substrings into which the input string should be split.</span></span> <span data-ttu-id="21181-1274">Der Standardwert – 1 gibt an, dass die Eingabezeichenfolge an jedem Vorkommen der <c>Delimiter</c>-Zeichenfolge getrennt werden soll.</span><span class="sxs-lookup"><span data-stu-id="21181-1274">The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-1275">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1275">Optional.</span></span> <span data-ttu-id="21181-1276">Numerischer Wert, der den Vergleich angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1276">Numeric value indicating the comparison to use when evaluating substrings.</span></span> <span data-ttu-id="21181-1277">Die Werte finden Sie unter „Einstellungen“.</span><span class="sxs-lookup"><span data-stu-id="21181-1277">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="21181-1278">Gibt ein nullbasiertes, eindimensionales Array zurück, das eine angegebene Anzahl von Teilzeichenfolgen enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1278">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span></span></summary>
        <returns>
          <span data-ttu-id="21181-1279"><see langword="String" />-Array.</span><span class="sxs-lookup"><span data-stu-id="21181-1279"><see langword="String" /> array.</span></span> <span data-ttu-id="21181-1280">Wenn <paramref name="Expression" /> eine Zeichenfolge ("") der Länge 0 (null) ist, gibt <see langword="Split" /> ein Array mit einem Element zurück, das eine Zeichenfolge der Länge 0 (null) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1280">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span></span> <span data-ttu-id="21181-1281">Wenn <paramref name="Delimiter" /> eine Zeichenfolge der Länge 0 (null) ist oder nicht in <paramref name="Expression" /> vorkommt, gibt <see langword="Split" /> ein Array mit einem Element zurück, das die gesamte <paramref name="Expression" />-Zeichenfolge enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1281">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1282">Standardmäßig oder wenn `Limit` gleich 1, der `Split` Funktion teilt die Eingabezeichenfolge an jedem Vorkommen der Zeichenfolge als Trennzeichen, und gibt die Teilzeichenfolgen in einem Array zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1282">By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</span></span> <span data-ttu-id="21181-1283">Wenn die `Limit` -Parameters ist größer als 0 (null), die `Split` Funktion teilt die Zeichenfolge bei der ersten `Limit`-1 Vorkommen des Trennzeichens, und gibt ein Array mit den resultierenden untergeordneten Zeichenfolgen zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1283">When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings.</span></span> <span data-ttu-id="21181-1284">Beispielsweise `Split("a:b:c", ":")` gibt das Array `{"a", "b", "c"}`, während `Split("a:b:c", ":", 2)` gibt das Array `{"a", "b:c"}`.</span><span class="sxs-lookup"><span data-stu-id="21181-1284">For example, `Split("a:b:c", ":")` returns the array `{"a", "b", "c"}`, while `Split("a:b:c", ":", 2)` returns the array `{"a", "b:c"}`.</span></span>  
  
 <span data-ttu-id="21181-1285">Wenn die `Split` Funktion zwei Trennzeichen in einer Zeile oder ein Trennzeichen am Anfang oder Ende der Zeichenfolge auftritt, interpretiert als umgebenden eine leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="21181-1285">When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</span></span> <span data-ttu-id="21181-1286">Beispielsweise `Split("xx", "x")` gibt das Array mit drei leeren Zeichenfolgen zurück: ein vom Anfang der Zeichenfolge und das erste "x", eine zwischen den beiden "Zeichenfolgen x" und eine der letzten "X" und das Ende der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1286">For example, `Split("xx", "x")` returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</span></span>  
  
 <span data-ttu-id="21181-1287">Diese Tabelle wird veranschaulicht, wie das optionale `Delimiter`, `Limit`, und `Compare` Parameter können das Verhalten des ändern die `Split` Funktion.</span><span class="sxs-lookup"><span data-stu-id="21181-1287">This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.</span></span>  
  
|<span data-ttu-id="21181-1288">Split-Aufruf</span><span class="sxs-lookup"><span data-stu-id="21181-1288">Split Call</span></span>|<span data-ttu-id="21181-1289">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="21181-1289">Return Value</span></span>|  
|-|-|  
|`Split("42, 12, 19")`|<span data-ttu-id="21181-1290">{"42," , "12," , "19"}</span><span class="sxs-lookup"><span data-stu-id="21181-1290">{"42," , "12," , "19"}</span></span>|  
|`Split("42, 12, 19", ", ")`|<span data-ttu-id="21181-1291">{"42", "12", "19"}</span><span class="sxs-lookup"><span data-stu-id="21181-1291">{"42", "12", "19"}</span></span>|  
|`Split("42, 12, 19", ", ", 2)`|<span data-ttu-id="21181-1292">{"42", "12, 19"}</span><span class="sxs-lookup"><span data-stu-id="21181-1292">{"42", "12, 19"}</span></span>|  
|`Split("192.168.0.1", ".")`|<span data-ttu-id="21181-1293">{"192", "168", "0", "1"}</span><span class="sxs-lookup"><span data-stu-id="21181-1293">{"192", "168", "0", "1"}</span></span>|  
|`Split("Alice and Bob", " AND ")`|<span data-ttu-id="21181-1294">{"Alice und Bob"}</span><span class="sxs-lookup"><span data-stu-id="21181-1294">{"Alice and Bob"}</span></span>|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|<span data-ttu-id="21181-1295">{"Alice", "Bob"}</span><span class="sxs-lookup"><span data-stu-id="21181-1295">{"Alice", "Bob"}</span></span>|  
|`Split("someone@example.com", "@",1)`|<span data-ttu-id="21181-1296">{"someone@example.com"}</span><span class="sxs-lookup"><span data-stu-id="21181-1296">{"someone@example.com"}</span></span>|  
|`Split("someone@example.com", "@",2)`|<span data-ttu-id="21181-1297">{"someone", "example.com"}</span><span class="sxs-lookup"><span data-stu-id="21181-1297">{"someone", "example.com"}</span></span>|  
  
 <span data-ttu-id="21181-1298">Die `Compare` Argument kann die folgenden Werte haben.</span><span class="sxs-lookup"><span data-stu-id="21181-1298">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="21181-1299">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-1299">Constant</span></span>|<span data-ttu-id="21181-1300">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-1300">Description</span></span>|<span data-ttu-id="21181-1301">Wert</span><span class="sxs-lookup"><span data-stu-id="21181-1301">Value</span></span>|  
|-|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="21181-1302">Führt einen binären Vergleich</span><span class="sxs-lookup"><span data-stu-id="21181-1302">Performs a binary comparison</span></span>|<span data-ttu-id="21181-1303">0</span><span class="sxs-lookup"><span data-stu-id="21181-1303">0</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="21181-1304">Führt einen Vergleich aus Text</span><span class="sxs-lookup"><span data-stu-id="21181-1304">Performs a textual comparison</span></span>|<span data-ttu-id="21181-1305">1</span><span class="sxs-lookup"><span data-stu-id="21181-1305">1</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-1306">Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge an ihren Leerzeichen geteilt.</span><span class="sxs-lookup"><span data-stu-id="21181-1306">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 <span data-ttu-id="21181-1307">Im folgenden Beispiel wird veranschaulicht, wie zum Aufteilen von Zeichenfolgen mit mehreren Trennzeichen in einer Zeile und die leeren Zeichenfolgen herausfiltern.</span><span class="sxs-lookup"><span data-stu-id="21181-1307">The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="21181-1308">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1308">Required.</span></span> <span data-ttu-id="21181-1309">Jeder gültige <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1309">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="String2"><span data-ttu-id="21181-1310">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1310">Required.</span></span> <span data-ttu-id="21181-1311">Jeder gültige <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1311">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Compare"><span data-ttu-id="21181-1312">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1312">Optional.</span></span> <span data-ttu-id="21181-1313">Gibt den Typ des Zeichenfolgenvergleichs an.</span><span class="sxs-lookup"><span data-stu-id="21181-1313">Specifies the type of string comparison.</span></span> <span data-ttu-id="21181-1314">Wenn <c>Compare</c> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</span><span class="sxs-lookup"><span data-stu-id="21181-1314">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="21181-1315">Gibt abhängig vom Ergebnis eines Zeichenfolgenvergleichs den Wert -1, 0 oder 1 zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1315">Returns -1, 0, or 1, based on the result of a string comparison.</span></span></summary>
        <returns><span data-ttu-id="21181-1316">Die <see langword="StrComp" />-Funktion besitzt die folgenden Rückgabewerte.</span><span class="sxs-lookup"><span data-stu-id="21181-1316">The <see langword="StrComp" /> function has the following return values.</span></span>  
  
 <span data-ttu-id="21181-1317"><list type="table"><item><term> Wenn</span><span class="sxs-lookup"><span data-stu-id="21181-1317"><list type="table"><item><term> If</span></span>  
  
 <span data-ttu-id="21181-1318"></term><description> Rückgabewert von StrComp</span><span class="sxs-lookup"><span data-stu-id="21181-1318"></term><description> StrComp returns</span></span>  
  
 <span data-ttu-id="21181-1319"></description></item><item><term><paramref name="String1" /> wird vor <paramref name="String2" /> sortiert</term><description> – 1</span><span class="sxs-lookup"><span data-stu-id="21181-1319"></description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1</span></span>  
  
 <span data-ttu-id="21181-1320"></description></item><item><term><paramref name="String1" /> ist gleich <paramref name="String2" /></term><description> 0</span><span class="sxs-lookup"><span data-stu-id="21181-1320"></description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0</span></span>  
  
 <span data-ttu-id="21181-1321"></description></item><item><term><paramref name="String1" /> wird nach <paramref name="String2" /> sortiert</term><description> 1</span><span class="sxs-lookup"><span data-stu-id="21181-1321"></description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1322">Die Zeichenfolgen werden nach alphanumerischen Sortierwerten beginnend mit dem ersten Zeichen verglichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1322">The strings are compared by alphanumeric sort values beginning with the first character.</span></span> <span data-ttu-id="21181-1323">Weitere Informationen zu binäre Vergleiche, Textvergleiche und Sortierreihenfolge finden Sie unter [Option Compare-Anweisung](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span><span class="sxs-lookup"><span data-stu-id="21181-1323">For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span></span>  
  
 <span data-ttu-id="21181-1324">Die `Compare`-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="21181-1324">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="21181-1325">Konstante</span><span class="sxs-lookup"><span data-stu-id="21181-1325">Constant</span></span>|<span data-ttu-id="21181-1326">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-1326">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="21181-1327">Führt einen binären Vergleich, basierend auf einer Sortierreihenfolge, die von den internen binären Darstellungen der Zeichen abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="21181-1327">Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</span></span>|  
|`Text`|<span data-ttu-id="21181-1328">Führt einen Textvergleich aus, basierend auf einer schreibungsunabhängigen Textsortierreihenfolge gemäß Ihrem System `LocaleID` Wert.</span><span class="sxs-lookup"><span data-stu-id="21181-1328">Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="21181-1329">Dieses Beispiel verwendet die `StrComp` Funktion, um die Ergebnisse eines Zeichenfolgenvergleichs zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1329">This example uses the `StrComp` function to return the results of a string comparison.</span></span>  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1330">Der <paramref name="Compare" />-Wert ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="21181-1330"><paramref name="Compare" /> value is not valid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1331">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1331">Required.</span></span> <span data-ttu-id="21181-1332">Der zu konvertierende <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1332"><see langword="String" /> expression to be converted.</span></span></param>
        <param name="Conversion"><span data-ttu-id="21181-1333">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1333">Required.</span></span> <span data-ttu-id="21181-1334"><see cref="T:Microsoft.VisualBasic.VbStrConv" />-Member.</span><span class="sxs-lookup"><span data-stu-id="21181-1334"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span></span> <span data-ttu-id="21181-1335">Der Enumerationswert, der den Typ der auszuführenden Konvertierung angibt.</span><span class="sxs-lookup"><span data-stu-id="21181-1335">The enumeration value specifying the type of conversion to perform.</span></span></param>
        <param name="LocaleID"><span data-ttu-id="21181-1336">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="21181-1336">Optional.</span></span> <span data-ttu-id="21181-1337">Der <see langword="LocaleID" />-Wert, wenn dieser sich vom <see langword="LocaleID" />-Wert des Systems unterscheidet.</span><span class="sxs-lookup"><span data-stu-id="21181-1337">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span></span> <span data-ttu-id="21181-1338">(Der <see langword="LocaleID" />-Wert des Systems ist der Standardwert.)</span><span class="sxs-lookup"><span data-stu-id="21181-1338">(The system <see langword="LocaleID" /> value is the default.)</span></span></param>
        <summary><span data-ttu-id="21181-1339">Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1339">Returns a string converted as specified.</span></span></summary>
        <returns><span data-ttu-id="21181-1340">Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="21181-1340">Returns a string converted as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1341">Die Konstanten `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, und `VbStrConv.Hiragana` kann dazu führen, dass zur Laufzeit Fehler bei der Verwendung in Gebietsschemas, in dem sie nicht gelten, aber nicht immer: die Konstanten `VbStrConv.Katakana` und `VbStrConv.Hiragana`können in einem nicht japanischen-System verwendet werden, mit das japanische Sprachpaket installiert.</span><span class="sxs-lookup"><span data-stu-id="21181-1341">The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed.</span></span> <span data-ttu-id="21181-1342">Darüber hinaus verwenden Sie Konstanten `VbStrConv.Wide` und `VbStrConv.Narrow` wird mit der eine ostasiatische Sprache installiert auf allen Systemen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="21181-1342">In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.</span></span>  
  
 <span data-ttu-id="21181-1343">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1343">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="21181-1344">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument.</span><span class="sxs-lookup"><span data-stu-id="21181-1344">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="21181-1345">Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="21181-1345">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
 <span data-ttu-id="21181-1346">Die `Conversion`-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="21181-1346">The `Conversion` argument settings are:</span></span>  
  
|<span data-ttu-id="21181-1347">Enumerationsmember</span><span class="sxs-lookup"><span data-stu-id="21181-1347">Enumeration member</span></span>|<span data-ttu-id="21181-1348">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="21181-1348">Description</span></span>|  
|-|-|  
|`VbStrConv.None`|<span data-ttu-id="21181-1349">Führt keine Konvertierung</span><span class="sxs-lookup"><span data-stu-id="21181-1349">Performs no conversion</span></span>|  
|`VbStrConv.LinguisticCasing`|<span data-ttu-id="21181-1350">Linguistische Regeln verwendet für Groß-/Kleinschreibung, anstatt File System (Standard).</span><span class="sxs-lookup"><span data-stu-id="21181-1350">Uses linguistic rules for casing, rather than File System (default).</span></span> <span data-ttu-id="21181-1351">Mit gültigen `VbStrConv.UpperCase` und `VbStrConv.LowerCase` nur.</span><span class="sxs-lookup"><span data-stu-id="21181-1351">Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.</span></span>|  
|`VbStrConv.UpperCase`|<span data-ttu-id="21181-1352">Konvertiert die Zeichenfolge in Großbuchstaben.</span><span class="sxs-lookup"><span data-stu-id="21181-1352">Converts the string to uppercase characters.</span></span>|  
|`VbStrConv.LowerCase`|<span data-ttu-id="21181-1353">Konvertiert die Zeichenfolge in Kleinbuchstaben.</span><span class="sxs-lookup"><span data-stu-id="21181-1353">Converts the string to lowercase characters.</span></span>|  
|`VbStrConv.ProperCase`|<span data-ttu-id="21181-1354">Konvertiert den ersten Buchstaben jedes Worts in einer Zeichenfolge in Großbuchstaben.</span><span class="sxs-lookup"><span data-stu-id="21181-1354">Converts the first letter of every word in string to uppercase.</span></span>|  
|<span data-ttu-id="21181-1355">`VbStrConv.Wide` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="21181-1355">`VbStrConv.Wide` <sup>\*</sup></span></span>|<span data-ttu-id="21181-1356">Konvertiert schmale Zeichen (halbe Breite), in der Zeichenfolge in Breitzeichen (ganze Breite).</span><span class="sxs-lookup"><span data-stu-id="21181-1356">Converts narrow (half-width) characters in the string to wide (full-width) characters.</span></span> [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|<span data-ttu-id="21181-1357">`VbStrConv.Narrow` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="21181-1357">`VbStrConv.Narrow` <sup>\*</sup></span></span>|<span data-ttu-id="21181-1358">Konvertiert die Breitzeichen (ganze Breite) in der Zeichenfolge schmale Zeichen (halbe Breite).</span><span class="sxs-lookup"><span data-stu-id="21181-1358">Converts wide (full-width) characters in the string to narrow (half-width) characters.</span></span>|  
|<span data-ttu-id="21181-1359">`VbStrConv.Katakana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="21181-1359">`VbStrConv.Katakana` <sup>**</sup></span></span>|<span data-ttu-id="21181-1360">Konvertiert Hiragana-Zeichen in der Zeichenfolge in Katakana-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1360">Converts Hiragana characters in the string to Katakana characters.</span></span>|  
|<span data-ttu-id="21181-1361">`VbStrConv.Hiragana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="21181-1361">`VbStrConv.Hiragana` <sup>**</sup></span></span>|<span data-ttu-id="21181-1362">Konvertiert Katakana-Zeichen in der Zeichenfolge in Hiragana-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1362">Converts Katakana characters in the string to Hiragana characters.</span></span>|  
|<span data-ttu-id="21181-1363">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="21181-1363">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span></span>|<span data-ttu-id="21181-1364">Konvertiert traditionelle chinesische Zeichen in Chinesisch (vereinfacht).</span><span class="sxs-lookup"><span data-stu-id="21181-1364">Converts Traditional Chinese characters to Simplified Chinese.</span></span>|  
|<span data-ttu-id="21181-1365">`VbStrConv.TraditionalChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="21181-1365">`VbStrConv.TraditionalChinese` <sup>\*</sup></span></span>|<span data-ttu-id="21181-1366">Konvertiert vereinfachte chinesische Zeichen in traditionellem Chinesisch.</span><span class="sxs-lookup"><span data-stu-id="21181-1366">Converts Simplified Chinese characters to Traditional Chinese.</span></span>|  
  
 <span data-ttu-id="21181-1367"><sup>\*</sup> Gilt für asiatische Gebietsschemas.</span><span class="sxs-lookup"><span data-stu-id="21181-1367"><sup>\*</sup> Applies to Asian locales.</span></span>  
  
 <span data-ttu-id="21181-1368"><sup>**</sup> Gilt nur für Japan.</span><span class="sxs-lookup"><span data-stu-id="21181-1368"><sup>**</sup> Applies to Japan only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="21181-1369">Diese Konstanten werden in der common Language Runtime von .NET Framework angegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1369">These constants are specified in the .NET Framework common language runtime.</span></span> <span data-ttu-id="21181-1370">Daher können sie eine beliebige Stelle im Code anstelle der eigentlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="21181-1370">As a result, they can be used anywhere in your code in place of the actual values.</span></span> <span data-ttu-id="21181-1371">Die meisten kombiniert werden können (z. B. `UpperCase + Wide`), außer wenn sie sich gegenseitig ausschließende sind (z. B. `VbStrConv.Wide + VbStrConv.Narrow`).</span><span class="sxs-lookup"><span data-stu-id="21181-1371">Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).</span></span>  
  
 <span data-ttu-id="21181-1372">Im folgenden werden die gültigen Worttrennzeichen für die richtige Groß-/Kleinschreibung: Null (`Chr$(0)`), horizontaler Tabulator (`Chr$(9)`), line Feed, Zeilenvorschub (`Chr$(10)`), vertikaler Tabulator (`Chr$(11)`), Seitenvorschub (`Chr$(12)`), Wagenrücklaufzeichen (`Chr$(13)`), Leerzeichen () Einzelbyte-Zeichensatz) (`Chr$(32)`).</span><span class="sxs-lookup"><span data-stu-id="21181-1372">The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`).</span></span> <span data-ttu-id="21181-1373">Der tatsächliche Wert für ein Leerzeichen, was die volle oder halbe Breite sein kann, variiert je nach Land/Region für ostasiatische Kulturen.</span><span class="sxs-lookup"><span data-stu-id="21181-1373">The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1374">In diesem Beispiel konvertiert Text in Kleinbuchstaben.</span><span class="sxs-lookup"><span data-stu-id="21181-1374">This example converts text into all lowercase letters.</span></span>  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="21181-1375"><paramref name="LocaleID" /> nicht unterstützt, <paramref name="Conversion" /> &lt; 0 oder &gt; 2048, oder nicht unterstützte Konvertierung für das angegebene Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="21181-1375">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-1376">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1376">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="21181-1377">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1377">Required.</span></span> <span data-ttu-id="21181-1378"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1378"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1379">Die Länge der zurückzugebenden Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1379">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="21181-1380">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1380">Required.</span></span> <span data-ttu-id="21181-1381">Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-1381">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="21181-1382">Es wird nur das erste Zeichen des Ausdrucks verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1382">Only the first character of the expression will be used.</span></span> <span data-ttu-id="21181-1383">Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</span><span class="sxs-lookup"><span data-stu-id="21181-1383">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="21181-1384">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1384">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="21181-1385">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1385">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1386">Diese Funktion gibt eine `String` setzt sich wiederholenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1386">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="21181-1387">Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.</span><span class="sxs-lookup"><span data-stu-id="21181-1387">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1388">Dieses Beispiel verwendet die `StrDup` -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1388">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1389"><paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="21181-1389"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21181-1390"><paramref name="Character" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-1390"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="21181-1391">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1391">Required.</span></span> <span data-ttu-id="21181-1392"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1392"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1393">Die Länge der zurückzugebenden Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1393">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="21181-1394">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1394">Required.</span></span> <span data-ttu-id="21181-1395">Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-1395">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="21181-1396">Es wird nur das erste Zeichen des Ausdrucks verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1396">Only the first character of the expression will be used.</span></span> <span data-ttu-id="21181-1397">Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</span><span class="sxs-lookup"><span data-stu-id="21181-1397">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="21181-1398">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1398">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="21181-1399">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1399">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1400">Diese Funktion gibt eine `String` setzt sich wiederholenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1400">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="21181-1401">Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.</span><span class="sxs-lookup"><span data-stu-id="21181-1401">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1402">Dieses Beispiel verwendet die `StrDup` -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1402">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1403"><paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="21181-1403"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21181-1404"><paramref name="Character" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-1404"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="21181-1405">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1405">Required.</span></span> <span data-ttu-id="21181-1406"><see langword="Integer" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1406"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="21181-1407">Die Länge der zurückzugebenden Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1407">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="21181-1408">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1408">Required.</span></span> <span data-ttu-id="21181-1409">Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-1409">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="21181-1410">Es wird nur das erste Zeichen des Ausdrucks verwendet.</span><span class="sxs-lookup"><span data-stu-id="21181-1410">Only the first character of the expression will be used.</span></span> <span data-ttu-id="21181-1411">Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</span><span class="sxs-lookup"><span data-stu-id="21181-1411">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="21181-1412">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1412">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="21181-1413">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1413">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1414">Diese Funktion gibt eine `String` setzt sich wiederholenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1414">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="21181-1415">Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.</span><span class="sxs-lookup"><span data-stu-id="21181-1415">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1416">Dieses Beispiel verwendet die `StrDup` -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.</span><span class="sxs-lookup"><span data-stu-id="21181-1416">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21181-1417"><paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="21181-1417"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21181-1418"><paramref name="Character" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="21181-1418"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="21181-1419">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1419">Required.</span></span> <span data-ttu-id="21181-1420">Zeichenfolgenausdruck, dessen Zeichen umgekehrt werden müssen.</span><span class="sxs-lookup"><span data-stu-id="21181-1420">String expression whose characters are to be reversed.</span></span> <span data-ttu-id="21181-1421">Wenn <c>Expression</c> eine Zeichenfolge der Länge 0 ("") ist, wird eine Zeichenfolge der Länge 0 (null) zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21181-1421">If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</span></span></param>
        <summary><span data-ttu-id="21181-1422">Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-1422">Returns a string in which the character order of a specified string is reversed.</span></span></summary>
        <returns><span data-ttu-id="21181-1423">Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</span><span class="sxs-lookup"><span data-stu-id="21181-1423">Returns a string in which the character order of a specified string is reversed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1424">Die `StrReverse` Funktion gibt eine Zeichenfolge, die gleichen Zeichen wie enthält `Expression`, aber in umgekehrter Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="21181-1424">The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="21181-1425">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1425">Required.</span></span> <span data-ttu-id="21181-1426">Jeder gültige <see langword="String" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="21181-1426">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-1427">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1427">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="21181-1428">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1428">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1429">Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.</span><span class="sxs-lookup"><span data-stu-id="21181-1429">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1430">In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt.</span><span class="sxs-lookup"><span data-stu-id="21181-1430">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="21181-1431">Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.</span><span class="sxs-lookup"><span data-stu-id="21181-1431">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="21181-1432">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1432">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="21181-1433">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1433">Required.</span></span> <span data-ttu-id="21181-1434">Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-1434">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-1435">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1435">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="21181-1436">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1436">Returns a string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1437">Konvertiert nur Kleinbuchstaben in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.</span><span class="sxs-lookup"><span data-stu-id="21181-1437">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="21181-1438">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1438">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="21181-1439">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument.</span><span class="sxs-lookup"><span data-stu-id="21181-1439">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="21181-1440">Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="21181-1440">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1441">In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:</span><span class="sxs-lookup"><span data-stu-id="21181-1441">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="21181-1442">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="21181-1442">Required.</span></span> <span data-ttu-id="21181-1443">Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</span><span class="sxs-lookup"><span data-stu-id="21181-1443">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="21181-1444">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1444">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="21181-1445">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</span><span class="sxs-lookup"><span data-stu-id="21181-1445">Returns a string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21181-1446">Konvertiert nur Kleinbuchstaben in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.</span><span class="sxs-lookup"><span data-stu-id="21181-1446">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="21181-1447">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21181-1447">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="21181-1448">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument.</span><span class="sxs-lookup"><span data-stu-id="21181-1448">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="21181-1449">Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="21181-1449">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21181-1450">In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:</span><span class="sxs-lookup"><span data-stu-id="21181-1450">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>
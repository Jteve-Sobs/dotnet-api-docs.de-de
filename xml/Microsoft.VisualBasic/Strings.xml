<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Strings.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54a1806b4a2c721341ef14e78c86610f6b37e79da.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a1806b4a2c721341ef14e78c86610f6b37e79da</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>The <ph id="ph1">&lt;see langword="Strings" /&gt;</ph> module contains procedures used to perform string operations.</source>
          <target state="translated">Das <ph id="ph1">&lt;see langword="Strings" /&gt;</ph>-Modul enthält Prozeduren, mit denen Zeichenfolgenoperationen ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Strings">
          <source>This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</source>
          <target state="translated">Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Zeichenfolgen bearbeiten.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Strings">
          <source>The following example demonstrates how to split a string at its spaces.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge an ihren Leerzeichen geteilt.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph> or <ph id="ph2">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, only the first character of the string is used for input.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> or contains no characters, an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> ist oder keine Zeichen enthält, tritt ein <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>-Fehler auf.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
          <target state="translated"><ph id="ph1">`Asc`</ph> Gibt die <bpt id="p1">*</bpt>Codepunkt<ept id="p1">*</ept>, oder der Zeichencode für das eingegebene Zeichen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
          <target state="translated">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
          <target state="translated"><ph id="ph1">`AscW`</ph> Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>This can be 0 through 65535.</source>
          <target state="translated">Dies kann 0 bis 65535 sein.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
          <target state="translated">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>The <ph id="ph1">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
          <target state="translated">Die <ph id="ph1">`AscB`</ph> -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und <ph id="ph1">`AscB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
          <source>The following example uses the <ph id="ph1">`Asc`</ph> function to return <ph id="ph2">`Integer`</ph> character codes corresponding to the first letter in each string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Asc`</ph> Funktion zurückzugebende <ph id="ph2">`Integer`</ph> Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph> or <ph id="ph2">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, only the first character of the string is used for input.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> or contains no characters, an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> ist oder keine Zeichen enthält, tritt ein <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>-Fehler auf.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
          <target state="translated"><ph id="ph1">`Asc`</ph> Gibt die <bpt id="p1">*</bpt>Codepunkt<ept id="p1">*</ept>, oder der Zeichencode für das eingegebene Zeichen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
          <target state="translated">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
          <target state="translated"><ph id="ph1">`AscW`</ph> Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>This can be 0 through 65535.</source>
          <target state="translated">Dies kann 0 bis 65535 sein.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
          <target state="translated">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>The <ph id="ph1">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
          <target state="translated">Die <ph id="ph1">`AscB`</ph> -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und <ph id="ph1">`AscB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
          <source>The following example uses the <ph id="ph1">`Asc`</ph> function to return <ph id="ph2">`Integer`</ph> character codes corresponding to the first letter in each string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Asc`</ph> Funktion zurückzugebende <ph id="ph2">`Integer`</ph> Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph> or <ph id="ph2">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, only the first character of the string is used for input.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> or contains no characters, an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> ist oder keine Zeichen enthält, tritt ein <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>-Fehler auf.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
          <target state="translated"><ph id="ph1">`Asc`</ph> Gibt die <bpt id="p1">*</bpt>Codepunkt<ept id="p1">*</ept>, oder der Zeichencode für das eingegebene Zeichen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
          <target state="translated">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
          <target state="translated"><ph id="ph1">`AscW`</ph> Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>This can be 0 through 65535.</source>
          <target state="translated">Dies kann 0 bis 65535 sein.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
          <target state="translated">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>The <ph id="ph1">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
          <target state="translated">Die <ph id="ph1">`AscB`</ph> -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und <ph id="ph1">`AscB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
          <source>The following example uses the <ph id="ph1">`Asc`</ph> function to return <ph id="ph2">`Integer`</ph> character codes corresponding to the first letter in each string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Asc`</ph> Funktion zurückzugebende <ph id="ph2">`Integer`</ph> Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph> or <ph id="ph2">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, only the first character of the string is used for input.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> or contains no characters, an <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>String<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> ist oder keine Zeichen enthält, tritt ein <ph id="ph2">&lt;see cref="T:System.ArgumentException" /&gt;</ph>-Fehler auf.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the character code corresponding to a character.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
          <target state="translated"><ph id="ph1">`Asc`</ph> Gibt die <bpt id="p1">*</bpt>Codepunkt<ept id="p1">*</ept>, oder der Zeichencode für das eingegebene Zeichen.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
          <target state="translated">Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
          <target state="translated"><ph id="ph1">`AscW`</ph> Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>This can be 0 through 65535.</source>
          <target state="translated">Dies kann 0 bis 65535 sein.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
          <target state="translated">Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>The <ph id="ph1">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
          <target state="translated">Die <ph id="ph1">`AscB`</ph> -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und <ph id="ph1">`AscB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
          <source>The following example uses the <ph id="ph1">`Asc`</ph> function to return <ph id="ph2">`Integer`</ph> character codes corresponding to the first letter in each string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Asc`</ph> Funktion zurückzugebende <ph id="ph2">`Integer`</ph> Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>An <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression representing the <bpt id="p1">&lt;c&gt;</bpt>code point<ept id="p1">&lt;/c&gt;</ept>, or character code, for the character.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck, der den <bpt id="p1">&lt;c&gt;</bpt>Codepunkt<ept id="p1">&lt;/c&gt;</ept> oder Zeichencode für das Zeichen darstellt.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>Returns the character associated with the specified character code.</source>
          <target state="translated">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>Returns the character associated with the specified character code.</source>
          <target state="translated">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>The asymmetric range accepted for <ph id="ph1">`CharCode`</ph> compensates for the storage differences between the <ph id="ph2">`Short`</ph> and the <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">Akzeptierte asymmetrische Bereich für <ph id="ph1">`CharCode`</ph> kompensiert die Speicherunterschiede zwischen den <ph id="ph2">`Short`</ph> und <ph id="ph3">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>For example, -29183 is a <ph id="ph1">`Short`</ph> but +36353 is an <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">Z. B.-29183 ein <ph id="ph1">`Short`</ph> 36353 ist jedoch ein <ph id="ph2">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>This also facilitates compatibility with Visual Basic 6.0.</source>
          <target state="translated">Dies vereinfacht auch die Kompatibilität mit Visual Basic 6.0.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source><ph id="ph1">`Chr`</ph> uses the <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> class in the <ph id="ph3">&lt;xref:System.Text?displayProperty=nameWithType&gt;</ph> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</source>
          <target state="translated"><ph id="ph1">`Chr`</ph> verwendet die <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> -Klasse in der <ph id="ph3">&lt;xref:System.Text?displayProperty=nameWithType&gt;</ph> festlegen (DBCS) Namespaces zu bestimmen, ob der aktuelle Thread ein Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen verwendet wird.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>It then takes <ph id="ph1">`CharCode`</ph> as a code point in the appropriate set.</source>
          <target state="translated">Klicken Sie dann dauert <ph id="ph1">`CharCode`</ph> als Codepunkt in die entsprechende Gruppe.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</source>
          <target state="translated">Der Bereich kann zwischen 0 und 255 Zeichen SBCS- und zwischen-32768 und 65535 für DBCS-Zeichen sein.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>The returned value depends on the code page for the current thread, which is contained in the <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Globalization.TextInfo&gt;</ph> class in the <ph id="ph3">&lt;xref:System.Globalization&gt;</ph> namespace.</source>
          <target state="translated">Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> Eigenschaft von der <ph id="ph2">&lt;xref:System.Globalization.TextInfo&gt;</ph> -Klasse in der <ph id="ph3">&lt;xref:System.Globalization&gt;</ph> Namespace.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>You can obtain <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> by specifying <ph id="ph2">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.</source>
          <target state="translated">Sie erhalten <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> durch Angabe <ph id="ph2">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source><ph id="ph1">`ChrW`</ph> takes <ph id="ph2">`CharCode`</ph> as a Unicode code point.</source>
          <target state="translated"><ph id="ph1">`ChrW`</ph> nimmt <ph id="ph2">`CharCode`</ph> als Unicode-Codepunkt.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>The range is independent of the culture and code page settings for the current thread.</source>
          <target state="translated">Der Bereich ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</source>
          <target state="translated">Werte zwischen-32768 und-1 werden behandelt als Werte im Bereich zwischen + 32768 und + 65535.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</source>
          <target state="translated">Zahlen von 0 bis 31 entsprechen standard nicht druckbaren ASCII-Codes.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>For example, <ph id="ph1">`Chr(10)`</ph> returns a line feed character.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Chr(10)`</ph> gibt ein Zeilenvorschubzeichen.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>The <ph id="ph1">`ChrB`</ph> function in earlier versions of Visual Basic returns a single byte.</source>
          <target state="translated">Die <ph id="ph1">`ChrB`</ph> -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>All strings in Visual Basic and the .NET Framework are in Unicode, and <ph id="ph1">`ChrB`</ph> is no longer supported.</source>
          <target state="translated">Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und <ph id="ph1">`ChrB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source>The following example uses the <ph id="ph1">`Chr`</ph> function to return the character associated with the specified character code.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Chr`</ph> Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="CharCode" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or <ph id="ph3">&amp;gt;</ph> 255 for <ph id="ph4">&lt;see langword="Chr" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="CharCode" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 oder <ph id="ph3">&amp;gt;</ph> 255 für <ph id="ph4">&lt;see langword="Chr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>An <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression representing the <bpt id="p1">&lt;c&gt;</bpt>code point<ept id="p1">&lt;/c&gt;</ept>, or character code, for the character.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck, der den <bpt id="p1">&lt;c&gt;</bpt>Codepunkt<ept id="p1">&lt;/c&gt;</ept> oder Zeichencode für das Zeichen darstellt.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>Returns the character associated with the specified character code.</source>
          <target state="translated">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>Returns the character associated with the specified character code.</source>
          <target state="translated">Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>The asymmetric range accepted for <ph id="ph1">`CharCode`</ph> compensates for the storage differences between the <ph id="ph2">`Short`</ph> and the <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">Akzeptierte asymmetrische Bereich für <ph id="ph1">`CharCode`</ph> kompensiert die Speicherunterschiede zwischen den <ph id="ph2">`Short`</ph> und <ph id="ph3">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>For example, -29183 is a <ph id="ph1">`Short`</ph> but +36353 is an <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">Z. B.-29183 ein <ph id="ph1">`Short`</ph> 36353 ist jedoch ein <ph id="ph2">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>This also facilitates compatibility with Visual Basic 6.0.</source>
          <target state="translated">Dies vereinfacht auch die Kompatibilität mit Visual Basic 6.0.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source><ph id="ph1">`Chr`</ph> uses the <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> class in the <ph id="ph3">&lt;xref:System.Text?displayProperty=nameWithType&gt;</ph> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</source>
          <target state="translated"><ph id="ph1">`Chr`</ph> verwendet die <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> -Klasse in der <ph id="ph3">&lt;xref:System.Text?displayProperty=nameWithType&gt;</ph> festlegen (DBCS) Namespaces zu bestimmen, ob der aktuelle Thread ein Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen verwendet wird.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>It then takes <ph id="ph1">`CharCode`</ph> as a code point in the appropriate set.</source>
          <target state="translated">Klicken Sie dann dauert <ph id="ph1">`CharCode`</ph> als Codepunkt in die entsprechende Gruppe.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</source>
          <target state="translated">Der Bereich kann zwischen 0 und 255 Zeichen SBCS- und zwischen-32768 und 65535 für DBCS-Zeichen sein.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>The returned value depends on the code page for the current thread, which is contained in the <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Globalization.TextInfo&gt;</ph> class in the <ph id="ph3">&lt;xref:System.Globalization&gt;</ph> namespace.</source>
          <target state="translated">Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> Eigenschaft von der <ph id="ph2">&lt;xref:System.Globalization.TextInfo&gt;</ph> -Klasse in der <ph id="ph3">&lt;xref:System.Globalization&gt;</ph> Namespace.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>You can obtain <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> by specifying <ph id="ph2">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.</source>
          <target state="translated">Sie erhalten <ph id="ph1">&lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt;</ph> durch Angabe <ph id="ph2">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source><ph id="ph1">`ChrW`</ph> takes <ph id="ph2">`CharCode`</ph> as a Unicode code point.</source>
          <target state="translated"><ph id="ph1">`ChrW`</ph> nimmt <ph id="ph2">`CharCode`</ph> als Unicode-Codepunkt.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>The range is independent of the culture and code page settings for the current thread.</source>
          <target state="translated">Der Bereich ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</source>
          <target state="translated">Werte zwischen-32768 und-1 werden behandelt als Werte im Bereich zwischen + 32768 und + 65535.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</source>
          <target state="translated">Zahlen von 0 bis 31 entsprechen standard nicht druckbaren ASCII-Codes.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>For example, <ph id="ph1">`Chr(10)`</ph> returns a line feed character.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Chr(10)`</ph> gibt ein Zeilenvorschubzeichen.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>The <ph id="ph1">`ChrB`</ph> function in earlier versions of Visual Basic returns a single byte.</source>
          <target state="translated">Die <ph id="ph1">`ChrB`</ph> -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>All strings in Visual Basic and the .NET Framework are in Unicode, and <ph id="ph1">`ChrB`</ph> is no longer supported.</source>
          <target state="translated">Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und <ph id="ph1">`ChrB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source>The following example uses the <ph id="ph1">`Chr`</ph> function to return the character associated with the specified character code.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Chr`</ph> Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="CharCode" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> -32768 or <ph id="ph3">&amp;gt;</ph> 65535 for <ph id="ph4">&lt;see langword="ChrW" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="CharCode" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> – 32768 oder <ph id="ph3">&amp;gt;</ph> 65535 für <ph id="ph4">&lt;see langword="ChrW" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns a zero-based array containing a subset of a <ph id="ph1">&lt;see langword="String" /&gt;</ph> array based on specified filter criteria.</source>
          <target state="translated">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Arrays auf der Basis angegebener Filterkriterien enthält.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>One-dimensional array of strings to be searched.</source>
          <target state="translated">Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>String to search for.</source>
          <target state="translated">Die zu suchende Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether to return substrings that include or exclude <bpt id="p1">&lt;c&gt;</bpt>Match<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <bpt id="p1">&lt;c&gt;</bpt>Match<ept id="p1">&lt;/c&gt;</ept> einschließen oder ausschließen.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="True" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Filter" /&gt;</ph> function returns the subset of the array that contains <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> as a substring.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="True" /&gt;</ph>ist, gibt die <ph id="ph2">&lt;see langword="Filter" /&gt;</ph>-Funktion die Teilmenge des Arrays zurück, die <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> als eine untergeordnete Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="False" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Filter" /&gt;</ph> function returns the subset of the array that does not contain <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> as a substring.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="False" /&gt;</ph>ist, gibt die <ph id="ph2">&lt;see langword="Filter" /&gt;</ph>-Funktion die Teilmenge des Arrays zurück, die <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> nicht als untergeordnete Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric value indicating the kind of string comparison to use.</source>
          <target state="translated">Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns a zero-based array containing a subset of a <ph id="ph1">&lt;see langword="String" /&gt;</ph> array based on specified filter criteria.</source>
          <target state="translated">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Arrays auf der Basis angegebener Filterkriterien enthält.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns a zero-based array containing a subset of a <ph id="ph1">&lt;see langword="String" /&gt;</ph> array based on specified filter criteria.</source>
          <target state="translated">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Arrays auf der Basis angegebener Filterkriterien enthält.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>If no matches of <ph id="ph1">`Match`</ph> are found within <ph id="ph2">`Source`</ph>, the <ph id="ph3">`Filter`</ph> function returns an empty array.</source>
          <target state="translated">Wenn keine Übereinstimmungen von <ph id="ph1">`Match`</ph> befinden sich in <ph id="ph2">`Source`</ph>die <ph id="ph3">`Filter`</ph> Funktion ein leeres Array zurück.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>An error occurs if <ph id="ph1">`Source`</ph> is set to <ph id="ph2">`Nothing`</ph> or is not a one-dimensional array.</source>
          <target state="translated">Ein Fehler tritt auf, wenn <ph id="ph1">`Source`</ph> festgelegt ist, um <ph id="ph2">`Nothing`</ph> oder ist kein eindimensionales Array.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>The array returned by the <ph id="ph1">`Filter`</ph> function contains only enough elements to contain the number of matched items.</source>
          <target state="translated">Das zurückgegebene Array die <ph id="ph1">`Filter`</ph> Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph> Argument kann die folgenden Werte haben.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison</source>
          <target state="translated">Führt einen binären Vergleich</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a textual comparison</source>
          <target state="translated">Führt einen Vergleich aus Text</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>This example demonstrates the use of the <ph id="ph1">`Filter`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Filter`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Source" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> or is not a one-dimensional array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> oder kein eindimensionales Array.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>One-dimensional array of strings to be searched.</source>
          <target state="translated">Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>String to search for.</source>
          <target state="translated">Die zu suchende Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether to return substrings that include or exclude <bpt id="p1">&lt;c&gt;</bpt>Match<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <bpt id="p1">&lt;c&gt;</bpt>Match<ept id="p1">&lt;/c&gt;</ept> einschließen oder ausschließen.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="True" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Filter" /&gt;</ph> function returns the subset of the array that contains <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> as a substring.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="True" /&gt;</ph>ist, gibt die <ph id="ph2">&lt;see langword="Filter" /&gt;</ph>-Funktion die Teilmenge des Arrays zurück, die <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> als eine untergeordnete Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="False" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Filter" /&gt;</ph> function returns the subset of the array that does not contain <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> as a substring.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Include<ept id="p1">&lt;/c&gt;</ept> <ph id="ph1">&lt;see langword="False" /&gt;</ph>ist, gibt die <ph id="ph2">&lt;see langword="Filter" /&gt;</ph>-Funktion die Teilmenge des Arrays zurück, die <bpt id="p2">&lt;c&gt;</bpt>Match<ept id="p2">&lt;/c&gt;</ept> nicht als untergeordnete Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric value indicating the kind of string comparison to use.</source>
          <target state="translated">Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns a zero-based array containing a subset of a <ph id="ph1">&lt;see langword="String" /&gt;</ph> array based on specified filter criteria.</source>
          <target state="translated">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Arrays auf der Basis angegebener Filterkriterien enthält.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns a zero-based array containing a subset of a <ph id="ph1">&lt;see langword="String" /&gt;</ph> array based on specified filter criteria.</source>
          <target state="translated">Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Arrays auf der Basis angegebener Filterkriterien enthält.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>If no matches of <ph id="ph1">`Match`</ph> are found within <ph id="ph2">`Source`</ph>, the <ph id="ph3">`Filter`</ph> function returns an empty array.</source>
          <target state="translated">Wenn keine Übereinstimmungen von <ph id="ph1">`Match`</ph> befinden sich in <ph id="ph2">`Source`</ph>die <ph id="ph3">`Filter`</ph> Funktion ein leeres Array zurück.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>An error occurs if <ph id="ph1">`Source`</ph> is set to <ph id="ph2">`Nothing`</ph> or is not a one-dimensional array.</source>
          <target state="translated">Ein Fehler tritt auf, wenn <ph id="ph1">`Source`</ph> festgelegt ist, um <ph id="ph2">`Nothing`</ph> oder ist kein eindimensionales Array.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>The array returned by the <ph id="ph1">`Filter`</ph> function contains only enough elements to contain the number of matched items.</source>
          <target state="translated">Das zurückgegebene Array die <ph id="ph1">`Filter`</ph> Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph> Argument kann die folgenden Werte haben.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison</source>
          <target state="translated">Führt einen binären Vergleich</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a textual comparison</source>
          <target state="translated">Führt einen Vergleich aus Text</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source>This example demonstrates the use of the <ph id="ph1">`Filter`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Filter`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Source" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> or is not a one-dimensional array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> oder kein eindimensionales Array.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Any valid expression.</source>
          <target state="translated">Jeder gültige Ausdruck.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>A valid named or user-defined format <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Ein gültiger benannter oder benutzerdefinierter Format-<ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Returns a string formatted according to instructions contained in a format <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Formatausdruck formatiert ist.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Returns a string formatted according to instructions contained in a format <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Formatausdruck formatiert ist.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> method also provides similar functionality.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> Methode verfügt auch über ähnliche Funktionen.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</source>
          <target state="translated">Wenn Sie eine nicht lokalisierte numerische Zeichenfolge formatieren, sollten Sie ein benutzerdefinierten numerisches Format verwenden, um sicherzustellen, dass das Aussehen gewünschten abzurufen.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If you try to format a number without specifying <ph id="ph1">`Style`</ph>, the <ph id="ph2">`Format`</ph> function provides functionality similar to the <ph id="ph3">`Str`</ph> function, although it is internationally aware.</source>
          <target state="translated">Wenn Sie versuchen, formatieren Sie eine Zahl ohne <ph id="ph1">`Style`</ph>, <ph id="ph2">`Format`</ph> Funktion bietet ähnliche Funktionen der <ph id="ph3">`Str`</ph> -Funktion an, obwohl er das Gebietsschema berücksichtigt wird.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>However, positive numbers formatted as strings using the <ph id="ph1">`Format`</ph> function don't include a leading space reserved for the sign of the value; those converted using the <ph id="ph2">`Str`</ph> function retain the leading space.</source>
          <target state="translated">Allerdings positive Zahlen mithilfe als Zeichenfolgen formatiert die <ph id="ph1">`Format`</ph> Funktion nicht mit ein führendes Leerzeichen zur Angabe des Vorzeichens einschließen, mit denen konvertiert die <ph id="ph2">`Str`</ph> Funktion behalten das führende Leerzeichen.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Different Formats for Different Numeric Values</source>
          <target state="translated">Verschiedene Formate für verschiedene numerische Werte</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>A user-defined format expression for numbers can have from one to three sections separated by semicolons.</source>
          <target state="translated">Ein benutzerdefiniertes Formatausdruck für Zahlen kann ein bis drei durch Semikolons getrennte Abschnitte haben.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the <ph id="ph1">`Style`</ph> argument of the <ph id="ph2">`Format`</ph> function contains one of the predefined numeric formats, only one section is allowed.</source>
          <target state="translated">Wenn die <ph id="ph1">`Style`</ph> Argument der <ph id="ph2">`Format`</ph> Funktion enthält einen der vordefinierten numerischen Formate, die nur ein Abschnitt zulässig ist.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If you use</source>
          <target state="translated">Bei Verwendung von</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>This is the result</source>
          <target state="translated">Dies ist das Ergebnis</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>One section only</source>
          <target state="translated">Nur ein Abschnitt</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The format expression applies to all values.</source>
          <target state="translated">Der Formatausdruck gilt für alle Werte.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Two sections</source>
          <target state="translated">Zwei Abschnitte</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The first section applies to positive values and zeros; the second applies to negative values.</source>
          <target state="translated">Der erste Abschnitt gilt für positive Werte und Nullen; die zweite gilt für negative Werte.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Three sections</source>
          <target state="translated">Drei Abschnitte</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</source>
          <target state="translated">Der erste Abschnitt gilt für positive Werte, die zweite gilt für negative Werte und die dritte betrifft Nullen.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</source>
          <target state="translated">Das folgende Beispiel enthält zwei Abschnitte unterteilt: der erste definiert das Format für positive Werte und Nullen; der zweite Abschnitt definiert das Format für negative Werte.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Since the <ph id="ph1">`Style`</ph> argument of the <ph id="ph2">`Format`</ph> function takes a string, it is enclosed by quotation marks.</source>
          <target state="translated">Da die <ph id="ph1">`Style`</ph> Argument der <ph id="ph2">`Format`</ph> Funktion akzeptiert eine Zeichenfolge, die er in Anführungszeichen eingeschlossen ist.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</source>
          <target state="translated">Wenn Sie zwei Semikolons ohne etwas dazwischen einfügen, wird der fehlende Abschnitt mit dem Format des positiven Wertes ausgegeben.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, the following format displays positive and negative values using the format in the first section and displays <ph id="ph1">`Zero`</ph> if the value is zero.</source>
          <target state="translated">Beispielsweise das folgende Format zeigt positive und Negative Werte mit dem Format im ersten Abschnitt und zeigt <ph id="ph1">`Zero`</ph> ist der Wert 0 (null).</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Predefined Numeric Formats</source>
          <target state="translated">Vordefinierte numerische Formate</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following table identifies the predefined numeric format names.</source>
          <target state="translated">Die folgende Tabelle zeigt die vordefinierten numerischen Formate.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>These may be used by name as the <ph id="ph1">`Style`</ph> argument for the <ph id="ph2">`Format`</ph> function:</source>
          <target state="translated">Diese können verwendet werden, anhand des Namens der <ph id="ph1">`Style`</ph> Argument für die <ph id="ph2">`Format`</ph> Funktion:</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Format name</source>
          <target state="translated">Formatname</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`General Number`</ph>, <ph id="ph2">`G`</ph>, or <ph id="ph3">`g`</ph></source>
          <target state="translated"><ph id="ph1">`General Number`</ph>, <ph id="ph2">`G`</ph>oder <ph id="ph3">`g`</ph></target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number with no thousand separator.</source>
          <target state="translated">Zeigt eine Zahl ohne Tausendertrennzeichen an.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(&amp;H3FA, "g")`</ph> returns <ph id="ph2">`1018`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(&amp;H3FA, "g")`</ph> gibt <ph id="ph2">`1018`</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Currency`</ph>, <ph id="ph2">`C`</ph>, or <ph id="ph3">`c`</ph></source>
          <target state="translated"><ph id="ph1">`Currency`</ph>, <ph id="ph2">`C`</ph>oder <ph id="ph3">`c`</ph></target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</source>
          <target state="translated">Zeigt eine Zahl ggf. mit Tausendertrennzeichen an; zeigt zwei Ziffern rechts vom Dezimaltrennzeichen an.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Output is based on system locale settings.</source>
          <target state="translated">Ausgabe hängt vom verwendeten Systemgebietsschema ab.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1234567, "c")`</ph> returns <ph id="ph2">`$1,234,567.00`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1234567, "c")`</ph> gibt <ph id="ph2">`$1,234,567.00`</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Fixed`</ph>, <ph id="ph2">`F`</ph>, or <ph id="ph3">`f`</ph></source>
          <target state="translated"><ph id="ph1">`Fixed`</ph>, <ph id="ph2">`F`</ph>oder <ph id="ph3">`f`</ph></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays at least one digit to the left and two digits to the right of the decimal separator.</source>
          <target state="translated">Zeigt mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1234567, "f")`</ph> returns <ph id="ph2">`1234567.00`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1234567, "f")`</ph> gibt <ph id="ph2">`1234567.00`</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Standard`</ph>, <ph id="ph2">`N`</ph>, or <ph id="ph3">`n`</ph></source>
          <target state="translated"><ph id="ph1">`Standard`</ph>, <ph id="ph2">`N`</ph>oder <ph id="ph3">`n`</ph></target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</source>
          <target state="translated">Zeigt die Zahl mit Tausendertrennzeichen, mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen an.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1234567, "n")`</ph> returns <ph id="ph2">`1,234,567.00`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1234567, "n")`</ph> gibt <ph id="ph2">`1,234,567.00`</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</source>
          <target state="translated">Zeigt die Zahl multipliziert mit 100 mit einem Prozentzeichen (%) auf der rechten Seite angefügt an; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(0.4744, "Percent")`</ph> returns <ph id="ph2">`47.44%`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(0.4744, "Percent")`</ph> gibt <ph id="ph2">`47.44%`</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`P`</ph>, or <ph id="ph2">`p`</ph></source>
          <target state="translated"><ph id="ph1">`P`</ph>, oder <ph id="ph2">`p`</ph></target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</source>
          <target state="translated">Zeigt eine Zahl mit Tausendertrennzeichen multipliziert mit 100 mit einem Prozentzeichen (%) nach rechts und getrennt durch ein einzelnes Leerzeichen angefügt; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(0.80345, "p")`</ph> returns <ph id="ph2">`80.35 %`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(0.80345, "p")`</ph> gibt <ph id="ph2">`80.35 %`</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Uses standard scientific notation, providing two significant digits.</source>
          <target state="translated">Verwendet standardmäßige wissenschaftliche Schreibweise und stellt zwei signifikante Stellen bereit.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1234567, "Scientific")`</ph> returns <ph id="ph2">`1.23E+06`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1234567, "Scientific")`</ph> gibt <ph id="ph2">`1.23E+06`</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`E`</ph>, or <ph id="ph2">`e`</ph></source>
          <target state="translated"><ph id="ph1">`E`</ph>, oder <ph id="ph2">`e`</ph></target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Uses standard scientific notation, providing six significant digits.</source>
          <target state="translated">Verwendet standardmäßige wissenschaftliche Schreibweise und stellt sechs signifikante Stellen bereit.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1234567, "e")`</ph> returns <ph id="ph2">`1.234567e+006`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1234567, "e")`</ph> gibt <ph id="ph2">`1.234567e+006`</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`D`</ph>, or <ph id="ph2">`d`</ph></source>
          <target state="translated"><ph id="ph1">`D`</ph>, oder <ph id="ph2">`d`</ph></target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number as a string that contains the value of the number in Decimal (base 10) format.</source>
          <target state="translated">Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl in Dezimalzahl (Basis 10)-Format enthält.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>This option is supported for integral types (<ph id="ph1">`Byte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>) only.</source>
          <target state="translated">Diese Option wird für ganzzahlige Typen unterstützt (<ph id="ph1">`Byte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>) nur.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(&amp;H7F, "d")`</ph> returns <ph id="ph2">`127`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(&amp;H7F, "d")`</ph> gibt <ph id="ph2">`127`</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`X`</ph>, or <ph id="ph2">`x`</ph></source>
          <target state="translated"><ph id="ph1">`X`</ph>, oder <ph id="ph2">`x`</ph></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</source>
          <target state="translated">Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl im Hexadezimalformat (Basis 16) enthält.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>This option is supported for integral types (<ph id="ph1">`Byte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>) only.</source>
          <target state="translated">Diese Option wird für ganzzahlige Typen unterstützt (<ph id="ph1">`Byte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>) nur.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(127, "x")`</ph> returns <ph id="ph2">`7f`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(127, "x")`</ph> gibt <ph id="ph2">`7f`</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays <ph id="ph1">`No`</ph> if number is 0; otherwise, displays <ph id="ph2">`Yes`</ph>.</source>
          <target state="translated">Zeigt <ph id="ph1">`No`</ph> Wenn Zahl, andernfalls 0 ist, zeigt <ph id="ph2">`Yes`</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(0, "Yes/No")`</ph> returns <ph id="ph2">`No`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(0, "Yes/No")`</ph> gibt <ph id="ph2">`No`</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays <ph id="ph1">`False`</ph> if number is 0; otherwise, displays <ph id="ph2">`True`</ph>.</source>
          <target state="translated">Zeigt <ph id="ph1">`False`</ph> Wenn Zahl, andernfalls 0 ist, zeigt <ph id="ph2">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1, "True/False")`</ph> returns <ph id="ph2">`True`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1, "True/False")`</ph> gibt <ph id="ph2">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays <ph id="ph1">`Off`</ph> if number is 0; otherwise, displays <ph id="ph2">`On`</ph>.</source>
          <target state="translated">Zeigt <ph id="ph1">`Off`</ph> Wenn Zahl, andernfalls 0 ist, zeigt <ph id="ph2">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Format(1, "On/Off")`</ph> returns <ph id="ph2">`On`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Format(1, "On/Off")`</ph> gibt <ph id="ph2">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`Yes/No`</ph>, <ph id="ph2">`True/False`</ph>, and <ph id="ph3">`On/Off`</ph> formats are not supported.</source>
          <target state="translated">Die <ph id="ph1">`Yes/No`</ph>, <ph id="ph2">`True/False`</ph>, und <ph id="ph3">`On/Off`</ph> pfadformate werden nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>User-Defined Numeric Formats</source>
          <target state="translated">Benutzerdefinierte numerische Formate</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following table identifies characters you can use to create user-defined number formats.</source>
          <target state="translated">In der folgenden Tabelle identifiziert die Zeichen, mit denen Sie benutzerdefinierte Zahlenformate erstellen können.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>These may be used to build the <ph id="ph1">`Style`</ph> argument for the <ph id="ph2">`Format`</ph> function:</source>
          <target state="translated">Diese können verwendet werden, zum Erstellen der <ph id="ph1">`Style`</ph> Argument für die <ph id="ph2">`Format`</ph> Funktion:</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Character</source>
          <target state="translated">Zeichen</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the number with no formatting.</source>
          <target state="translated">Zeigt die Zahl ohne Formatierung an.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`0`</ph>)</source>
          <target state="translated">(<ph id="ph1">`0`</ph>)</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Digit placeholder.</source>
          <target state="translated">Ziffernplatzhalter.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a digit or a zero.</source>
          <target state="translated">Zeigt eine Ziffer oder eine 0 (null).</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</source>
          <target state="translated">Wenn der Ausdruck eine Ziffer an der Position, wo die 0 (null) in der Formatzeichenfolge angezeigt wird, angezeigt. Andernfalls wird an dieser Position eine Null angezeigt.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</source>
          <target state="translated">Hat die Zahl sind weniger Ziffern als Nullen (auf beiden Seiten des Dezimaltrennzeichens) im Formatausdruck, führende oder nachfolgende Nullen angezeigt wird.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</source>
          <target state="translated">Hat die Zahl mehr Ziffern rechts vom Dezimaltrennzeichen als stehen Nullen rechts des Dezimaltrennzeichens im Formatausdruck, rundet die Zahl auf so viele Dezimalstellen wie Nullen vorhanden sind.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</source>
          <target state="translated">Hat die Zahl mehr Stellen links vom Dezimaltrennzeichen als stehen Nullen auf der linken Seite des Dezimaltrennzeichens im Formatausdruck, zeigt die zusätzlichen Ziffern unverändert.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`#`</ph>)</source>
          <target state="translated">(<ph id="ph1">`#`</ph>)</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Digit placeholder.</source>
          <target state="translated">Ziffernplatzhalter.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a digit or nothing.</source>
          <target state="translated">Zeigt eine Ziffer oder nichts an.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the expression has a digit in the position where the <ph id="ph1">`#`</ph> character appears in the format string, displays it; otherwise, displays nothing in that position.</source>
          <target state="translated">Wenn der Ausdruck eine Ziffer an der Position, in dem die <ph id="ph1">`#`</ph> Zeichen vorkommt, wird in der Formatzeichenfolge angezeigt; andernfalls wird nichts an dieser Stelle angezeigt.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>This symbol works like the <ph id="ph1">`0`</ph> digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are <ph id="ph2">`#`</ph> characters on either side of the decimal separator in the format expression.</source>
          <target state="translated">Dieses Symbol funktioniert wie die <ph id="ph1">`0`</ph> Ziffernplatzhalter, mit der Ausnahme, die führenden und nachfolgenden Nullen angezeigt werden, hat die Zahl weniger Ziffern als vorhanden sind <ph id="ph2">`#`</ph> -Zeichen auf beiden Seiten des Dezimaltrennzeichens im Formatausdruck.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`.`</ph>)</source>
          <target state="translated">(<ph id="ph1">`.`</ph>)</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Decimal placeholder.</source>
          <target state="translated">Dezimalplatzhalter.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</source>
          <target state="translated">Der dezimalplatzhalter legt fest, wie viele Ziffern links und rechts vom Dezimaltrennzeichen angezeigt werden.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the format expression contains only <ph id="ph1">`#`</ph> characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</source>
          <target state="translated">Wenn der Formatausdruck nur enthält <ph id="ph1">`#`</ph> Zeichen links von diesem Symbol; Zahlen, die kleiner als 1 mit einem Dezimaltrennzeichen beginnen.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</source>
          <target state="translated">Verwenden Sie zum Anzeigen einer führenden Null angezeigt werden, sollen Bruchzahlen mit 0 (null) als ersten Ziffernplatzhalter links vom Dezimaltrennzeichen an.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>In some locales, a comma is used as the decimal separator.</source>
          <target state="translated">In manchen Gebietsschemas wird ein Komma als Dezimaltrennzeichen verwendet.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</source>
          <target state="translated">Welches Zeichen tatsächliche als Dezimaltrennzeichen in der formatierten Ausgabe verwendet hängt das Zahlenformat, das vom System erkannt wird.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</source>
          <target state="translated">Daher sollten Sie den Zeitraum als dezimalplatzalter in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die ein Komma als Dezimaltrennzeichen verwendet.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The formatted string will appear in the format correct for the locale.</source>
          <target state="translated">Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`%`</ph>)</source>
          <target state="translated">(<ph id="ph1">`%`</ph>)</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Percent placeholder.</source>
          <target state="translated">Prozentplatzhalter.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Multiplies the expression by 100.</source>
          <target state="translated">Den Ausdruck multipliziert mit 100.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The percent character (<ph id="ph1">`%`</ph>) is inserted in the position where it appears in the format string.</source>
          <target state="translated">Das Prozentzeichen (<ph id="ph1">`%`</ph>) in die Position, wo es angezeigt, in der Formatzeichenfolge wird, eingefügt wird.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`,`</ph>)</source>
          <target state="translated">(<ph id="ph1">`,`</ph>)</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Thousand separator.</source>
          <target state="translated">Tausendertrennzeichen an.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</source>
          <target state="translated">Das Tausendertrennzeichen trennt Tausender von den Hundertern in eine Zahl mit vier oder mehr Stellen links vom Dezimaltrennzeichen an.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (<ph id="ph1">`0`</ph> or <ph id="ph2">`#`</ph>).</source>
          <target state="translated">Standardmäßige Verwendung des Tausendertrennzeichens wird angegeben, wenn das Format ein Tausendertrennzeichen Ziffernplatzhalter enthaltender enthält (<ph id="ph1">`0`</ph> oder <ph id="ph2">`#`</ph>).</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</source>
          <target state="translated">Ein Tausendertrennzeichen direkt links vom Dezimaltrennzeichen (fest, ob ein Dezimaltrennzeichen angegeben ist) oder der äußersten rechten Zeichen in der Zeichenfolge bedeutet Folgendes "Skalieren die Zahl durch Division durch 1000, gegebenenfalls mit Rundung".</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Numbers smaller than 1,000 but greater or equal to 500 are displayed as <ph id="ph1">`1`</ph>, and numbers smaller than 500 are displayed as <ph id="ph2">`0`</ph>.</source>
          <target state="translated">Zahlen, die kleiner als 1.000 und größer als oder gleich 500 werden angezeigt, als <ph id="ph1">`1`</ph>, und Zahlen, die kleiner als 500, als angezeigt werden <ph id="ph2">`0`</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</source>
          <target state="translated">Zwei benachbarte Tausendertrennzeichen an dieser Position skalieren, indem Sie einen Faktor von 1 Million sowie einem zusätzlichen Faktor von 1000 für jedes zusätzliche Trennzeichen.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</source>
          <target state="translated">Mehrere Trennzeichen, die in alle anderen Position als direkt links vom Dezimaltrennzeichen oder ganz rechts in der Zeichenfolge werden behandelt, als die Verwendung eines Tausendertrennzeichens angeben.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>In some locales, a period is used as a thousand separator.</source>
          <target state="translated">In manchen Gebietsschemas wird der Punkt als Tausendertrennzeichen verwendet.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</source>
          <target state="translated">Welches Zeichen tatsächliche als Tausendertrennzeichen in der formatierten Ausgabe verwendet hängt das Zahlenformat, die vom System erkannt wird.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</source>
          <target state="translated">Daher sollten Sie das Komma als Tausendertrennzeichen in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die einen Punkt als Tausendertrennzeichen verwendet.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The formatted string will appear in the format correct for the locale.</source>
          <target state="translated">Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, consider the three following format strings:</source>
          <target state="translated">Betrachten Sie beispielsweise die folgenden drei Formatzeichenfolgen:</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">-   </ph><ph id="ph2">`"#,0."`</ph>, which uses the thousands separator to format the number 100 million as the string "100,000,000".</source>
          <target state="translated"><ph id="ph1">-   </ph><ph id="ph2">`"#,0."`</ph>, welches wird das Tausendertrennzeichen verwendet, um die Zahl 100 Millionen als die Zeichenfolge "100,000,000" zu formatieren.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">-   </ph><ph id="ph2">`"#0,."`</ph>, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</source>
          <target state="translated"><ph id="ph1">-   </ph><ph id="ph2">`"#0,."`</ph>, die mit dem Faktor Tausendstel Skalierung so formatieren Sie die Zahl 100 Millionen als die Zeichenfolge "100000" verwendet.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">-   </ph><ph id="ph2">`"#,0,."`</ph>, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</source>
          <target state="translated"><ph id="ph1">-   </ph><ph id="ph2">`"#,0,."`</ph>, welches wird das Tausendertrennzeichen verwendet und mit einem Faktor von auf die Zahl 100 Millionen als die Zeichenfolge "100,000" zu formatieren.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`:`</ph>)</source>
          <target state="translated">(<ph id="ph1">`:`</ph>)</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Time separator.</source>
          <target state="translated">Zeittrennzeichen.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>In some locales, other characters may be used to represent the time separator.</source>
          <target state="translated">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Zeittrennzeichen verwendet werden.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The time separator separates hours, minutes, and seconds when time values are formatted.</source>
          <target state="translated">Das Zeittrennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The actual character used as the time separator in formatted output is determined by your system settings.</source>
          <target state="translated">Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird von den Systemeinstellungen bestimmt.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`/`</ph>)</source>
          <target state="translated">(<ph id="ph1">`/`</ph>)</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Date separator.</source>
          <target state="translated">Trennzeichen für Datumsangaben.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>In some locales, other characters may be used to represent the date separator.</source>
          <target state="translated">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Datumstrennzeichen verwendet werden.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The date separator separates the day, month, and year when date values are formatted.</source>
          <target state="translated">Das Datumstrennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The actual character used as the date separator in formatted output is determined by your system settings.</source>
          <target state="translated">Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird von den Systemeinstellungen bestimmt.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`E-``E+``e-``e+`</ph>)</source>
          <target state="translated">(<ph id="ph1">`E-``E+``e-``e+`</ph>)</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Scientific format.</source>
          <target state="translated">Wissenschaftliches Format.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the format expression contains at least one digit placeholder (<ph id="ph1">`0`</ph> or <ph id="ph2">`#`</ph>) to the left of <ph id="ph3">`E-`</ph>, <ph id="ph4">`E+`</ph>, <ph id="ph5">`e-`</ph>, or <ph id="ph6">`e+`</ph>, the number is displayed in scientific format and <ph id="ph7">`E`</ph> or <ph id="ph8">`e`</ph> is inserted between the number and its exponent.</source>
          <target state="translated">Wenn der Formatausdruck mindestens einen Ziffernplatzhalter enthält (<ph id="ph1">`0`</ph> oder <ph id="ph2">`#`</ph>) auf der linken Seite des <ph id="ph3">`E-`</ph>, <ph id="ph4">`E+`</ph>, <ph id="ph5">`e-`</ph>, oder <ph id="ph6">`e+`</ph>, wird die Zahl im wissenschaftlichen Format angezeigt und <ph id="ph7">`E`</ph> oder <ph id="ph8">`e`</ph> wird zwischen der Zahl und dem Exponenten eingefügt.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The number of digit placeholders to the left determines the number of digits in the exponent.</source>
          <target state="translated">Die Anzahl der Ziffernplatzhalter auf der linken Seite bestimmt die Anzahl der Ziffern im Exponenten.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`E-`</ph> or <ph id="ph2">`e-`</ph> to place a minus sign next to negative exponents.</source>
          <target state="translated">Verwendung <ph id="ph1">`E-`</ph> oder <ph id="ph2">`e-`</ph> ein Minuszeichen neben negativen Exponenten zu platzieren.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`E+`</ph> or <ph id="ph2">`e+`</ph> to place a minus sign next to negative exponents and a plus sign next to positive exponents.</source>
          <target state="translated">Verwendung <ph id="ph1">`E+`</ph> oder <ph id="ph2">`e+`</ph> um negativen Exponenten ein Minuszeichen und positiven Exponenten ein Pluszeichen einzufügen.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>You must also include digit placeholders to the right of this symbol to get correct formatting.</source>
          <target state="translated">Sie müssen auch Ziffernplatzhalter rechts von diesem Symbol, um die richtige Formatierung einschließen.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`-`</ph> <ph id="ph2">`+`</ph> <ph id="ph3">`$`</ph> ( )</source>
          <target state="translated"><ph id="ph1">`-`</ph> <ph id="ph2">`+`</ph> <ph id="ph3">`$`</ph> ( )</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Literal characters.</source>
          <target state="translated">Literalzeichen.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>These characters are displayed exactly as typed in the format string.</source>
          <target state="translated">Diese Zeichen werden genau wie in der Formatzeichenfolge eingegeben angezeigt.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>To display a character other than one of those listed, precede it with a backslash (<ph id="ph1">`\`</ph>) or enclose it in double quotation marks (" ").</source>
          <target state="translated">Um ein anderes Zeichen als die hier aufgeführten anzuzeigen, fügen sie davor ein umgekehrter Schrägstrich (<ph id="ph1">`\`</ph>) oder schließen Sie ihn in doppelte Anführungszeichen ("").</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`\`</ph>)</source>
          <target state="translated">(<ph id="ph1">`\`</ph>)</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the next character in the format string.</source>
          <target state="translated">Zeigt das nächste Zeichen in der Formatzeichenfolge an.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>To display a character that has special meaning as a literal character, precede it with a backslash (<ph id="ph1">`\`</ph>).</source>
          <target state="translated">Um ein Zeichen anzuzeigen, die besondere Bedeutung als Literalzeichen hat, fügen sie davor ein umgekehrter Schrägstrich (<ph id="ph1">`\`</ph>).</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The backslash itself isn't displayed.</source>
          <target state="translated">Der umgekehrte Schrägstrich selbst wird nicht angezeigt.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Using a backslash is the same as enclosing the next character in double quotation marks.</source>
          <target state="translated">Mit einem umgekehrten Schrägstrich entspricht dem einschließen des nächsten Zeichens in doppelte Anführungszeichen.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>To display a backslash, use two backslashes (<ph id="ph1">`\\`</ph>).</source>
          <target state="translated">Um einen umgekehrten Schrägstrich anzuzeigen, verwenden Sie zwei umgekehrte Schrägstriche (<ph id="ph1">`\\`</ph>).</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (<ph id="ph1">`a`</ph>, <ph id="ph2">`c`</ph>, <ph id="ph3">`d`</ph>, <ph id="ph4">`h`</ph>, <ph id="ph5">`m`</ph>, <ph id="ph6">`n`</ph>, <ph id="ph7">`p`</ph>, <ph id="ph8">`q`</ph>, <ph id="ph9">`s`</ph>, <ph id="ph10">`t`</ph>, <ph id="ph11">`w`</ph>, <ph id="ph12">`y`</ph>, <ph id="ph13">`/`</ph>, and <ph id="ph14">`:`</ph>), the numeric-formatting characters (<ph id="ph15">`#`</ph>, <ph id="ph16">`0`</ph>, <ph id="ph17">`%`</ph>, <ph id="ph18">`E`</ph>, <ph id="ph19">`e`</ph>, comma, and period), and the string-formatting characters (<ph id="ph20">`@`</ph>, <ph id="ph21">`&amp;`</ph>, <ph id="ph22">`&lt;`</ph>, <ph id="ph23">`&gt;`</ph>, and <ph id="ph24">`!`</ph>).</source>
          <target state="translated">Beispiele für Zeichen, die nicht angezeigt werden können, als Literalzeichen Formatieren von Datums- und uhrzeitformatierungen Zeichen sind (<ph id="ph1">`a`</ph>, <ph id="ph2">`c`</ph>, <ph id="ph3">`d`</ph>, <ph id="ph4">`h`</ph>, <ph id="ph5">`m`</ph>, <ph id="ph6">`n`</ph>, <ph id="ph7">`p`</ph>, <ph id="ph8">`q`</ph>, <ph id="ph9">`s`</ph>, <ph id="ph10">`t`</ph>, <ph id="ph11">`w`</ph>, <ph id="ph12">`y`</ph>, <ph id="ph13">`/`</ph>, und <ph id="ph14">`:`</ph>), die Zeichen zum Formatieren von numerischen (<ph id="ph15">`#`</ph>, <ph id="ph16">`0`</ph>, <ph id="ph17">`%`</ph>, <ph id="ph18">`E`</ph>, <ph id="ph19">`e`</ph>, Komma und Punkt), und die Zeichen zum Formatieren von Zeichenfolgen (<ph id="ph20">`@`</ph>, <ph id="ph21">`&amp;`</ph>, <ph id="ph22">`&lt;`</ph>, <ph id="ph23">`&gt;`</ph>, und <ph id="ph24">`!`</ph>).</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`"``ABC``"`</ph>)</source>
          <target state="translated">(<ph id="ph1">`"``ABC``"`</ph>)</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the string inside the double quotation marks (" ").</source>
          <target state="translated">Zeigt die Zeichenfolge in doppelte Anführungszeichen ("").</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>To include a string in the style argument from within code, you must use <ph id="ph1">`Chr(34)`</ph> to enclose the text (<ph id="ph2">`34`</ph> is the character code for a quotation mark (")).</source>
          <target state="translated">Um eine Zeichenfolge im Formatargument innerhalb des Codes einzuschließen, verwenden Sie <ph id="ph1">`Chr(34)`</ph> , schließen Sie den Text (<ph id="ph2">`34`</ph> ist der Zeichencode für ein Anführungszeichen (")).</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Legacy Code Example</source>
          <target state="translated">Legacy-Codebeispiel</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following table contains some sample format expressions for numbers.</source>
          <target state="translated">Die folgende Tabelle enthält einige Beispielausdrücke-Format für Zahlen.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the <ph id="ph1">`Style`</ph> argument of the <ph id="ph2">`Format`</ph> function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</source>
          <target state="translated">(Allen diesen Beispielen wird davon ausgegangen, dass Ihre Systemgebietsschema Englisch-USA ist) Die erste Spalte enthält die Formatzeichenfolgen für die <ph id="ph1">`Style`</ph> Argument der <ph id="ph2">`Format`</ph> -Funktion; die anderen Spalten enthalten die resultierende Ausgabe, wenn die formatierten Daten der in den Spaltenüberschriften angegebenen Wert verfügt.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Format (<ph id="ph1">`Style`</ph>)</source>
          <target state="translated">Format (<ph id="ph1">`Style`</ph>)</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>"5" formatted as</source>
          <target state="translated">"5" formatiert als</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>"-5" formatted as</source>
          <target state="translated">"-5" formatiert als</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>"0.5" formatted as</source>
          <target state="translated">"0,5" formatiert als</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Predefined Date/Time Formats</source>
          <target state="translated">Vordefinierte Datums-/Zeitformate</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following table identifies the predefined date and time format names.</source>
          <target state="translated">Die folgende Tabelle identifiziert die vordefinierten Datums- und Zeitformate.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>These may be used by name as the style argument for the <ph id="ph1">`Format`</ph> function:</source>
          <target state="translated">Diese möglicherweise nach Namen als Formatargument für verwendet werden die <ph id="ph1">`Format`</ph> Funktion:</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Format Name</source>
          <target state="translated">Formatname</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`General Date`</ph>, or <ph id="ph2">`G`</ph></source>
          <target state="translated"><ph id="ph1">`General Date`</ph>, oder <ph id="ph2">`G`</ph></target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a date and/or time.</source>
          <target state="translated">Zeigt ein Datum und/oder eine Uhrzeit.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`3/12/2008 11:07:31 AM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`3/12/2008 11:07:31 AM`</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Date display is determined by your application's current culture value.</source>
          <target state="translated">Datumsanzeige wird vom aktuellen Kulturwert der Anwendung bestimmt.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Long Date`</ph>, <ph id="ph2">`Medium Date`</ph>, or <ph id="ph3">`D`</ph></source>
          <target state="translated"><ph id="ph1">`Long Date`</ph>, <ph id="ph2">`Medium Date`</ph>oder <ph id="ph3">`D`</ph></target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a date according to your current culture's long date format.</source>
          <target state="translated">Zeigt ein Datum entsprechend dem langen Datumsformat Ihrer aktuellen kultureinstellung an.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Wednesday, March 12, 2008`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Wednesday, March 12, 2008`</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Short Date`</ph>, or <ph id="ph2">`d`</ph></source>
          <target state="translated"><ph id="ph1">`Short Date`</ph>, oder <ph id="ph2">`d`</ph></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a date using your current culture's short date format.</source>
          <target state="translated">Zeigt ein Datum unter Verwendung der aktuellen Kultur kurzen Datumsformat.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`3/12/2008`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`3/12/2008`</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`d`</ph> character displays the day in a user-defined date format.</source>
          <target state="translated">Die <ph id="ph1">`d`</ph> Zeichen zeigt den Tag in einem benutzerdefinierten Datumsformat.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Long Time`</ph>, <ph id="ph2">`Medium Time`</ph>, or <ph id="ph3">`T`</ph></source>
          <target state="translated"><ph id="ph1">`Long Time`</ph>, <ph id="ph2">`Medium Time`</ph>oder <ph id="ph3">`T`</ph></target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</source>
          <target state="translated">Zeigt eine Uhrzeit mit lange Uhrzeitformat Ihrer aktuellen kultureinstellung an. in der Regel umfasst, Stunden, Minuten und Sekunden.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`11:07:31 AM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`11:07:31 AM`</ph>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Short Time`</ph> or <ph id="ph2">`t`</ph></source>
          <target state="translated"><ph id="ph1">`Short Time`</ph> oder <ph id="ph2">`t`</ph></target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays a time using your current culture's short time format.</source>
          <target state="translated">Zeigt eine Uhrzeit entsprechend Ihrer aktuellen kultureinstellung kurzen Zeitformat.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`11:07 AM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`11:07 AM`</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`t`</ph> character displays <ph id="ph2">`AM`</ph> or <ph id="ph3">`PM`</ph> values for locales that use a 12-hour clock in a user-defined time format.</source>
          <target state="translated">Die <ph id="ph1">`t`</ph> Zeichen zeigt <ph id="ph2">`AM`</ph> oder <ph id="ph3">`PM`</ph> Werte für Gebietsschemas, die in einem benutzerdefinierten Uhrzeitformat 12-Stunden-Format verwenden.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the long date and short time according to your current culture's format.</source>
          <target state="translated">Zeigt den langen Datums- und des kurzen Format Ihrer aktuellen kultureinstellung an.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Wednesday, March 12, 2008 11:07 AM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Wednesday, March 12, 2008 11:07 AM`</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the long date and long time according to your current culture's format.</source>
          <target state="translated">Zeigt das lange Datum und lange Format Ihrer aktuellen kultureinstellung.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Wednesday, March 12, 2008 11:07:31 AM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Wednesday, March 12, 2008 11:07:31 AM`</ph>.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the short date and short time according to your current culture's format.</source>
          <target state="translated">Zeigt das kurzes Datum und kurze Zeit entsprechend Ihrer aktuellen kultureinstellung-Format.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`3/12/2008 11:07 AM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`3/12/2008 11:07 AM`</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`M`</ph>, <ph id="ph2">`m`</ph></source>
          <target state="translated"><ph id="ph1">`M`</ph>, <ph id="ph2">`m`</ph></target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the month and the day of a date.</source>
          <target state="translated">Zeigt den Monat und Tag eines Datums.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`March 12`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`March 12`</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`M`</ph> character displays the month in a user-defined date format.</source>
          <target state="translated">Die <ph id="ph1">`M`</ph> Zeichen zeigt den Monat in einem benutzerdefinierten Datumsformat.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`m`</ph> character displays the minutes in a user-defined time format.</source>
          <target state="translated">Die <ph id="ph1">`m`</ph> Zeichen zeigt die Minuten in einem benutzerdefinierten Uhrzeitformat an.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`R`</ph>, <ph id="ph2">`r`</ph></source>
          <target state="translated"><ph id="ph1">`R`</ph>, <ph id="ph2">`r`</ph></target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Formats the date according to the <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A&gt;</ph> property.</source>
          <target state="translated">Formatiert das Datum gemäß der <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Wed, 12 Mar 2008 11:07:31 GMT`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Wed, 12 Mar 2008 11:07:31 GMT`</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The formatted date does not adjust the value of the date and time.</source>
          <target state="translated">Den Wert von Datum und Uhrzeit formatierte Datum nicht angepasst.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>You must adjust the Date/Time value to GMT before calling the <ph id="ph1">`Format`</ph> function.</source>
          <target state="translated">Sie müssen den Datums-/Uhrzeitwert an GMT anpassen, vor dem Aufruf der <ph id="ph1">`Format`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Formats the date and time as a sortable index.</source>
          <target state="translated">Formatiert das Datum und die Uhrzeit als sortierbaren Index.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`2008-03-12T11:07:31`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`2008-03-12T11:07:31`</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`s`</ph> character displays the seconds in a user-defined time format.</source>
          <target state="translated">Die <ph id="ph1">`s`</ph> Zeichen zeigt die Sekunden in einem benutzerdefinierten Uhrzeitformat an.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Formats the date and time as a GMT sortable index.</source>
          <target state="translated">Formatiert das Datum und die Uhrzeit als sortierbaren GMT-Index.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`2008-03-12 11:07:31Z`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`2008-03-12 11:07:31Z`</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Formats the date and time with the long date and long time as GMT.</source>
          <target state="translated">Formatiert das Datum und Uhrzeit mit das lange Datum und lange Zeit als GMT.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`Wednesday, March 12, 2008 6:07:31 PM`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Wednesday, March 12, 2008 6:07:31 PM`</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source><ph id="ph1">`Y`</ph>, <ph id="ph2">`y`</ph></source>
          <target state="translated"><ph id="ph1">`Y`</ph>, <ph id="ph2">`y`</ph></target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Formats the date as the year and month.</source>
          <target state="translated">Formatiert das Datum als Jahr und Monat an.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example, <ph id="ph1">`March, 2008`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`March, 2008`</ph>.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The <ph id="ph1">`Y`</ph> and <ph id="ph2">`y`</ph> characters display the year in a user-defined date format.</source>
          <target state="translated">Die <ph id="ph1">`Y`</ph> und <ph id="ph2">`y`</ph> Zeichen zeigt das Jahr in einem benutzerdefinierten Datumsformat.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For more information about the application's current culture information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu aktuellen Kulturwert der Anwendung, finden Sie unter <bpt id="p1">[</bpt>wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>User-Defined Date/Time Formats</source>
          <target state="translated">Benutzerdefinierte Datums-/Zeitformate</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following table shows characters you can use to create user-defined date/time formats.</source>
          <target state="translated">In der folgenden Tabelle sind die Zeichen, dass Sie zum Erstellen von benutzerdefinierten Datums-/Zeitformate verwenden können.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Unlike in earlier versions of <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, these format characters are case-sensitive.</source>
          <target state="translated">Anders als in früheren Versionen von <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, diesen Formatzeichen Groß-/Kleinschreibung beachtet.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Character</source>
          <target state="translated">Zeichen</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`:`</ph>)</source>
          <target state="translated">(<ph id="ph1">`:`</ph>)</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Time separator.</source>
          <target state="translated">Zeittrennzeichen.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>In some locales, other characters may be used to represent the time separator.</source>
          <target state="translated">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Zeittrennzeichen verwendet werden.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The time separator separates hours, minutes, and seconds when time values are formatted.</source>
          <target state="translated">Das Zeittrennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</source>
          <target state="translated">Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird, wird vom aktuellen Kulturwert der Anwendung bestimmt.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`/`</ph>)</source>
          <target state="translated">(<ph id="ph1">`/`</ph>)</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Date separator.</source>
          <target state="translated">Trennzeichen für Datumsangaben.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>In some locales, other characters may be used to represent the date separator.</source>
          <target state="translated">In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Datumstrennzeichen verwendet werden.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The date separator separates the day, month, and year when date values are formatted.</source>
          <target state="translated">Das Datumstrennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The actual character that is used as the date separator in formatted output is determined by your application's current culture.</source>
          <target state="translated">Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird, richtet sich nach der aktuellen Kultur der Anwendung.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>(<ph id="ph1">`%`</ph>)</source>
          <target state="translated">(<ph id="ph1">`%`</ph>)</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</source>
          <target state="translated">Verwendet, um anzugeben, dass die folgenden Zeichen als unabhängig von der alle nachfolgenden Buchstaben ein Einzelbuchstabenformat gelesen werden soll.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Also used to indicate that a single-letter format is read as a user-defined format.</source>
          <target state="translated">Außerdem verwendet, um anzugeben, dass ein Einzelbuchstabenformat als benutzerdefiniertes Format gelesen wird.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>See what follows for additional details.</source>
          <target state="translated">Finden Sie weitere Details folgt.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the day as a number without a leading zero (for example, <ph id="ph1">`1`</ph>).</source>
          <target state="translated">Zeigt den Tag als Zahl ohne führende Null an (z. B. <ph id="ph1">`1`</ph>).</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%d`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%d`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the day as a number with a leading zero (for example, <ph id="ph1">`01`</ph>).</source>
          <target state="translated">Zeigt den Tag als Zahl mit einer führenden Null an (z. B. <ph id="ph1">`01`</ph>).</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the day as an abbreviation (for example, <ph id="ph1">`Sun`</ph>).</source>
          <target state="translated">Zeigt den Tag als Abkürzung an (z. B. <ph id="ph1">`Sun`</ph>).</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the day as a full name (for example, <ph id="ph1">`Sunday`</ph>).</source>
          <target state="translated">Zeigt den Tag mit vollem Namen an (z. B. <ph id="ph1">`Sunday`</ph>).</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the month as a number without a leading zero (for example, January is represented as <ph id="ph1">`1`</ph>).</source>
          <target state="translated">Zeigt den Monat als Zahl ohne führende Null an (Januar wird z. B. dargestellt, als <ph id="ph1">`1`</ph>).</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%M`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%M`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the month as a number with a leading zero (for example, <ph id="ph1">`01/12/01`</ph>).</source>
          <target state="translated">Zeigt den Monat als Zahl mit einer führenden Null an (z. B. <ph id="ph1">`01/12/01`</ph>).</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the month as an abbreviation (for example, <ph id="ph1">`Jan`</ph>).</source>
          <target state="translated">Zeigt den Monat als Abkürzung an (z. B. <ph id="ph1">`Jan`</ph>).</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the month as a full month name (for example, <ph id="ph1">`January`</ph>).</source>
          <target state="translated">Zeigt den Monat als vollständigen Monatsnamen an (z. B. <ph id="ph1">`January`</ph>).</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the period/era string (for example, <ph id="ph1">`A.D.`</ph>).</source>
          <target state="translated">Zeigt die Zeichenfolge Zeitraum (z. B. <ph id="ph1">`A.D.`</ph>).</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the hour as a number without leading zeros using the 12-hour clock (for example, <ph id="ph1">`1:15:15 PM`</ph>).</source>
          <target state="translated">Zeigt die Stunde als Zahl ohne führende Nullen im 12-Stunden-Format (z. B. <ph id="ph1">`1:15:15 PM`</ph>).</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%h`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%h`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the hour as a number with leading zeros using the 12-hour clock (for example, <ph id="ph1">`01:15:15 PM`</ph>).</source>
          <target state="translated">Zeigt die Stunde als Zahl mit führenden Nullen im 12-Stunden-Format (z. B. <ph id="ph1">`01:15:15 PM`</ph>).</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the hour as a number without leading zeros using the 24-hour clock (for example, <ph id="ph1">`1:15:15`</ph>).</source>
          <target state="translated">Zeigt die Stunde als Zahl ohne führende Nullen im 24-Stunden-Format (z. B. <ph id="ph1">`1:15:15`</ph>).</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%H`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%H`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the hour as a number with leading zeros using the 24-hour clock (for example, <ph id="ph1">`01:15:15`</ph>).</source>
          <target state="translated">Zeigt die Stunde als Zahl mit führenden Nullen im 24-Stunden-Format (z. B. <ph id="ph1">`01:15:15`</ph>).</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the minute as a number without leading zeros (for example, <ph id="ph1">`12:1:15`</ph>).</source>
          <target state="translated">Zeigt die Minute als Zahl ohne führende Nullen an (z. B. <ph id="ph1">`12:1:15`</ph>).</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%m`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%m`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the minute as a number with leading zeros (for example, <ph id="ph1">`12:01:15`</ph>).</source>
          <target state="translated">Zeigt die Minute als Zahl mit führenden Nullen an (z. B. <ph id="ph1">`12:01:15`</ph>).</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the second as a number without leading zeros (for example, <ph id="ph1">`12:15:5`</ph>).</source>
          <target state="translated">Zeigt die Sekunde als Zahl ohne führende Nullen an (z. B. <ph id="ph1">`12:15:5`</ph>).</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%s`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%s`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the second as a number with leading zeros (for example, <ph id="ph1">`12:15:05`</ph>).</source>
          <target state="translated">Zeigt die Sekunde als Zahl mit führenden Nullen an (z. B. <ph id="ph1">`12:15:05`</ph>).</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays fractions of seconds.</source>
          <target state="translated">Zeigt Sekundenbruchteile an.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For example <ph id="ph1">`ff`</ph> displays hundredths of seconds, whereas <ph id="ph2">`ffff`</ph> displays ten-thousandths of seconds.</source>
          <target state="translated">Z. B. <ph id="ph1">`ff`</ph> zeigt Hundertstelsekunden an, während <ph id="ph2">`ffff`</ph> Zehntausendstelsekunden Sekunden angezeigt.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>You may use up to seven <ph id="ph1">`f`</ph> symbols in your user-defined format.</source>
          <target state="translated">Sie können bis zu sieben <ph id="ph1">`f`</ph> Symbole im benutzerdefinierten Format.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%f`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%f`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Uses the 12-hour clock and displays an uppercase <ph id="ph1">`A`</ph> for any hour before noon; displays an uppercase <ph id="ph2">`P`</ph> for any hour between noon and 11:59 P.M.</source>
          <target state="translated">Verwendet ein 12-Stunden-Format und Großbuchstaben <ph id="ph1">`A`</ph> für jede Stunde vor Mittag zeigt einen Großbuchstaben <ph id="ph2">`P`</ph> für jede Stunde zwischen Mittag und 23:59 Uhr</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%t`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%t`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For locales that use a 12-hour clock, displays an uppercase <ph id="ph1">`AM`</ph> with any hour before noon; displays an uppercase <ph id="ph2">`PM`</ph> with any hour between noon and 11:59 P.M.</source>
          <target state="translated">Für Gebietsschemas, 12-Stunden-Format verwenden, zeigt einen Großbuchstaben <ph id="ph1">`AM`</ph> für jede Stunde vor Mittag zeigt einen Großbuchstaben <ph id="ph2">`PM`</ph> hinter jeder Stunde zwischen Mittag und 23:59 Uhr</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For locales that use a 24-hour clock, displays nothing.</source>
          <target state="translated">Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigt nichts an.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the year number (0-9) without leading zeros.</source>
          <target state="translated">Zeigt die Jahreszahl (0-9) ohne führende Nullen an.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%y`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%y`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the year in two-digit numeric format with a leading zero, if applicable.</source>
          <target state="translated">Zeigt das Jahr im numerischen Format von zwei Ziffern mit einer führenden Null an, falls zutreffend.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the year in four-digit numeric format.</source>
          <target state="translated">Zeigt das Jahr im numerischen Format vierstellige an.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the year in four-digit numeric format.</source>
          <target state="translated">Zeigt das Jahr im numerischen Format vierstellige an.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the timezone offset without a leading zero (for example, <ph id="ph1">`-8`</ph>).</source>
          <target state="translated">Zeigt den Zeitzonenunterschied ohne führende Null an (z. B. <ph id="ph1">`-8`</ph>).</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Use <ph id="ph1">`%z`</ph> if this is the only character in your user-defined numeric format.</source>
          <target state="translated">Verwendung <ph id="ph1">`%z`</ph> ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the timezone offset with a leading zero (for example, <ph id="ph1">`-08`</ph>)</source>
          <target state="translated">Zeigt den Zeitzonenunterschied mit einer führenden Null an (z. B. <ph id="ph1">`-08`</ph>)</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays the full timezone offset (for example, <ph id="ph1">`-08:00`</ph>)</source>
          <target state="translated">Zeigt den vollständigen Zeitzonenunterschied (z. B. <ph id="ph1">`-08:00`</ph>)</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Legacy Code Example</source>
          <target state="translated">Legacy-Codebeispiel</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The following are examples of user-defined date and time formats for <ph id="ph1">`December 7, 1958, 8:50 PM, 35 seconds`</ph>:</source>
          <target state="translated">Im folgenden sind Beispiele für benutzerdefinierte Datums- und Zeitformate für <ph id="ph1">`December 7, 1958, 8:50 PM, 35 seconds`</ph>:</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Format</source>
          <target state="translated">Format</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Displays</source>
          <target state="translated">Anzeige</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>The minimum time resolution for a device is determined by the manufacturer of the device.</source>
          <target state="translated">Die minimale zeitauflösung für ein Gerät wird vom Hersteller des Geräts bestimmt.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>If the time resolution for the device is coarse enough, the <ph id="ph1">`f`</ph> format character returns 0 when run on that device.</source>
          <target state="translated">Wenn die Auflösung der Uhrzeit für das Gerät genug, grob gehalten ist die <ph id="ph1">`f`</ph> Formatzeichen gibt 0 bei Ausführung auf diesem Gerät.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>This example shows various uses of the <ph id="ph1">`Format`</ph> function to format values using both <ph id="ph2">`String`</ph> formats and user-defined formats.</source>
          <target state="translated">Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der <ph id="ph1">`Format`</ph>-Funktion zur Formatierung von Werten mit <ph id="ph2">`String`</ph>-Formaten und benutzerdefinierten Formaten.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For the date separator (<ph id="ph1">`/`</ph>), time separator (<ph id="ph2">`:`</ph>), and the AM/PM indicators (<ph id="ph3">`t`</ph> and <ph id="ph4">`tt`</ph>), the actual formatted output displayed by your system depends on the locale settings the code is using.</source>
          <target state="translated">Die tatsächlich von Ihrem System ausgegebene Formatierung von Datumstrennzeichen (<ph id="ph1">`/`</ph>), Trennzeichen für Zeitangaben (<ph id="ph2">`:`</ph>) und AM/PM-Indikatoren (<ph id="ph3">`t`</ph> und <ph id="ph4">`tt`</ph>) richtet sich nach den Gebietsschemaeinstellungen des Codes.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</source>
          <target state="translated">Wenn Datums- und Zeitangaben in der Entwicklungsumgebung angezeigt werden, werden das 24-Stunden-Zeitformat und das kurze Datumsformat des für den Code ausgewählten Gebietsschemas verwendet.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
          <source>For locales that use a 24-hour clock, the AM/PM indicators (<ph id="ph1">`t`</ph> and <ph id="ph2">`tt`</ph>) display nothing.</source>
          <target state="translated">Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigen die AM/PM-Indikatoren (<ph id="ph1">`t`</ph> und <ph id="ph2">`tt`</ph>) nichts an.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Expression to be formatted.</source>
          <target state="translated">Der zu formatierende Ausdruck.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Numeric value indicating how many places are displayed to the right of the decimal.</source>
          <target state="translated">Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Default value is –1, which indicates that the computer's regional settings are used.</source>
          <target state="translated">Der Standardwert ist -1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> enumeration that indicates whether or not a leading zero is displayed for fractional values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Enumeration, die angibt, ob bei Bruchwerten eine führende Null angezeigt wird.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Remarks" for values.</source>
          <target state="translated">Weitere Informationen finden Sie in den Hinweisen zu Werten.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> enumeration that indicates whether or not to place negative values within parentheses.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Enumeration, die angibt, ob negative Werte in Klammern gesetzt werden.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Remarks" for values.</source>
          <target state="translated">Weitere Informationen finden Sie in den Hinweisen zu Werten.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Enumeration, die angibt, ob Zahlen mithilfe des Gruppentrennzeichens gruppiert werden, das in den regionalen Einstellungen des Computers definiert ist.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Remarks" for values.</source>
          <target state="translated">Weitere Informationen finden Sie in den Hinweisen zu Werten.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</source>
          <target state="translated">Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</source>
          <target state="translated">Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</source>
          <target state="translated">Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden stattdessen des Computers entsprechende regionale Einstellungen Werte verwendet.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The position of the currency symbol relative to the currency value is determined by the system's regional settings.</source>
          <target state="translated">Die Position des Währungssymbols relativ zu den Currency-Wert wird von den regionalen Systemeinstellungen bestimmt.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>All settings information comes from the locale of the application.</source>
          <target state="translated">Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>By default, that will be the locale set in the control panel.</source>
          <target state="translated">Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the <ph id="ph1">`Number`</ph> tab.</source>
          <target state="translated">Allerdings es möglicherweise geändert werden programmgesteuert mithilfe von .NET Framework, außer dem führenden Null an, die aus stammt die <ph id="ph1">`Number`</ph> Registerkarte.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, and <ph id="ph3">`GroupDigits`</ph> arguments take the following TriState enumeration values.</source>
          <target state="translated">Die <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, und <ph id="ph3">`GroupDigits`</ph> Argumente akzeptiert die folgenden TriState-Enumerationswerte.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Value</source>
          <target state="translated">Wert</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>True</source>
          <target state="translated">True</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>False</source>
          <target state="translated">False</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The computer's regional settings</source>
          <target state="translated">Regionale Einstellungen des Computers</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The following example illustrates the use of the <ph id="ph1">`FormatCurrency`</ph> function.</source>
          <target state="translated">Das folgende Beispiel veranschaulicht die Verwendung der <ph id="ph1">`FormatCurrency`</ph>-Funktion.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Number of digits after decimal point is greater than 99.</source>
          <target state="translated">Anzahl der Stellen nach dem Dezimalzeichen ist größer als 99.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Type is not numeric.</source>
          <target state="translated">Typ ist nicht numerisch.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source><ph id="ph1">&lt;see langword="Date" /&gt;</ph> expression to be formatted.</source>
          <target state="translated">Der zu formatierende <ph id="ph1">&lt;see langword="Date" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Numeric value that indicates the date/time format used.</source>
          <target state="translated">Numerischer Wert, der das verwendete Datum-/Zeitformat angibt.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>If omitted, <ph id="ph1">&lt;see langword="DateFormat.GeneralDate" /&gt;</ph> is used.</source>
          <target state="translated">Wird der Wert nicht angegeben, so wird <ph id="ph1">&lt;see langword="DateFormat.GeneralDate" /&gt;</ph> verwendet.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Returns a string expression representing a date/time value.</source>
          <target state="translated">Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Returns a string expression representing a date/time value.</source>
          <target state="translated">Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>The <ph id="ph1">`Date`</ph> data type always contains both date and time information.</source>
          <target state="translated">Die <ph id="ph1">`Date`</ph> -Datentyp enthält immer die Datums-und Uhrzeitinformationen.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</source>
          <target state="translated">Zwecken Typumwandlung berücksichtigt Visual Basic 1/1/1 (1. Januar des Jahres 1) für das Datum und 00:00:00 (Mitternacht) ist eine neutrale Wert für die Zeit ein neutrale Wert sein.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>If you format a <ph id="ph1">`Date`</ph> value as a date/time string, <ph id="ph2">`FormatDateTime`</ph> does not include neutral values in the resulting string.</source>
          <target state="translated">Wenn Sie nicht Formatieren einer <ph id="ph1">`Date`</ph> Wert als Datum/Uhrzeit-Zeichenfolge <ph id="ph2">`FormatDateTime`</ph> neutralen Werte nicht in der Ergebniszeichenfolge enthalten ist.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</source>
          <target state="translated">Angenommen, Sie #1/1/0001 konvertieren 9:30:00 # in eine Zeichenfolge, die das Ergebnis wird "9:30:00 AM"; Die Datumsinformationen wird unterdrückt.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>However, the date information is still present in the original <ph id="ph1">`Date`</ph> value and can be recovered with functions such as <ph id="ph2">`DatePart`</ph>.</source>
          <target state="translated">Die Datumsinformationen ist jedoch weiterhin vorhanden, in der ursprünglichen <ph id="ph1">`Date`</ph> Wert und können mit Funktionen wie z. B. wiederhergestellt werden <ph id="ph2">`DatePart`</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>If you pass the <ph id="ph1">`Expression`</ph> argument as a <ph id="ph2">`String`</ph> literal, <ph id="ph3">`FormatDateTime`</ph> interprets it according to the <ph id="ph4">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> setting of your application.</source>
          <target state="translated">Wenn Sie übergeben die <ph id="ph1">`Expression`</ph> Argument als ein <ph id="ph2">`String`</ph> literal, <ph id="ph3">`FormatDateTime`</ph> interpretiert gemäß der <ph id="ph4">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> Ihrer Anwendung festlegen.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>However, if you pass it as a <ph id="ph1">`Date`</ph> literal, use the format #mm/dd/yyyy#, because <ph id="ph2">`FormatDateTime`</ph> always interprets a <ph id="ph3">`Date`</ph> literal according to the English (US) culture.</source>
          <target state="translated">Jedoch wenn Sie ihn als übergeben einer <ph id="ph1">`Date`</ph> literal, verwenden Sie das Format #mm/tt/jjjj-da <ph id="ph2">`FormatDateTime`</ph> immer interpretiert eine <ph id="ph3">`Date`</ph> Zeichenfolgenliteral entsprechend der Kultur Englisch (USA).</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>This is necessary because, if an application is developed and coded using <ph id="ph1">`Date`</ph> literals from one culture, but is then executed on a platform with a different culture, the <ph id="ph2">`Date`</ph> literals could be parsed incorrectly.</source>
          <target state="translated">Dies ist erforderlich, da, wenn eine Anwendung entwickelt und codiert <ph id="ph1">`Date`</ph> Literale aus einer Kultur, aber klicken Sie dann auf einer Plattform mit einer anderen Kultur ausgeführt wird die <ph id="ph2">`Date`</ph> Literale konnte nicht ordnungsgemäß analysiert werden.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>The <ph id="ph1">`NamedFormat`</ph> argument has the following settings.</source>
          <target state="translated">Die <ph id="ph1">`NamedFormat`</ph> Argument hat die folgenden Einstellungen.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Display a date and/or time.</source>
          <target state="translated">Zeigen Sie ein Datum und/oder eine Uhrzeit ein.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Display a date part as a short date.</source>
          <target state="translated">Einen Datumsteil als kurzes Datum angezeigt.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>If there is a time part, display it as a long time.</source>
          <target state="translated">Bei ein Uhrzeitteil wird als eine lange Zeit anzeigen.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>If present, both parts display.</source>
          <target state="translated">Falls vorhanden, werden beide Teile angezeigt.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Display a date using the long date format specified in your computer's regional settings.</source>
          <target state="translated">Zeigt ein Datum unter Verwendung des lange Datumsformat in regionalen Einstellungen des Computers angegeben.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Display a date using the short date format specified in your computer's regional settings.</source>
          <target state="translated">Zeigt ein Datum unter Verwendung des kurzen Datumsformat in regionalen Einstellungen des Computers angegeben.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Display a time using the time format specified in your computer's regional settings.</source>
          <target state="translated">Zeigt eine Uhrzeit das Uhrzeitformat in den regionalen Einstellungen des Computers angegeben.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>Display a time using the 24-hour format (hh:mm).</source>
          <target state="translated">Zeigt eine Uhrzeit mit dem 24-Stunden-Format (hh: mm).</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source>This example demonstrates the use of the <ph id="ph1">`FormatDateTime`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`FormatDateTime`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
          <source><ph id="ph1">&lt;paramref name="NamedFormat" /&gt;</ph> setting is not valid.</source>
          <target state="translated">Die Einstellung <ph id="ph1">&lt;paramref name="NamedFormat" /&gt;</ph> ist nicht gültig.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Expression to be formatted.</source>
          <target state="translated">Der zu formatierende Ausdruck.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Numeric value indicating how many places are displayed to the right of the decimal.</source>
          <target state="translated">Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The default value is –1, which indicates that the computer's regional settings are used.</source>
          <target state="translated">Der Standardwert ist -1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> constant that indicates whether a leading 0 is displayed for fractional values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Konstante, die angibt, ob bei Bruchwerten eine führende 0 angezeigt wird.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> constant that indicates whether to place negative values within parentheses.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Returns an expression formatted as a number.</source>
          <target state="translated">Gibt einen als Zahl formatierten Ausdruck zurück.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Returns an expression formatted as a number.</source>
          <target state="translated">Gibt einen als Zahl formatierten Ausdruck zurück.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</source>
          <target state="translated">Wenn eine oder mehrere optionale Argumente ausgelassen werden werden durch die gebietsschemaeinstellungen ausgelassenes Argumentwerte bereitgestellt.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>All settings information comes from the locale of the application.</source>
          <target state="translated">Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>By default, that will be the locale set in the control panel.</source>
          <target state="translated">Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>However, it may be changed programmatically by using the .NET Framework.</source>
          <target state="translated">Allerdings kann es programmgesteuert geändert werden mithilfe von .NET Framework.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, and <ph id="ph3">`GroupDigits`</ph> arguments have the following settings.</source>
          <target state="translated">Die <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, und <ph id="ph3">`GroupDigits`</ph> Argumente über die folgenden Einstellungen verfügen.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>True</source>
          <target state="translated">True</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>False</source>
          <target state="translated">False</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The computer's regional settings</source>
          <target state="translated">Regionale Einstellungen des Computers</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>This example demonstrates the <ph id="ph1">`FormatNumber`</ph> function.</source>
          <target state="translated">Dieses Beispiel zeigt die <ph id="ph1">`FormatNumber`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Type is not numeric.</source>
          <target state="translated">Typ ist nicht numerisch.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Expression to be formatted.</source>
          <target state="translated">Der zu formatierende Ausdruck.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Numeric value indicating how many places to the right of the decimal are displayed.</source>
          <target state="translated">Numerischer Wert, der angibt, wie viele Stellen rechts neben dem Dezimaltrennzeichen angezeigt werden.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Default value is –1, which indicates that the locale settings are used.</source>
          <target state="translated">Der Standardwert ist –1, was darauf hinweist, dass die Einstellungen des Gebietsschemas verwendet werden.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> constant that indicates whether or not a leading zero displays for fractional values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Konstante, die angibt, ob bei Dezimalzahlen eine führende Null angezeigt werden soll.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> constant that indicates whether or not to place negative values within parentheses.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden sollen.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.TriState" /&gt;</ph>-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</source>
          <target state="translated">Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</source>
          <target state="translated">Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</source>
          <target state="translated">Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden die Werte für Argumente ausgelassen durch die gebietsschemaeinstellungen bereitgestellt.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>All settings information comes from the locale of the application.</source>
          <target state="translated">Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>By default, that will be the locale set in the control panel.</source>
          <target state="translated">Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>However, it may be changed programmatically by using the .NET Framework.</source>
          <target state="translated">Allerdings kann es programmgesteuert geändert werden mithilfe von .NET Framework.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, and <ph id="ph3">`GroupDigits`</ph> arguments have the following settings.</source>
          <target state="translated">Die <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, und <ph id="ph3">`GroupDigits`</ph> Argumente über die folgenden Einstellungen verfügen.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>True</source>
          <target state="translated">True</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>False</source>
          <target state="translated">False</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>The computer's regional settings</source>
          <target state="translated">Regionale Einstellungen des Computers</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>This example illustrates the use of the <ph id="ph1">`FormatPercent`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung der <ph id="ph1">`FormatPercent`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
          <source>Type is not numeric.</source>
          <target state="translated">Typ ist nicht numerisch.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>The (1-based) index of the character in <bpt id="p1">&lt;c&gt;</bpt>str<ept id="p1">&lt;/c&gt;</ept> to be returned.</source>
          <target state="translated">Der (1-basierte) Index des Zeichens in <bpt id="p1">&lt;c&gt;</bpt>str<ept id="p1">&lt;/c&gt;</ept>, der zurückgegeben werden soll.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>Returns a <ph id="ph1">&lt;see langword="Char" /&gt;</ph> value representing the character from the specified index in the supplied string.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Wert zurück, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Char" /&gt;</ph> value representing the character from the specified index in the supplied string.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Wert, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>If <ph id="ph1">`Index`</ph> is less than 1 or greater than the index of the last character in <ph id="ph2">`str`</ph>, an <ph id="ph3">`ArgumentException`</ph> is thrown.</source>
          <target state="translated">Wenn <ph id="ph1">`Index`</ph> ist kleiner als 1 oder größer als der Index des letzten Zeichens in <ph id="ph2">`str`</ph>, wird eine <ph id="ph3">`ArgumentException`</ph> ausgelöst wird.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source>This example shows how to use the <ph id="ph1">`GetChar`</ph> function to return a character from a specified index in a <ph id="ph2">`String`</ph>.</source>
          <target state="translated">Dieses Beispiel zeigt, wie die <ph id="ph1">`GetChar`</ph> Funktion zurückzugebende ein Zeichen aus einem angegebenen Index in einer <ph id="ph2">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph3">&lt;paramref name="Index" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 1, or <ph id="ph5">&lt;paramref name="Index" /&gt;</ph> is greater than index of last character of <ph id="ph6">&lt;paramref name="str" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph> ist <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph3">&lt;paramref name="Index" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 1 oder <ph id="ph5">&lt;paramref name="Index" /&gt;</ph> ist größer als der Index des letzten Zeichens von <ph id="ph6">&lt;paramref name="str" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns an integer specifying the start position of the first occurrence of one string within another.</source>
          <target state="translated">Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>The integer is a one-based index if a match is found.</source>
          <target state="translated">Die Ganzzahl ist ein auf Eins basierter Index, wenn eine Übereinstimmung gefunden wird.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>If no match is found, the function returns zero.</source>
          <target state="translated">Wenn keine Übereinstimmung gefunden wird, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression being searched.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, der durchsucht wird.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression sought.</source>
          <target state="translated">Gesuchter <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Specifies the type of string comparison.</source>
          <target state="translated">Gibt den Typ des Zeichenfolgenvergleichs an.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Compare<ept id="p1">&lt;/c&gt;</ept> is omitted, the <ph id="ph1">&lt;see langword="Option Compare" /&gt;</ph> setting determines the type of comparison.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Compare<ept id="p1">&lt;/c&gt;</ept> ausgelassen wird, bestimmt die <ph id="ph1">&lt;see langword="Option Compare" /&gt;</ph>-Einstellung den Typ des Vergleichs.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns an integer specifying the start position of the first occurrence of one string within another.</source>
          <target state="translated">Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>If</source>
          <target state="translated">If</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>InStr returns</source>
          <target state="translated">Rückgabewert von InStr</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String1" /&gt;</ph> is zero length or <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String1" /&gt;</ph> ist eine Zeichenfolge mit der Länge 0 (null) oder <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> is zero length or <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> ist eine Zeichenfolge mit der Länge 0 (null) oder <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The starting position for the search, which defaults to the first character position.</source>
          <target state="translated">Die Startposition für die Suche, mit Standard an der ersten Zeichenposition.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> is not found</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> wird nicht gefunden.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> is found within <ph id="ph2">&lt;paramref name="String1" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> wurde in <ph id="ph2">&lt;paramref name="String1" /&gt;</ph> gefunden.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Position where match begins</source>
          <target state="translated">Position, an der die gefundene Zeichenfolge beginnt</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Typically, the <ph id="ph1">`InStr`</ph> function is used when parsing strings.</source>
          <target state="translated">In der Regel die <ph id="ph1">`InStr`</ph> Funktion wird beim Analysieren von Zeichenfolgen verwendet.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`InStrB`</ph> function in previous versions of Visual Basic returns a number of bytes rather than a character position.</source>
          <target state="translated">Die <ph id="ph1">`InStrB`</ph> Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt eine Zeichenposition.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`InStrB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und <ph id="ph1">`InStrB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument settings are:</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph>-Argumenteinstellungen lauten:</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Value</source>
          <target state="translated">Wert</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison</source>
          <target state="translated">Führt einen binären Vergleich</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a text comparison</source>
          <target state="translated">Führt einen Textvergleich aus</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>This example uses the <ph id="ph1">`InStr`</ph> function to return the position of the first occurrence of one string within another.</source>
          <target state="translated">In diesem Beispiel wird die <ph id="ph1">`InStr`</ph>-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric expression that sets the starting position for each search.</source>
          <target state="translated">Numerischer Ausdruck, der die Anfangsposition für jede Suche festlegt.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>If omitted, search begins at the first character position.</source>
          <target state="translated">Wenn dieser ausgelassen wird, beginnt die Suche an der ersten Zeichenposition.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The start index is 1-based.</source>
          <target state="translated">Der Anfangsindex ist 1-basiert.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression being searched.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, der durchsucht wird.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression sought.</source>
          <target state="translated">Gesuchter <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Specifies the type of string comparison.</source>
          <target state="translated">Gibt den Typ des Zeichenfolgenvergleichs an.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Compare<ept id="p1">&lt;/c&gt;</ept> is omitted, the <ph id="ph1">&lt;see langword="Option Compare" /&gt;</ph> setting determines the type of comparison.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Compare<ept id="p1">&lt;/c&gt;</ept> ausgelassen wird, bestimmt die <ph id="ph1">&lt;see langword="Option Compare" /&gt;</ph>-Einstellung den Typ des Vergleichs.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns an integer specifying the start position of the first occurrence of one string within another.</source>
          <target state="translated">Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>If</source>
          <target state="translated">If</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>InStr returns</source>
          <target state="translated">Rückgabewert von InStr</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String1" /&gt;</ph> is zero length or <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String1" /&gt;</ph> ist eine Zeichenfolge mit der Länge 0 (null) oder <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> is zero length or <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> ist eine Zeichenfolge mit der Länge 0 (null) oder <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> is not found</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> wird nicht gefunden.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> is found within <ph id="ph2">&lt;paramref name="String1" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="String2" /&gt;</ph> wurde in <ph id="ph2">&lt;paramref name="String1" /&gt;</ph> gefunden.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Position where match begins</source>
          <target state="translated">Position, an der die gefundene Zeichenfolge beginnt</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> length of <ph id="ph3">&lt;paramref name="String1" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> Länge des <ph id="ph3">&lt;paramref name="String1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Typically, the <ph id="ph1">`InStr`</ph> function is used when parsing strings.</source>
          <target state="translated">In der Regel die <ph id="ph1">`InStr`</ph> Funktion wird beim Analysieren von Zeichenfolgen verwendet.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`InStrB`</ph> function in previous versions of Visual Basic returns a number of bytes rather than a character position.</source>
          <target state="translated">Die <ph id="ph1">`InStrB`</ph> Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt eine Zeichenposition.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`InStrB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und <ph id="ph1">`InStrB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument settings are:</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph>-Argumenteinstellungen lauten:</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Value</source>
          <target state="translated">Wert</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison</source>
          <target state="translated">Führt einen binären Vergleich</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a text comparison</source>
          <target state="translated">Führt einen Textvergleich aus</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>This example uses the <ph id="ph1">`InStr`</ph> function to return the position of the first occurrence of one string within another.</source>
          <target state="translated">In diesem Beispiel wird die <ph id="ph1">`InStr`</ph>-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 1.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>String expression being searched.</source>
          <target state="translated">Der gesuchte Zeichenfolgenausdruck.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>String expression being searched for.</source>
          <target state="translated">Der gesuchte Zeichenfolgenausdruck.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</source>
          <target state="translated">Numerischer Ausdruck, der die 1-basierte Anfangsposition für jede Suche festlegt, beginnend auf der linken Seite der Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> is omitted then –1 is used, meaning the search begins at the last character position.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> weggelassen wird, wird – 1 verwendet, d.h., dass die Suche an der letzten Zeichenposition beginnt.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Search then proceeds from right to left.</source>
          <target state="translated">Die Suche wird dann von rechts nach links fortgesetzt.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric value indicating the kind of comparison to use when evaluating substrings.</source>
          <target state="translated">Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If omitted, a binary comparison is performed.</source>
          <target state="translated">Wenn dieser ausgelassen wird, wird ein binärer Vergleich durchgeführt.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>See Settings for values.</source>
          <target state="translated">Werte finden Sie im Abschnitt "Einstellungen".</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</source>
          <target state="translated">Gibt die Position des ersten Vorkommens einer Zeichenfolge innerhalb einer anderen Zeichenfolge von rechts nach links gesehen zurück.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If</source>
          <target state="translated">If</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>InStrRev returns</source>
          <target state="translated">InStrRev gibt Folgendes zurück</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="StringCheck" /&gt;</ph> is zero-length</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="StringCheck" /&gt;</ph> ist eine Zeichenfolge mit der Länge 0 (null)</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="StringMatch" /&gt;</ph> is zero-length</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="StringMatch" /&gt;</ph> ist eine Zeichenfolge mit der Länge 0 (null)</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="StringMatch" /&gt;</ph> is not found</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="StringMatch" /&gt;</ph> wird nicht gefunden.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="StringMatch" /&gt;</ph> is found within <ph id="ph2">&lt;paramref name="StringCheck" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="StringMatch" /&gt;</ph> wurde in <ph id="ph2">&lt;paramref name="StringCheck" /&gt;</ph> gefunden.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Position at which the first match is found, starting with the right side of the string.</source>
          <target state="translated">Position, an der die erste Übereinstimmung gefunden wird, beginnend mit der rechten Seite der Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> is greater than length of <ph id="ph2">&lt;paramref name="StringMatch" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> ist größer als die Länge von <ph id="ph2">&lt;paramref name="StringMatch" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Note that the syntax for the <ph id="ph1">`InStrRev`</ph> function is not the same as the syntax for the <ph id="ph2">`InStr`</ph> function.</source>
          <target state="translated">Beachten Sie, dass die Syntax für die <ph id="ph1">`InStrRev`</ph> Funktion ist nicht identisch mit der Syntax für die <ph id="ph2">`InStr`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph> Argument kann die folgenden Werte haben.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison.</source>
          <target state="translated">Führt einen binären Vergleich durch.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a textual comparison.</source>
          <target state="translated">Führt einen Textvergleich durch.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>This example demonstrates the use of the <ph id="ph1">`InStrRev`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`InStrRev`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> = 0 or <ph id="ph2">&lt;paramref name="Start" /&gt;</ph> <ph id="ph3">&amp;lt;</ph> -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> = 0 oder <ph id="ph2">&lt;paramref name="Start" /&gt;</ph> <ph id="ph3">&amp;lt;</ph> –1.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>One-dimensional array containing substrings to be joined.</source>
          <target state="translated">Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>Any string, used to separate the substrings in the returned string.</source>
          <target state="translated">Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>If omitted, the space character (" ") is used.</source>
          <target state="translated">Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> is a zero-length string ("") or <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, all items in the list are concatenated with no delimiters.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> eine leere Zeichenfolge ("") oder <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>There is a parity between the <ph id="ph1">`Join`</ph> and <ph id="ph2">`Split`</ph> functions.</source>
          <target state="translated">Es gibt eine Parität zwischen der <ph id="ph1">`Join`</ph> und <ph id="ph2">`Split`</ph> Funktionen.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>The <ph id="ph1">`Join`</ph> function takes an array of strings and joins them using a delimiter string, to return a single string.</source>
          <target state="translated">Die <ph id="ph1">`Join`</ph> -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>The <ph id="ph1">`Split`</ph> function takes a string and separates it at the delimiter, to return an array of strings.</source>
          <target state="translated">Die <ph id="ph1">`Split`</ph> Funktion akzeptiert eine Zeichenfolge, und trennt diese am Trennzeichen, und gibt ein Array von Zeichenfolgen zurückzugeben.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>However, a key difference is that <ph id="ph1">`Join`</ph> can concatenate strings with any delimiter string, <ph id="ph2">`Split`</ph> can only separate strings using a single character delimiter.</source>
          <target state="translated">Der wesentliche Unterschied besteht, liegt <ph id="ph1">`Join`</ph> können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten <ph id="ph2">`Split`</ph> nur Zeichenfolgen, die mit einem einzelnen Trennzeichen trennen kann.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source>The following example demonstrates how to use the <ph id="ph1">`Join`</ph> function to create a list from several strings.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie die <ph id="ph1">`Join`</ph> Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
          <source><ph id="ph1">&lt;paramref name="SourceArray" /&gt;</ph> is not one dimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="SourceArray" /&gt;</ph> ist nicht eindimensional.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>One-dimensional array containing substrings to be joined.</source>
          <target state="translated">Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>Any string, used to separate the substrings in the returned string.</source>
          <target state="translated">Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>If omitted, the space character (" ") is used.</source>
          <target state="translated">Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> is a zero-length string ("") or <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, all items in the list are concatenated with no delimiters.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> eine leere Zeichenfolge ("") oder <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>There is a parity between the <ph id="ph1">`Join`</ph> and <ph id="ph2">`Split`</ph> functions.</source>
          <target state="translated">Es gibt eine Parität zwischen der <ph id="ph1">`Join`</ph> und <ph id="ph2">`Split`</ph> Funktionen.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>The <ph id="ph1">`Join`</ph> function takes an array of strings and joins them using a delimiter string, to return a single string.</source>
          <target state="translated">Die <ph id="ph1">`Join`</ph> -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>The <ph id="ph1">`Split`</ph> function takes a string and separates it at the delimiter, to return an array of strings.</source>
          <target state="translated">Die <ph id="ph1">`Split`</ph> Funktion akzeptiert eine Zeichenfolge, und trennt diese am Trennzeichen, und gibt ein Array von Zeichenfolgen zurückzugeben.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>However, a key difference is that <ph id="ph1">`Join`</ph> can concatenate strings with any delimiter string, <ph id="ph2">`Split`</ph> can only separate strings using a single character delimiter.</source>
          <target state="translated">Der wesentliche Unterschied besteht, liegt <ph id="ph1">`Join`</ph> können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten <ph id="ph2">`Split`</ph> nur Zeichenfolgen, die mit einem einzelnen Trennzeichen trennen kann.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source>The following example demonstrates how to use the <ph id="ph1">`Join`</ph> function to create a list from several strings.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie die <ph id="ph1">`Join`</ph> Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
          <source><ph id="ph1">&lt;paramref name="SourceArray" /&gt;</ph> is not one dimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="SourceArray" /&gt;</ph> ist nicht eindimensional.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns a string or character converted to lowercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> or <ph id="ph2">&lt;see langword="Char" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>Returns a string or character converted to lowercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>Returns a string or character converted to lowercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</source>
          <target state="translated">Es werden nur Großbuchstaben konvertiert in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
          <target state="translated">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
          <target state="translated">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> -Methode, und übergeben Sie <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> oder <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> für die <ph id="ph4">`comparisonType`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
          <source>This example uses the <ph id="ph1">`LCase`</ph> function to return a lowercase version of a string.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`LCase`</ph> Funktion zum Zurückgeben einer Zeichenfolge in Kleinbuchstaben.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> or <ph id="ph2">&lt;see langword="Char" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>Returns a string or character converted to lowercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>Returns a string or character converted to lowercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</source>
          <target state="translated">Es werden nur Großbuchstaben konvertiert in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
          <target state="translated">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
          <target state="translated">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> -Methode, und übergeben Sie <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> oder <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> für die <ph id="ph4">`comparisonType`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
          <source>This example uses the <ph id="ph1">`LCase`</ph> function to return a lowercase version of a string.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`LCase`</ph> Funktion zum Zurückgeben einer Zeichenfolge in Kleinbuchstaben.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression from which the leftmost characters are returned.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, von dem die äußersten linken Zeichen zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>Numeric expression indicating how many characters to return.</source>
          <target state="translated">Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>If 0, a zero-length string ("") is returned.</source>
          <target state="translated">Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>If greater than or equal to the number of characters in <bpt id="p1">&lt;c&gt;</bpt>str<ept id="p1">&lt;/c&gt;</ept>, the entire string is returned.</source>
          <target state="translated">Wenn der Wert größer oder gleich der Anzahl von Zeichen in <bpt id="p1">&lt;c&gt;</bpt>str<ept id="p1">&lt;/c&gt;</ept> ist, wird die ganze Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>Returns a string containing a specified number of characters from the left side of a string.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>Returns a string containing a specified number of characters from the left side of a string.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
          <target state="translated">Um zu bestimmen, die Anzahl der Zeichen in <ph id="ph1">`str`</ph>, verwenden Sie die <ph id="ph2">`Len`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>If used in a Windows Forms application, or any other class that has a <ph id="ph1">`Left`</ph> property, you must fully qualify the function with <ph id="ph2">`Microsoft.VisualBasic.Left`</ph>.</source>
          <target state="translated">Bei der Verwendung in einer Windows Forms-Anwendung oder eine andere Klasse mit einem <ph id="ph1">`Left`</ph> -Eigenschaft, Sie müssen vollqualifiziert-Funktion mit <ph id="ph2">`Microsoft.VisualBasic.Left`</ph>.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>The <ph id="ph1">`LeftB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LeftB`</ph> Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LeftB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LeftB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>This example demonstrates the use of the <ph id="ph1">`Left`</ph> function to return a substring of a given <ph id="ph2">`String`</ph>.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Left`</ph> Funktion eine Teilzeichenfolge des zurückzugebenden einer bestimmten <ph id="ph2">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source>In a class that has a <ph id="ph1">`Left`</ph> property, it may be necessary to fully qualify the <ph id="ph2">`Left`</ph> function.</source>
          <target state="translated">In einer Klasse mit einem <ph id="ph1">`Left`</ph> -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der <ph id="ph2">`Left`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Length" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Length" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.String)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression or variable name.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck oder -Variablenname.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, the <ph id="ph2">&lt;see langword="Len" /&gt;</ph> function returns the size as it will be written to the file by the <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph> function.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, gibt die <ph id="ph2">&lt;see langword="Len" /&gt;</ph>-Funktion die Größe zurück, wie sie von der <ph id="ph3">&lt;see langword="FilePut" /&gt;</ph>-Funktion in die Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
          <target state="translated">Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
          <target state="translated">Mit benutzerdefinierten Typen und <ph id="ph1">`Object`</ph> Variablen, die <ph id="ph2">`Len`</ph> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <ph id="ph3">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird die Länge der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die <ph id="ph2">`FilePut`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
          <target state="translated">Die <ph id="ph1">`VBFixedString`</ph> Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion verwendet die <ph id="ph2">`VBFixedString`</ph> Attributs, wenn verfügbar, wenn bestimmt die Größe des <ph id="ph3">`Object`</ph> Variablen.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>The <ph id="ph1">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>The <ph id="ph1">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`LenB`</ph> -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`LenB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>Smart Device Developer Notes</source>
          <target state="translated">Entwicklerhinweise für intelligente Geräte</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
          <target state="translated">Die <ph id="ph1">`Len`</ph> Funktion akzeptiert nur <ph id="ph2">`String`</ph> und <ph id="ph3">`Object`</ph> Variablen als Parameter.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält eine <ph id="ph2">`String`</ph>, wird zurückgegeben, die Länge der <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
          <target state="translated">Wenn ein Parameter ein NULL-Wert ist <ph id="ph1">`Object`</ph> -Verweis ist, gibt die Funktion 0 (null) zurück.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Object`</ph> enthält alle anderen Arten wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
          <source>This example uses <ph id="ph1">`Len`</ph> to return the number of characters in a string.</source>
          <target state="translated">In diesem Beispiel wird mit der <ph id="ph1">`Len`</ph>-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>Name of string variable.</source>
          <target state="translated">Name der Zeichenfolgenvariablen.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>Length of returned string.</source>
          <target state="translated">Länge der zurückgegebenen Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>Returns a left-aligned string containing the specified string adjusted to the specified length.</source>
          <target state="translated">Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>Returns a left-aligned string containing the specified string adjusted to the specified length.</source>
          <target state="translated">Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>If the specified string is longer than the specified length, the returned string is shortened to the specified length.</source>
          <target state="translated">Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird die zurückgegebene Zeichenfolge in der vorgegebenen Länge gekürzt.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</source>
          <target state="translated">Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen und dem rechten Ende der zurückgegebenen Zeichenfolge, die die entsprechende Länge erzeugt hinzugefügt.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
          <source>This example demonstrates the use of the <ph id="ph1">`LSet`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`LSet`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), no trailing spaces (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>), or no leading or trailing spaces (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>).</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), ohne nachstehende Leerzeichen (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>) bzw. ohne führende und nachstehende Leerzeichen (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>) enthält.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), no trailing spaces (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>), or no leading or trailing spaces (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>).</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), ohne nachstehende Leerzeichen (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>) bzw. ohne führende und nachstehende Leerzeichen (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>) enthält.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>The <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, and <ph id="ph3">`Trim`</ph> functions remove spaces from the ends of strings.</source>
          <target state="translated">Die <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, und <ph id="ph3">`Trim`</ph> Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>This example uses the <ph id="ph1">`LTrim`</ph> function to strip leading spaces and the <ph id="ph2">`RTrim`</ph> function to strip trailing spaces from a string variable.</source>
          <target state="translated">In diesem Beispiel werden mit der <ph id="ph1">`LTrim`</ph>-Funktion führende Leerzeichen und mit der <ph id="ph2">`RTrim`</ph>-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
          <source>It uses the <ph id="ph1">`Trim`</ph> function to strip both types of spaces.</source>
          <target state="translated">Mit der <ph id="ph1">`Trim`</ph>-Funktion werden beide Typen von Leerzeichen entfernt.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns a string that contains characters from a specified string.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die Zeichen aus einer festgelegten Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression from which characters are returned.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, aus dem Zeichen zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>Starting position of the characters to return.</source>
          <target state="translated">Anfangsposition der zurückzugebenden Zeichen.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> is greater than the number of characters in <bpt id="p2">&lt;c&gt;</bpt>str<ept id="p2">&lt;/c&gt;</ept>, the <ph id="ph1">&lt;see langword="Mid" /&gt;</ph> function returns a zero-length string ("").</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> größer als die Anzahl der Zeichen in <bpt id="p2">&lt;c&gt;</bpt>str<ept id="p2">&lt;/c&gt;</ept> ist, gibt die <ph id="ph1">&lt;see langword="Mid" /&gt;</ph>-Funktion eine Zeichenfolge ("") der Länge 0 zurück.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> is one-based.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> ist 1-basiert.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>Returns a string that contains all the characters starting from a specified position in a string.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die alle Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>A string that consists of all the characters starting from the specified position in the string.</source>
          <target state="translated">Eine Zeichenfolge, die aus allen Zeichen beginnend bei der angegebenen Position in der Zeichenfolge besteht.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
          <target state="translated">Um zu bestimmen, die Anzahl der Zeichen in <ph id="ph1">`str`</ph>, verwenden Sie die <ph id="ph2">`Len`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>Visual Basic has a <ph id="ph1">`Mid`</ph> function and a <ph id="ph2">`Mid`</ph> statement.</source>
          <target state="translated">Visual Basic verfügt über eine <ph id="ph1">`Mid`</ph> Funktion und eine <ph id="ph2">`Mid`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>These elements both operate on a specified number of characters in a string, but the <ph id="ph1">`Mid`</ph> function returns the characters while the <ph id="ph2">`Mid`</ph> statement replaces the characters.</source>
          <target state="translated">Diese Elemente, die beide auf eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die <ph id="ph1">`Mid`</ph> Funktion gibt die Zeichen, während die <ph id="ph2">`Mid`</ph> Anweisung ersetzt die Zeichen.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Mid Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/mid-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Mid-Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/mid-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>The <ph id="ph1">`MidB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`MidB`</ph> Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>All Visual Basic strings are in Unicode, and <ph id="ph1">`MidB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`MidB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source>The last line in this example uses this overload of the <ph id="ph1">`Mid`</ph> function to return the fifth and subsequent characters from a string.</source>
          <target state="translated">Die letzte Zeile in diesem Beispiel verwendet diese Überladung der <ph id="ph1">`Mid`</ph> Funktion, um die fünfte und nachfolgende Zeichen aus einer Zeichenfolge zurückzugeben.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;lt;</ph>= 0 or <ph id="ph3">&lt;paramref name="Length" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;lt;</ph>= 0 oder <ph id="ph3">&lt;paramref name="Length" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression from which characters are returned.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, aus dem Zeichen zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Starting position of the characters to return.</source>
          <target state="translated">Anfangsposition der zurückzugebenden Zeichen.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> is greater than the number of characters in <bpt id="p2">&lt;c&gt;</bpt>str<ept id="p2">&lt;/c&gt;</ept>, the <ph id="ph1">&lt;see langword="Mid" /&gt;</ph> function returns a zero-length string ("").</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> größer als die Anzahl der Zeichen in <bpt id="p2">&lt;c&gt;</bpt>str<ept id="p2">&lt;/c&gt;</ept> ist, gibt die <ph id="ph1">&lt;see langword="Mid" /&gt;</ph>-Funktion eine Zeichenfolge ("") der Länge 0 zurück.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> is one based.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> ist 1-basiert.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Number of characters to return.</source>
          <target state="translated">Die Anzahl der zurückzugebenden Zeichen.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>If omitted or if there are fewer than <bpt id="p1">&lt;c&gt;</bpt>Length<ept id="p1">&lt;/c&gt;</ept> characters in the text (including the character at position <bpt id="p2">&lt;c&gt;</bpt>Start<ept id="p2">&lt;/c&gt;</ept>), all characters from the start position to the end of the string are returned.</source>
          <target state="translated">Wenn der Ausdruck ausgelassen wird oder weniger als <bpt id="p1">&lt;c&gt;</bpt>Length<ept id="p1">&lt;/c&gt;</ept> Zeichen im Text enthalten sind (einschließlich des Zeichens an Position <bpt id="p2">&lt;c&gt;</bpt>Start<ept id="p2">&lt;/c&gt;</ept>), werden alle Zeichen von der Anfangs- bis zur Endposition der Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Returns a string that contains a specified number of characters starting from a specified position in a string.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine angegebene Anzahl von Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>A string that consists of the specified number of characters starting from the specified position in the string.</source>
          <target state="translated">Eine Zeichenfolge, die aus der angegebenen Anzahl von Zeichen besteht, beginnend bei der angegebenen Position in der Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
          <target state="translated">Um zu bestimmen, die Anzahl der Zeichen in <ph id="ph1">`str`</ph>, verwenden Sie die <ph id="ph2">`Len`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>Visual Basic has a <ph id="ph1">`Mid`</ph> function and a <ph id="ph2">`Mid`</ph> statement.</source>
          <target state="translated">Visual Basic verfügt über eine <ph id="ph1">`Mid`</ph> Funktion und eine <ph id="ph2">`Mid`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>These elements both operate on a specified number of characters in a string, but the <ph id="ph1">`Mid`</ph> function returns the characters while the <ph id="ph2">`Mid`</ph> statement replaces the characters.</source>
          <target state="translated">Diese Elemente, die beide auf eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die <ph id="ph1">`Mid`</ph> Funktion gibt die Zeichen, während die <ph id="ph2">`Mid`</ph> Anweisung ersetzt die Zeichen.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Mid Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/mid-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Mid-Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/mid-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`MidB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`MidB`</ph> Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>All Visual Basic strings are in Unicode, and <ph id="ph1">`MidB`</ph> is no longer supported.</source>
          <target state="translated">Alle Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`MidB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>The first two <ph id="ph1">`Mid`</ph> functions in this example return the specified number of characters from a string, starting from the given positions.</source>
          <target state="translated">Die ersten beiden <ph id="ph1">`Mid`</ph> Funktionen in diesem Beispiel wird die angegebene Anzahl von Zeichen aus einer Zeichenfolge, beginnend mit den angegebenen Positionen zurück.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source>(The last function illustrates the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29&gt;</ph> overload and only specifies the starting point for the string extraction.)</source>
          <target state="translated">(Die letzte Funktion veranschaulicht die <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29&gt;</ph> überladen und gibt nur den Ausgangspunkt für die Extrahierung Zeichenfolge.)</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;lt;</ph>= 0 or <ph id="ph3">&lt;paramref name="Length" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Start" /&gt;</ph> <ph id="ph2">&amp;lt;</ph>= 0 oder <ph id="ph3">&lt;paramref name="Length" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>String expression containing substring to replace.</source>
          <target state="translated">Zeichenfolgenausdruck mit der zu ersetzenden untergeordneten Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Substring being searched for.</source>
          <target state="translated">Die gesuchte untergeordnete Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Replacement substring.</source>
          <target state="translated">Untergeordnete Ersetzungszeichenfolge.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Position within <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> that starts a substring used for replacement.</source>
          <target state="translated">Position in <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept>, die eine für die Ersetzung verwendete Teilzeichenfolge startet.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The return value of <ph id="ph1">&lt;see langword="Replace" /&gt;</ph> is a string that begins at <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept>, with appropriate substitutions.</source>
          <target state="translated">Der Rückgabewert von <ph id="ph1">&lt;see langword="Replace" /&gt;</ph> ist eine Zeichenfolge, die bei <bpt id="p1">&lt;c&gt;</bpt>Start<ept id="p1">&lt;/c&gt;</ept> beginnt, mit entsprechenden Ersetzungen.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If omitted, 1 is assumed.</source>
          <target state="translated">Wenn der Wert nicht angegeben wird, wird 1 angenommen.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Number of substring substitutions to perform.</source>
          <target state="translated">Die Anzahl der durchzuführenden Ersetzungen für untergeordnete Zeichenfolgen.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If omitted, the default value is –1, which means "make all possible substitutions."</source>
          <target state="translated">Wenn der Wert nicht angegeben wird, ist der Standardwert -1, d. h., dass alle möglichen Ersetzungen vorgenommen werden.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric value indicating the kind of comparison to use when evaluating substrings.</source>
          <target state="translated">Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>See Settings for values.</source>
          <target state="translated">Werte finden Sie im Abschnitt "Einstellungen".</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, in der eine bestimmte untergeordnete Zeichenfolge so oft wie angegeben durch eine andere Zeichenfolge ersetzt wurde.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="Replace" /&gt;</ph> returns the following values.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Replace" /&gt;</ph> gibt die folgenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;item&gt;</ph><ph id="ph3">&lt;term&gt;</ph> If</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;item&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wenn</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Replace returns</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Gibt Replace Folgendes zurück</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><bpt id="p1">&lt;item&gt;</bpt><bpt id="p2">&lt;term&gt;</bpt><ph id="ph3">&lt;paramref name="Find" /&gt;</ph> is zero-length or <ph id="ph4">&lt;see langword="Nothing" /&gt;</ph><ept id="p2">&lt;/term&gt;</ept><bpt id="p3">&lt;description&gt;</bpt> Copy of <ph id="ph5">&lt;paramref name="Expression" /&gt;</ph><ept id="p3">&lt;/description&gt;</ept><ept id="p1">&lt;/item&gt;</ept><ph id="ph6">&lt;item&gt;</ph><ph id="ph7">&lt;term&gt;</ph><ph id="ph8">&lt;paramref name="Replace" /&gt;</ph> is zero-length</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><bpt id="p1">&lt;item&gt;</bpt><bpt id="p2">&lt;term&gt;</bpt><ph id="ph3">&lt;paramref name="Find" /&gt;</ph> hat die Länge 0 (null) oder <ph id="ph4">&lt;see langword="Nothing" /&gt;</ph><ept id="p2">&lt;/term&gt;</ept><bpt id="p3">&lt;description&gt;</bpt> Kopie von <ph id="ph5">&lt;paramref name="Expression" /&gt;</ph><ept id="p3">&lt;/description&gt;</ept><ept id="p1">&lt;/item&gt;</ept><ph id="ph6">&lt;item&gt;</ph><ph id="ph7">&lt;term&gt;</ph><ph id="ph8">&lt;paramref name="Replace" /&gt;</ph> hat die Länge 0 (null)</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/term&gt;</ph><bpt id="p1">&lt;description&gt;</bpt> Copy of <ph id="ph2">&lt;paramref name="Expression" /&gt;</ph> with no occurrences of <ph id="ph3">&lt;paramref name="Find" /&gt;</ph><ept id="p1">&lt;/description&gt;</ept><ph id="ph4">&lt;/item&gt;</ph><bpt id="p2">&lt;item&gt;</bpt><bpt id="p3">&lt;term&gt;</bpt><ph id="ph5">&lt;paramref name="Expression" /&gt;</ph> is zero-length or <ph id="ph6">&lt;see langword="Nothing" /&gt;</ph>, or <ph id="ph7">&lt;paramref name="Start" /&gt;</ph> is greater than length of <ph id="ph8">&lt;paramref name="Expression" /&gt;</ph><ept id="p3">&lt;/term&gt;</ept><bpt id="p4">&lt;description&gt;</bpt><ph id="ph9">&lt;see langword="Nothing" /&gt;</ph><ept id="p4">&lt;/description&gt;</ept><ept id="p2">&lt;/item&gt;</ept><ph id="ph10">&lt;item&gt;</ph><ph id="ph11">&lt;term&gt;</ph><ph id="ph12">&lt;paramref name="Count" /&gt;</ph> is 0</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><bpt id="p1">&lt;description&gt;</bpt> Kopie von <ph id="ph2">&lt;paramref name="Expression" /&gt;</ph> ohne Vorkommen von <ph id="ph3">&lt;paramref name="Find" /&gt;</ph><ept id="p1">&lt;/description&gt;</ept><ph id="ph4">&lt;/item&gt;</ph><bpt id="p2">&lt;item&gt;</bpt><bpt id="p3">&lt;term&gt;</bpt><ph id="ph5">&lt;paramref name="Expression" /&gt;</ph> hat die Länge 0 (null) oder <ph id="ph6">&lt;see langword="Nothing" /&gt;</ph>, oder <ph id="ph7">&lt;paramref name="Start" /&gt;</ph> ist größer als die Länge von <ph id="ph8">&lt;paramref name="Expression" /&gt;</ph><ept id="p3">&lt;/term&gt;</ept><bpt id="p4">&lt;description&gt;</bpt><ph id="ph9">&lt;see langword="Nothing" /&gt;</ph><ept id="p4">&lt;/description&gt;</ept><ept id="p2">&lt;/item&gt;</ept><ph id="ph10">&lt;item&gt;</ph><ph id="ph11">&lt;term&gt;</ph><ph id="ph12">&lt;paramref name="Count" /&gt;</ph> ist 0</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/term&gt;</ph><bpt id="p1">&lt;description&gt;</bpt> Copy of <ph id="ph2">&lt;paramref name="Expression" /&gt;</ph><ept id="p1">&lt;/description&gt;</ept><ph id="ph3">&lt;/item&gt;</ph><ph id="ph4">&lt;/list&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><bpt id="p1">&lt;description&gt;</bpt> Kopie von <ph id="ph2">&lt;paramref name="Expression" /&gt;</ph><ept id="p1">&lt;/description&gt;</ept><ph id="ph3">&lt;/item&gt;</ph><ph id="ph4">&lt;/list&gt;</ph></target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The return value of the <ph id="ph1">`Replace`</ph> function is a string that begins at the position specified by <ph id="ph2">`Start`</ph> and concludes at the end of the <ph id="ph3">`Expression`</ph> string, with the substitutions made as specified by the <ph id="ph4">`Find`</ph> and <ph id="ph5">`Replace`</ph> values.</source>
          <target state="translated">Der Rückgabewert von der <ph id="ph1">`Replace`</ph> Funktion ist eine Zeichenfolge, die an der angegebenen Position beginnt <ph id="ph2">`Start`</ph> und endet am Ende der <ph id="ph3">`Expression`</ph> Zeichenfolge mit de vorgenommenen Ersetzungen nach den Angaben von der <ph id="ph4">`Find`</ph> und <ph id="ph5">`Replace`</ph> Werte.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph> Argument kann die folgenden Werte haben.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison</source>
          <target state="translated">Führt einen binären Vergleich</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a textual comparison</source>
          <target state="translated">Führt einen Vergleich aus Text</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>This example demonstrates the <ph id="ph1">`Replace`</ph> function.</source>
          <target state="translated">Dieses Beispiel zeigt die <ph id="ph1">`Replace`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Count" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> -1 or <ph id="ph3">&lt;paramref name="Start" /&gt;</ph> <ph id="ph4">&amp;lt;</ph>= 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Count" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> –1 oder <ph id="ph3">&lt;paramref name="Start" /&gt;</ph> <ph id="ph4">&amp;lt;</ph>= 0.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression from which the rightmost characters are returned.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, von dem die äußersten rechten Zeichen zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>Numeric expression indicating how many characters to return.</source>
          <target state="translated">Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>If 0, a zero-length string ("") is returned.</source>
          <target state="translated">Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>If greater than or equal to the number of characters in <bpt id="p1">&lt;c&gt;</bpt>str<ept id="p1">&lt;/c&gt;</ept>, the entire string is returned.</source>
          <target state="translated">Wenn der Wert größer oder gleich der Anzahl von Zeichen in <bpt id="p1">&lt;c&gt;</bpt>str<ept id="p1">&lt;/c&gt;</ept> ist, wird die ganze Zeichenfolge zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>Returns a string containing a specified number of characters from the right side of a string.</source>
          <target state="translated">Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>Returns a string containing a specified number of characters from the right side of a string.</source>
          <target state="translated">Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
          <target state="translated">Um zu bestimmen, die Anzahl der Zeichen in <ph id="ph1">`str`</ph>, verwenden Sie die <ph id="ph2">`Len`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>If used in a Windows Form, or any other class that has a <ph id="ph1">`Right`</ph> property, you must fully qualify the function with <ph id="ph2">`Microsoft.VisualBasic.Strings.Right`</ph>.</source>
          <target state="translated">Bei der Verwendung in einem Windows Form oder eine andere Klasse mit einem <ph id="ph1">`Right`</ph> -Eigenschaft, Sie müssen vollqualifiziert-Funktion mit <ph id="ph2">`Microsoft.VisualBasic.Strings.Right`</ph>.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>The <ph id="ph1">`RightB`</ph> function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</source>
          <target state="translated">Die <ph id="ph1">`RightB`</ph> -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstatt Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
          <target state="translated">Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`RightB`</ph> is no longer supported.</source>
          <target state="translated">Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und <ph id="ph1">`RightB`</ph> wird nicht mehr unterstützt.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>This example demonstrates the use of the <ph id="ph1">`Right`</ph> function to return a substring of a given <ph id="ph2">`String`</ph>.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Right`</ph> Funktion eine Teilzeichenfolge des zurückzugebenden einer bestimmten <ph id="ph2">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source>In a class that has a <ph id="ph1">`Right`</ph> property, it may be necessary to fully qualify the <ph id="ph2">`Right`</ph> function.</source>
          <target state="translated">In einer Klasse mit einem <ph id="ph1">`Right`</ph> -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der <ph id="ph2">`Right`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Length" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Length" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>Name of string variable.</source>
          <target state="translated">Name der Zeichenfolgenvariablen.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>Length of returned string.</source>
          <target state="translated">Länge der zurückgegebenen Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>Returns a right-aligned string containing the specified string adjusted to the specified length.</source>
          <target state="translated">Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>Returns a right-aligned string containing the specified string adjusted to the specified length.</source>
          <target state="translated">Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>If <ph id="ph1">`Source`</ph> is longer than <ph id="ph2">`Length`</ph>, <ph id="ph3">`RSet`</ph> places only the leftmost characters, up to the length of <ph id="ph4">`Source`</ph>, in the returned string.</source>
          <target state="translated">Wenn <ph id="ph1">`Source`</ph> ist länger als <ph id="ph2">`Length`</ph>, <ph id="ph3">`RSet`</ph> fügt nur die am weitesten links stehende Zeichen bis zur Länge der <ph id="ph4">`Source`</ph>, in der zurückgegebenen Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</source>
          <target state="translated">Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen zum linken Ende der Zeichenfolge, die die entsprechende Länge hinzugefügt.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>If the specified string is longer than the specified length, it is shortened to the specified length.</source>
          <target state="translated">Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird es in der vorgegebenen Länge gekürzt.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
          <source>This example demonstrates the use of the <ph id="ph1">`RSet`</ph> function.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`RSet`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), no trailing spaces (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>), or no leading or trailing spaces (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>).</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), ohne nachstehende Leerzeichen (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>) bzw. ohne führende und nachstehende Leerzeichen (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>) enthält.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), no trailing spaces (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>), or no leading or trailing spaces (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>).</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), ohne nachstehende Leerzeichen (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>) bzw. ohne führende und nachstehende Leerzeichen (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>) enthält.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>The <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, and <ph id="ph3">`Trim`</ph> functions remove spaces from the ends of strings.</source>
          <target state="translated">Die <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, und <ph id="ph3">`Trim`</ph> Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>This example uses the <ph id="ph1">`LTrim`</ph> function to strip leading spaces and the <ph id="ph2">`RTrim`</ph> function to strip trailing spaces from a string variable.</source>
          <target state="translated">In diesem Beispiel werden mit der <ph id="ph1">`LTrim`</ph>-Funktion führende Leerzeichen und mit der <ph id="ph2">`RTrim`</ph>-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
          <source>It uses the <ph id="ph1">`Trim`</ph> function to strip both types of spaces.</source>
          <target state="translated">Mit der <ph id="ph1">`Trim`</ph>-Funktion werden beide Typen von Leerzeichen entfernt.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source>The number of spaces you want in the string.</source>
          <target state="translated">Die Anzahl der gewünschten Leerzeichen in der Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source>Returns a string consisting of the specified number of spaces.</source>
          <target state="translated">Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source>Returns a string consisting of the specified number of spaces.</source>
          <target state="translated">Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source>The <ph id="ph1">`Space`</ph> function is useful for formatting output and clearing data in fixed-length strings.</source>
          <target state="translated">Die <ph id="ph1">`Space`</ph> Funktion eignet sich zum Formatieren der Ausgabe und Löschen von Daten in Zeichenfolgen mit fester Länge.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source>This example uses the <ph id="ph1">`Space`</ph> function to return a string consisting of a specified number of spaces.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`Space`</ph> -Funktion eine Zeichenfolge mit einer angegebenen Anzahl von Leerzeichen zurückgibt.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression containing substrings and delimiters.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck mit untergeordneten Zeichenfolgen und Trennzeichen.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Any single character used to identify substring limits.</source>
          <target state="translated">Jedes einzelne Zeichen, mit dem Grenzen von untergeordneten Zeichenfolgen gekennzeichnet werden.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> is omitted, the space character (" ") is assumed to be the delimiter.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> nicht angegeben wird, wird als Trennzeichen das Leerzeichen (" ") angenommen.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Maximum number of substrings into which the input string should be split.</source>
          <target state="translated">Die maximale Anzahl von untergeordneten Zeichenfolgen, in die die Eingabezeichenfolge geteilt werden soll.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The default, –1, indicates that the input string should be split at every occurrence of the <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept> string.</source>
          <target state="translated">Der Standardwert – 1 gibt an, dass die Eingabezeichenfolge an jedem Vorkommen der <bpt id="p1">&lt;c&gt;</bpt>Delimiter<ept id="p1">&lt;/c&gt;</ept>-Zeichenfolge getrennt werden soll.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Numeric value indicating the comparison to use when evaluating substrings.</source>
          <target state="translated">Numerischer Wert, der den Vergleich angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>See "Settings" for values.</source>
          <target state="translated">Die Werte finden Sie unter „Einstellungen“.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns a zero-based, one-dimensional array containing a specified number of substrings.</source>
          <target state="translated">Gibt ein nullbasiertes, eindimensionales Array zurück, das eine angegebene Anzahl von Teilzeichenfolgen enthält.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>-Array.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If <ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> is a zero-length string (""), <ph id="ph2">&lt;see langword="Split" /&gt;</ph> returns a single-element array containing a zero-length string.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> eine Zeichenfolge ("") der Länge 0 (null) ist, gibt <ph id="ph2">&lt;see langword="Split" /&gt;</ph> ein Array mit einem Element zurück, das eine Zeichenfolge der Länge 0 (null) enthält.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>If <ph id="ph1">&lt;paramref name="Delimiter" /&gt;</ph> is a zero-length string, or if it does not appear anywhere in <ph id="ph2">&lt;paramref name="Expression" /&gt;</ph>, <ph id="ph3">&lt;see langword="Split" /&gt;</ph> returns a single-element array containing the entire <ph id="ph4">&lt;paramref name="Expression" /&gt;</ph> string.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;paramref name="Delimiter" /&gt;</ph> eine Zeichenfolge der Länge 0 (null) ist oder nicht in <ph id="ph2">&lt;paramref name="Expression" /&gt;</ph> vorkommt, gibt <ph id="ph3">&lt;see langword="Split" /&gt;</ph> ein Array mit einem Element zurück, das die gesamte <ph id="ph4">&lt;paramref name="Expression" /&gt;</ph>-Zeichenfolge enthält.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>By default, or when <ph id="ph1">`Limit`</ph> equals -1, the <ph id="ph2">`Split`</ph> function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</source>
          <target state="translated">Standardmäßig oder wenn <ph id="ph1">`Limit`</ph> gleich 1, der <ph id="ph2">`Split`</ph> Funktion teilt die Eingabezeichenfolge an jedem Vorkommen der Zeichenfolge als Trennzeichen, und gibt die Teilzeichenfolgen in einem Array zurück.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>When the <ph id="ph1">`Limit`</ph> parameter is greater than zero, the <ph id="ph2">`Split`</ph> function splits the string at the first <ph id="ph3">`Limit`</ph>-1 occurrences of the delimiter, and returns an array with the resulting substrings.</source>
          <target state="translated">Wenn die <ph id="ph1">`Limit`</ph> -Parameters ist größer als 0 (null), die <ph id="ph2">`Split`</ph> Funktion teilt die Zeichenfolge bei der ersten <ph id="ph3">`Limit`</ph>-1 Vorkommen des Trennzeichens, und gibt ein Array mit den resultierenden untergeordneten Zeichenfolgen zurück.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>For example, <ph id="ph1">`Split("a:b:c", ":")`</ph> returns the array <ph id="ph2">`{"a", "b", "c"}`</ph>, while <ph id="ph3">`Split("a:b:c", ":", 2)`</ph> returns the array <ph id="ph4">`{"a", "b:c"}`</ph>.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Split("a:b:c", ":")`</ph> gibt das Array <ph id="ph2">`{"a", "b", "c"}`</ph>, während <ph id="ph3">`Split("a:b:c", ":", 2)`</ph> gibt das Array <ph id="ph4">`{"a", "b:c"}`</ph>.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>When the <ph id="ph1">`Split`</ph> function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</source>
          <target state="translated">Wenn die <ph id="ph1">`Split`</ph> Funktion zwei Trennzeichen in einer Zeile oder ein Trennzeichen am Anfang oder Ende der Zeichenfolge auftritt, interpretiert als umgebenden eine leere Zeichenfolge ("").</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>For example, <ph id="ph1">`Split("xx", "x")`</ph> returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</source>
          <target state="translated">Beispielsweise <ph id="ph1">`Split("xx", "x")`</ph> gibt das Array mit drei leeren Zeichenfolgen zurück: ein vom Anfang der Zeichenfolge und das erste "x", eine zwischen den beiden "Zeichenfolgen x" und eine der letzten "X" und das Ende der Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>This table demonstrates how the optional <ph id="ph1">`Delimiter`</ph>, <ph id="ph2">`Limit`</ph>, and <ph id="ph3">`Compare`</ph> parameters can change the behavior of the <ph id="ph4">`Split`</ph> function.</source>
          <target state="translated">Diese Tabelle wird veranschaulicht, wie das optionale <ph id="ph1">`Delimiter`</ph>, <ph id="ph2">`Limit`</ph>, und <ph id="ph3">`Compare`</ph> Parameter können das Verhalten des ändern die <ph id="ph4">`Split`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Split Call</source>
          <target state="translated">Split-Aufruf</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Return Value</source>
          <target state="translated">Rückgabewert</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"42," , "12," , "19"}</source>
          <target state="translated">{"42," , "12," , "19"}</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"42", "12", "19"}</source>
          <target state="translated">{"42", "12", "19"}</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"42", "12, 19"}</source>
          <target state="translated">{"42", "12, 19"}</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"192", "168", "0", "1"}</source>
          <target state="translated">{"192", "168", "0", "1"}</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"Alice and Bob"}</source>
          <target state="translated">{"Alice und Bob"}</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"Alice", "Bob"}</source>
          <target state="translated">{"Alice", "Bob"}</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"<ph id="ph1">someone@example.com</ph>"}</source>
          <target state="translated">{"<ph id="ph1">someone@example.com</ph>"}</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>{"someone", "example.com"}</source>
          <target state="translated">{"someone", "example.com"}</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph> Argument kann die folgenden Werte haben.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Value</source>
          <target state="translated">Wert</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison</source>
          <target state="translated">Führt einen binären Vergleich</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a textual comparison</source>
          <target state="translated">Führt einen Vergleich aus Text</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The following example demonstrates how to split a string at its spaces.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge an ihren Leerzeichen geteilt.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
          <source>The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie zum Aufteilen von Zeichenfolgen mit mehreren Trennzeichen in einer Zeile und die leeren Zeichenfolgen herausfiltern.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Specifies the type of string comparison.</source>
          <target state="translated">Gibt den Typ des Zeichenfolgenvergleichs an.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Compare<ept id="p1">&lt;/c&gt;</ept> is omitted, the <ph id="ph1">&lt;see langword="Option Compare" /&gt;</ph> setting determines the type of comparison.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Compare<ept id="p1">&lt;/c&gt;</ept> ausgelassen wird, bestimmt die <ph id="ph1">&lt;see langword="Option Compare" /&gt;</ph>-Einstellung den Typ des Vergleichs.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Returns -1, 0, or 1, based on the result of a string comparison.</source>
          <target state="translated">Gibt abhängig vom Ergebnis eines Zeichenfolgenvergleichs den Wert -1, 0 oder 1 zurück.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">&lt;see langword="StrComp" /&gt;</ph> function has the following return values.</source>
          <target state="translated">Die <ph id="ph1">&lt;see langword="StrComp" /&gt;</ph>-Funktion besitzt die folgenden Rückgabewerte.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;item&gt;</ph><ph id="ph3">&lt;term&gt;</ph> If</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;item&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wenn</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> StrComp returns</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Rückgabewert von StrComp</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;paramref name="String1" /&gt;</ph> sorts ahead of <ph id="ph5">&lt;paramref name="String2" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph6">&lt;description&gt;</ph> -1</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;paramref name="String1" /&gt;</ph> wird vor <ph id="ph5">&lt;paramref name="String2" /&gt;</ph> sortiert<ept id="p1">&lt;/term&gt;</ept><ph id="ph6">&lt;description&gt;</ph> – 1</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;paramref name="String1" /&gt;</ph> is equal to <ph id="ph5">&lt;paramref name="String2" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph6">&lt;description&gt;</ph> 0</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;paramref name="String1" /&gt;</ph> ist gleich <ph id="ph5">&lt;paramref name="String2" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph6">&lt;description&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;paramref name="String1" /&gt;</ph> sorts after <ph id="ph5">&lt;paramref name="String2" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph6">&lt;description&gt;</ph> 1</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;paramref name="String1" /&gt;</ph> wird nach <ph id="ph5">&lt;paramref name="String2" /&gt;</ph> sortiert<ept id="p1">&lt;/term&gt;</ept><ph id="ph6">&lt;description&gt;</ph> 1</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The strings are compared by alphanumeric sort values beginning with the first character.</source>
          <target state="translated">Die Zeichenfolgen werden nach alphanumerischen Sortierwerten beginnend mit dem ersten Zeichen verglichen.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>For further information on binary comparisons, textual comparisons, and sort order, see <bpt id="p1">[</bpt>Option Compare Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu binäre Vergleiche, Textvergleiche und Sortierreihenfolge finden Sie unter <bpt id="p1">[</bpt>Option Compare-Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>The <ph id="ph1">`Compare`</ph> argument settings are:</source>
          <target state="translated">Die <ph id="ph1">`Compare`</ph>-Argumenteinstellungen lauten:</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Constant</source>
          <target state="translated">Konstante</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</source>
          <target state="translated">Führt einen binären Vergleich, basierend auf einer Sortierreihenfolge, die von den internen binären Darstellungen der Zeichen abgeleitet.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>Performs a text comparison, based on a case-insensitive text sort order determined by your system's <ph id="ph1">`LocaleID`</ph> value.</source>
          <target state="translated">Führt einen Textvergleich aus, basierend auf einer schreibungsunabhängigen Textsortierreihenfolge gemäß Ihrem System <ph id="ph1">`LocaleID`</ph> Wert.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source>This example uses the <ph id="ph1">`StrComp`</ph> function to return the results of a string comparison.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`StrComp`</ph> Funktion, um die Ergebnisse eines Zeichenfolgenvergleichs zurück.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
          <source><ph id="ph1">&lt;paramref name="Compare" /&gt;</ph> value is not valid.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="Compare" /&gt;</ph>-Wert ist ungültig.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> expression to be converted.</source>
          <target state="translated">Der zu konvertierende <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.VbStrConv" /&gt;</ph> member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.VbStrConv" /&gt;</ph>-Member.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>The enumeration value specifying the type of conversion to perform.</source>
          <target state="translated">Der Enumerationswert, der den Typ der auszuführenden Konvertierung angibt.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>The <ph id="ph1">&lt;see langword="LocaleID" /&gt;</ph> value, if different from the system <ph id="ph2">&lt;see langword="LocaleID" /&gt;</ph> value.</source>
          <target state="translated">Der <ph id="ph1">&lt;see langword="LocaleID" /&gt;</ph>-Wert, wenn dieser sich vom <ph id="ph2">&lt;see langword="LocaleID" /&gt;</ph>-Wert des Systems unterscheidet.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>(The system <ph id="ph1">&lt;see langword="LocaleID" /&gt;</ph> value is the default.)</source>
          <target state="translated">(Der <ph id="ph1">&lt;see langword="LocaleID" /&gt;</ph>-Wert des Systems ist der Standardwert.)</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Returns a string converted as specified.</source>
          <target state="translated">Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Returns a string converted as specified.</source>
          <target state="translated">Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>The constants <ph id="ph1">`VbStrConv.Wide`</ph>, <ph id="ph2">`VbStrConv.Narrow`</ph>, <ph id="ph3">`VbStrConv.SimplifiedChinese`</ph>, <ph id="ph4">`VbStrConv.TraditionalChinese`</ph>, <ph id="ph5">`VbStrConv.Katakana`</ph>, and <ph id="ph6">`VbStrConv.Hiragana`</ph> can cause run-time errors when used in locales where they do not apply, but not always: the constants <ph id="ph7">`VbStrConv.Katakana`</ph> and <ph id="ph8">`VbStrConv.Hiragana`</ph> can be used in a non-Japanese system with the Japanese Language Pack installed.</source>
          <target state="translated">Die Konstanten <ph id="ph1">`VbStrConv.Wide`</ph>, <ph id="ph2">`VbStrConv.Narrow`</ph>, <ph id="ph3">`VbStrConv.SimplifiedChinese`</ph>, <ph id="ph4">`VbStrConv.TraditionalChinese`</ph>, <ph id="ph5">`VbStrConv.Katakana`</ph>, und <ph id="ph6">`VbStrConv.Hiragana`</ph> kann dazu führen, dass zur Laufzeit Fehler bei der Verwendung in Gebietsschemas, in dem sie nicht gelten, aber nicht immer: die Konstanten <ph id="ph7">`VbStrConv.Katakana`</ph> und <ph id="ph8">`VbStrConv.Hiragana`</ph>können in einem nicht japanischen-System verwendet werden, mit das japanische Sprachpaket installiert.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>In addition, use of the constants <ph id="ph1">`VbStrConv.Wide`</ph> and <ph id="ph2">`VbStrConv.Narrow`</ph> is supported on any system with an East Asian language installed.</source>
          <target state="translated">Darüber hinaus verwenden Sie Konstanten <ph id="ph1">`VbStrConv.Wide`</ph> und <ph id="ph2">`VbStrConv.Narrow`</ph> wird mit der eine ostasiatische Sprache installiert auf allen Systemen unterstützt.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
          <target state="translated">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
          <target state="translated">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> -Methode, und übergeben Sie <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> oder <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> für die <ph id="ph4">`comparisonType`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>The <ph id="ph1">`Conversion`</ph> argument settings are:</source>
          <target state="translated">Die <ph id="ph1">`Conversion`</ph>-Argumenteinstellungen lauten:</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Enumeration member</source>
          <target state="translated">Enumerationsmember</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Performs no conversion</source>
          <target state="translated">Führt keine Konvertierung</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Uses linguistic rules for casing, rather than File System (default).</source>
          <target state="translated">Linguistische Regeln verwendet für Groß-/Kleinschreibung, anstatt File System (Standard).</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Valid with <ph id="ph1">`VbStrConv.UpperCase`</ph> and <ph id="ph2">`VbStrConv.LowerCase`</ph> only.</source>
          <target state="translated">Mit gültigen <ph id="ph1">`VbStrConv.UpperCase`</ph> und <ph id="ph2">`VbStrConv.LowerCase`</ph> nur.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts the string to uppercase characters.</source>
          <target state="translated">Konvertiert die Zeichenfolge in Großbuchstaben.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts the string to lowercase characters.</source>
          <target state="translated">Konvertiert die Zeichenfolge in Kleinbuchstaben.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts the first letter of every word in string to uppercase.</source>
          <target state="translated">Konvertiert den ersten Buchstaben jedes Worts in einer Zeichenfolge in Großbuchstaben.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">`VbStrConv.Wide`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></source>
          <target state="translated"><ph id="ph1">`VbStrConv.Wide`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts narrow (half-width) characters in the string to wide (full-width) characters.</source>
          <target state="translated">Konvertiert schmale Zeichen (halbe Breite), in der Zeichenfolge in Breitzeichen (ganze Breite).</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">`VbStrConv.Narrow`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></source>
          <target state="translated"><ph id="ph1">`VbStrConv.Narrow`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts wide (full-width) characters in the string to narrow (half-width) characters.</source>
          <target state="translated">Konvertiert die Breitzeichen (ganze Breite) in der Zeichenfolge schmale Zeichen (halbe Breite).</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">`VbStrConv.Katakana`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">**</ph><ept id="p1">&lt;/sup&gt;</ept></source>
          <target state="translated"><ph id="ph1">`VbStrConv.Katakana`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">**</ph><ept id="p1">&lt;/sup&gt;</ept></target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts Hiragana characters in the string to Katakana characters.</source>
          <target state="translated">Konvertiert Hiragana-Zeichen in der Zeichenfolge in Katakana-Zeichen.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">`VbStrConv.Hiragana`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">**</ph><ept id="p1">&lt;/sup&gt;</ept></source>
          <target state="translated"><ph id="ph1">`VbStrConv.Hiragana`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">**</ph><ept id="p1">&lt;/sup&gt;</ept></target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts Katakana characters in the string to Hiragana characters.</source>
          <target state="translated">Konvertiert Katakana-Zeichen in der Zeichenfolge in Hiragana-Zeichen.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">`VbStrConv.SimplifiedChinese`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></source>
          <target state="translated"><ph id="ph1">`VbStrConv.SimplifiedChinese`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts Traditional Chinese characters to Simplified Chinese.</source>
          <target state="translated">Konvertiert traditionelle chinesische Zeichen in Chinesisch (vereinfacht).</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><ph id="ph1">`VbStrConv.TraditionalChinese`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></source>
          <target state="translated"><ph id="ph1">`VbStrConv.TraditionalChinese`</ph> <bpt id="p1">&lt;sup&gt;</bpt><ph id="ph2">*</ph><ept id="p1">&lt;/sup&gt;</ept></target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Converts Simplified Chinese characters to Traditional Chinese.</source>
          <target state="translated">Konvertiert vereinfachte chinesische Zeichen in traditionellem Chinesisch.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><bpt id="p1">&lt;sup&gt;</bpt><ph id="ph1">*</ph><ept id="p1">&lt;/sup&gt;</ept> Applies to Asian locales.</source>
          <target state="translated"><bpt id="p1">&lt;sup&gt;</bpt><ph id="ph1">*</ph><ept id="p1">&lt;/sup&gt;</ept> Gilt für asiatische Gebietsschemas.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source><bpt id="p1">&lt;sup&gt;</bpt><ph id="ph1">**</ph><ept id="p1">&lt;/sup&gt;</ept> Applies to Japan only.</source>
          <target state="translated"><bpt id="p1">&lt;sup&gt;</bpt><ph id="ph1">**</ph><ept id="p1">&lt;/sup&gt;</ept> Gilt nur für Japan.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>These constants are specified in the .NET Framework common language runtime.</source>
          <target state="translated">Diese Konstanten werden in der common Language Runtime von .NET Framework angegeben.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>As a result, they can be used anywhere in your code in place of the actual values.</source>
          <target state="translated">Daher können sie eine beliebige Stelle im Code anstelle der eigentlichen Werte verwendet werden.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Most can be combined (for example, <ph id="ph1">`UpperCase + Wide`</ph>), except when they are mutually exclusive (for example, <ph id="ph2">`VbStrConv.Wide + VbStrConv.Narrow`</ph>).</source>
          <target state="translated">Die meisten kombiniert werden können (z. B. <ph id="ph1">`UpperCase + Wide`</ph>), außer wenn sie sich gegenseitig ausschließende sind (z. B. <ph id="ph2">`VbStrConv.Wide + VbStrConv.Narrow`</ph>).</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>The following are valid word separators for proper casing: Null (<ph id="ph1">`Chr$(0)`</ph>), horizontal tab (<ph id="ph2">`Chr$(9)`</ph>), line feed (<ph id="ph3">`Chr$(10)`</ph>), vertical tab (<ph id="ph4">`Chr$(11)`</ph>), form feed (<ph id="ph5">`Chr$(12)`</ph>), carriage return (<ph id="ph6">`Chr$(13)`</ph>), space (single-byte character set) (<ph id="ph7">`Chr$(32)`</ph>).</source>
          <target state="translated">Im folgenden werden die gültigen Worttrennzeichen für die richtige Groß-/Kleinschreibung: Null (<ph id="ph1">`Chr$(0)`</ph>), horizontaler Tabulator (<ph id="ph2">`Chr$(9)`</ph>), line Feed, Zeilenvorschub (<ph id="ph3">`Chr$(10)`</ph>), vertikaler Tabulator (<ph id="ph4">`Chr$(11)`</ph>), Seitenvorschub (<ph id="ph5">`Chr$(12)`</ph>), Wagenrücklaufzeichen (<ph id="ph6">`Chr$(13)`</ph>), Leerzeichen () Einzelbyte-Zeichensatz) (<ph id="ph7">`Chr$(32)`</ph>).</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</source>
          <target state="translated">Der tatsächliche Wert für ein Leerzeichen, was die volle oder halbe Breite sein kann, variiert je nach Land/Region für ostasiatische Kulturen.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>This example converts text into all lowercase letters.</source>
          <target state="translated">In diesem Beispiel konvertiert Text in Kleinbuchstaben.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
          <source>Unsupported <ph id="ph1">&lt;paramref name="LocaleID" /&gt;</ph>, <ph id="ph2">&lt;paramref name="Conversion" /&gt;</ph> <ph id="ph3">&amp;lt;</ph> 0 or <ph id="ph4">&amp;gt;</ph> 2048, or unsupported conversion for specified locale.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="LocaleID" /&gt;</ph> nicht unterstützt, <ph id="ph2">&lt;paramref name="Conversion" /&gt;</ph> <ph id="ph3">&amp;lt;</ph> 0 oder <ph id="ph4">&amp;gt;</ph> 2048, oder nicht unterstützte Konvertierung für das angegebene Gebietsschema.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>The length to the string to be returned.</source>
          <target state="translated">Die Länge der zurückzugebenden Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph>, <ph id="ph2">&lt;see langword="String" /&gt;</ph>, or <ph id="ph3">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke, <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph3">&lt;see langword="Object" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>Only the first character of the expression will be used.</source>
          <target state="translated">Es wird nur das erste Zeichen des Ausdrucks verwendet.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>If Character is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, it must contain either a <ph id="ph2">&lt;see langword="Char" /&gt;</ph> or a <ph id="ph3">&lt;see langword="String" /&gt;</ph> value.</source>
          <target state="translated">Wenn das Zeichen vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, muss es entweder einen <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Wert oder einen <ph id="ph3">&lt;see langword="String" /&gt;</ph>-Wert enthalten.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>This function returns a <ph id="ph1">`String`</ph> made up of repeated characters.</source>
          <target state="translated">Diese Funktion gibt eine <ph id="ph1">`String`</ph> setzt sich wiederholenden Zeichen.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>The character that makes up the string is the first character in the <ph id="ph1">`Character`</ph> argument, and it is duplicated <ph id="ph2">`Number`</ph> number of times.</source>
          <target state="translated">Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der <ph id="ph1">`Character`</ph> Argument, und es wird dupliziert <ph id="ph2">`Number`</ph> -Mal.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source>This example uses the <ph id="ph1">`StrDup`</ph> function to return a string of duplicated characters.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`StrDup`</ph> -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is less than 0 or <ph id="ph2">&lt;paramref name="Character" /&gt;</ph> type is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> ist kleiner als 0 (null), oder der <ph id="ph2">&lt;paramref name="Character" /&gt;</ph>-Typ ist nicht gültig.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="Character" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Character" /&gt;</ph> ist <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>The length to the string to be returned.</source>
          <target state="translated">Die Länge der zurückzugebenden Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph>, <ph id="ph2">&lt;see langword="String" /&gt;</ph>, or <ph id="ph3">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke, <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph3">&lt;see langword="Object" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>Only the first character of the expression will be used.</source>
          <target state="translated">Es wird nur das erste Zeichen des Ausdrucks verwendet.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>If Character is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, it must contain either a <ph id="ph2">&lt;see langword="Char" /&gt;</ph> or a <ph id="ph3">&lt;see langword="String" /&gt;</ph> value.</source>
          <target state="translated">Wenn das Zeichen vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, muss es entweder einen <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Wert oder einen <ph id="ph3">&lt;see langword="String" /&gt;</ph>-Wert enthalten.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>This function returns a <ph id="ph1">`String`</ph> made up of repeated characters.</source>
          <target state="translated">Diese Funktion gibt eine <ph id="ph1">`String`</ph> setzt sich wiederholenden Zeichen.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>The character that makes up the string is the first character in the <ph id="ph1">`Character`</ph> argument, and it is duplicated <ph id="ph2">`Number`</ph> number of times.</source>
          <target state="translated">Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der <ph id="ph1">`Character`</ph> Argument, und es wird dupliziert <ph id="ph2">`Number`</ph> -Mal.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source>This example uses the <ph id="ph1">`StrDup`</ph> function to return a string of duplicated characters.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`StrDup`</ph> -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is less than 0 or <ph id="ph2">&lt;paramref name="Character" /&gt;</ph> type is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> ist kleiner als 0 (null), oder der <ph id="ph2">&lt;paramref name="Character" /&gt;</ph>-Typ ist nicht gültig.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="Character" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Character" /&gt;</ph> ist <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>The length to the string to be returned.</source>
          <target state="translated">Die Länge der zurückzugebenden Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="Char" /&gt;</ph>, <ph id="ph2">&lt;see langword="String" /&gt;</ph>, or <ph id="ph3">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="Char" /&gt;</ph>-Ausdrücke, <ph id="ph2">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph3">&lt;see langword="Object" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>Only the first character of the expression will be used.</source>
          <target state="translated">Es wird nur das erste Zeichen des Ausdrucks verwendet.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>If Character is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, it must contain either a <ph id="ph2">&lt;see langword="Char" /&gt;</ph> or a <ph id="ph3">&lt;see langword="String" /&gt;</ph> value.</source>
          <target state="translated">Wenn das Zeichen vom Typ <ph id="ph1">&lt;see langword="Object" /&gt;</ph> ist, muss es entweder einen <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Wert oder einen <ph id="ph3">&lt;see langword="String" /&gt;</ph>-Wert enthalten.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>This function returns a <ph id="ph1">`String`</ph> made up of repeated characters.</source>
          <target state="translated">Diese Funktion gibt eine <ph id="ph1">`String`</ph> setzt sich wiederholenden Zeichen.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>The character that makes up the string is the first character in the <ph id="ph1">`Character`</ph> argument, and it is duplicated <ph id="ph2">`Number`</ph> number of times.</source>
          <target state="translated">Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der <ph id="ph1">`Character`</ph> Argument, und es wird dupliziert <ph id="ph2">`Number`</ph> -Mal.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source>This example uses the <ph id="ph1">`StrDup`</ph> function to return a string of duplicated characters.</source>
          <target state="translated">Dieses Beispiel verwendet die <ph id="ph1">`StrDup`</ph> -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is less than 0 or <ph id="ph2">&lt;paramref name="Character" /&gt;</ph> type is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> ist kleiner als 0 (null), oder der <ph id="ph2">&lt;paramref name="Character" /&gt;</ph>-Typ ist nicht gültig.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
          <source><ph id="ph1">&lt;paramref name="Character" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Character" /&gt;</ph> ist <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
          <source>String expression whose characters are to be reversed.</source>
          <target state="translated">Zeichenfolgenausdruck, dessen Zeichen umgekehrt werden müssen.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is a zero-length string (""), a zero-length string is returned.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> eine Zeichenfolge der Länge 0 ("") ist, wird eine Zeichenfolge der Länge 0 (null) zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
          <source>Returns a string in which the character order of a specified string is reversed.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
          <source>Returns a string in which the character order of a specified string is reversed.</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
          <source>The <ph id="ph1">`StrReverse`</ph> function returns a string that contains the same characters as <ph id="ph2">`Expression`</ph>, but in the opposite order.</source>
          <target state="translated">Die <ph id="ph1">`StrReverse`</ph> Funktion gibt eine Zeichenfolge, die gleichen Zeichen wie enthält <ph id="ph2">`Expression`</ph>, aber in umgekehrter Reihenfolge.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Jeder gültige <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), no trailing spaces (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>), or no leading or trailing spaces (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>).</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), ohne nachstehende Leerzeichen (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>) bzw. ohne führende und nachstehende Leerzeichen (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>) enthält.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), no trailing spaces (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>), or no leading or trailing spaces (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>).</source>
          <target state="translated">Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<ph id="ph1">&lt;see langword="LTrim" /&gt;</ph>), ohne nachstehende Leerzeichen (<ph id="ph2">&lt;see langword="RTrim" /&gt;</ph>) bzw. ohne führende und nachstehende Leerzeichen (<ph id="ph3">&lt;see langword="Trim" /&gt;</ph>) enthält.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>The <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, and <ph id="ph3">`Trim`</ph> functions remove spaces from the ends of strings.</source>
          <target state="translated">Die <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, und <ph id="ph3">`Trim`</ph> Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>This example uses the <ph id="ph1">`LTrim`</ph> function to strip leading spaces and the <ph id="ph2">`RTrim`</ph> function to strip trailing spaces from a string variable.</source>
          <target state="translated">In diesem Beispiel werden mit der <ph id="ph1">`LTrim`</ph>-Funktion führende Leerzeichen und mit der <ph id="ph2">`RTrim`</ph>-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
          <source>It uses the <ph id="ph1">`Trim`</ph> function to strip both types of spaces.</source>
          <target state="translated">Mit der <ph id="ph1">`Trim`</ph>-Funktion werden beide Typen von Leerzeichen entfernt.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Strings">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> or <ph id="ph2">&lt;see langword="Char" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</source>
          <target state="translated">Konvertiert nur Kleinbuchstaben in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
          <target state="translated">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
          <target state="translated">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> -Methode, und übergeben Sie <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> oder <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> für die <ph id="ph4">`comparisonType`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
          <source>This example uses the <ph id="ph1">`UCase`</ph> function to return an uppercase version of a string.</source>
          <target state="translated">In diesem Beispiel wird die <ph id="ph1">`UCase`</ph>-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> or <ph id="ph2">&lt;see langword="Char" /&gt;</ph> expression.</source>
          <target state="translated">Alle gültigen <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdrücke oder <ph id="ph2">&lt;see langword="Char" /&gt;</ph>-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
          <target state="translated">Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</source>
          <target state="translated">Konvertiert nur Kleinbuchstaben in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
          <target state="translated">Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> or <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
          <target state="translated">Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> -Methode, und übergeben Sie <ph id="ph2">&lt;xref:System.StringComparison.Ordinal&gt;</ph> oder <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> für die <ph id="ph4">`comparisonType`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
          <source>This example uses the <ph id="ph1">`UCase`</ph> function to return an uppercase version of a string.</source>
          <target state="translated">In diesem Beispiel wird die <ph id="ph1">`UCase`</ph>-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
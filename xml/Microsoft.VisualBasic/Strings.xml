<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db4fae13571ff6b7294ab82426f23ca45d4ba9ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710583" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <see langword="Strings" /> module contains procedures used to perform string operations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die Zeichenfolgen bearbeiten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie zum Aufteilen einer Zeichenfolge an ihren Leerzeichen wird.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Gibt die *Codepunkt*, oder Zeichencode für das eingegebene Zeichen. Dies kann auf 0 und 255 für Einzelbyte-Satz (SBCS) Werte und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (DBCS)-Satz Werte sein.  
  
 `AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und der Code die seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` Funktion früherer Versionen von Visual Basic einen Code für ein Byte, anstatt ein Zeichen zurückgegeben. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichen des Codes, den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Gibt die *Codepunkt*, oder Zeichencode für das eingegebene Zeichen. Dies kann auf 0 und 255 für Einzelbyte-Satz (SBCS) Werte und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (DBCS)-Satz Werte sein.  
  
 `AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und der Code die seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` Funktion früherer Versionen von Visual Basic einen Code für ein Byte, anstatt ein Zeichen zurückgegeben. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichen des Codes, den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Gibt die *Codepunkt*, oder Zeichencode für das eingegebene Zeichen. Dies kann auf 0 und 255 für Einzelbyte-Satz (SBCS) Werte und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (DBCS)-Satz Werte sein.  
  
 `AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und der Code die seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` Funktion früherer Versionen von Visual Basic einen Code für ein Byte, anstatt ein Zeichen zurückgegeben. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichen des Codes, den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Gibt die *Codepunkt*, oder Zeichencode für das eingegebene Zeichen. Dies kann auf 0 und 255 für Einzelbyte-Satz (SBCS) Werte und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (DBCS)-Satz Werte sein.  
  
 `AscW` Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und der Code die seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` Funktion früherer Versionen von Visual Basic einen Code für ein Byte, anstatt ein Zeichen zurückgegeben. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichen des Codes, den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akzeptierte asymmetrische Bereich für `CharCode` führt einen Ausgleich für die Speicherunterschiede zwischen der `Short` und `Integer`. Z. B.-29183 eine `Short` 36353 ist jedoch ein `Integer`. Dies erleichtert auch die Kompatibilität mit Visual Basic 6.0.  
  
 `Chr` verwendet die <xref:System.Text.Encoding> -Klasse in der <xref:System.Text?displayProperty=nameWithType> Namespace, um zu bestimmen, ob der aktuelle Thread eine Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen festgelegt (DBCS). Klicken Sie dann dauert `CharCode` als Code zu zeigen, in dem entsprechenden Satz. Der Bereich kann zwischen 0 und 255 für SBCS-Zeichen und zwischen-32768 und 65535 für DBCS-Zeichen sein.  
  
 Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <xref:System.Globalization.TextInfo.ANSICodePage%2A> Eigenschaft der <xref:System.Globalization.TextInfo> -Klasse in der <xref:System.Globalization> Namespace. Sie erhalten <xref:System.Globalization.TextInfo.ANSICodePage%2A> durch Angabe `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` nimmt `CharCode` als Unicode-Codepunkt. Der Bereich ist unabhängig von der Kultur und der Code die seiteneinstellungen für den aktuellen Thread. Werte zwischen-32768 und-1 werden behandelt als Werte in den Bereich + 32768 und + 65535.  
  
 Zahlen von 0 bis 31 entsprechen den standardmäßigen druckbaren ASCII-Codes. Z. B. `Chr(10)` gibt ein Zeilenvorschubzeichen.  
  
> [!NOTE]
>  Die `ChrB` -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und `ChrB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Chr` Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akzeptierte asymmetrische Bereich für `CharCode` führt einen Ausgleich für die Speicherunterschiede zwischen der `Short` und `Integer`. Z. B.-29183 eine `Short` 36353 ist jedoch ein `Integer`. Dies erleichtert auch die Kompatibilität mit Visual Basic 6.0.  
  
 `Chr` verwendet die <xref:System.Text.Encoding> -Klasse in der <xref:System.Text?displayProperty=nameWithType> Namespace, um zu bestimmen, ob der aktuelle Thread eine Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen festgelegt (DBCS). Klicken Sie dann dauert `CharCode` als Code zu zeigen, in dem entsprechenden Satz. Der Bereich kann zwischen 0 und 255 für SBCS-Zeichen und zwischen-32768 und 65535 für DBCS-Zeichen sein.  
  
 Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <xref:System.Globalization.TextInfo.ANSICodePage%2A> Eigenschaft der <xref:System.Globalization.TextInfo> -Klasse in der <xref:System.Globalization> Namespace. Sie erhalten <xref:System.Globalization.TextInfo.ANSICodePage%2A> durch Angabe `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` nimmt `CharCode` als Unicode-Codepunkt. Der Bereich ist unabhängig von der Kultur und der Code die seiteneinstellungen für den aktuellen Thread. Werte zwischen-32768 und-1 werden behandelt als Werte in den Bereich + 32768 und + 65535.  
  
 Zahlen von 0 bis 31 entsprechen den standardmäßigen druckbaren ASCII-Codes. Z. B. `Chr(10)` gibt ein Zeilenvorschubzeichen.  
  
> [!NOTE]
>  Die `ChrB` -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und `ChrB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Chr` Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Übereinstimmungen von `Match` befinden `Source`, `Filter` Funktion ein leeres Array zurück. Ein Fehler tritt auf, wenn `Source` nastaven NA hodnotu `Nothing` oder ist kein eindimensionales Array.  
  
 Das zurückgegebene Array die `Filter` -Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|Konstante|Beschreibung|  
|`CompareMethod.Binary`|Führt einen binären Vergleich|  
|`CompareMethod.Text`|Führt einen Textvergleich|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Filter` Funktion.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Übereinstimmungen von `Match` befinden `Source`, `Filter` Funktion ein leeres Array zurück. Ein Fehler tritt auf, wenn `Source` nastaven NA hodnotu `Nothing` oder ist kein eindimensionales Array.  
  
 Das zurückgegebene Array die `Filter` -Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|`CompareMethod.Binary`|Führt einen binären Vergleich|  
|`CompareMethod.Text`|Führt einen Textvergleich|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Filter` Funktion.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Any valid expression.</param>
        <param name="Style">Optional. A valid named or user-defined format <see langword="String" /> expression.</param>
        <summary>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</summary>
        <returns>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.String.Format%2A?displayProperty=nameWithType> Methode verfügt auch über ähnliche Funktionen.  
  
 Wenn Sie eine nicht lokalisierte numerische Zeichenfolge formatieren, sollten Sie ein benutzerdefiniertes numerisches Format verwenden, um sicherzustellen, dass Sie das Ergebnis erhalten Sie die gewünschten.  
  
 Wenn Sie versuchen, formatieren Sie eine Zahl ohne `Style`, `Format` -Funktion bietet ähnliche Funktionen wie die `Str` -Funktion an, obwohl es das Gebietsschema berücksichtigt wird. Positive Zahlen jedoch formatiert, als Zeichenfolgen, die mit der `Format` Funktion nicht mit ein führendes Leerzeichen zur Angabe des Vorzeichens des Werts einschließen, die mit konvertiert die `Str` Funktion behalten das führende Leerzeichen.  
  
## <a name="different-formats-for-different-numeric-values"></a>Verschiedene Formate für verschiedene numerische Werte  
 Ein benutzerdefinierte Formatausdruck für Zahlen kann ein bis drei durch Semikolons getrennte Abschnitte haben. Wenn die `Style` Argument der `Format` Funktion enthält mindestens einen der vordefinierten numerischen Formate, die nur ein Abschnitt zulässig ist.  
  
|Bei Verwendung von|Dies ist das Ergebnis|  
|-|-|  
|Nur ein Abschnitt|Der Formatausdruck gilt für alle Werte.|  
|Zwei Abschnitte|Der erste Abschnitt gilt für positive Werte und Nullen; die zweite gilt für negative Werte.|  
|Drei Abschnitte|Der erste Abschnitt gilt für positive Werte, die zweite gilt für negative Werte und die dritte gilt für Nullen.|  
  
 Im folgende Beispiel besteht aus zwei Abschnitten: der erste definiert das Format für positive Werte und Nullen; der zweite Abschnitt definiert das Format für negative Werte. Da die `Style` Argument der `Format` Funktion akzeptiert eine Zeichenfolge, die von Anführungszeichen eingeschlossen ist.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Wenn Sie zwei Semikolons ohne etwas dazwischen einfügen, wird der fehlende Abschnitt mit dem Format des positiven Werts ausgegeben. Beispielsweise das folgende Format zeigt positive und Negative Werte mit dem Format im ersten Abschnitt und zeigt `Zero` , wenn der Wert 0 (null) ist.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Vordefinierte numerische Formate  
 Der folgenden Tabelle sind die Namen vordefinierter numerischer Formate. Diese können verwendet werden, mit Namen wie die `Style` Argument für die `Format` Funktion:  
  
|Formatname|Beschreibung|  
|-|-|  
|`General Number`, `G`oder `g`|Zeigt eine Zahl ohne Tausendertrennzeichen an.<br /><br /> Z. B. `Format(&H3FA, "g")` gibt `1018`.|  
|`Currency`, `C`oder `c`|Zeigt eine Zahl ggf. mit Tausendertrennzeichen an; zeigt zwei Ziffern rechts vom Dezimaltrennzeichen an. Ausgabe basiert auf vom verwendeten Systemgebietsschema ab.<br /><br /> Z. B. `Format(1234567, "c")` gibt `$1,234,567.00`.|  
|`Fixed`, `F`oder `f`|Zeigt mindestens eine Ziffer links sowie zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Z. B. `Format(1234567, "f")` gibt `1234567.00`.|  
|`Standard`, `N`oder `n`|Zeigt die Zahl mit Tausendertrennzeichen und mindestens eine Ziffer links sowie zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Z. B. `Format(1234567, "n")` gibt `1,234,567.00`.|  
|`Percent`|Zeigt die Zahl, die multipliziert mit 100 mit einem Prozentzeichen (%) auf der rechten Seite angefügt, zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.<br /><br /> Z. B. `Format(0.4744, "Percent")` gibt `47.44%`.|  
|`P`, oder `p`|Zeigt eine Zahl mit Tausendertrennzeichen multipliziert mit 100 mit einem Prozentzeichen (%), die die richtigen und getrennt durch ein Leerzeichen hinzugefügt; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.<br /><br /> Z. B. `Format(0.80345, "p")` gibt `80.35 %`.|  
|`Scientific`|Verwendet standardmäßige wissenschaftliche Schreibweise und stellt zwei signifikante Stellen bereit.<br /><br /> Z. B. `Format(1234567, "Scientific")` gibt `1.23E+06`.|  
|`E`, oder `e`|Verwendet standardmäßige wissenschaftliche Schreibweise und stellt sechs signifikante Stellen bereit.<br /><br /> Z. B. `Format(1234567, "e")` gibt `1.234567e+006`.|  
|`D`, oder `d`|Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl in dezimale (Basis 10)-Format enthält. Diese Option wird für ganzzahlige Typen unterstützt (`Byte`, `Short`, `Integer`, `Long`) nur.<br /><br /> Z. B. `Format(&H7F, "d")` gibt `127`.|  
|`X`, oder `x`|Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl im Hexadezimalformat (Basis 16) enthält. Diese Option wird für ganzzahlige Typen unterstützt (`Byte`, `Short`, `Integer`, `Long`) nur.<br /><br /> Z. B. `Format(127, "x")` gibt `7f`.|  
|`Yes/No`|Zeigt `No` Wenn Zahl, andernfalls 0 ist, zeigt `Yes`.<br /><br /> Z. B. `Format(0, "Yes/No")` gibt `No`.|  
|`True/False`|Zeigt `False` Wenn Zahl, andernfalls 0 ist, zeigt `True`.<br /><br /> Z. B. `Format(1, "True/False")` gibt `True`.|  
|`On/Off`|Zeigt `Off` Wenn Zahl, andernfalls 0 ist, zeigt `On`.<br /><br /> Z. B. `Format(1, "On/Off")` gibt `On`.|  
  
### <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Yes/No`, `True/False`, und `On/Off` Formate werden nicht unterstützt.  
  
## <a name="user-defined-numeric-formats"></a>Benutzerdefinierte numerische Formate  
 Der folgenden Tabelle sind die Zeichen, die Sie verwenden können, um eine benutzerdefinierte Zahlenformate erstellen. Diese können verwendet werden, zum Erstellen der `Style` Argument für die `Format` Funktion:  
  
|Zeichen|Beschreibung|  
|-|-|  
|Keiner|Zeigt die Zahl ohne Formatierung an.|  
|(`0`)|Ziffernplatzhalter. Zeigt eine Ziffer oder eine 0 (null). Wenn der Ausdruck eine Ziffer an der Position verfügt, an der 0 (null) in der Formatzeichenfolge angezeigt wird, angezeigt. andernfalls zeigt an dieser Position eine NULL an.<br /><br /> Hat die Zahl sind weniger Ziffern als Nullen (auf beiden Seiten des Dezimaltrennzeichens), in der Formatzeichenfolge, zeigt führende oder nachfolgende Nullen. Hat die Zahl mehr Stellen rechts vom Dezimaltrennzeichen als stehen Nullen auf der rechten Seite des Dezimaltrennzeichens im Formatausdruck rundet die Zahl auf so viele Dezimalstellen wie Nullen vorhanden sind. Hat die Zahl mehr Stellen links vom Dezimaltrennzeichen als stehen Nullen auf der linken Seite des Dezimaltrennzeichens im Formatausdruck, zeigt die zusätzlichen Ziffern unverändert.|  
|(`#`)|Ziffernplatzhalter. Zeigt eine Ziffer oder nichts an. Wenn der Ausdruck eine Ziffer aufweist, in denen die `#` Zeichen wird in der Formatzeichenfolge angezeigt wird; andernfalls zeigt nichts an dieser Position.<br /><br /> Dieses Symbol funktioniert wie die `0` Ziffernplatzhalter, mit der Ausnahme, die führenden und nachfolgenden Nullen angezeigt werden, hat die Zahl weniger Ziffern stehen `#` Zeichen auf beiden Seiten des Dezimaltrennzeichens im Formatausdruck.|  
|(`.`)|Dezimalplatzhalter. Der dezimalplatzhalter legt fest, wie viele Ziffern links und rechts vom Dezimaltrennzeichen angezeigt werden. Wenn der Formatausdruck nur enthält `#` Zeichen links von diesem Symbol, Zahlen, die kleiner als 1 mit dem Dezimaltrennzeichen beginnen. Verwenden Sie zum Anzeigen einer führenden Null angezeigt werden, sollen Bruchzahlen mit 0 (null) als ersten Ziffernplatzhalter links vom Dezimaltrennzeichen an. In manchen Gebietsschemas wird ein Komma als Dezimaltrennzeichen verwendet. Welches Zeichen tatsächliche als Dezimaltrennzeichen in der formatierten Ausgabe verwendet, hängt von dem Zahlenformat vom System erkannt ab. Daher sollten Sie den Zeitraum als dezimalplatzalter in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die ein Komma als Dezimaltrennzeichen verwendet. Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.|  
|(`%`)|Prozentplatzhalter. Den Ausdruck multipliziert mit 100. Das Prozentzeichen (`%`) eingefügt wird, an der Position, wo sie in der Formatzeichenfolge angezeigt wird.|  
|(`,`)|Tausendertrennzeichen an. Das Tausendertrennzeichen trennt Tausender von den Hundertern in eine Zahl mit vier oder mehr Stellen links vom Dezimaltrennzeichen an. Standardmäßige Verwendung des Tausendertrennzeichens wird angegeben, wenn das Format ein Tausendertrennzeichen Ziffernplatzhaltern umgeben enthält (`0` oder `#`).<br /><br /> Ein Tausendertrennzeichen direkt links vom Dezimaltrennzeichen (unabhängig davon, ob ein Dezimaltrennzeichen angegeben ist) oder der äußersten rechten Zeichen in der Zeichenfolge bedeutet "Skalieren die Zahl durch Division durch 1000, gegebenenfalls mit Rundung". Zahlen, die kleiner als 1.000 jedoch größer oder gleich 500 werden angezeigt, als `1`, und Zahlen, die kleiner als 500, als angezeigt werden `0`. Zwei benachbarte Tausendertrennzeichen an dieser Position skalieren, indem Sie einen Faktor von 1 Million sowie einem zusätzlichen Faktor von 1000 für jedes zusätzliche Trennzeichen.<br /><br /> Mehrere Trennzeichen in jeder anderen Position als direkt links vom Dezimaltrennzeichen oder ganz rechts in der Zeichenfolge werden behandelt, als würden Sie die Verwendung eines Tausendertrennzeichens angeben. In manchen Gebietsschemas wird der Punkt als Tausendertrennzeichen verwendet. Welches Zeichen tatsächliche als Tausendertrennzeichen in der formatierten Ausgabe verwendet, hängt von der Zahlenformat, die vom System erkannt wird. Daher sollten Sie das Komma als Tausendertrennzeichen in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die einen Punkt als Tausendertrennzeichen verwendet. Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.<br /><br /> Betrachten Sie beispielsweise die folgenden drei Formatzeichenfolgen:<br /><br /> -   `"#,0."`, welche wird das Tausendertrennzeichen verwendet, um die Zahl 100 Millionen als die Zeichenfolge "100,000,000" zu formatieren.<br />-   `"#0,."`, um die Zahl 100 Millionen als die Zeichenfolge "100000" zu formatieren verwendet eine Skalierung mit einem Faktor von 1000.<br />-   `"#,0,."`, verwendet das Tausendertrennzeichen und die Skalierung durch Eintausend, um die Zahl 100 Millionen als die Zeichenfolge "100,000" zu formatieren.|  
|(`:`)|Trennzeichen für Zeitangaben. In manchen Gebietsschemas unter Umständen andere Zeichen Zeittrennzeichen verwendet werden. Das Trennzeichen für Zeitangaben trennt, Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden. Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet, wird von den Systemeinstellungen bestimmt.|  
|(`/`)|Datumstrennzeichen. In manchen Gebietsschemas unter Umständen andere Zeichen Datumstrennzeichen verwendet werden. Das Trennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden. Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet, wird von den Systemeinstellungen bestimmt.|  
|(`E-``E+``e-``e+`)|Wissenschaftliches Format. Wenn der Formatausdruck mindestens einen Ziffernplatzhalter (`0` oder `#`) auf der linken Seite des `E-`, `E+`, `e-`, oder `e+`, die Zahl im wissenschaftlichen Format angezeigt und `E` oder `e` zwischen der Anzahl und dem Exponenten eingefügt wird. Die Anzahl der Ziffernplatzhalter auf der linken Seite bestimmt die Anzahl der Ziffern im Exponenten. Verwendung `E-` oder `e-` negativen Exponenten ein Minuszeichen (-) zu platzieren. Verwendung `E+` oder `e+` negativen Exponenten ein Minuszeichen (-) und positiven Exponenten ein Pluszeichen zu platzieren. Sie müssen auch Ziffernplatzhalter auf rechts neben diesem Symbol, um die richtige Formatierung einschließen.|  
|`-` `+` `$` ( )|Literalzeichen. Diese Zeichen werden genau wie in der Formatzeichenfolge eingegeben angezeigt. Um ein Zeichen als die hier aufgeführten anzuzeigen, fügen sie davor ein umgekehrter Schrägstrich (`\`), oder schließen Sie ihn in doppelte Anführungszeichen ("").|  
|(`\`)|Zeigt das nächste Zeichen in der Formatzeichenfolge an. Um ein Zeichen anzuzeigen, die besondere Bedeutung als Literalzeichen hat, fügen sie davor ein umgekehrter Schrägstrich (`\`). Der umgekehrte Schrägstrich selbst wird nicht angezeigt. Verwenden des umgekehrten Schrägstrichs ist identisch mit das nächste Zeichen in doppelte Anführungszeichen einschließen. Um einen umgekehrten Schrägstrich anzuzeigen, verwenden Sie zwei umgekehrte Schrägstriche (`\\`).<br /><br /> Beispiele für Zeichen, die nicht angezeigt werden können, als Literalzeichen Formatieren von Datums- und uhrzeitformatierungen Zeichen sind (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, und `:`), die Zeichen zum Formatieren von Zahlen (`#`, `0`, `%`, `E`, `e`, Komma und Punkt), und die Zeichen zum Formatieren von Zeichenfolgen (`@`, `&`, `<`, `>`, und `!`).|  
|(`"``ABC``"`)|Zeigt die Zeichenfolge innerhalb der doppelten Anführungszeichen (""). Um eine Zeichenfolge im Stilargument von Code einzuschließen, verwenden Sie `Chr(34)` zum Einschließen von Text (`34` ist der Zeichencode für ein Anführungszeichen (")).|  
  
### <a name="legacy-code-example"></a>Legacy-Codebeispiel  
 Die folgende Tabelle enthält einige Beispiele für Formatausdrücke für Zahlen. (In allen diesen Beispielen wird davon ausgegangen, dass Ihr Gebietsschema Englisch-US ist) Die erste Spalte enthält die Formatzeichenfolgen für die `Style` Argument der `Format` -Funktion, die anderen Spalten, die die resultierende Ausgabe enthalten, wenn die formatierten Daten den in den Spaltenüberschriften angegebenen Wert verfügt.  
  
|Format (`Style`)|"5" formatiert als|"-5" formatiert als.|als formatiert "0.5"|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Vordefinierte Datums-/Uhrzeitformate  
 Der folgenden Tabelle sind die vordefinierten Datums- und Zeitformate. Diese möglicherweise nach Namen als Formatargument für verwendet werden die `Format` Funktion:  
  
|Formatname|Beschreibung|  
|-|-|  
|`General Date`, oder `G`|Zeigt ein Datum und/oder eine Uhrzeit. Beispielsweise `3/12/2008 11:07:31 AM`. Datumsanzeige wird vom aktuellen Kulturwert in Ihrer Anwendung bestimmt.|  
|`Long Date`, `Medium Date`oder `D`|Zeigt ein Datum entsprechend dem langen Datumsformat Ihrer aktuellen kultureinstellung an. Beispielsweise `Wednesday, March 12, 2008`.|  
|`Short Date`, oder `d`|Zeigt ein Datum unter Verwendung von kurzen Datumsformat Ihrer aktuellen kultureinstellung an. Beispielsweise `3/12/2008`.<br /><br /> Die `d` Zeichen zeigt den Tag in einem benutzerdefinierten Datumsformat.|  
|`Long Time`, `Medium Time`oder `T`|Zeigt eine Uhrzeit mit lange Uhrzeitformat Ihrer aktuellen kultureinstellung an. in der Regel enthält, Stunden, Minuten und Sekunden. Beispielsweise `11:07:31 AM`.|  
|`Short Time` oder `t`|Zeigt eine Uhrzeit, die mit Ihrer aktuellen kultureinstellung kurze Uhrzeitformat. Beispielsweise `11:07 AM`.<br /><br /> Die `t` Zeichen zeigt `AM` oder `PM` Werte für Gebietsschemas, die 12-Stunden-Format in einem benutzerdefinierten Uhrzeitformat verwenden.|  
|`f`|Zeigt das lange Datum und die kurze Uhrzeit Format Ihrer aktuellen kultureinstellung an. Beispielsweise `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Zeigt das lange Datum und lange Zeit entsprechend Ihrer aktuellen kultureinstellung-Format. Beispielsweise `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Zeigt das kurze Datum und kurze Zeit entsprechend Ihrer aktuellen kultureinstellung-Format. Beispielsweise `3/12/2008 11:07 AM`.|  
|`M`, `m`|Zeigt den Monat und Tag eines Datums. Beispielsweise `March 12`.<br /><br /> Die `M` Zeichen zeigt den Monat in einem benutzerdefinierten Datumsformat. Die `m` Zeichen zeigt die Minuten in einem benutzerdefinierten Uhrzeitformat.|  
|`R`, `r`|Formatiert das Datum gemäß der <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> Eigenschaft. Beispielsweise `Wed, 12 Mar 2008 11:07:31 GMT`. Das formatierte Datum passt nicht den Wert von Datum und Uhrzeit an. Sie müssen den Datums-/Uhrzeitwert in GMT anpassen, vor dem Aufruf der `Format` Funktion.|  
|`s`|Formatiert das Datum und Uhrzeit als sortierbaren Index. Beispielsweise `2008-03-12T11:07:31`.<br /><br /> Die `s` Zeichen zeigt die Sekunden in einem benutzerdefinierten Uhrzeitformat.|  
|`u`|Formatiert das Datum und Uhrzeit als sortierbaren GMT-Index. Beispielsweise `2008-03-12 11:07:31Z`.|  
|`U`|Formatiert das Datum und Zeit mit das lange Datum und lange Zeit als GMT. Beispielsweise `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formatiert das Datum als Jahr und Monat. Beispielsweise `March, 2008`.<br /><br /> Die `Y` und `y` Zeichen zeigt das Jahr in einem benutzerdefinierten Datumsformat.|  
  
 Weitere Informationen zu der Anwendung Informationen zur aktuellen Kultur, finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Benutzerdefinierte Datums-/Uhrzeitformate  
 Die folgende Tabelle zeigt die Zeichen, dass Sie zum Erstellen von benutzerdefinierten Datums-/Zeitformate verwenden können. Anders als in früheren Versionen von Visual Basic, sind diese Zeichen Groß-/Kleinschreibung beachtet.  
  
|Zeichen|Beschreibung|  
|-|-|  
|(`:`)|Trennzeichen für Zeitangaben. In manchen Gebietsschemas unter Umständen andere Zeichen Zeittrennzeichen verwendet werden. Das Trennzeichen für Zeitangaben trennt, Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden. Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird, wird vom aktuellen Kulturwert in Ihrer Anwendung bestimmt.|  
|(`/`)|Datumstrennzeichen. In manchen Gebietsschemas unter Umständen andere Zeichen Datumstrennzeichen verwendet werden. Das Trennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden. Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird, wird von der aktuellen Kultur der Anwendung bestimmt.|  
|(`%`)|Wird verwendet, um anzugeben, dass das nachfolgende Zeichen als ein Einzelbuchstabenformat ohne Berücksichtigung der alle nachfolgenden Buchstaben gelesen werden soll. Auch verwendet, um anzugeben, dass ein Einzelbuchstabenformat als benutzerdefiniertes Format gelesen wird. Finden Sie hier weitere Informationen.|  
|`d`|Zeigt den Tag als Zahl ohne führende Null an (z. B. `1`). Verwendung `%d` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`dd`|Zeigt den Tag als Zahl mit führender Null an (z. B. `01`).|  
|`ddd`|Zeigt den Tag als Abkürzung an (z. B. `Sun`).|  
|`dddd`|Zeigt den Tag als vollständigen Namen (z. B. `Sunday`).|  
|`M`|Zeigt den Monat als Zahl ohne führende Null an (Januar wird z. B. als dargestellt `1`). Verwendung `%M` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`MM`|Zeigt den Monat als Zahl mit führender Null an (z. B. `01/12/01`).|  
|`MMM`|Zeigt den Monat als Abkürzung an (z. B. `Jan`).|  
|`MMMM`|Zeigt den Monat als vollständigen Monatsnamen an (z. B. `January`).|  
|`gg`|Zeigt die Zeichenfolge für die Dauer/Zeitraum (z. B. `A.D.`).|  
|`h`|Zeigt die Stunde als Zahl ohne führende Nullen im 12-Stunden-Format (z. B. `1:15:15 PM`). Verwendung `%h` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`hh`|Zeigt die Stunde als Zahl mit führenden Nullen im 12-Stunden-Format (z. B. `01:15:15 PM`).|  
|`H`|Zeigt die Stunde als Zahl ohne führende Nullen im 24-Stunden-Format (z. B. `1:15:15`). Verwendung `%H` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`HH`|Zeigt die Stunde als Zahl mit führenden Nullen im 24-Stunden-Format (z. B. `01:15:15`).|  
|`m`|Zeigt die Minute als Zahl ohne führende Nullen an (z. B. `12:1:15`). Verwendung `%m` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`mm`|Zeigt die Minute als Zahl mit führenden Nullen an (z. B. `12:01:15`).|  
|`s`|Zeigt die Sekunde als Zahl ohne führende Nullen an (z. B. `12:15:5`). Verwendung `%s` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`ss`|Zeigt die Sekunde als Zahl mit führenden Nullen an (z. B. `12:15:05`).|  
|`f`|Zeigt Sekundenbruchteile an. Z. B. `ff` zeigt Hundertstelsekunden an, aus, während `ffff` zeigt Zehntausendstelsekunden Sekunden. Sie können bis zu sieben `f` Symbole im benutzerdefinierten Format. Verwendung `%f` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`t`|Verwendet ein 12-Stunden-Format und zeigt die Großbuchstaben `A` für jede Stunde vor Mittag zeigt den Großbuchstaben `P` für jede Stunde zwischen Mittag und 23:59 Uhr Verwendung `%t` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`tt`|Für Gebietsschemas, die 12-Stunden-Format verwenden, zeigt die Großbuchstaben `AM` für jede Stunde vor Mittag zeigt den Großbuchstaben `PM` für jede Stunde zwischen Mittag und 23:59 Uhr<br /><br /> Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigt nichts an.|  
|`y`|Zeigt die Jahreszahl (0-9) ohne führende Nullen an. Verwendung `%y` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`yy`|Zeigt das Jahr im zweistelligen numerischen Format mit einer führenden Null an, an, falls zutreffend.|  
|`yyy`|Zeigt das Jahr im vierstelligen numerischen Format an.|  
|`yyyy`|Zeigt das Jahr im vierstelligen numerischen Format an.|  
|`z`|Zeigt den Zeitzonenunterschied ohne führende Null an (z. B. `-8`). Verwendung `%z` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`zz`|Zeigt den Zeitzonenunterschied mit einer führenden Null an (z. B. `-08`)|  
|`zzz`|Zeigt den vollständigen Zeitzonenunterschied (z. B. `-08:00`)|  
  
### <a name="legacy-code-example"></a>Legacy-Codebeispiel  
 Im folgenden sind Beispiele für benutzerdefinierte Datums- und Zeitformate für `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Anzeige|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die minimale zeitauflösung für ein Gerät wird vom Hersteller des Geräts bestimmt. Wenn die zeitauflösung für das Gerät grob genug ist, ist die `f` Formatzeichen gibt 0 bei Ausführung auf diesem Gerät.  
  
   
  
## Examples  
 Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der `Format`-Funktion zur Formatierung von Werten mit `String`-Formaten und benutzerdefinierten Formaten. Die tatsächlich von Ihrem System ausgegebene Formatierung von Datumstrennzeichen (`/`), Trennzeichen für Zeitangaben (`:`) und AM/PM-Indikatoren (`t` und `tt`) richtet sich nach den Gebietsschemaeinstellungen des Codes. Wenn Datums- und Zeitangaben in der Entwicklungsumgebung angezeigt werden, werden das 24-Stunden-Zeitformat und das kurze Datumsformat des für den Code ausgewählten Gebietsschemas verwendet.  
  
> [!NOTE]
>  Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigen die AM/PM-Indikatoren (`t` und `tt`) nichts an.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Remarks" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses. See "Remarks" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Remarks" for values.</param>
        <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
        <returns>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden stattdessen übereinstimmenden regionalen-Settings-Werte des Computers verwendet.  
  
 Die Position des Währungssymbols relativ zu den Currency-Wert wird von regionalen Einstellungen des Systems bestimmt.  
  
> [!NOTE]
>  Alle Einstellungsinformationen stammen aus dem Gebietsschema der Anwendung. Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt. Aber sie können programmgesteuert geändert werden mithilfe von .NET Framework, mit Ausnahme von führenden Null an, die aus stammt die `Number` Registerkarte.  
  
 Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente im folgenden aufgeführten Enumerationswerte für einen dreifachen Zustand.  
  
|Wert|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Regionalen Einstellungen des Computers|  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `FormatCurrency`-Funktion.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Number of digits after decimal point is greater than 99.</exception>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, <see langword="DateFormat.GeneralDate" /> is used.</param>
        <summary>Returns a string expression representing a date/time value.</summary>
        <returns>Returns a string expression representing a date/time value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Date` Datentyp immer sowohl Datums-und Uhrzeitinformationen enthält. Bei der typkonvertierung wird berücksichtigt Visual Basic 1/1/1 (1. Januar des Jahres 1) auf einen neutralen Wert für Datum und 00:00:00 (Mitternacht) einen neutralen Wert für die Zeit sein werden. Wenn Sie nicht Formatieren einer `Date` Wert als Datum/Uhrzeit-Zeichenfolge, `FormatDateTime` enthält keine neutralen Werte in der Ergebniszeichenfolge. Wenn Sie #1/1/0001 konvertieren, z. B. 9:30:00 # in eine Zeichenfolge, die das Ergebnis wird "9:30:00 Uhr"; Die Datumsinformationen wird unterdrückt. Die Datumsinformationen ist jedoch weiterhin vorhanden, in der ursprünglichen `Date` Wert und kann mit Funktionen wiederhergestellt werden, z. B. `DatePart`.  
  
> [!NOTE]
>  Übergeben der `Expression` Argument als ein `String` Zeichenliteral `FormatDateTime` interpretiert es gemäß der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Ihrer Anwendung festlegen. Jedoch wenn Sie ihn als übergeben eine `Date` literal, verwenden Sie das Format #mm/tt/jjjj #, da `FormatDateTime` immer interpretiert eine `Date` Zeichenfolgenliteral entsprechend der Kultur Englisch (USA). Dies ist erforderlich, da, wenn eine Anwendung entwickelt wurde und mit programmiert `Date` Literale aus einem Kultur, aber anschließend ausgeführt wird, auf einer Plattform mit einer anderen Kultur, die `Date` Literale konnte nicht ordnungsgemäß analysiert werden.  
  
 Die `NamedFormat` Argument weist die folgenden Einstellungen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`DateFormat.GeneralDate`|Zeigen Sie ein Datum und/oder eine Uhrzeit. Ein Date-Teil als kurze Datumsformat angezeigt. Bei ein Uhrzeitteil wird als eine lange Zeit anzeigen. Falls vorhanden, werden beide Teile angezeigt.|  
|`DateFormat.LongDate`|Zeigen Sie ein Datum in das lange Datumsformat in regionalen Einstellungen des Computers angegeben.|  
|`DateFormat.ShortDate`|Zeigt ein Datum unter Verwendung des kurzen Datumsformat in regionalen Einstellungen des Computers angegeben.|  
|`DateFormat.LongTime`|Zeigt eine Uhrzeit, die Verwendung des Zeitformats in regionalen Einstellungen des Computers angegeben.|  
|`DateFormat.ShortTime`|Zeigt eine Uhrzeit mit dem 24-Stunden-Format (hh: mm).|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `FormatDateTime` Funktion.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> setting is not valid.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a number.</summary>
        <returns>Returns an expression formatted as a number.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden die Werte für ausgelassene Argumente durch die gebietsschemaeinstellungen bereitgestellt.  
  
> [!NOTE]
>  Alle Einstellungsinformationen stammen aus dem Gebietsschema der Anwendung. Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt. Allerdings können sie programmgesteuert geändert werden mithilfe von .NET Framework.  
  
 Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente haben die folgenden Einstellungen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Regionalen Einstellungen des Computers|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die `FormatNumber` Funktion.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
        <returns>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden die Werte für ausgelassene Argumente durch die gebietsschemaeinstellungen bereitgestellt.  
  
> [!NOTE]
>  Alle Einstellungsinformationen stammen aus dem Gebietsschema der Anwendung. Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt. Allerdings können sie programmgesteuert geändert werden mithilfe von .NET Framework.  
  
 Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente haben die folgenden Einstellungen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Regionalen Einstellungen des Computers|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `FormatPercent` Funktion.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Index">Required. <see langword="Integer" /> expression. The (1-based) index of the character in <c>str</c> to be returned.</param>
        <summary>Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</summary>
        <returns>
          <see langword="Char" /> value representing the character from the specified index in the supplied string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Index` ist kleiner als 1 oder größer als der Index des letzten Zeichens in `str`, `ArgumentException` ausgelöst.  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie Sie mit der `GetChar` -Funktion zum Zurückgeben eines Zeichens aus einem angegebenen Index in einer `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.  The integer is a one-based index if a match is found.  If no match is found, the function returns zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description> The starting position for the search, which defaults to the first character position.  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die `InStr` Funktion wird beim Analysieren von Zeichenfolgen verwendet.  
  
> [!NOTE]
>  Die `InStrB` -Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt einer Zeichenposition. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `InStrB` wird nicht mehr unterstützt.  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Wert|Beschreibung|  
|-|-|-|  
|`Binary`|0|Führt einen binären Vergleich|  
|`Text`|1|Führt einen Textvergleich|  
  
   
  
## Examples  
 In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die `InStr` Funktion wird beim Analysieren von Zeichenfolgen verwendet.  
  
> [!NOTE]
>  Die `InStrB` -Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt einer Zeichenposition. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `InStrB` wird nicht mehr unterstützt.  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Wert|Beschreibung|  
|-|-|-|  
|`Binary`|0|Führt einen binären Vergleich|  
|`Text`|1|Führt einen Textvergleich|  
  
   
  
## Examples  
 In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Required. String expression being searched.</param>
        <param name="StringMatch">Required. String expression being searched for.</param>
        <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
        <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStrRev returns  </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> is zero-length  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is zero-length  </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
              <description> Position at which the first match is found, starting with the right side of the string.  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass die Syntax für die `InStrRev` Funktion ist nicht identisch mit der Syntax für die `InStr` Funktion.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich.|  
|`Text`|Führt einen Textvergleich durch.|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `InStrRev` Funktion.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine Parität zwischen der `Join` und `Split` Funktionen. Die `Join` -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben. Die `Split` Funktion nimmt eine Zeichenfolge, und trennt sie mit dem Trennzeichen um ein Array von Zeichenfolgen zurückzugeben. Ein wichtiger Unterschied ist jedoch `Join` können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten `Split` nur Zeichenfolgen, die mit einem einzigen Trennzeichen trennen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die `Join` Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine Parität zwischen der `Join` und `Split` Funktionen. Die `Join` -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben. Die `Split` Funktion nimmt eine Zeichenfolge, und trennt sie mit dem Trennzeichen um ein Array von Zeichenfolgen zurückzugeben. Ein wichtiger Unterschied ist jedoch `Join` können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten `Split` nur Zeichenfolgen, die mit einem einzigen Trennzeichen trennen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die `Join` Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character converted to lowercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Großbuchstaben konvertiert werden in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge zu bearbeiten, so dass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn die Anwendung die Sicherheitsfragen die richtigen Entscheidungen basierend auf dem Ergebnis eines Vergleichs oder einer Änderung der Groß-/Kleinschreibung verwendet, und dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `LCase` -Funktion eine Zeichenfolge in Kleinbuchstaben zurückgibt.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur Großbuchstaben konvertiert werden in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge zu bearbeiten, so dass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn die Anwendung die Sicherheitsfragen die richtigen Entscheidungen basierend auf dem Ergebnis eines Vergleichs oder einer Änderung der Groß-/Kleinschreibung verwendet, und dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `LCase` -Funktion eine Zeichenfolge in Kleinbuchstaben zurückgibt.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the leftmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion. Bei Verwendung in einer Windows Forms-Anwendung oder einer anderen Klasse, die eine `Left` -Eigenschaft, müssen Sie vollständig-Funktion mit qualifizieren `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  Die `LeftB` -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LeftB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Left` -Funktion zum Zurückgeben einer Teilzeichenfolge einer angegebenen `String`. In einer Klasse, die eine `Left` -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der `Left` Funktion.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie sie auf die Datei geschrieben wird die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in die Datei geschrieben wird die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in Objekten, das die Größe der Zeichenfolge ist, in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attribut, falls verfügbar, beim Bestimmen der Größe der `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion kann nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl der Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen variabler Länge in benutzerdefinierte Datentypen verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Hinweise für Entwickler intelligente Geräte  
 Die `Len` -Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält einen anderen Typ eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a left-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird die zurückgegebene Zeichenfolge auf die angegebene Länge gekürzt. Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen auf das rechte Ende der zurückgegebenen Zeichenfolge auf die entsprechende Länge erzeugt hinzugefügt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `LSet` Funktion.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string that contains characters from a specified string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one-based.</param>
        <summary>Returns a string that contains all the characters starting from a specified position in a string.</summary>
        <returns>A string that consists of all the characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.  
  
 Visual Basic verfügt über eine `Mid` Funktion und ein `Mid` Anweisung. Diese Elemente beide für eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die `Mid` Funktionsergebnis ist die Zeichen bei der die `Mid` Anweisung ersetzt die Zeichen. Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Die `MidB` -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic-Zeichenfolgen werden in Unicode und `MidB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Die letzte Zeile in diesem Beispiel verwendet diese Überladung der `Mid` Funktion, um die fünften und nachfolgende Zeichen aus einer Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one based.</param>
        <param name="Length">Optional. <see langword="Integer" /> expression. Number of characters to return. If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</param>
        <summary>Returns a string that contains a specified number of characters starting from a specified position in a string.</summary>
        <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.  
  
 Visual Basic verfügt über eine `Mid` Funktion und ein `Mid` Anweisung. Diese Elemente beide für eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die `Mid` Funktionsergebnis ist die Zeichen bei der die `Mid` Anweisung ersetzt die Zeichen. Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Die `MidB` -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle Visual Basic-Zeichenfolgen werden in Unicode und `MidB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Die ersten beiden `Mid` Funktionen in diesem Beispiel wird die angegebene Anzahl von Zeichen zurückgeben, aus einer Zeichenfolge, beginnend mit den angegebenen Positionen. (Die letzte Funktion veranschaulicht die <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> überladen werden und nur den Ausgangspunkt für die zeichenfolgenextraktion angibt.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression containing substring to replace.</param>
        <param name="Find">Required. Substring being searched for.</param>
        <param name="Replacement">Required. Replacement substring.</param>
        <param name="Start">Optional. Position within <c>Expression</c> that starts a substring used for replacement. The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions. If omitted, 1 is assumed.</param>
        <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
        <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
        <returns>
          <see langword="Replace" /> returns the following values.  
  
 <list type="table"><item><term> If  </term><description> Replace returns  </description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length  </term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0  </term><description> Copy of <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von der `Replace` Funktion ist eine Zeichenfolge, die an der angegebenen Position beginnt `Start` und endet am Ende der `Expression` Zeichenfolge mit de vorgenommenen Ersetzungen gemäß der `Find` und `Replace` Werte.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich|  
|`Text`|Führt einen Textvergleich|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die `Replace` Funktion.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the rightmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" />. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion. Bei der Verwendung in einem Windows-Formular oder einer anderen Klasse, die eine `Right` -Eigenschaft, müssen Sie vollständig-Funktion mit qualifizieren `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  Die `RightB` -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte, anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (DBCS)-Satz Anwendungen. Alle aktuelle Visual Basic-Zeichenfolgen werden in Unicode und `RightB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Right` -Funktion zum Zurückgeben einer Teilzeichenfolge einer angegebenen `String`. In einer Klasse, die eine `Right` -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der `Right` Funktion.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a right-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a right-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Source` ist länger als `Length`, `RSet` fügt nur die äußersten linken Zeichen bis zur Länge `Source`, in der zurückgegebenen Zeichenfolge. Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden das linke Ende der Zeichenfolge, die entsprechende Länge erzeugt Leerzeichen hinzugefügt. Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird es auf die angegebene Länge gekürzt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `RSet` Funktion.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The number of spaces you want in the string.</param>
        <summary>Returns a string consisting of the specified number of spaces.</summary>
        <returns>Returns a string consisting of the specified number of spaces.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Space` Funktion ist nützlich für das Formatieren der Ausgabe, und Löschen von Daten in Zeichenfolgen mit fester Länge.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Space` Funktion gibt eine Zeichenfolge, bestehend aus einer angegebenen Anzahl von Leerzeichen zurück.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="String" /> expression containing substrings and delimiters.</param>
        <param name="Delimiter">Optional. Any single character used to identify substring limits. If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</param>
        <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</param>
        <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
        <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
        <returns>
          <see langword="String" /> array. If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig oder wenn `Limit` gleich 1, die `Split` Funktion wird die Eingabezeichenfolge an jedem Vorkommen der Trennzeichenfolge und gibt die Teilzeichenfolgen in einem Array zurück. Wenn die `Limit` -Parameter ist größer als 0 (null), die `Split` Funktion teilt die Zeichenfolge bei der ersten `Limit`-1 Vorkommen des Trennzeichens, und gibt ein Array mit den resultierenden untergeordneten Zeichenfolgen zurück. Z. B. `Split("a:b:c", ":")` gibt das Array `{"a", "b", "c"}`, während `Split("a:b:c", ":", 2)` gibt das Array `{"a", "b:c"}`.  
  
 Wenn die `Split` Funktion zwei Trennzeichen in einer Zeile oder ein Trennzeichen am Anfang oder Ende der Zeichenfolge auftritt, diese so interpretiert, als Sie rund um eine leere Zeichenfolge (""). Z. B. `Split("xx", "x")` das Array mit drei leere Zeichenfolgen zurückgegeben wird: ein vom Anfang der Zeichenfolge und der ersten "x", eine von, einschließlich der zwei "x" Zeichenfolgen und eine der letzten "X" und das Ende der Zeichenfolge.  
  
 Diese Tabelle wird veranschaulicht, wie das optionale `Delimiter`, `Limit`, und `Compare` Parameter können das Verhalten des Ändern der `Split` Funktion.  
  
|Split-Aufruf|Rückgabewert|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice und Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|Wert|  
|-|-|-|  
|`CompareMethod.Binary`|Führt einen binären Vergleich|0|  
|`CompareMethod.Text`|Führt einen Textvergleich|1|  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie zum Aufteilen einer Zeichenfolge an ihren Leerzeichen wird.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie zum Aufteilen von Zeichenfolgen mit mehreren Trennzeichen in einer Zeile und die leeren Zeichenfolgen herausgefiltert wird.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. Any valid <see langword="String" /> expression.</param>
        <param name="String2">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns -1, 0, or 1, based on the result of a string comparison.</summary>
        <returns>The <see langword="StrComp" /> function has the following return values.  
  
 <list type="table"><item><term> If  </term><description> StrComp returns  </description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1  </description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0  </description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichenfolgen werden anhand alphanumerischer ab, mit dem ersten Zeichen verglichen. Weitere Informationen zu binäre Vergleiche Textvergleiche und Sortierreihenfolge zu erhalten, finden Sie unter [Option Compare-Anweisung](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich, basierend auf einer Sortierreihenfolge, die von der internen binären Darstellungen der Zeichen abgeleitet.|  
|`Text`|Führt einen Textvergleich, basierend auf einer schreibungsunabhängigen Textsortierreihenfolge Maßgabe Ihres Systems `LocaleID` Wert.|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrComp` Funktion, um die Ergebnisse eines Zeichenfolgenvergleichs zurück.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> value is not valid.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression to be converted.</param>
        <param name="Conversion">Required. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member. The enumeration value specifying the type of conversion to perform.</param>
        <param name="LocaleID">Optional. The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value. (The system <see langword="LocaleID" /> value is the default.)</param>
        <summary>Returns a string converted as specified.</summary>
        <returns>Returns a string converted as specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konstanten `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, und `VbStrConv.Hiragana` kann dazu führen, dass Laufzeitfehler bei der Verwendung in Gebietsschemas, in dem sie nicht gelten, aber nicht immer: die Konstanten `VbStrConv.Katakana` und `VbStrConv.Hiragana`können in einem nicht japanischen-System verwendet werden, mit das japanische Sprachpaket installiert. Darüber hinaus verwenden, der Konstanten `VbStrConv.Wide` und `VbStrConv.Narrow` auf jedem System mit eine ostasiatische Sprache installiert werden.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge zu bearbeiten, so dass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn die Anwendung die Sicherheitsfragen die richtigen Entscheidungen basierend auf dem Ergebnis eines Vergleichs oder einer Änderung der Groß-/Kleinschreibung verwendet, und dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Die `Conversion`-Argumenteinstellungen lauten:  
  
|Enumerationsmember|Beschreibung|  
|-|-|  
|`VbStrConv.None`|Führt keine Konvertierung|  
|`VbStrConv.LinguisticCasing`|Verwendet linguistische Regeln für Groß-/Kleinschreibung, anstatt File System (Standard). Mit gültigen `VbStrConv.UpperCase` und `VbStrConv.LowerCase` nur.|  
|`VbStrConv.UpperCase`|Konvertiert die Zeichenfolge in Großbuchstaben.|  
|`VbStrConv.LowerCase`|Konvertiert die Zeichenfolge in Kleinbuchstaben.|  
|`VbStrConv.ProperCase`|Konvertiert den ersten Buchstaben jedes Worts in einer Zeichenfolge in Großbuchstaben.|  
|`VbStrConv.Wide` <sup>*</sup>|Konvertiert schmale Zeichen (halbe Breite), in der Zeichenfolge in Breitzeichen (normale Breite) Zeichen. [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Konvertiert die Breite (normale Breite)-Zeichen in der Zeichenfolge in schmale (halbe Breite) Zeichen.|  
|`VbStrConv.Katakana` <sup>**</sup>|Konvertiert Hiragana-Zeichen in der Zeichenfolge in Katakana-Zeichen.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Konvertiert Katakana-Zeichen in der Zeichenfolge in Hiragana-Zeichen.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Konvertiert traditionelle chinesische Zeichen in vereinfachtem Chinesisch an.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Vereinfachte chinesische Zeichen in traditionellem Chinesisch konvertiert.|  
  
 <sup>*</sup> Gilt für asiatische Gebietsschemas.  
  
 <sup>**</sup> Gilt nur für Japan.  
  
> [!NOTE]
>  Diese Konstanten sind in der .NET Framework common Language Runtime angegeben. Daher können sie eine beliebige Stelle im Code anstelle von tatsächlichen Werten verwendet werden. Die meisten kombiniert werden können (z. B. `UpperCase + Wide`), außer wenn sie sich gegenseitig ausschließende sind (z. B. `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Im folgenden sind die gültigen Worttrennzeichen für Groß-/Kleinschreibung korrekt: Null (`Chr$(0)`), horizontaler Tabulator (`Chr$(9)`), Zeilenvorschub (`Chr$(10)`), vertikaler Tabulator (`Chr$(11)`), Seitenvorschub (`Chr$(12)`), Wagenrücklauf (`Chr$(13)`), Leerzeichen () Einzelbyte-Zeichensatz) (`Chr$(32)`). Der tatsächliche Wert für ein Leerzeichen, was die voller oder halber Breite sein kann, variiert je nach Land/Region für ostasiatische Kulturen.  
  
   
  
## Examples  
 In diesem Beispiel konvertiert Text in Kleinbuchstaben.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` wiederholter Zeichen bestehen. Das Zeichen, das die Zeichenfolge bildet, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrDup` Funktion zum Zurückgeben einer Zeichenfolge der duplizierten Zeichen.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` wiederholter Zeichen bestehen. Das Zeichen, das die Zeichenfolge bildet, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrDup` Funktion zum Zurückgeben einer Zeichenfolge der duplizierten Zeichen.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` wiederholter Zeichen bestehen. Das Zeichen, das die Zeichenfolge bildet, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrDup` Funktion zum Zurückgeben einer Zeichenfolge der duplizierten Zeichen.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression whose characters are to be reversed. If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</param>
        <summary>Returns a string in which the character order of a specified string is reversed.</summary>
        <returns>Returns a string in which the character order of a specified string is reversed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `StrReverse` Funktionsergebnis ist eine Zeichenfolge, die dieselben Zeichen wie enthält `Expression`, aber in umgekehrter Reihenfolge.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur aus Kleinbuchstaben konvertiert werden in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge zu bearbeiten, so dass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn die Anwendung die Sicherheitsfragen die richtigen Entscheidungen basierend auf dem Ergebnis eines Vergleichs oder einer Änderung der Groß-/Kleinschreibung verwendet, und dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur aus Kleinbuchstaben konvertiert werden in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge zu bearbeiten, so dass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn die Anwendung die Sicherheitsfragen die richtigen Entscheidungen basierend auf dem Ergebnis eines Vergleichs oder einer Änderung der Groß-/Kleinschreibung verwendet, und dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>
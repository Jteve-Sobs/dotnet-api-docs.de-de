<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3588ff13fe448286520feaf805b4881898ea54a7" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70614532" /></Metadata><TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="beace-101">Eine Visual Basic-<see langword="Collection" /> ist eine geordnete Menge von Elementen, auf die als Einheit verwiesen werden kann.</span><span class="sxs-lookup"><span data-stu-id="beace-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="beace-102">Wenn möglich, sollten Sie anstelle eines Visual Basic <xref:System.Collections.Generic?displayProperty=nameWithType> `Collection`die generischen Auflistungen im <xref:System.Collections.Concurrent> -Namespace oder im-Namespace verwenden.</span><span class="sxs-lookup"><span data-stu-id="beace-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="beace-103">Weitere Informationen finden Sie unter [Collections](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="beace-103">For more information, see [Collections](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="beace-104">Das Visual Basic `Collection` -Objekt stellt eine bequeme Möglichkeit dar, auf eine verwandte Gruppe von Elementen als einzelnes Objekt zu verweisen.</span><span class="sxs-lookup"><span data-stu-id="beace-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="beace-105">Die Elemente oder *Elemente*in einer Auflistung müssen nur durch die Tatsache verknüpft werden, dass Sie in der Auflistung vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="beace-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="beace-106">Elemente einer Auflistung müssen nicht denselben Datentyp aufweisen.</span><span class="sxs-lookup"><span data-stu-id="beace-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="beace-107">Sie können eine Sammlung auf die gleiche Weise wie andere Objekte erstellen, wie im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="beace-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="beace-108">Nachdem Sie eine Sammlung erstellt haben, können Sie eine der folgenden Aktionen ausführen:</span><span class="sxs-lookup"><span data-stu-id="beace-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="beace-109">Fügen Sie ein-Element <xref:Microsoft.VisualBasic.Collection.Add%2A> mit der-Methode hinzu.</span><span class="sxs-lookup"><span data-stu-id="beace-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="beace-110">Entfernen Sie ein Element mit <xref:Microsoft.VisualBasic.Collection.Remove%2A> der-Methode.</span><span class="sxs-lookup"><span data-stu-id="beace-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="beace-111">Entfernen Sie alle-Elemente <xref:Microsoft.VisualBasic.Collection.Clear%2A> mit der-Methode.</span><span class="sxs-lookup"><span data-stu-id="beace-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="beace-112">Erfahren Sie, wie viele Elemente die Auflistung mit der <xref:Microsoft.VisualBasic.Collection.Count%2A> -Eigenschaft enthält.</span><span class="sxs-lookup"><span data-stu-id="beace-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="beace-113">Überprüfen Sie, ob ein bestimmtes Element mit <xref:Microsoft.VisualBasic.Collection.Contains%2A> der-Methode vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="beace-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="beace-114">Gibt ein bestimmtes Element aus der Auflistung mit der <xref:Microsoft.VisualBasic.Collection.Item%2A> -Eigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="beace-115">Iterieren Sie die gesamte Auflistung mit den [for each-... Next-Anweisung](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="beace-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="beace-116">Obwohl das Visual Basic `Collection` Objekt über Funktionen verfügt, die `Collection` mit dem Objekt in Visual Basic 6,0 identisch sind, können die beiden nicht in einer com-Umgebung zusammenarbeiten.</span><span class="sxs-lookup"><span data-stu-id="beace-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="beace-117">Beim Durchlaufen einer Visual Basic `Collection` handelt es sich nicht um eine Thread sichere Prozedur.</span><span class="sxs-lookup"><span data-stu-id="beace-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="beace-118">Auch wenn die Auflistung synchronisiert ist, können andere Threads die Auflistung weiterhin ändern, sodass der Enumerator eine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="beace-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="beace-119">Um die Thread Sicherheit während der Enumeration zu gewährleisten, Sperren Sie entweder die Auflistung, oder fangen Sie die Ausnahmen ab, die durch Änderungen von anderen Threads entstehen.</span><span class="sxs-lookup"><span data-stu-id="beace-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="beace-120">Weitere Informationen zum Sperren eines Programmier Elements finden Sie unter [SyncLock-Anweisung](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="beace-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-121">Im folgenden Beispiel werden das `Collection` - `names` Objekt und ein Dialogfeld erstellt, mit dem ein Benutzer der Auflistung Objekte (Namen) hinzufügen kann.</span><span class="sxs-lookup"><span data-stu-id="beace-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="beace-122">Anschließend werden die Namen in der Auflistung angezeigt, und schließlich wird die Auflistung geleert, ohne das `Collection` Objekt selbst zu verwerfen.</span><span class="sxs-lookup"><span data-stu-id="beace-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="beace-123">Um zu sehen, wie dies funktioniert, wählen Sie den Befehl **Klasse hinzufügen** aus dem Menü **Projekt** aus, `instanceName` und deklarieren Sie eine öffentliche Variable `Public instanceName`, die auf Modulebene von `nameClass` (Type) aufgerufen wird, um die Namen der einzelnen Instanzen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="beace-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="beace-124">Belassen Sie den Standardnamen `nameClass`als.</span><span class="sxs-lookup"><span data-stu-id="beace-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="beace-125">Kopieren Sie den folgenden Code, fügen Sie ihn in den Abschnitt " **Allgemein** " eines anderen Moduls ein, und `classNamer` starten Sie ihn mit der-Anweisung in einer anderen Prozedur.</span><span class="sxs-lookup"><span data-stu-id="beace-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="beace-126">(Dieses Beispiel funktioniert nur mit Host Anwendungen, die-Klassen unterstützen.)</span><span class="sxs-lookup"><span data-stu-id="beace-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="beace-127">Erstellt ein neues <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt von Visual Basic und gibt dieses zurück</span><span class="sxs-lookup"><span data-stu-id="beace-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-128">Die von diesem Konstruktor zurückgegebene Visual Basic Auflistung ist leer, und es ist keine anfängliche Kapazität zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="beace-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="beace-129">Visual Basic Sammlungen sind [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] nicht mit den in den <xref:System.Collections?displayProperty=nameWithType>Namespaces, <xref:System.Collections.Generic?displayProperty=nameWithType>und <xref:System.Collections.Specialized?displayProperty=nameWithType> verfügbaren Sammlungen kompatibel.</span><span class="sxs-lookup"><span data-stu-id="beace-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-130">Im folgenden Beispiel wird eine neue Visual Basic-Auflistung erstellt und der-Variablen `coll`zugewiesen:</span><span class="sxs-lookup"><span data-stu-id="beace-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="beace-131">Dieses `Collection` Objekt ist einsbasiert, d. h. die Indexwerte der Elemente liegen zwischen 1 und dem Wert `Count` der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="beace-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="beace-132">Visual Basic Auflistungen enthalten Elemente <xref:System.Object>vom Typ.</span><span class="sxs-lookup"><span data-stu-id="beace-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="beace-133">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="beace-133">Required.</span></span> <span data-ttu-id="beace-134">Ein Objekt eines beliebigen Typs, das das Element angibt, das der Auflistung hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="beace-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="beace-135">Optional.</span><span class="sxs-lookup"><span data-stu-id="beace-135">Optional.</span></span> <span data-ttu-id="beace-136">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf dieses neue Element in der Auflistung zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="beace-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="beace-137">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="beace-137">Optional.</span></span> <span data-ttu-id="beace-138">Ein Ausdruck, der eine relative Position in der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="beace-139">Das hinzuzufügende Element wird in der Auflistung vor dem Element platziert, das vom <paramref name="Before" />-Argument angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="beace-139">The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument.</span></span> <span data-ttu-id="beace-140">Wenn <paramref name="Before" /> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung handeln.</span><span class="sxs-lookup"><span data-stu-id="beace-140">If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="beace-141">Ist <paramref name="Before" /> ein <see langword="String" />-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="beace-141">If <paramref name="Before" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="beace-142">Sie können nicht gleichzeitig <paramref name="Before" /> und <paramref name="After" /> festlegen.</span><span class="sxs-lookup"><span data-stu-id="beace-142">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <param name="After"><span data-ttu-id="beace-143">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="beace-143">Optional.</span></span> <span data-ttu-id="beace-144">Ein Ausdruck, der eine relative Position in der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="beace-145">Das hinzuzufügende Element wird in der Auflistung nach dem Element platziert, das vom <paramref name="After" />-Argument angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="beace-145">The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument.</span></span> <span data-ttu-id="beace-146">Wenn <paramref name="After" /> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <see langword="Count" />-Eigenschaft der Auflistung handeln.</span><span class="sxs-lookup"><span data-stu-id="beace-146">If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="beace-147">Ist <paramref name="After" /> ein <see langword="String" />-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="beace-147">If <paramref name="After" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="beace-148">Sie können nicht gleichzeitig <paramref name="Before" /> und <paramref name="After" /> festlegen.</span><span class="sxs-lookup"><span data-stu-id="beace-148">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <summary><span data-ttu-id="beace-149">Fügt einem <see langword="Collection" />-Objekt ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="beace-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-150">Das `Before` - `After` oder-Argument muss auf ein vorhandenes Element der Auflistung verweisen; andernfalls tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="beace-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="beace-151">Wenn das `Before` -Argument `After` und das-Argument ausgelassen werden, wird das neue-Objekt am Ende der Collection hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="beace-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="beace-152">Ein Fehler tritt auch auf, wenn `Key` ein angegebener Wert mit dem Schlüssel für ein vorhandenes Element der Auflistung übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="beace-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-153">Im folgenden Beispiel wird die `Add` -Methode zum `child` Hinzufügen von-Instanzen einer Klasse `child` mit dem `Public` Namen `name` , die eine Eigenschaft enthält `family`, zu einer Auflistung mit dem Namen verwendet.</span><span class="sxs-lookup"><span data-stu-id="beace-153">The following example uses the `Add` method to add `child` objects - instances of a class called `child` containing a `Public` property `name` - to a collection called `family`.</span></span> <span data-ttu-id="beace-154">Um zu sehen, wie dies funktioniert, <xref:System.Windows.Forms.Form> erstellen Sie <xref:System.Windows.Forms.Button> eine mit zwei- <xref:System.Windows.Forms.Control.Text%2A> Steuerelementen, `List`und legen Sie deren Eigenschaften auf `Add` und fest</span><span class="sxs-lookup"><span data-stu-id="beace-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="beace-155">Fügen Sie die `family` `child` Klassendefinition und die Deklaration dem Formular Code hinzu.</span><span class="sxs-lookup"><span data-stu-id="beace-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="beace-156">Ändern Sie `_Click` die Ereignishandler für die Schaltflächen **Hinzufügen** und **auflisten** wie gezeigt.</span><span class="sxs-lookup"><span data-stu-id="beace-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="beace-157">Mithilfe der Schaltfläche **Hinzufügen** können Sie untergeordnete Elemente hinzufügen.</span><span class="sxs-lookup"><span data-stu-id="beace-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="beace-158">Die Schaltfläche **Liste** zeigt die Namen aller untergeordneten Elemente an.</span><span class="sxs-lookup"><span data-stu-id="beace-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="beace-159">Löscht alle Elemente eines <see langword="Collection" />-Objekts in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="beace-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-160">Die `Clear` -Methode leert die Auflistung und <xref:Microsoft.VisualBasic.Collection.Count%2A> setzt die zugehörige-Eigenschaft auf 0 zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="beace-161">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="beace-161">Required.</span></span> <span data-ttu-id="beace-162">Ein <see langword="String" />-Ausdruck, der den Schlüssel angibt, nach dem die Elemente der Auflistung durchsucht werden sollen.</span><span class="sxs-lookup"><span data-stu-id="beace-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="beace-163">Gibt einen Wert zurück, der angibt, ob ein <see langword="Collection" />-Objekt in Visual Basic ein Element mit einem bestimmten Schlüssel enthält.</span><span class="sxs-lookup"><span data-stu-id="beace-163">Returns a value that indicates whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="beace-164"><see langword="true" />, wenn das Visual Basic <see langword="Collection" />-Objekt ein Element mit einem bestimmten Schlüssel enthält, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="beace-164"><see langword="true" /> if Visual Basic <see langword="Collection" /> object contains an element with a specific key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-165">`Contains`gibt `True` zurück, wenn die Auflistung ein Element mit einem exakt überein `Key`stimmenden Schlüssel enthält.</span><span class="sxs-lookup"><span data-stu-id="beace-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="beace-166">Andernfalls gibt `Contains` den Wert `False` zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="beace-167">Case wird beim Abgleichen von Schlüsselwerten ignoriert.</span><span class="sxs-lookup"><span data-stu-id="beace-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="beace-168">Eine Visual Basic `Collection` kann einige Elemente enthalten, die über Schlüssel und andere Elemente ohne Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="beace-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="beace-169">Dies hängt davon ab, ob der aufrufen <xref:Microsoft.VisualBasic.Collection.Add%2A> der-Methode ein Argument für den `Key` optionalen Parameter bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="beace-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="beace-170">Wenn Sie beabsichtigen, die Auflistung nach Elementen zu durchsuchen, die Ihre Schlüssel verwenden, `Key` müssen Sie jedes Mal, wenn `Add` Sie die-Methode aufruft, das-Argument angeben.</span><span class="sxs-lookup"><span data-stu-id="beace-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="beace-171">Ruft die Anzahl der Elemente in einer Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="beace-171">Gets the number of elements in a collection.</span></span></summary>
        <value><span data-ttu-id="beace-172">Die Anzahl der Elemente in einer Auflistung.</span><span class="sxs-lookup"><span data-stu-id="beace-172">The number of elements in a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-173">Verwenden Sie `Count` die-Eigenschaft, um die Anzahl von Elementen `Collection` in einem-Objekt zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="beace-173">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-174">Dieses Beispiel veranschaulicht die Verwendung `Count` der-Eigenschaft, um die Anzahl von Elementen in einem <xref:Microsoft.VisualBasic.Collection> -Objekt in der Variablen `birthdays`anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="beace-174">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="beace-175">Das `Collection` Objekt ist 1-basiert, d. h. die Indexwerte der Elemente liegen zwischen 1 und dem Wert `Count` der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="beace-175">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="beace-176">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</span><span class="sxs-lookup"><span data-stu-id="beace-176">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="beace-177">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="beace-177">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-178">Die [für jeden... ](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)In der nächsten `GetEnumerator` Anweisung wird aufgerufen, um ein Enumeratorobjekt abzurufen, um die Iterationen für die Elemente einer Auflistung zu unterstützen.</span><span class="sxs-lookup"><span data-stu-id="beace-178">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="beace-179">Normalerweise verwenden Sie eine `For Each`... Schleife zum Durchlaufen einer Auflistung oder eines Arrays, und Sie müssen nicht explizit `GetEnumerator` aufgerufen werden. `Next`</span><span class="sxs-lookup"><span data-stu-id="beace-179">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="beace-180">Wenn Sie eine genauere Kontrolle über die Iterationen benötigen als `For Each`... -Anweisungen stellen bereit. Sie können `GetEnumerator` die-Methode verwenden, um einen angepassten Durchlauf auszuführen. `Next`</span><span class="sxs-lookup"><span data-stu-id="beace-180">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="beace-181">Im folgenden finden Sie einige Fälle, in denen Sie dies möglicherweise tun müssen.</span><span class="sxs-lookup"><span data-stu-id="beace-181">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="beace-182">Möglicherweise möchten Sie zum Anfang der Auflistung zurückkehren und die Iterationen erneut starten, bevor Sie abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="beace-182">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="beace-183">Möglicherweise möchten Sie aus einer Vielzahl von Gründen ein oder mehrere Elemente überspringen.</span><span class="sxs-lookup"><span data-stu-id="beace-183">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="beace-184">Möglicherweise müssen Sie die Elemente der Auflistung in der Mitte eines Traversal ändern.</span><span class="sxs-lookup"><span data-stu-id="beace-184">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="beace-185">In diesem Fall müssen Sie ein neues Enumeratorobjekt abrufen, da das vorherige für ungültig erklärt wird.</span><span class="sxs-lookup"><span data-stu-id="beace-185">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-186">Im folgenden Beispiel wird gezeigt, wie `GetEnumerator` verwendet wird, um alle Elemente `Collection` eines-Objekts abzurufen.</span><span class="sxs-lookup"><span data-stu-id="beace-186">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="beace-187">`GetEnumerator`erstellt ein Enumeratorobjekt, das die <xref:System.Collections.IEnumerator> -Schnittstelle <xref:System.Collections> des-Namespace implementiert, und gibt es zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-187">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="beace-188">Das Enumeratorobjekt macht die <xref:System.Collections.IEnumerator.Current%2A> -Eigenschaft und <xref:System.Collections.IEnumerator.MoveNext%2A> die <xref:System.Collections.IEnumerator.Reset%2A> -Methode und die-Methode verfügbar.</span><span class="sxs-lookup"><span data-stu-id="beace-188">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="beace-189">Weitere Informationen finden Sie unter [for each... Next-Anweisung](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="beace-189">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="beace-190">Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</span><span class="sxs-lookup"><span data-stu-id="beace-190">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="beace-191">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-191">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="beace-192"><paramref name="Index" /> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</span><span class="sxs-lookup"><span data-stu-id="beace-192"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="beace-193">Oder (B) Ein <see langword="Object" />-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-193">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="beace-194">Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</span><span class="sxs-lookup"><span data-stu-id="beace-194">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="beace-195">Ein bestimmtes Element eines <see langword="Collection" /> -Objekts entweder anhand der Position oder anhand des Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="beace-195">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-196">Wenn `Index` vom Typ `Object`ist, versucht `Item` die-Eigenschaft, Sie als `String`, `Char`, `Char` Array oder ganzzahliger Wert zu behandeln.</span><span class="sxs-lookup"><span data-stu-id="beace-196">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="beace-197">Wenn `Item` von nicht `Index` in `String` <xref:System.ArgumentException> oder konvertiert werden `Integer` kann, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="beace-197">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="beace-198">Die `Item` -Eigenschaft ist die Standard Eigenschaft für eine Auflistung.</span><span class="sxs-lookup"><span data-stu-id="beace-198">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="beace-199">Daher sind die folgenden Codezeilen Äquivalent.</span><span class="sxs-lookup"><span data-stu-id="beace-199">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="beace-200">Im folgenden Beispiel wird die `Item` -Eigenschaft verwendet, um einen Verweis auf ein-Objekt in einer-Auflistung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="beace-200">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="beace-201">Er erstellt `birthdays` `"Bill"` als- `Index` Objekt und ruft dann das Objekt ab, das den Geburtstag der Rechnung repräsentiert, wobei der Schlüssel als Argument verwendet wird. `Collection`</span><span class="sxs-lookup"><span data-stu-id="beace-201">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="beace-202">Beachten Sie, dass der erste-Befehl `Item` explizit die-Eigenschaft angibt, die zweite jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="beace-202">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="beace-203">Beide Aufrufe funktionieren, da `Item` die-Eigenschaft die Standard Eigenschaft für `Collection` ein-Objekt ist.</span><span class="sxs-lookup"><span data-stu-id="beace-203">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="beace-204">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-204">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="beace-205"><paramref name="Index" /> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</span><span class="sxs-lookup"><span data-stu-id="beace-205"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="beace-206">Oder (B) Ein <see langword="Object" />-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-206">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="beace-207">Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</span><span class="sxs-lookup"><span data-stu-id="beace-207">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="beace-208">Ein bestimmtes Element eines <see langword="Collection" /> -Objekts entweder anhand der Position oder anhand des Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="beace-208">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-209">Wenn `Index` vom Typ `Object`ist, versucht `Item` die-Eigenschaft, Sie als `String`, `Char`, `Char` Array oder ganzzahliger Wert zu behandeln.</span><span class="sxs-lookup"><span data-stu-id="beace-209">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="beace-210">Wenn `Item` von nicht `Index` in `String` <xref:System.ArgumentException> oder konvertiert werden `Integer` kann, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="beace-210">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="beace-211">Die `Item` -Eigenschaft ist die Standard Eigenschaft für eine Auflistung.</span><span class="sxs-lookup"><span data-stu-id="beace-211">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="beace-212">Daher sind die folgenden Codezeilen Äquivalent.</span><span class="sxs-lookup"><span data-stu-id="beace-212">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="beace-213">Im folgenden Beispiel wird die `Item` -Eigenschaft verwendet, um einen Verweis auf ein-Objekt in einer-Auflistung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="beace-213">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="beace-214">Er erstellt `birthdays` `"Bill"` als- `Index` Objekt und ruft dann das Objekt ab, das den Geburtstag der Rechnung repräsentiert, wobei der Schlüssel als Argument verwendet wird. `Collection`</span><span class="sxs-lookup"><span data-stu-id="beace-214">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="beace-215">Beachten Sie, dass der erste-Befehl `Item` explizit die-Eigenschaft angibt, die zweite jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="beace-215">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="beace-216">Beide Aufrufe funktionieren, da `Item` die-Eigenschaft die Standard Eigenschaft für `Collection` ein-Objekt ist.</span><span class="sxs-lookup"><span data-stu-id="beace-216">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="beace-217">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="beace-217">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="beace-218"><paramref name="Key" /> muss dem <paramref name="Key" />-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="beace-218"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="beace-219">Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</span><span class="sxs-lookup"><span data-stu-id="beace-219">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="beace-220">Ein bestimmtes Element eines <see langword="Collection" /> -Objekts entweder anhand der Position oder anhand des Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="beace-220">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-221">Wenn `Index` vom Typ `Object`ist, versucht `Item` die-Eigenschaft, Sie als `String`, `Char`, `Char` Array oder ganzzahliger Wert zu behandeln.</span><span class="sxs-lookup"><span data-stu-id="beace-221">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="beace-222">Wenn `Item` von nicht `Index` in `String` <xref:System.ArgumentException> oder konvertiert werden `Integer` kann, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="beace-222">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="beace-223">Die `Item` -Eigenschaft ist die Standard Eigenschaft für eine Auflistung.</span><span class="sxs-lookup"><span data-stu-id="beace-223">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="beace-224">Daher sind die folgenden Codezeilen Äquivalent.</span><span class="sxs-lookup"><span data-stu-id="beace-224">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="beace-225">Im folgenden Beispiel wird die `Item` -Eigenschaft verwendet, um einen Verweis auf ein-Objekt in einer-Auflistung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="beace-225">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="beace-226">Er erstellt `birthdays` `"Bill"` als- `Index` Objekt und ruft dann das Objekt ab, das den Geburtstag der Rechnung repräsentiert, wobei der Schlüssel als Argument verwendet wird. `Collection`</span><span class="sxs-lookup"><span data-stu-id="beace-226">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="beace-227">Beachten Sie, dass der erste-Befehl `Item` explizit die-Eigenschaft angibt, die zweite jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="beace-227">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="beace-228">Beide Aufrufe funktionieren, da `Item` die-Eigenschaft die Standard Eigenschaft für `Collection` ein-Objekt ist.</span><span class="sxs-lookup"><span data-stu-id="beace-228">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="beace-229">Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-229">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="beace-230">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="beace-230">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="beace-231"><paramref name="Index" /> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</span><span class="sxs-lookup"><span data-stu-id="beace-231"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="beace-232">Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-232">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-233">Wenn `Remove` ein Element aus einer Auflistung löscht, wird die- <xref:Microsoft.VisualBasic.Collection.Count%2A> Eigenschaft der Auflistung um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="beace-233">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="beace-234">Außerdem wird der `Index` Wert jedes Elements, das zuvor dem gelöschten Element in der Auflistung folgte, verringert.</span><span class="sxs-lookup"><span data-stu-id="beace-234">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="beace-235">Wenn der Auflistung ein Element ohne `Key`hinzugefügt wurde, müssen Sie das-Element `Index` verwenden, um es zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="beace-235">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-236">In diesem Beispiel wird die Verwendung `Remove` der-Methode zum Entfernen von Objekten aus einem <xref:Microsoft.VisualBasic.Collection> -Objekt `birthdays`in der-Variable veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="beace-236">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="beace-237">Nach `Add` den vier Aufrufen der-Methode enthält die-Eigenschaft 4, das-Element `"Bill"` den Indexwert 1 `"Pete"` und das `Count` -Element den Indexwert 4.</span><span class="sxs-lookup"><span data-stu-id="beace-237">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="beace-238">Nach dem ersten-Aufrufe `Remove`von `Count` ist 3, das `"Bill"` -Element wird gelöscht, `"Pete"` und das-Element weist den Indexwert 3 auf.</span><span class="sxs-lookup"><span data-stu-id="beace-238">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="beace-239">Nach dem zweiten-Aufrufe `Remove`von `Count` ist 2, das `"Mike"` -Element wird gelöscht, `"Pete"` und das-Element hat den Indexwert 2.</span><span class="sxs-lookup"><span data-stu-id="beace-239">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="beace-240">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="beace-240">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="beace-241"><paramref name="Key" /> muss dem <paramref name="Key" />-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="beace-241"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="beace-242">Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-242">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-243">Wenn `Remove` ein Element aus einer Auflistung löscht, wird die- <xref:Microsoft.VisualBasic.Collection.Count%2A> Eigenschaft der Auflistung um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="beace-243">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="beace-244">Außerdem wird der `Index` Wert jedes Elements, das zuvor dem gelöschten Element in der Auflistung folgte, verringert.</span><span class="sxs-lookup"><span data-stu-id="beace-244">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="beace-245">Wenn der Auflistung ein Element ohne `Key`hinzugefügt wurde, müssen Sie das-Element `Index` verwenden, um es zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="beace-245">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beace-246">In diesem Beispiel wird die Verwendung `Remove` der-Methode zum Entfernen von Objekten aus einem <xref:Microsoft.VisualBasic.Collection> -Objekt `birthdays`in der-Variable veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="beace-246">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="beace-247">Nach `Add` den vier Aufrufen der-Methode enthält die-Eigenschaft 4, das-Element `"Bill"` den Indexwert 1 `"Pete"` und das `Count` -Element den Indexwert 4.</span><span class="sxs-lookup"><span data-stu-id="beace-247">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="beace-248">Nach dem ersten-Aufrufe `Remove`von `Count` ist 3, das `"Bill"` -Element wird gelöscht, `"Pete"` und das-Element weist den Indexwert 3 auf.</span><span class="sxs-lookup"><span data-stu-id="beace-248">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="beace-249">Nach dem zweiten-Aufrufe `Remove`von `Count` ist 2, das `"Mike"` -Element wird gelöscht, `"Pete"` und das-Element hat den Indexwert 2.</span><span class="sxs-lookup"><span data-stu-id="beace-249">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo" ExplicitInterfaceMemberName="ICollectionCopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="beace-250">Das eindimensionale <see cref="T:System.Array" />, in das die Elemente aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt kopiert werden.</span><span class="sxs-lookup"><span data-stu-id="beace-250">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="beace-251">Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="beace-251">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="beace-252">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="beace-252">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="beace-253">Kopiert die Elemente der <see cref="T:Microsoft.VisualBasic.Collection" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</span><span class="sxs-lookup"><span data-stu-id="beace-253">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-254">Die Elemente werden in derselben Reihen <xref:System.Array> Folge in den kopiert, in der der Enumerator das <xref:Microsoft.VisualBasic.Collection> -Objekt durchläuft.</span><span class="sxs-lookup"><span data-stu-id="beace-254">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="beace-255">Bei dieser Methode handelt es sich`n`um einen O ( `n` )-Vorgang, <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>bei dem aus der abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="beace-255">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="beace-256"><paramref name="array" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="beace-256"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="beace-257"><paramref name="index" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="beace-257"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="beace-258"><paramref name="array" /> ist mehrdimensional.</span><span class="sxs-lookup"><span data-stu-id="beace-258"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="beace-259">- oder -</span><span class="sxs-lookup"><span data-stu-id="beace-259">-or-</span></span> 
<span data-ttu-id="beace-260">Die Anzahl der aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Quellobjekt zu kopierenden Elemente ist größer als der verfügbare Platz von <paramref name="index" /> bis zum Ende des Ziel-<paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="beace-260">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="beace-261">Der Typ des Quell-<see cref="T:Microsoft.VisualBasic.Collection" />-Objekts kann nicht automatisch in den Typ des Ziel-<paramref name="array" /> umgewandelt werden.</span><span class="sxs-lookup"><span data-stu-id="beace-261">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count" ExplicitInterfaceMemberName="ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="beace-262">Ruft die Anzahl der Elemente in dieser Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="beace-262">Gets the number of items in this collection.</span></span></summary>
        <value><span data-ttu-id="beace-263">Die Anzahl der Elemente in dieser Auflistung.</span><span class="sxs-lookup"><span data-stu-id="beace-263">The number of items in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized" ExplicitInterfaceMemberName="ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="beace-264">Ruft einen Wert ab, der angibt, ob der Zugriff auf das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt synchronisiert (threadsicher) ist.</span><span class="sxs-lookup"><span data-stu-id="beace-264">Gets a value that indicates whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="beace-265"><see langword="true" /><see cref="T:Microsoft.VisualBasic.Collection" /> , <see langword="false" /> wenn der Zugriff auf das-Objekt synchronisiert ist, andernfalls.</span><span class="sxs-lookup"><span data-stu-id="beace-265"><see langword="true" /> if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot" ExplicitInterfaceMemberName="ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="beace-266">Ruft ein Objekt ab, mit dem der Zugriff auf das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt synchronisiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="beace-266">Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <value><span data-ttu-id="beace-267">Ein Objekt, mit dem der Zugriff auf das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt synchronisiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="beace-267">An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator" ExplicitInterfaceMemberName="ICollectionGetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="beace-268">Ruft einen Enumerator ab, der die Auflistung durchläuft.</span><span class="sxs-lookup"><span data-stu-id="beace-268">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="beace-269">Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="beace-269">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-270">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="beace-270">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="beace-271">Die `foreach`-Anweisung der Programmiersprache C# (`for each` in Visual Basic) verbirgt die Komplexität der Enumeratoren.</span><span class="sxs-lookup"><span data-stu-id="beace-271">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="beace-272">Daher empfiehlt es sich, `foreach` zu verwenden und den Enumerator nicht direkt zu ändern.</span><span class="sxs-lookup"><span data-stu-id="beace-272">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="beace-273">Mit Enumeratoren können die Daten in der Auflistung zwar gelesen, jedoch nicht zum Ändern der zugrunde liegenden Auflistung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="beace-273">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="beace-274">Zu Beginn wird der Enumerator vor das erste Element in der Auflistung positioniert.</span><span class="sxs-lookup"><span data-stu-id="beace-274">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="beace-275">Die <xref:System.Collections.IEnumerator.Reset%2A> -Methode bringt den Enumerator auch wieder auf diese Position zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-275">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="beace-276">An dieser Position ist die <xref:System.Collections.IEnumerator.Current%2A> -Eigenschaft nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="beace-276">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="beace-277">Daher muss die <xref:System.Collections.IEnumerator.MoveNext%2A> -Methode aufgerufen werden, um den Enumerator vor dem Lesen des Werts von <xref:System.Collections.IEnumerator.Current%2A>auf das erste Element der Auflistung zu setzen.</span><span class="sxs-lookup"><span data-stu-id="beace-277">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="beace-278"><xref:System.Collections.IEnumerator.Current%2A> gibt solange dasselbe Objekt zurück, bis <xref:System.Collections.IEnumerator.MoveNext%2A> oder <xref:System.Collections.IEnumerator.Reset%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="beace-278"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="beace-279"><xref:System.Collections.IEnumerator.MoveNext%2A> legt <xref:System.Collections.IEnumerator.Current%2A> auf das nächste Element fest.</span><span class="sxs-lookup"><span data-stu-id="beace-279"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="beace-280">Wenn <xref:System.Collections.IEnumerator.MoveNext%2A> das Ende der Auflistung übergibt, wird der Enumerator hinter dem letzten Element in der Auflistung platziert, und <xref:System.Collections.IEnumerator.MoveNext%2A> gibt `false` zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-280">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="beace-281">Wenn sich der Enumerator an dieser Position befindet, geben nachfolgende Aufrufe von <xref:System.Collections.IEnumerator.MoveNext%2A> auch `false` zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-281">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="beace-282">Wenn der letzte Rückruf von <xref:System.Collections.IEnumerator.MoveNext%2A> zurück `false`gibt <xref:System.Collections.IEnumerator.Current%2A> , ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="beace-282">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="beace-283">Um <xref:System.Collections.IEnumerator.Current%2A> wieder auf das erste Element der Auflistung festzulegen, können Sie <xref:System.Collections.IEnumerator.Reset%2A> gefolgt von <xref:System.Collections.IEnumerator.MoveNext%2A> aufrufen.</span><span class="sxs-lookup"><span data-stu-id="beace-283">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="beace-284">Ein Enumerator bleibt gültig, solange die Auflistung unverändert ist.</span><span class="sxs-lookup"><span data-stu-id="beace-284">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="beace-285">Werden an der Auflistung Änderungen wie z. B. Hinzufügen, Bearbeiten oder Entfernen von Elementen vorgenommen, verliert der Enumerator unwiederbringlich seine Gültigkeit und sein Verhalten ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="beace-285">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="beace-286">Der Enumerator hat keinen exklusiven Zugriff auf die Auflistung; daher ist die Enumeration einer Auflistung systembedingt kein threadsicheres Verfahren.</span><span class="sxs-lookup"><span data-stu-id="beace-286">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="beace-287">Um während der Enumeration Threadsicherheit zu garantieren, können Sie die Auflistung während der gesamten Enumeration sperren.</span><span class="sxs-lookup"><span data-stu-id="beace-287">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="beace-288">Um den Lese- und Schreibzugriff auf diese Auflistung durch mehrere Threads zuzulassen, müssen Sie eine eigene Synchronisierung implementieren.</span><span class="sxs-lookup"><span data-stu-id="beace-288">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add" ExplicitInterfaceMemberName="IListAdd">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear" ExplicitInterfaceMemberName="IListClear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="beace-289">Entfernt alle Elemente aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-289">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-290">Diese Methode entfernt alle Elemente aus dem <xref:Microsoft.VisualBasic.Collection> -Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-290">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="beace-291"><see cref="T:System.Collections.IList" /> ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="beace-291">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains" ExplicitInterfaceMemberName="IListContains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="beace-292">Das <see cref="T:System.Object" />, das im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="beace-292">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="beace-293">Bestimmt, ob das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt einen bestimmten Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="beace-293">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="beace-294">Gibt <see langword="True" /> zurück, wenn das <see cref="T:System.Object" /> im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt gefunden wird, andernfalls <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="beace-294">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-295">Diese Methode bestimmt, ob <xref:Microsoft.VisualBasic.Collection> das Objekt einen bestimmten Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="beace-295">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf" ExplicitInterfaceMemberName="IListIndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="beace-296">Das <see cref="T:System.Object" />, das im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="beace-296">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="beace-297">Bestimmt den Index eines bestimmten Elements im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-297">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="beace-298">Der Index von <paramref name="value" />, wenn das Element in der Auflistung gefunden wird, andernfalls -1.</span><span class="sxs-lookup"><span data-stu-id="beace-298">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-299">Diese Methode bestimmt den Index eines bestimmten Elements im <xref:Microsoft.VisualBasic.Collection> -Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-299">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert" ExplicitInterfaceMemberName="IListInsert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="beace-300">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="beace-300">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="beace-301">Das in das <see cref="T:System.Object" />-Objekt einzufügende <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="beace-301">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="beace-302">Fügt dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt am angegebenen Index ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="beace-302">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-303">Wenn `index` die Anzahl der Elemente <xref:Microsoft.VisualBasic.Collection> im-Objekt entspricht, `value` wird an das Ende angefügt.</span><span class="sxs-lookup"><span data-stu-id="beace-303">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="beace-304">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, werden die Elemente hinter der Einfügemarke nach unten verschoben, um das neue Element aufzunehmen.</span><span class="sxs-lookup"><span data-stu-id="beace-304">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="beace-305">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="beace-305">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="beace-306">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="beace-306">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="beace-307"><paramref name="index" /> ist kein gültiger Index im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-307"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="beace-308">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="beace-308">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="beace-309">- oder -</span><span class="sxs-lookup"><span data-stu-id="beace-309">-or-</span></span> 
<span data-ttu-id="beace-310">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="beace-310">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="beace-311"><paramref name="value" /> ist im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ein NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="beace-311"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize" ExplicitInterfaceMemberName="IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="beace-312">Ruft einen Wert ab, der angibt, ob das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt eine feste Größe hat.</span><span class="sxs-lookup"><span data-stu-id="beace-312">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="beace-313"><see langword="true" />, wenn das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="beace-313"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly" ExplicitInterfaceMemberName="IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="beace-314">Ruft einen Wert ab, der angibt, ob das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt schreibgeschützt ist.</span><span class="sxs-lookup"><span data-stu-id="beace-314">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is.</span></span></summary>
        <value><span data-ttu-id="beace-315"><see langword="true" />, wenn das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt schreibgeschützt ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="beace-315"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item" ExplicitInterfaceMemberName="IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.System#Collections#IList#Item(System.Int32)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="beace-316">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="beace-316">The zero-based index of the element to get or set.</span></span></param>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="beace-317">Ruft das Element am angegebenen Index ab oder legt dieses fest.</span><span class="sxs-lookup"><span data-stu-id="beace-317">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="beace-318">Das Element am angegebenen Index.</span><span class="sxs-lookup"><span data-stu-id="beace-318">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="beace-319"><paramref name="index" /> ist kein gültiger Index im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-319"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="beace-320">Die Eigenschaft wird festgelegt, und das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="beace-320">The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove" ExplicitInterfaceMemberName="IListRemove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="beace-321">Das aus dem <see cref="T:System.Object" />-Objekt zu entfernende <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="beace-321">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="beace-322">Entfernt das erste Vorkommen eines bestimmten Objekts aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-322">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-323">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, wird die nach dem Entfernen eines Elements entstandene Lücke durch Verschieben aller nachfolgenden Elemente gefüllt.</span><span class="sxs-lookup"><span data-stu-id="beace-323">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="beace-324">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="beace-324">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="beace-325">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="beace-325">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="beace-326">Wenn `value` nicht <xref:Microsoft.VisualBasic.Collection> im-Objekt gefunden wird, bleibt das Objekt unverändert, und es wird keine Ausnahme ausgelöst. <xref:Microsoft.VisualBasic.Collection></span><span class="sxs-lookup"><span data-stu-id="beace-326">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="beace-327">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="beace-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="beace-328">- oder -</span><span class="sxs-lookup"><span data-stu-id="beace-328">-or-</span></span> 
<span data-ttu-id="beace-329">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="beace-329">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt" ExplicitInterfaceMemberName="IListRemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="beace-330">Der nullbasierte Index des zu entfernenden Elements.</span><span class="sxs-lookup"><span data-stu-id="beace-330">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="beace-331">Entfernt das <see cref="T:Microsoft.VisualBasic.Collection" />-Objektelement am angegebenen Index.</span><span class="sxs-lookup"><span data-stu-id="beace-331">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-332">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, wird die nach dem Entfernen eines Elements entstandene Lücke durch Verschieben aller nachfolgenden Elemente gefüllt.</span><span class="sxs-lookup"><span data-stu-id="beace-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="beace-333">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="beace-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="beace-334">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="beace-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="beace-335"><paramref name="index" /> ist kein gültiger Index im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="beace-335"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="beace-336">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="beace-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="beace-337">- oder -</span><span class="sxs-lookup"><span data-stu-id="beace-337">-or-</span></span> 
<span data-ttu-id="beace-338">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="beace-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" ExplicitInterfaceMemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="beace-339">Das Objekt, das den Rückruf initiiert hat.</span><span class="sxs-lookup"><span data-stu-id="beace-339">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="beace-340">Wird ausgeführt, nachdem das gesamte <see cref="T:Microsoft.VisualBasic.Collection" />-Objektdiagramm deserialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="beace-340">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-341">Diese Methode wird aufgerufen, nachdem das <xref:Microsoft.VisualBasic.Collection> gesamte Objekt Diagramm deserialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="beace-341">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData" ExplicitInterfaceMemberName="GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="beace-342">Ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den zum Serialisieren des <see cref="T:Microsoft.VisualBasic.Collection" />-Objekts erforderlichen Informationen.</span><span class="sxs-lookup"><span data-stu-id="beace-342">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="beace-343">Ein <see cref="T:System.Runtime.Serialization.StreamingContext" />-Objekt mit der Quelle und dem Ziel des serialisierten Streams, der dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="beace-343">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="beace-344">Gibt die zum Serialisieren des <see cref="T:Microsoft.VisualBasic.Collection" />-Objekts erforderlichen Daten zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-344">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beace-345">Diese Methode gibt die zum Serialisieren des <xref:Microsoft.VisualBasic.Collection> -Objekts erforderlichen Daten zurück.</span><span class="sxs-lookup"><span data-stu-id="beace-345">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>

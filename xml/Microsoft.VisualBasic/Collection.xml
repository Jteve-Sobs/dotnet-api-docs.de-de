<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Collection.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7fdc3197f07c8bdb1f40ab81744fc26dfcfd1dc2b5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc3197f07c8bdb1f40ab81744fc26dfcfd1dc2b5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>A Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> is an ordered set of items that can be referred to as a unit.</source>
          <target state="translated">Eine Visual Basic-<ph id="ph1">&lt;see langword="Collection" /&gt;</ph> ist eine geordnete Menge von Elementen, auf die als Einheit verwiesen werden kann.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of a Visual Basic <ph id="ph3">`Collection`</ph>.</source>
          <target state="translated">Wann immer möglich, sollten Sie die generischen Auflistungen im Verwenden der <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> Namespace oder die <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> Namespace anstelle einer Visual Basic <ph id="ph3">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Sammlungen<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The Visual Basic <ph id="ph1">`Collection`</ph> object provides a convenient way to refer to a related group of items as a single object.</source>
          <target state="translated">Visual Basic <ph id="ph1">`Collection`</ph> Objekt bietet eine einfache Möglichkeit zum Verweisen auf eine verwandte Gruppe von Elementen als einzelnes Objekt.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The items, or <bpt id="p1">*</bpt>elements<ept id="p1">*</ept>, in a collection need only be related by the fact that they exist in the collection.</source>
          <target state="translated">Die Elemente oder <bpt id="p1">*</bpt>Elemente<ept id="p1">*</ept>in einem Auflistungsfunktionen müssen nur durch die Tatsache, dass in der Auflistung vorhanden sind.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Elements of a collection do not have to share the same data type.</source>
          <target state="translated">Elemente einer Auflistung müssen nicht denselben Datentyp aufweisen.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>You can create a collection the same way you create other objects, as the following example illustrates.</source>
          <target state="translated">Sie können erstellen eine Auflistung erstellen anderer Objekte, wie im folgenden Beispiel veranschaulicht.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Once you have created a collection, you can do any of the following:</source>
          <target state="translated">Nachdem Sie eine Sammlung erstellt haben, können Sie Folgendes tun:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Add an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method.</source>
          <target state="translated">Fügen Sie ein Element mit dem <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> method.</source>
          <target state="translated">Entfernen Sie ein Element mit dem <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove all elements with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> method.</source>
          <target state="translated">Entfernen Sie alle Elemente mit dem <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Find out how many elements the collection contains with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property.</source>
          <target state="translated">Informieren Sie sich über wie viele Elemente die Auflistung enthält, mit der <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Check whether a specific element is present with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> method.</source>
          <target state="translated">Überprüfen Sie, ob ein bestimmtes Element vorhanden ist, mit der <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Return a specific element from the collection with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property.</source>
          <target state="translated">Zurückgeben ein bestimmtes Elements aus der Auflistung mit den <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterate through the entire collection with the <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Durchlaufen Sie die gesamte Auflistung mit den <bpt id="p1">[</bpt>für jede... Nächste Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Although the Visual Basic <ph id="ph1">`Collection`</ph> object has functionality identical to the <ph id="ph2">`Collection`</ph> object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</source>
          <target state="translated">Obwohl Visual Basic <ph id="ph1">`Collection`</ph> Objekt verfügt über Funktionen, die identisch mit der <ph id="ph2">`Collection`</ph> -Objekt in Visual Basic 6.0, Interoperation kann nicht in einer COM-Umgebung.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterating through a Visual Basic <ph id="ph1">`Collection`</ph> is not a thread-safe procedure.</source>
          <target state="translated">Durchlaufen eine Visual Basic <ph id="ph1">`Collection`</ph> ist keine threadsichere Prozedur.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</source>
          <target state="translated">Selbst wenn die Auflistung synchronisiert wird, können andere Threads nach wie vor die Auflistung, wodurch des Enumerators eine Ausnahme auslöst geändert.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Um während der Enumeration Threadsicherheit zu gewährleisten, Sperren Sie die Auflistung oder Ausnahmen Sie die aufgrund von Änderungen von anderen Threads.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information on locking a programming element, see <bpt id="p1">[</bpt>SyncLock Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen zur Sperrung ein Programmierelement finden Sie unter <bpt id="p1">[</bpt>SyncLock-Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The following example creates the <ph id="ph1">`Collection`</ph> object <ph id="ph2">`names`</ph> and a dialog box with which a user can add objects (names) to the collection.</source>
          <target state="translated">Das folgende Beispiel erstellt die <ph id="ph1">`Collection`</ph> Objekt <ph id="ph2">`names`</ph> und ein Dialogfeld, in dem ein Benutzer Objekte (Namen) der Auflistung hinzufügen kann.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>It then displays the names in the collection, and finally empties the collection without disposing of the <ph id="ph1">`Collection`</ph> object itself.</source>
          <target state="translated">Es zeigt dann die Namen in der Auflistung, und schließlich ohne Freigabe des leert die Sammlung der <ph id="ph1">`Collection`</ph> Objekt selbst.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To see how this works, choose the <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu and declare a public variable called <ph id="ph1">`instanceName`</ph> at the module level of <ph id="ph2">`nameClass`</ph> (type <ph id="ph3">`Public instanceName`</ph>) to hold the names of each instance.</source>
          <target state="translated">Um anzuzeigen, wie dies funktioniert, wählen Sie die <bpt id="p1">**</bpt>Klasse hinzufügen<ept id="p1">**</ept> Befehl die <bpt id="p2">**</bpt>Projekt<ept id="p2">**</ept> Menü, und deklarieren Sie eine öffentliche Variable namens <ph id="ph1">`instanceName`</ph> auf Modulebene von <ph id="ph2">`nameClass`</ph> (Typ <ph id="ph3">`Public instanceName`</ph>) zum Speichern die Namen der einzelnen Instanzen.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Leave the default name as <ph id="ph1">`nameClass`</ph>.</source>
          <target state="translated">Lassen Sie den Standardnamen als <ph id="ph1">`nameClass`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Copy and paste the following code into the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> section of another module, and then start it with the statement <ph id="ph1">`classNamer`</ph> in another procedure.</source>
          <target state="translated">Kopieren Sie den folgenden Code in die <bpt id="p1">**</bpt>allgemeine<ept id="p1">**</ept> Teil ein anderes Modul, und starten Sie ihn mit der Anweisung <ph id="ph1">`classNamer`</ph> in einer anderen Prozedur.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>(This example works only with host applications that support classes.)</source>
          <target state="translated">(Dieses Beispiel funktioniert nur mit hostanwendungen, die Klassen unterstützt.)</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Creates and returns a new Visual Basic <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Erstellt ein neues <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt von Visual Basic und gibt dieses zurück</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</source>
          <target state="translated">Die Visual Basic-Auflistung zurückgegeben, die von diesem Konstruktor ist leer und verfügt nicht über keine zugeordnete Anfangskapazität.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Visual Basic collections are not compatible with the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> collections available in the <ph id="ph2">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> namespaces.</source>
          <target state="translated">Visual Basic-Auflistungen sind nicht kompatibel mit der <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Sammlungen zur Verfügung, in der <ph id="ph2">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, und <ph id="ph4">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> Namespaces.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The following example creates a new Visual Basic collection and assigns it to the variable <ph id="ph1">`coll`</ph>:</source>
          <target state="translated">Das folgende Beispiel erstellt eine neue Visual Basic-Sammlung und der Variablen zugewiesen <ph id="ph1">`coll`</ph>:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>This <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">Dies <ph id="ph1">`Collection`</ph> Objekt ist 1-basiert, d. h., der die Indexwerte des Elemente reichen von 1 bis zum Wert von der <ph id="ph2">`Count`</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Visual Basic collections hold elements of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Visual Basic-Auflistungen speichern Elemente des Typs <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An object of any type that specifies the element to add to the collection.</source>
          <target state="translated">Ein Objekt eines beliebigen Typs, das das Element angibt, das der Auflistung hinzugefügt werden soll.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</source>
          <target state="translated">Ein eindeutiger <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf dieses neue Element in der Auflistung zuzugreifen.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">Ein Ausdruck, der eine relative Position in der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection before the element identified by the <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">Das hinzuzufügende Element wird in der Auflistung vor dem Element platziert, das vom <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>-Argument angegeben wird.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph>-Eigenschaft der Auflistung handeln.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</source>
          <target state="translated">Ist <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Sie können nicht gleichzeitig <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> und <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept> angeben.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Dies ist optional.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">Ein Ausdruck, der eine relative Position in der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection after the element identified by the <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">Das hinzuzufügende Element wird in der Auflistung nach dem Element platziert, das vom <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept>-Argument angegeben wird.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see langword="Count" /&gt;</ph> property.</source>
          <target state="translated">Wenn <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <ph id="ph1">&lt;see langword="Count" /&gt;</ph>-Eigenschaft der Auflistung handeln.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element referred to was added to the collection.</source>
          <target state="translated">Ist <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Sie können nicht gleichzeitig <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> und <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept> angeben.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Adds an element to a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Fügt einem <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekt ein Element hinzu.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <ph id="ph1">`Before`</ph> or <ph id="ph2">`After`</ph> argument must refer to an existing element of the collection; otherwise, an error occurs.</source>
          <target state="translated">Die <ph id="ph1">`Before`</ph> oder <ph id="ph2">`After`</ph> Argument muss mit einem vorhandenen Element der Auflistung verweisen; andernfalls ein Fehler auftritt.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If both the <ph id="ph1">`Before`</ph> and <ph id="ph2">`After`</ph> arguments are omitted, the new object is added to the end of the collection.</source>
          <target state="translated">Wenn beide die <ph id="ph1">`Before`</ph> und <ph id="ph2">`After`</ph> Argumente ausgelassen werden, wird das neue Objekt am Ende der Auflistung hinzugefügt.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An error also occurs if a specified <ph id="ph1">`Key`</ph> value matches the key for an existing element of the collection.</source>
          <target state="translated">Außerdem tritt ein Fehler auf, wenn ein angegebenes <ph id="ph1">`Key`</ph> Wert entspricht den Schlüssel für ein vorhandenes Element der Auflistung.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The following example uses the <ph id="ph1">`Add`</ph> method to add <ph id="ph2">`child`</ph> objects — instances of a class called <ph id="ph3">`child`</ph> containing a <ph id="ph4">`Public`</ph> property <ph id="ph5">`name`</ph> — to a collection called <ph id="ph6">`family`</ph>.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Add`</ph> Methode hinzufügen <ph id="ph2">`child`</ph> Objekte – Instanzen einer Klasse mit dem Namen <ph id="ph3">`child`</ph> , enthält eine <ph id="ph4">`Public`</ph> Eigenschaft <ph id="ph5">`name`</ph> – um eine Auflistung mit dem Namen <ph id="ph6">`family`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>To see how this works, create a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls and set their <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> properties to <ph id="ph4">`Add`</ph> and <ph id="ph5">`List`</ph>.</source>
          <target state="translated">Um anzuzeigen, wie dies funktioniert, erstellen eine <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> mit zwei <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> Steuerelementen, und legen ihre <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> Eigenschaften <ph id="ph4">`Add`</ph> und <ph id="ph5">`List`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Add the <ph id="ph1">`child`</ph> class definition and the <ph id="ph2">`family`</ph> declaration to the form code.</source>
          <target state="translated">Hinzufügen der <ph id="ph1">`child`</ph> Klassendefinition und der <ph id="ph2">`family`</ph> Deklaration, um den Formularcode.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Modify the <ph id="ph1">`_Click`</ph> event handlers for the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and <bpt id="p2">**</bpt>List<ept id="p2">**</ept> buttons as shown.</source>
          <target state="translated">Ändern der <ph id="ph1">`_Click`</ph> -Ereignishandler für das <bpt id="p1">**</bpt>hinzufügen<ept id="p1">**</ept> und <bpt id="p2">**</bpt>Liste<ept id="p2">**</ept> Schaltflächen wie gezeigt.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button allows you to add children.</source>
          <target state="translated">Die <bpt id="p1">**</bpt>hinzufügen<ept id="p1">**</ept> Schaltfläche können Sie untergeordnete Elemente hinzufügen.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>List<ept id="p1">**</ept> button displays the names of all the children.</source>
          <target state="translated">Die <bpt id="p1">**</bpt>Liste<ept id="p1">**</ept> Schaltfläche zeigt die Namen aller untergeordneten Elemente.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>Deletes all elements of a Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Löscht alle Elemente eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts in Visual Basic.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>The <ph id="ph1">`Clear`</ph> method empties the collection and resets its <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property to 0.</source>
          <target state="translated">Die <ph id="ph1">`Clear`</ph> Methode leert die Auflistung und setzt seine <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> Eigenschaft auf 0.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Required.</source>
          <target state="translated">Erforderlich.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies the key for which to search the elements of the collection.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, der den Schlüssel angibt, nach dem die Elemente der Auflistung durchsucht werden sollen.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>-Wert zurück, der angibt, ob ein <ph id="ph2">&lt;see langword="Collection" /&gt;</ph>-Objekt in Visual Basic ein Element mit einem bestimmten Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Gibt einen <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>-Wert zurück, der angibt, ob ein <ph id="ph2">&lt;see langword="Collection" /&gt;</ph>-Objekt in Visual Basic ein Element mit einem bestimmten Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source><ph id="ph1">`Contains`</ph> returns <ph id="ph2">`True`</ph> if the collection contains an element with a key exactly matching <ph id="ph3">`Key`</ph>.</source>
          <target state="translated"><ph id="ph1">`Contains`</ph> Gibt <ph id="ph2">`True`</ph> , wenn die Auflistung ein Element mit einem exakt übereinstimmenden Schlüssel enthält <ph id="ph3">`Key`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Otherwise, <ph id="ph1">`Contains`</ph> returns <ph id="ph2">`False`</ph>.</source>
          <target state="translated">Andernfalls <ph id="ph1">`Contains`</ph> gibt <ph id="ph2">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Case is ignored when matching key values.</source>
          <target state="translated">Groß-/Kleinschreibung wird ignoriert, beim Ermitteln von Übereinstimmungen Schlüsselwerte.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A Visual Basic <ph id="ph1">`Collection`</ph> can hold some elements that have keys and other elements without keys.</source>
          <target state="translated">Ein Visual Basic <ph id="ph1">`Collection`</ph> kann einige Elemente, die Schlüssel enthalten und andere Elemente ohne Schlüssel enthalten.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>This depends on whether the call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method supplies an argument to the optional <ph id="ph2">`Key`</ph> parameter.</source>
          <target state="translated">Dies hängt davon ab, ob der Aufruf der <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> Methode ein Argument für den optionalen <ph id="ph2">`Key`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>If you intend to search the collection for elements using their keys, remember to supply the <ph id="ph1">`Key`</ph> argument every time you call the <ph id="ph2">`Add`</ph> method.</source>
          <target state="translated">Wenn Sie beabsichtigen, Elemente, die mit den Schlüsseln der Auflistung gesucht werden soll, müssen Sie angeben der <ph id="ph1">`Key`</ph> Argument jedes Mal, wenn Sie rufen die <ph id="ph2">`Add`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">Gibt eine <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> zurück, die die Anzahl der Elemente in einer Auflistung enthält.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">Gibt eine <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> zurück, die die Anzahl der Elemente in einer Auflistung enthält.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Use the <ph id="ph1">`Count`</ph> property to determine the number of elements in a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Verwenden der <ph id="ph1">`Count`</ph> -Eigenschaft zum Bestimmen der Anzahl von Elementen in einem <ph id="ph2">`Collection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>This example illustrates the use of the <ph id="ph1">`Count`</ph> property to display the number of elements in a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Count`</ph> Eigenschaft zum Anzeigen der Anzahl von Elementen in einem <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt in der Variablen <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>The <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">Die <ph id="ph1">`Collection`</ph> Objekt ist 1-basiert, d. h., der die Indexwerte des Elemente reichen von 1 bis zum Wert von der <ph id="ph2">`Count`</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Gibt einen Verweis auf ein Enumeratorobjekt zurück, das zum Durchlaufen eines <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekts verwendet wird.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Gibt einen Verweis auf ein Enumeratorobjekt zurück, das zum Durchlaufen eines <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekts verwendet wird.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> calls <ph id="ph1">`GetEnumerator`</ph> to obtain an enumerator object to support iteration over a collection's elements.</source>
          <target state="translated">Die <bpt id="p1">[</bpt>für jede... Nächste Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> Aufrufe <ph id="ph1">`GetEnumerator`</ph> ein Enumeratorobjekt zur Unterstützung von Iteration über die Elemente einer Auflistung abrufen.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Normally, you use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop to traverse a collection or array, and you do not need to call <ph id="ph3">`GetEnumerator`</ph> explicitly.</source>
          <target state="translated">Normalerweise verwenden Sie eine <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> Schleife, um eine Auflistung oder ein Array durchlaufen, und Sie müssen nicht aufrufen <ph id="ph3">`GetEnumerator`</ph> explizit.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>If you need closer control over the iteration than the <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> statements provide, you can use the <ph id="ph3">`GetEnumerator`</ph> method to perform a customized traversal.</source>
          <target state="translated">Wenn Sie genauere Kontrolle über die Iteration als benötigen die <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> Anweisungen bereitstellen, können Sie die <ph id="ph3">`GetEnumerator`</ph> Methode, um einen angepassten Durchlauf auszuführen.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following are some cases in which you might need to do this.</source>
          <target state="translated">Es folgen einige Fälle, in denen Sie möglicherweise dazu.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to return to the beginning of the collection and start the iteration again before it is finished.</source>
          <target state="translated">Möglicherweise möchten am Anfang der auflistungs zurück, und die Iteration erneut starten, bevor er abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to skip over one or more elements for a variety of reasons.</source>
          <target state="translated">Möglicherweise möchten ein oder mehrere Elemente für eine Vielzahl von Gründen überspringen.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might need to change the elements of the collection in the middle of a traversal.</source>
          <target state="translated">Sie müssen möglicherweise die Elemente der Auflistung in der Mitte einen Durchlauf ändern.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>In this case you must obtain a new enumerator object because the previous one is invalidated.</source>
          <target state="translated">In diesem Fall müssen Sie ein neue Enumeratorobjekt abrufen, da der vorherige Schlüssel ungültig ist.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following example shows how to use <ph id="ph1">`GetEnumerator`</ph> to retrieve all the elements of a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie <ph id="ph1">`GetEnumerator`</ph> zum Abrufen aller Elemente des ein <ph id="ph2">`Collection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source><ph id="ph1">`GetEnumerator`</ph> constructs and returns an enumerator object, which implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface of the <ph id="ph3">&lt;xref:System.Collections&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">`GetEnumerator`</ph> erstellt und gibt ein Enumeratorobjekt, das implementiert die <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> Schnittstelle die <ph id="ph3">&lt;xref:System.Collections&gt;</ph> Namespace.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The enumerator object exposes the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> methods.</source>
          <target state="translated">Das Enumeratorobjekt macht die <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> Eigenschaft und die <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> und <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>für jede... Nächste Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> muss eine Zahl zwischen 1 und dem Wert der <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph>-Eigenschaft der Auflistung sein.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">Oder (B) Ein <ph id="ph1">&lt;see langword="Object" /&gt;</ph>-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Wenn <ph id="ph1">`Index`</ph> ist vom Typ <ph id="ph2">`Object`</ph>, <ph id="ph3">`Item`</ph> Eigenschaft versucht, diese behandeln, als eine <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> Array oder eine ganze Zahl.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Wenn <ph id="ph1">`Item`</ph> kann nicht konvertiert <ph id="ph2">`Index`</ph> auf <ph id="ph3">`String`</ph> oder <ph id="ph4">`Integer`</ph>, löst eine <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> Ausnahme.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">Die <ph id="ph1">`Item`</ph> Eigenschaft ist die Standardeigenschaft für eine Auflistung.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Aus diesem Grund sind die folgenden Codezeilen gleichwertig.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Item`</ph> Eigenschaft, um einen Verweis auf ein Objekt in einer Auflistung abzurufen.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Er erstellt <ph id="ph1">`birthdays`</ph> als eine <ph id="ph2">`Collection`</ph> -Objekt und ruft dann das Objekt, das Rechnungs, Geburtstag darstellt, mit dem Schlüssel <ph id="ph3">`"Bill"`</ph> als die <ph id="ph4">`Index`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Beachten Sie, die beim erste Aufruf gibt explizit an die <ph id="ph1">`Item`</ph> -Eigenschaft, der zweite jedoch nicht.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Beide Aufrufe funktionieren, da die <ph id="ph1">`Item`</ph> Eigenschaft ist die Standardeigenschaft für ein <ph id="ph2">`Collection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> muss eine Zahl zwischen 1 und dem Wert der <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph>-Eigenschaft der Auflistung sein.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">Oder (B) Ein <ph id="ph1">&lt;see langword="Object" /&gt;</ph>-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Wenn <ph id="ph1">`Index`</ph> ist vom Typ <ph id="ph2">`Object`</ph>, <ph id="ph3">`Item`</ph> Eigenschaft versucht, diese behandeln, als eine <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> Array oder eine ganze Zahl.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Wenn <ph id="ph1">`Item`</ph> kann nicht konvertiert <ph id="ph2">`Index`</ph> auf <ph id="ph3">`String`</ph> oder <ph id="ph4">`Integer`</ph>, löst eine <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> Ausnahme.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">Die <ph id="ph1">`Item`</ph> Eigenschaft ist die Standardeigenschaft für eine Auflistung.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Aus diesem Grund sind die folgenden Codezeilen gleichwertig.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Item`</ph> Eigenschaft, um einen Verweis auf ein Objekt in einer Auflistung abzurufen.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Er erstellt <ph id="ph1">`birthdays`</ph> als eine <ph id="ph2">`Collection`</ph> -Objekt und ruft dann das Objekt, das Rechnungs, Geburtstag darstellt, mit dem Schlüssel <ph id="ph3">`"Bill"`</ph> als die <ph id="ph4">`Index`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Beachten Sie, die beim erste Aufruf gibt explizit an die <ph id="ph1">`Item`</ph> -Eigenschaft, der zweite jedoch nicht.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Beide Aufrufe funktionieren, da die <ph id="ph1">`Item`</ph> Eigenschaft ist die Standardeigenschaft für ein <ph id="ph2">`Collection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">Ein eindeutiger <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> muss dem <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept>-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Gibt ein bestimmtes Element eines <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekts entweder nach Position oder nach Schlüssel zurück.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">Schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Wenn <ph id="ph1">`Index`</ph> ist vom Typ <ph id="ph2">`Object`</ph>, <ph id="ph3">`Item`</ph> Eigenschaft versucht, diese behandeln, als eine <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> Array oder eine ganze Zahl.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Wenn <ph id="ph1">`Item`</ph> kann nicht konvertiert <ph id="ph2">`Index`</ph> auf <ph id="ph3">`String`</ph> oder <ph id="ph4">`Integer`</ph>, löst eine <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> Ausnahme.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">Die <ph id="ph1">`Item`</ph> Eigenschaft ist die Standardeigenschaft für eine Auflistung.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Aus diesem Grund sind die folgenden Codezeilen gleichwertig.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Item`</ph> Eigenschaft, um einen Verweis auf ein Objekt in einer Auflistung abzurufen.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Er erstellt <ph id="ph1">`birthdays`</ph> als eine <ph id="ph2">`Collection`</ph> -Objekt und ruft dann das Objekt, das Rechnungs, Geburtstag darstellt, mit dem Schlüssel <ph id="ph3">`"Bill"`</ph> als die <ph id="ph4">`Index`</ph> Argument.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Beachten Sie, die beim erste Aufruf gibt explizit an die <ph id="ph1">`Item`</ph> -Eigenschaft, der zweite jedoch nicht.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Beide Aufrufe funktionieren, da die <ph id="ph1">`Item`</ph> Eigenschaft ist die Standardeigenschaft für ein <ph id="ph2">`Collection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Entfernt ein Element aus einem <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> muss eine Zahl zwischen 1 und dem Wert der <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph>-Eigenschaft der Auflistung sein.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Entfernt ein Element aus einem <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">Wenn <ph id="ph1">`Remove`</ph> Löscht ein Element aus einer Auflistung es verringert der Auflistung <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> Eigenschaft um eins.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">Es verringert wird auch der <ph id="ph1">`Index`</ph> Wert jedes Element, das früher gefolgt von dem gelöschten Element in der Auflistung.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">Wenn ein Element der Auflistung ohne hinzugefügte eine <ph id="ph1">`Key`</ph>, verwenden Sie die <ph id="ph2">`Index`</ph> zu entfernen.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Remove`</ph> -Methode zum Entfernen von Objekten aus einer <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt in der Variablen <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">Befolgen die vier Aufrufe von der <ph id="ph1">`Add`</ph> -Methode, die <ph id="ph2">`Count`</ph> Eigenschaft 4 enthält, Element <ph id="ph3">`"Bill"`</ph> hat Indexwert 1 und Element <ph id="ph4">`"Pete"`</ph> Indexwert 4 hat.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">Nach dem ersten Aufruf von <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> ist 3, Element <ph id="ph3">`"Bill"`</ph> wird gelöscht, und Element <ph id="ph4">`"Pete"`</ph> Indexwert 3 hat.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">Nach der zweite Aufruf von <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> ist 2. Element <ph id="ph3">`"Mike"`</ph> wird gelöscht, und Element <ph id="ph4">`"Pete"`</ph> hat den Indexwert 2.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">Ein eindeutiger <ph id="ph1">&lt;see langword="String" /&gt;</ph>-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> muss dem <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept>-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Entfernt ein Element aus einem <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">Wenn <ph id="ph1">`Remove`</ph> Löscht ein Element aus einer Auflistung es verringert der Auflistung <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> Eigenschaft um eins.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">Es verringert wird auch der <ph id="ph1">`Index`</ph> Wert jedes Element, das früher gefolgt von dem gelöschten Element in der Auflistung.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">Wenn ein Element der Auflistung ohne hinzugefügte eine <ph id="ph1">`Key`</ph>, verwenden Sie die <ph id="ph2">`Index`</ph> zu entfernen.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Dieses Beispiel veranschaulicht die Verwendung von der <ph id="ph1">`Remove`</ph> -Methode zum Entfernen von Objekten aus einer <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt in der Variablen <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">Befolgen die vier Aufrufe von der <ph id="ph1">`Add`</ph> -Methode, die <ph id="ph2">`Count`</ph> Eigenschaft 4 enthält, Element <ph id="ph3">`"Bill"`</ph> hat Indexwert 1 und Element <ph id="ph4">`"Pete"`</ph> Indexwert 4 hat.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">Nach dem ersten Aufruf von <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> ist 3, Element <ph id="ph3">`"Bill"`</ph> wird gelöscht, und Element <ph id="ph4">`"Pete"`</ph> Indexwert 3 hat.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">Nach der zweite Aufruf von <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> ist 2. Element <ph id="ph3">`"Mike"`</ph> wird gelöscht, und Element <ph id="ph4">`"Pete"`</ph> hat den Indexwert 2.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Das eindimensionale <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>, in das die Elemente aus dem <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt kopiert werden.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">Für das <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> muss eine nullbasierte Indizierung verwendet werden.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Der nullbasierte Index im <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept>, ab dem kopiert wird.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Kopiert die Elemente der <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> in ein <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, beginnend bei einem bestimmten <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>-Index.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Die Elemente kopiert werden, um die <ph id="ph1">&lt;xref:System.Array&gt;</ph> in der gleichen Reihenfolge, in dem sich der Enumerator durchläuft, die <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is obtained from the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</source>
          <target state="translated">Diese Methode ist eine O (<ph id="ph1">`n`</ph>)-Vorgang, in dem <ph id="ph2">`n`</ph> stammt von der <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kleiner als Null.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist mehrdimensional.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der aus dem <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Quellobjekt zu kopierenden Elemente ist größer als der verfügbare Platz von <ph id="ph2">&lt;paramref name="index" /&gt;</ph> bis zum Ende des Ziel-<ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Der Typ des Quell-<ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekts kann nicht automatisch in den Typ des Ziel-<ph id="ph2">&lt;paramref name="array" /&gt;</ph> umgewandelt werden.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object that can be used to iterate through the collection.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">[Visual Basic, c#]</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Die <ph id="ph1">`foreach`</ph>-Anweisung der Programmiersprache C# (<ph id="ph2">`for each`</ph> in Visual Basic) verbirgt die Komplexität der Enumeratoren.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Daher empfiehlt es sich, <ph id="ph1">`foreach`</ph> zu verwenden und den Enumerator nicht direkt zu ändern.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Mit Enumeratoren können die Daten in der Auflistung zwar gelesen, jedoch nicht zum Ändern der zugrunde liegenden Auflistung verwendet werden.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Zu Beginn wird der Enumerator vor das erste Element in der Auflistung positioniert.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> Methode setzt den Enumerator ebenfalls auf diese Position zurück.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">An dieser Position ist die <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> Eigenschaft ist nicht definiert.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen daher rufen die <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> Methode, um den Enumerator auf das erste Element der Auflistung vor dem Lesen des Werts von <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> gibt solange dasselbe Objekt zurück, bis <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> oder <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> legt <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> auf das nächste Element fest.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> übergibt am Ende der Auflistung der Enumerator hinter dem letzten Element in der Auflistung positioniert ist und <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> gibt <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Wenn der Enumerator ist an dieser Position ist nachfolgende Aufrufe <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> auch zurückgeben <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Wenn der letzte Aufruf <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> gibt <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> ist nicht definiert.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> wieder auf das erste Element der Auflistung festzulegen, können Sie <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> gefolgt von <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> aufrufen.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Ein Enumerator bleibt gültig, solange die Auflistung unverändert ist.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Werden an der Auflistung Änderungen wie z. B. Hinzufügen, Bearbeiten oder Entfernen von Elementen vorgenommen, verliert der Enumerator unwiederbringlich seine Gültigkeit und sein Verhalten ist nicht definiert.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Der Enumerator hat keinen exklusiven Zugriff auf die Auflistung; daher ist die Enumeration einer Auflistung systembedingt kein threadsicheres Verfahren.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Um während der Enumeration Threadsicherheit zu garantieren, können Sie die Auflistung während der gesamten Enumeration sperren.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Um den Lese- und Schreibzugriff auf diese Auflistung durch mehrere Threads zuzulassen, müssen Sie eine eigene Synchronisierung implementieren.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Die dem <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>-Objekt hinzuzufügende <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Fügt dem <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt ein Element hinzu.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">Die Position, an der das neue Element eingefügt wurde.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Sie können auch die <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> zum Hinzufügen neuer Elemente durch Festlegen des Werts eines Schlüssels, die Eigenschaft ist nicht vorhanden, der <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt ist schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt hat eine feste Größe.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Removes all items from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Entfernt alle Elemente aus dem <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>This method removes all items from the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Diese Methode entfernt alle Elemente aus der <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> ist schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das im <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object contains a specific value.</source>
          <target state="translated">Bestimmt, ob das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt einen bestimmten Wert enthält.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Returns <ph id="ph1">&lt;see langword="True" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">Gibt <ph id="ph1">&lt;see langword="True" /&gt;</ph> zurück, wenn das <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> im <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt gefunden wird, andernfalls <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>This method determines whether the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object contains a specific value.</source>
          <target state="translated">Diese Methode bestimmt, ob die <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt einen bestimmten Wert enthält.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das im <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Bestimmt den Index eines bestimmten Elements im <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if found in the collection; otherwise, -1.</source>
          <target state="translated">Der Index von <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, wenn das Element in der Auflistung gefunden wird, andernfalls -1.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>This method determines the index of a specific item in the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Diese Methode bestimmt den Index eines bestimmten Elements in der <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">Der nullbasierte Index, an dem <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> eingefügt werden soll.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to insert into the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Das in das <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>-Objekt einzufügende <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object at the specified index.</source>
          <target state="translated">Fügt dem <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt am angegebenen Index ein Element hinzu.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, then <ph id="ph3">`value`</ph> is appended to the end.</source>
          <target state="translated">Wenn <ph id="ph1">`index`</ph> entspricht der Anzahl der Elemente in der <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> -Objekt, klicken Sie dann <ph id="ph3">`value`</ph> am Ende angefügt ist.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, werden die Elemente hinter der Einfügemarke nach unten verschoben, um das neue Element aufzunehmen.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kein gültiger Index im <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt ist schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt hat eine feste Größe.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is null reference in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> ist im <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt ein NULL-Verweis.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Das aus dem <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>-Objekt zu entfernende <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Entfernt das erste Vorkommen eines bestimmten Objekts aus dem <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, wird die nach dem Entfernen eines Elements entstandene Lücke durch Verschieben aller nachfolgenden Elemente gefüllt.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not found in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object remains unchanged and no exception is thrown.</source>
          <target state="translated">Wenn <ph id="ph1">`value`</ph> befindet sich nicht der <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> -Objekt, das <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt bleibt unverändert, und es wird keine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt ist schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt hat eine feste Größe.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The zero-based index of the item to remove.</source>
          <target state="translated">Der nullbasierte Index des zu entfernenden Elements.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Removes the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object item at the specified index.</source>
          <target state="translated">Entfernt das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objektelement am angegebenen Index.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, wird die nach dem Entfernen eines Elements entstandene Lücke durch Verschieben aller nachfolgenden Elemente gefüllt.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kein gültiger Index im <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt ist schreibgeschützt.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt hat eine feste Größe.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>The object that initiated the callback.</source>
          <target state="translated">Das Objekt, das den Rückruf initiiert hat.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Runs after the entire <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">Wird ausgeführt, nachdem das gesamte <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objektdiagramm deserialisiert wurde.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>This method is called after the entire <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">Diese Methode wird aufgerufen, nachdem die gesamte <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objektdiagramm deserialisiert wurde.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>-Objekt mit den zum Serialisieren des <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekts erforderlichen Informationen.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>-Objekt mit der Quelle und dem Ziel des serialisierten Streams, der dem <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekt zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Returns the data needed to serialize the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Gibt die zum Serialisieren des <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>-Objekts erforderlichen Daten zurück.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface.</source>
          <target state="translated">Implementiert die <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph>-Schnittstelle.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method returns the data needed to serialize the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Diese Methode gibt die zum Serialisieren von Daten die <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> Objekt.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
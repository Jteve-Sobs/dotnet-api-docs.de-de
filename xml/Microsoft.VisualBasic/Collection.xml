<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="262af-101">Eine Visual Basic-<see langword="Collection" /> ist eine geordnete Menge von Elementen, auf die als Einheit verwiesen werden kann.</span><span class="sxs-lookup"><span data-stu-id="262af-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="262af-102">Wann immer möglich, sollten Sie die generischen Auflistungen im Verwenden der <xref:System.Collections.Generic?displayProperty=nameWithType> Namespace oder die <xref:System.Collections.Concurrent> Namespace anstelle einer Visual Basic `Collection`.</span><span class="sxs-lookup"><span data-stu-id="262af-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="262af-103">Weitere Informationen finden Sie unter [Sammlungen](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="262af-103">For more information, see [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="262af-104">Visual Basic `Collection` Objekt bietet eine einfache Möglichkeit zum Verweisen auf eine verwandte Gruppe von Elementen als einzelnes Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="262af-105">Die Elemente oder *Elemente*in einem Auflistungsfunktionen müssen nur durch die Tatsache, dass in der Auflistung vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="262af-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="262af-106">Elemente einer Auflistung müssen nicht denselben Datentyp aufweisen.</span><span class="sxs-lookup"><span data-stu-id="262af-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="262af-107">Sie können erstellen eine Auflistung erstellen anderer Objekte, wie im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="262af-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="262af-108">Nachdem Sie eine Sammlung erstellt haben, können Sie Folgendes tun:</span><span class="sxs-lookup"><span data-stu-id="262af-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="262af-109">Fügen Sie ein Element mit dem <xref:Microsoft.VisualBasic.Collection.Add%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="262af-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="262af-110">Entfernen Sie ein Element mit dem <xref:Microsoft.VisualBasic.Collection.Remove%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="262af-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="262af-111">Entfernen Sie alle Elemente mit dem <xref:Microsoft.VisualBasic.Collection.Clear%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="262af-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="262af-112">Informieren Sie sich über wie viele Elemente die Auflistung enthält, mit der <xref:Microsoft.VisualBasic.Collection.Count%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="262af-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="262af-113">Überprüfen Sie, ob ein bestimmtes Element vorhanden ist, mit der <xref:Microsoft.VisualBasic.Collection.Contains%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="262af-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="262af-114">Zurückgeben ein bestimmtes Elements aus der Auflistung mit den <xref:Microsoft.VisualBasic.Collection.Item%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="262af-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="262af-115">Durchlaufen Sie die gesamte Auflistung mit den [für jede... Nächste Anweisung](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="262af-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="262af-116">Obwohl Visual Basic `Collection` Objekt verfügt über Funktionen, die identisch mit der `Collection` -Objekt in Visual Basic 6.0, Interoperation kann nicht in einer COM-Umgebung.</span><span class="sxs-lookup"><span data-stu-id="262af-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="262af-117">Durchlaufen eine Visual Basic `Collection` ist keine threadsichere Prozedur.</span><span class="sxs-lookup"><span data-stu-id="262af-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="262af-118">Selbst wenn die Auflistung synchronisiert wird, können andere Threads nach wie vor die Auflistung, wodurch des Enumerators eine Ausnahme auslöst geändert.</span><span class="sxs-lookup"><span data-stu-id="262af-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="262af-119">Um während der Enumeration Threadsicherheit zu gewährleisten, Sperren Sie die Auflistung oder Ausnahmen Sie die aufgrund von Änderungen von anderen Threads.</span><span class="sxs-lookup"><span data-stu-id="262af-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="262af-120">Weitere Informationen zur Sperrung ein Programmierelement finden Sie unter [SyncLock-Anweisung](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="262af-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-121">Das folgende Beispiel erstellt die `Collection` Objekt `names` und ein Dialogfeld, in dem ein Benutzer Objekte (Namen) der Auflistung hinzufügen kann.</span><span class="sxs-lookup"><span data-stu-id="262af-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="262af-122">Es zeigt dann die Namen in der Auflistung, und schließlich ohne Freigabe des leert die Sammlung der `Collection` Objekt selbst.</span><span class="sxs-lookup"><span data-stu-id="262af-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="262af-123">Um anzuzeigen, wie dies funktioniert, wählen Sie die **Klasse hinzufügen** Befehl die **Projekt** Menü, und deklarieren Sie eine öffentliche Variable namens `instanceName` auf Modulebene von `nameClass` (Typ `Public instanceName`) zum Speichern die Namen der einzelnen Instanzen.</span><span class="sxs-lookup"><span data-stu-id="262af-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="262af-124">Lassen Sie den Standardnamen als `nameClass`.</span><span class="sxs-lookup"><span data-stu-id="262af-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="262af-125">Kopieren Sie den folgenden Code in die **allgemeine** Teil ein anderes Modul, und starten Sie ihn mit der Anweisung `classNamer` in einer anderen Prozedur.</span><span class="sxs-lookup"><span data-stu-id="262af-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="262af-126">(Dieses Beispiel funktioniert nur mit hostanwendungen, die Klassen unterstützt.)</span><span class="sxs-lookup"><span data-stu-id="262af-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="262af-127">Erstellt ein neues <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt von Visual Basic und gibt dieses zurück</span><span class="sxs-lookup"><span data-stu-id="262af-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-128">Die Visual Basic-Auflistung zurückgegeben, die von diesem Konstruktor ist leer und verfügt nicht über keine zugeordnete Anfangskapazität.</span><span class="sxs-lookup"><span data-stu-id="262af-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="262af-129">Visual Basic-Auflistungen sind nicht kompatibel mit der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Sammlungen zur Verfügung, in der <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, und <xref:System.Collections.Specialized?displayProperty=nameWithType> Namespaces.</span><span class="sxs-lookup"><span data-stu-id="262af-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-130">Das folgende Beispiel erstellt eine neue Visual Basic-Sammlung und der Variablen zugewiesen `coll`:</span><span class="sxs-lookup"><span data-stu-id="262af-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="262af-131">Dies `Collection` Objekt ist 1-basiert, d. h., der die Indexwerte des Elemente reichen von 1 bis zum Wert von der `Count` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="262af-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="262af-132">Visual Basic-Auflistungen speichern Elemente des Typs <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="262af-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="262af-133">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="262af-133">Required.</span></span> <span data-ttu-id="262af-134">Ein Objekt eines beliebigen Typs, das das Element angibt, das der Auflistung hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="262af-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="262af-135">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="262af-135">Optional.</span></span> <span data-ttu-id="262af-136">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf dieses neue Element in der Auflistung zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="262af-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="262af-137">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="262af-137">Optional.</span></span> <span data-ttu-id="262af-138">Ein Ausdruck, der eine relative Position in der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="262af-139">Das hinzuzufügende Element wird in der Auflistung vor dem Element platziert, das vom <c>Before</c>-Argument angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="262af-139">The element to be added is placed in the collection before the element identified by the <c>Before</c> argument.</span></span> <span data-ttu-id="262af-140">Wenn <c>Before</c> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung handeln.</span><span class="sxs-lookup"><span data-stu-id="262af-140">If <c>Before</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="262af-141">Ist <c>Before</c> ein <see langword="String" />-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-141">If <c>Before</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="262af-142">Sie können nicht gleichzeitig <c>Before</c> und <c>After</c> angeben.</span><span class="sxs-lookup"><span data-stu-id="262af-142">You cannot specify both <c>Before</c> and <c>After</c>.</span></span></param>
        <param name="After"><span data-ttu-id="262af-143">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="262af-143">Optional.</span></span> <span data-ttu-id="262af-144">Ein Ausdruck, der eine relative Position in der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="262af-145">Das hinzuzufügende Element wird in der Auflistung nach dem Element platziert, das vom <c>After</c>-Argument angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="262af-145">The element to be added is placed in the collection after the element identified by the <c>After</c> argument.</span></span> <span data-ttu-id="262af-146">Wenn <c>After</c> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <see langword="Count" />-Eigenschaft der Auflistung handeln.</span><span class="sxs-lookup"><span data-stu-id="262af-146">If <c>After</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="262af-147">Ist <c>After</c> ein <see langword="String" />-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-147">If <c>After</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="262af-148">Sie können nicht gleichzeitig <c>Before</c> und <c>After</c> angeben.</span><span class="sxs-lookup"><span data-stu-id="262af-148">You cannot specify both <c>Before</c> and <c>After</c>.</span></span></param>
        <summary><span data-ttu-id="262af-149">Fügt einem <see langword="Collection" />-Objekt ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="262af-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-150">Die `Before` oder `After` Argument muss mit einem vorhandenen Element der Auflistung verweisen; andernfalls ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="262af-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="262af-151">Wenn beide die `Before` und `After` Argumente ausgelassen werden, wird das neue Objekt am Ende der Auflistung hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="262af-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="262af-152">Außerdem tritt ein Fehler auf, wenn ein angegebenes `Key` Wert entspricht den Schlüssel für ein vorhandenes Element der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="262af-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-153">Im folgenden Beispiel wird die `Add` Methode hinzufügen `child` Objekte – Instanzen einer Klasse mit dem Namen `child` , enthält eine `Public` Eigenschaft `name` – um eine Auflistung mit dem Namen `family`.</span><span class="sxs-lookup"><span data-stu-id="262af-153">The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`.</span></span> <span data-ttu-id="262af-154">Um anzuzeigen, wie dies funktioniert, erstellen eine <xref:System.Windows.Forms.Form> mit zwei <xref:System.Windows.Forms.Button> Steuerelementen, und legen ihre <xref:System.Windows.Forms.Control.Text%2A> Eigenschaften `Add` und `List`.</span><span class="sxs-lookup"><span data-stu-id="262af-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="262af-155">Hinzufügen der `child` Klassendefinition und der `family` Deklaration, um den Formularcode.</span><span class="sxs-lookup"><span data-stu-id="262af-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="262af-156">Ändern der `_Click` -Ereignishandler für das **hinzufügen** und **Liste** Schaltflächen wie gezeigt.</span><span class="sxs-lookup"><span data-stu-id="262af-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="262af-157">Die **hinzufügen** Schaltfläche können Sie untergeordnete Elemente hinzufügen.</span><span class="sxs-lookup"><span data-stu-id="262af-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="262af-158">Die **Liste** Schaltfläche zeigt die Namen aller untergeordneten Elemente.</span><span class="sxs-lookup"><span data-stu-id="262af-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="262af-159">Löscht alle Elemente eines <see langword="Collection" />-Objekts in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="262af-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-160">Die `Clear` Methode leert die Auflistung und setzt seine <xref:Microsoft.VisualBasic.Collection.Count%2A> Eigenschaft auf 0.</span><span class="sxs-lookup"><span data-stu-id="262af-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="262af-161">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="262af-161">Required.</span></span> <span data-ttu-id="262af-162">Ein <see langword="String" />-Ausdruck, der den Schlüssel angibt, nach dem die Elemente der Auflistung durchsucht werden sollen.</span><span class="sxs-lookup"><span data-stu-id="262af-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="262af-163">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein <see langword="Collection" />-Objekt in Visual Basic ein Element mit einem bestimmten Schlüssel enthält.</span><span class="sxs-lookup"><span data-stu-id="262af-163">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="262af-164">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein <see langword="Collection" />-Objekt in Visual Basic ein Element mit einem bestimmten Schlüssel enthält.</span><span class="sxs-lookup"><span data-stu-id="262af-164">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-165">`Contains` Gibt `True` , wenn die Auflistung ein Element mit einem exakt übereinstimmenden Schlüssel enthält `Key`.</span><span class="sxs-lookup"><span data-stu-id="262af-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="262af-166">Andernfalls `Contains` gibt `False`.</span><span class="sxs-lookup"><span data-stu-id="262af-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="262af-167">Groß-/Kleinschreibung wird ignoriert, beim Ermitteln von Übereinstimmungen Schlüsselwerte.</span><span class="sxs-lookup"><span data-stu-id="262af-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="262af-168">Ein Visual Basic `Collection` kann einige Elemente, die Schlüssel enthalten und andere Elemente ohne Schlüssel enthalten.</span><span class="sxs-lookup"><span data-stu-id="262af-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="262af-169">Dies hängt davon ab, ob der Aufruf der <xref:Microsoft.VisualBasic.Collection.Add%2A> Methode ein Argument für den optionalen `Key` Parameter.</span><span class="sxs-lookup"><span data-stu-id="262af-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="262af-170">Wenn Sie beabsichtigen, Elemente, die mit den Schlüsseln der Auflistung gesucht werden soll, müssen Sie angeben der `Key` Argument jedes Mal, wenn Sie rufen die `Add` Methode.</span><span class="sxs-lookup"><span data-stu-id="262af-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="262af-171">Gibt eine <see langword="Integer" /> zurück, die die Anzahl der Elemente in einer Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="262af-171">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span></span> <span data-ttu-id="262af-172">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-172">Read-only.</span></span></summary>
        <value><span data-ttu-id="262af-173">Gibt eine <see langword="Integer" /> zurück, die die Anzahl der Elemente in einer Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="262af-173">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span></span> <span data-ttu-id="262af-174">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-174">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-175">Verwenden der `Count` -Eigenschaft zum Bestimmen der Anzahl von Elementen in einem `Collection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-175">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-176">Dieses Beispiel veranschaulicht die Verwendung von der `Count` Eigenschaft zum Anzeigen der Anzahl von Elementen in einem <xref:Microsoft.VisualBasic.Collection> Objekt in der Variablen `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="262af-176">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262af-177">Die `Collection` Objekt ist 1-basiert, d. h., der die Indexwerte des Elemente reichen von 1 bis zum Wert von der `Count` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="262af-177">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="262af-178">Gibt einen Verweis auf ein Enumeratorobjekt zurück, das zum Durchlaufen eines <see cref="T:Microsoft.VisualBasic.Collection" />-Objekts verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="262af-178">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="262af-179">Gibt einen Verweis auf ein Enumeratorobjekt zurück, das zum Durchlaufen eines <see cref="T:Microsoft.VisualBasic.Collection" />-Objekts verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="262af-179">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-180">Die [für jede... Nächste Anweisung](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Aufrufe `GetEnumerator` ein Enumeratorobjekt zur Unterstützung von Iteration über die Elemente einer Auflistung abrufen.</span><span class="sxs-lookup"><span data-stu-id="262af-180">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="262af-181">Normalerweise verwenden Sie eine `For Each`... `Next` Schleife, um eine Auflistung oder ein Array durchlaufen, und Sie müssen nicht aufrufen `GetEnumerator` explizit.</span><span class="sxs-lookup"><span data-stu-id="262af-181">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="262af-182">Wenn Sie genauere Kontrolle über die Iteration als benötigen die `For Each`... `Next` Anweisungen bereitstellen, können Sie die `GetEnumerator` Methode, um einen angepassten Durchlauf auszuführen.</span><span class="sxs-lookup"><span data-stu-id="262af-182">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="262af-183">Es folgen einige Fälle, in denen Sie möglicherweise dazu.</span><span class="sxs-lookup"><span data-stu-id="262af-183">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="262af-184">Möglicherweise möchten am Anfang der auflistungs zurück, und die Iteration erneut starten, bevor er abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="262af-184">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="262af-185">Möglicherweise möchten ein oder mehrere Elemente für eine Vielzahl von Gründen überspringen.</span><span class="sxs-lookup"><span data-stu-id="262af-185">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="262af-186">Sie müssen möglicherweise die Elemente der Auflistung in der Mitte einen Durchlauf ändern.</span><span class="sxs-lookup"><span data-stu-id="262af-186">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="262af-187">In diesem Fall müssen Sie ein neue Enumeratorobjekt abrufen, da der vorherige Schlüssel ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="262af-187">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-188">Das folgende Beispiel zeigt, wie Sie `GetEnumerator` zum Abrufen aller Elemente des ein `Collection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-188">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="262af-189">`GetEnumerator` erstellt und gibt ein Enumeratorobjekt, das implementiert die <xref:System.Collections.IEnumerator> Schnittstelle die <xref:System.Collections> Namespace.</span><span class="sxs-lookup"><span data-stu-id="262af-189">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="262af-190">Das Enumeratorobjekt macht die <xref:System.Collections.IEnumerator.Current%2A> Eigenschaft und die <xref:System.Collections.IEnumerator.MoveNext%2A> und <xref:System.Collections.IEnumerator.Reset%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="262af-190">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="262af-191">Weitere Informationen finden Sie unter [für jede... Nächste Anweisung](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="262af-191">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262af-192">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-192">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-193">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-193">Read-only.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="262af-194">(A) Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-194">(A) A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="262af-195"><c>Index</c> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</span><span class="sxs-lookup"><span data-stu-id="262af-195"><c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="262af-196">Oder (B) Ein <see langword="Object" />-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-196">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="262af-197">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-197">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-198">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-198">Read-only.</span></span></summary>
        <value><span data-ttu-id="262af-199">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-199">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-200">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-200">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-201">Wenn `Index` ist vom Typ `Object`, `Item` Eigenschaft versucht, diese behandeln, als eine `String`, `Char`, `Char` Array oder eine ganze Zahl.</span><span class="sxs-lookup"><span data-stu-id="262af-201">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="262af-202">Wenn `Item` kann nicht konvertiert `Index` auf `String` oder `Integer`, löst eine <xref:System.ArgumentException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="262af-202">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="262af-203">Die `Item` Eigenschaft ist die Standardeigenschaft für eine Auflistung.</span><span class="sxs-lookup"><span data-stu-id="262af-203">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="262af-204">Aus diesem Grund sind die folgenden Codezeilen gleichwertig.</span><span class="sxs-lookup"><span data-stu-id="262af-204">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="262af-205">Im folgenden Beispiel wird die `Item` Eigenschaft, um einen Verweis auf ein Objekt in einer Auflistung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="262af-205">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="262af-206">Er erstellt `birthdays` als eine `Collection` -Objekt und ruft dann das Objekt, das Rechnungs, Geburtstag darstellt, mit dem Schlüssel `"Bill"` als die `Index` Argument.</span><span class="sxs-lookup"><span data-stu-id="262af-206">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="262af-207">Beachten Sie, die beim erste Aufruf gibt explizit an die `Item` -Eigenschaft, der zweite jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="262af-207">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="262af-208">Beide Aufrufe funktionieren, da die `Item` Eigenschaft ist die Standardeigenschaft für ein `Collection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-208">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="262af-209">(A) Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-209">(A) A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="262af-210"><c>Index</c> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</span><span class="sxs-lookup"><span data-stu-id="262af-210"><c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="262af-211">Oder (B) Ein <see langword="Object" />-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-211">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="262af-212">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-212">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-213">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-213">Read-only.</span></span></summary>
        <value><span data-ttu-id="262af-214">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-214">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-215">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-215">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-216">Wenn `Index` ist vom Typ `Object`, `Item` Eigenschaft versucht, diese behandeln, als eine `String`, `Char`, `Char` Array oder eine ganze Zahl.</span><span class="sxs-lookup"><span data-stu-id="262af-216">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="262af-217">Wenn `Item` kann nicht konvertiert `Index` auf `String` oder `Integer`, löst eine <xref:System.ArgumentException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="262af-217">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="262af-218">Die `Item` Eigenschaft ist die Standardeigenschaft für eine Auflistung.</span><span class="sxs-lookup"><span data-stu-id="262af-218">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="262af-219">Aus diesem Grund sind die folgenden Codezeilen gleichwertig.</span><span class="sxs-lookup"><span data-stu-id="262af-219">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="262af-220">Im folgenden Beispiel wird die `Item` Eigenschaft, um einen Verweis auf ein Objekt in einer Auflistung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="262af-220">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="262af-221">Er erstellt `birthdays` als eine `Collection` -Objekt und ruft dann das Objekt, das Rechnungs, Geburtstag darstellt, mit dem Schlüssel `"Bill"` als die `Index` Argument.</span><span class="sxs-lookup"><span data-stu-id="262af-221">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="262af-222">Beachten Sie, die beim erste Aufruf gibt explizit an die `Item` -Eigenschaft, der zweite jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="262af-222">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="262af-223">Beide Aufrufe funktionieren, da die `Item` Eigenschaft ist die Standardeigenschaft für ein `Collection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-223">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="262af-224">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="262af-224">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="262af-225"><c>Key</c> muss dem <c>Key</c>-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-225"><c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="262af-226">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-226">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-227">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-227">Read-only.</span></span></summary>
        <value><span data-ttu-id="262af-228">Gibt ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-228">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="262af-229">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-229">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-230">Wenn `Index` ist vom Typ `Object`, `Item` Eigenschaft versucht, diese behandeln, als eine `String`, `Char`, `Char` Array oder eine ganze Zahl.</span><span class="sxs-lookup"><span data-stu-id="262af-230">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="262af-231">Wenn `Item` kann nicht konvertiert `Index` auf `String` oder `Integer`, löst eine <xref:System.ArgumentException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="262af-231">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="262af-232">Die `Item` Eigenschaft ist die Standardeigenschaft für eine Auflistung.</span><span class="sxs-lookup"><span data-stu-id="262af-232">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="262af-233">Aus diesem Grund sind die folgenden Codezeilen gleichwertig.</span><span class="sxs-lookup"><span data-stu-id="262af-233">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="262af-234">Im folgenden Beispiel wird die `Item` Eigenschaft, um einen Verweis auf ein Objekt in einer Auflistung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="262af-234">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="262af-235">Er erstellt `birthdays` als eine `Collection` -Objekt und ruft dann das Objekt, das Rechnungs, Geburtstag darstellt, mit dem Schlüssel `"Bill"` als die `Index` Argument.</span><span class="sxs-lookup"><span data-stu-id="262af-235">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="262af-236">Beachten Sie, die beim erste Aufruf gibt explizit an die `Item` -Eigenschaft, der zweite jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="262af-236">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="262af-237">Beide Aufrufe funktionieren, da die `Item` Eigenschaft ist die Standardeigenschaft für ein `Collection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-237">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262af-238">Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-238">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="262af-239">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="262af-239">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="262af-240"><c>Index</c> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</span><span class="sxs-lookup"><span data-stu-id="262af-240"><c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="262af-241">Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-241">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-242">Wenn `Remove` Löscht ein Element aus einer Auflistung es verringert der Auflistung <xref:Microsoft.VisualBasic.Collection.Count%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="262af-242">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="262af-243">Es verringert wird auch der `Index` Wert jedes Element, das früher gefolgt von dem gelöschten Element in der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="262af-243">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="262af-244">Wenn ein Element der Auflistung ohne hinzugefügte eine `Key`, verwenden Sie die `Index` zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="262af-244">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-245">Dieses Beispiel veranschaulicht die Verwendung von der `Remove` -Methode zum Entfernen von Objekten aus einer <xref:Microsoft.VisualBasic.Collection> Objekt in der Variablen `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="262af-245">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="262af-246">Befolgen die vier Aufrufe von der `Add` -Methode, die `Count` Eigenschaft 4 enthält, Element `"Bill"` hat Indexwert 1 und Element `"Pete"` Indexwert 4 hat.</span><span class="sxs-lookup"><span data-stu-id="262af-246">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="262af-247">Nach dem ersten Aufruf von `Remove`, `Count` ist 3, Element `"Bill"` wird gelöscht, und Element `"Pete"` Indexwert 3 hat.</span><span class="sxs-lookup"><span data-stu-id="262af-247">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="262af-248">Nach der zweite Aufruf von `Remove`, `Count` ist 2. Element `"Mike"` wird gelöscht, und Element `"Pete"` hat den Indexwert 2.</span><span class="sxs-lookup"><span data-stu-id="262af-248">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="262af-249">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="262af-249">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="262af-250"><c>Key</c> muss dem <c>Key</c>-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-250"><c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="262af-251">Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-251">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-252">Wenn `Remove` Löscht ein Element aus einer Auflistung es verringert der Auflistung <xref:Microsoft.VisualBasic.Collection.Count%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="262af-252">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="262af-253">Es verringert wird auch der `Index` Wert jedes Element, das früher gefolgt von dem gelöschten Element in der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="262af-253">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="262af-254">Wenn ein Element der Auflistung ohne hinzugefügte eine `Key`, verwenden Sie die `Index` zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="262af-254">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262af-255">Dieses Beispiel veranschaulicht die Verwendung von der `Remove` -Methode zum Entfernen von Objekten aus einer <xref:Microsoft.VisualBasic.Collection> Objekt in der Variablen `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="262af-255">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="262af-256">Befolgen die vier Aufrufe von der `Add` -Methode, die `Count` Eigenschaft 4 enthält, Element `"Bill"` hat Indexwert 1 und Element `"Pete"` Indexwert 4 hat.</span><span class="sxs-lookup"><span data-stu-id="262af-256">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="262af-257">Nach dem ersten Aufruf von `Remove`, `Count` ist 3, Element `"Bill"` wird gelöscht, und Element `"Pete"` Indexwert 3 hat.</span><span class="sxs-lookup"><span data-stu-id="262af-257">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="262af-258">Nach der zweite Aufruf von `Remove`, `Count` ist 2. Element `"Mike"` wird gelöscht, und Element `"Pete"` hat den Indexwert 2.</span><span class="sxs-lookup"><span data-stu-id="262af-258">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="262af-259">Das eindimensionale <see cref="T:System.Array" />, in das die Elemente aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt kopiert werden.</span><span class="sxs-lookup"><span data-stu-id="262af-259">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="262af-260">Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="262af-260">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="262af-261">Der nullbasierte Index im <c>array</c>, ab dem kopiert wird.</span><span class="sxs-lookup"><span data-stu-id="262af-261">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="262af-262">Kopiert die Elemente der <see cref="T:Microsoft.VisualBasic.Collection" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</span><span class="sxs-lookup"><span data-stu-id="262af-262">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span> <span data-ttu-id="262af-263">Implementiert die <see cref="T:System.Collections.ICollection" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-263">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-264">Die Elemente kopiert werden, um die <xref:System.Array> in der gleichen Reihenfolge, in dem sich der Enumerator durchläuft, die <xref:Microsoft.VisualBasic.Collection> Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-264">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="262af-265">Diese Methode ist eine O (`n`)-Vorgang, in dem `n` stammt von der <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span><span class="sxs-lookup"><span data-stu-id="262af-265">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="262af-266"><paramref name="array" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="262af-266"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="262af-267"><paramref name="index" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="262af-267"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="262af-268"><paramref name="array" /> ist mehrdimensional.</span><span class="sxs-lookup"><span data-stu-id="262af-268"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="262af-269">- oder - </span><span class="sxs-lookup"><span data-stu-id="262af-269">-or-</span></span>  
  
 <span data-ttu-id="262af-270">Die Anzahl der aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Quellobjekt zu kopierenden Elemente ist größer als der verfügbare Platz von <paramref name="index" /> bis zum Ende des Ziel-<paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="262af-270">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="262af-271">Der Typ des Quell-<see cref="T:Microsoft.VisualBasic.Collection" />-Objekts kann nicht automatisch in den Typ des Ziel-<paramref name="array" /> umgewandelt werden.</span><span class="sxs-lookup"><span data-stu-id="262af-271">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="262af-272">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</span><span class="sxs-lookup"><span data-stu-id="262af-272">Returns an enumerator that iterates through the collection.</span></span> <span data-ttu-id="262af-273">Implementiert die <see cref="T:System.Collections.ICollection" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-273">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <returns><span data-ttu-id="262af-274">Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="262af-274">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-275">[Visual Basic, c#]</span><span class="sxs-lookup"><span data-stu-id="262af-275">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="262af-276">Die `foreach`-Anweisung der Programmiersprache C# (`for each` in Visual Basic) verbirgt die Komplexität der Enumeratoren.</span><span class="sxs-lookup"><span data-stu-id="262af-276">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="262af-277">Daher empfiehlt es sich, `foreach` zu verwenden und den Enumerator nicht direkt zu ändern.</span><span class="sxs-lookup"><span data-stu-id="262af-277">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="262af-278">Mit Enumeratoren können die Daten in der Auflistung zwar gelesen, jedoch nicht zum Ändern der zugrunde liegenden Auflistung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="262af-278">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="262af-279">Zu Beginn wird der Enumerator vor das erste Element in der Auflistung positioniert.</span><span class="sxs-lookup"><span data-stu-id="262af-279">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="262af-280">Die <xref:System.Collections.IEnumerator.Reset%2A> Methode setzt den Enumerator ebenfalls auf diese Position zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-280">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="262af-281">An dieser Position ist die <xref:System.Collections.IEnumerator.Current%2A> Eigenschaft ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="262af-281">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="262af-282">Sie müssen daher rufen die <xref:System.Collections.IEnumerator.MoveNext%2A> Methode, um den Enumerator auf das erste Element der Auflistung vor dem Lesen des Werts von <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="262af-282">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="262af-283"><xref:System.Collections.IEnumerator.Current%2A> gibt solange dasselbe Objekt zurück, bis <xref:System.Collections.IEnumerator.MoveNext%2A> oder <xref:System.Collections.IEnumerator.Reset%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="262af-283"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="262af-284"><xref:System.Collections.IEnumerator.MoveNext%2A> legt <xref:System.Collections.IEnumerator.Current%2A> auf das nächste Element fest.</span><span class="sxs-lookup"><span data-stu-id="262af-284"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="262af-285">Wenn <xref:System.Collections.IEnumerator.MoveNext%2A> übergibt am Ende der Auflistung der Enumerator hinter dem letzten Element in der Auflistung positioniert ist und <xref:System.Collections.IEnumerator.MoveNext%2A> gibt `false`.</span><span class="sxs-lookup"><span data-stu-id="262af-285">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="262af-286">Wenn der Enumerator ist an dieser Position ist nachfolgende Aufrufe <xref:System.Collections.IEnumerator.MoveNext%2A> auch zurückgeben `false`.</span><span class="sxs-lookup"><span data-stu-id="262af-286">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="262af-287">Wenn der letzte Aufruf <xref:System.Collections.IEnumerator.MoveNext%2A> gibt `false`, <xref:System.Collections.IEnumerator.Current%2A> ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="262af-287">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="262af-288">Um <xref:System.Collections.IEnumerator.Current%2A> wieder auf das erste Element der Auflistung festzulegen, können Sie <xref:System.Collections.IEnumerator.Reset%2A> gefolgt von <xref:System.Collections.IEnumerator.MoveNext%2A> aufrufen.</span><span class="sxs-lookup"><span data-stu-id="262af-288">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="262af-289">Ein Enumerator bleibt gültig, solange die Auflistung unverändert ist.</span><span class="sxs-lookup"><span data-stu-id="262af-289">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="262af-290">Werden an der Auflistung Änderungen wie z. B. Hinzufügen, Bearbeiten oder Entfernen von Elementen vorgenommen, verliert der Enumerator unwiederbringlich seine Gültigkeit und sein Verhalten ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="262af-290">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="262af-291">Der Enumerator hat keinen exklusiven Zugriff auf die Auflistung; daher ist die Enumeration einer Auflistung systembedingt kein threadsicheres Verfahren.</span><span class="sxs-lookup"><span data-stu-id="262af-291">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="262af-292">Um während der Enumeration Threadsicherheit zu garantieren, können Sie die Auflistung während der gesamten Enumeration sperren.</span><span class="sxs-lookup"><span data-stu-id="262af-292">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="262af-293">Um den Lese- und Schreibzugriff auf diese Auflistung durch mehrere Threads zuzulassen, müssen Sie eine eigene Synchronisierung implementieren.</span><span class="sxs-lookup"><span data-stu-id="262af-293">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="262af-294">Die dem <see cref="T:System.Object" />-Objekt hinzuzufügende <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="262af-294">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="262af-295">Fügt dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="262af-295">Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="262af-296">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-296">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <returns><span data-ttu-id="262af-297">Die Position, an der das neue Element eingefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-297">The position into which the new element was inserted.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-298">Sie können auch die <xref:Microsoft.VisualBasic.Collection.Item%2A> zum Hinzufügen neuer Elemente durch Festlegen des Werts eines Schlüssels, die Eigenschaft ist nicht vorhanden, der <xref:Microsoft.VisualBasic.Collection> Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-298">You can also use the <xref:Microsoft.VisualBasic.Collection.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="262af-299">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-299">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="262af-300">- oder - </span><span class="sxs-lookup"><span data-stu-id="262af-300">-or-</span></span>  
  
 <span data-ttu-id="262af-301">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="262af-301">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="262af-302">Entfernt alle Elemente aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-302">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="262af-303">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-303">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-304">Diese Methode entfernt alle Elemente aus der <xref:Microsoft.VisualBasic.Collection> Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-304">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="262af-305"><see cref="T:System.Collections.IList" /> ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-305">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="262af-306">Das <see cref="T:System.Object" />, das im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="262af-306">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="262af-307">Bestimmt, ob das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt einen bestimmten Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="262af-307">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span> <span data-ttu-id="262af-308">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-308">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <returns><span data-ttu-id="262af-309">Gibt <see langword="True" /> zurück, wenn das <see cref="T:System.Object" /> im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt gefunden wird, andernfalls <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="262af-309">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-310">Diese Methode bestimmt, ob die <xref:Microsoft.VisualBasic.Collection> Objekt einen bestimmten Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="262af-310">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="262af-311">Das <see cref="T:System.Object" />, das im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="262af-311">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="262af-312">Bestimmt den Index eines bestimmten Elements im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-312">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="262af-313">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-313">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <returns><span data-ttu-id="262af-314">Der Index von <paramref name="value" />, wenn das Element in der Auflistung gefunden wird, andernfalls -1.</span><span class="sxs-lookup"><span data-stu-id="262af-314">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-315">Diese Methode bestimmt den Index eines bestimmten Elements in der <xref:Microsoft.VisualBasic.Collection> Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-315">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="262af-316">Der nullbasierte Index, an dem <c>value</c> eingefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="262af-316">The zero-based index at which <c>value</c> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="262af-317">Das in das <see cref="T:System.Object" />-Objekt einzufügende <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="262af-317">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="262af-318">Fügt dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt am angegebenen Index ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="262af-318">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span> <span data-ttu-id="262af-319">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-319">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-320">Wenn `index` entspricht der Anzahl der Elemente in der <xref:Microsoft.VisualBasic.Collection> -Objekt, klicken Sie dann `value` am Ende angefügt ist.</span><span class="sxs-lookup"><span data-stu-id="262af-320">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="262af-321">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, werden die Elemente hinter der Einfügemarke nach unten verschoben, um das neue Element aufzunehmen.</span><span class="sxs-lookup"><span data-stu-id="262af-321">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="262af-322">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="262af-322">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="262af-323">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="262af-323">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="262af-324"><paramref name="index" /> ist kein gültiger Index im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-324"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="262af-325">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-325">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="262af-326">- oder - </span><span class="sxs-lookup"><span data-stu-id="262af-326">-or-</span></span>  
  
 <span data-ttu-id="262af-327">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="262af-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="262af-328"><paramref name="value" /> ist im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ein NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="262af-328"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="262af-329">Das aus dem <see cref="T:System.Object" />-Objekt zu entfernende <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="262af-329">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="262af-330">Entfernt das erste Vorkommen eines bestimmten Objekts aus dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-330">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="262af-331">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-331">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-332">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, wird die nach dem Entfernen eines Elements entstandene Lücke durch Verschieben aller nachfolgenden Elemente gefüllt.</span><span class="sxs-lookup"><span data-stu-id="262af-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="262af-333">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="262af-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="262af-334">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="262af-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="262af-335">Wenn `value` befindet sich nicht der <xref:Microsoft.VisualBasic.Collection> -Objekt, das <xref:Microsoft.VisualBasic.Collection> Objekt bleibt unverändert, und es wird keine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="262af-335">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="262af-336">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="262af-337">- oder - </span><span class="sxs-lookup"><span data-stu-id="262af-337">-or-</span></span>  
  
 <span data-ttu-id="262af-338">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="262af-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="262af-339">Der nullbasierte Index des zu entfernenden Elements.</span><span class="sxs-lookup"><span data-stu-id="262af-339">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="262af-340">Entfernt das <see cref="T:Microsoft.VisualBasic.Collection" />-Objektelement am angegebenen Index.</span><span class="sxs-lookup"><span data-stu-id="262af-340">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span> <span data-ttu-id="262af-341">Implementiert die <see cref="T:System.Collections.IList" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-341">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-342">In Auflistungen mit zusammenhängenden Elementen, beispielsweise Listen, wird die nach dem Entfernen eines Elements entstandene Lücke durch Verschieben aller nachfolgenden Elemente gefüllt.</span><span class="sxs-lookup"><span data-stu-id="262af-342">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="262af-343">Wenn die Auflistung indiziert ist, werden auch die Indizes der verschobenen Elemente aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="262af-343">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="262af-344">Dies gilt nicht für Auflistungen, in denen die Elemente konzeptionell in Buckets gruppiert sind, beispielsweise Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="262af-344">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="262af-345"><paramref name="index" /> ist kein gültiger Index im <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-345"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="262af-346">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="262af-346">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="262af-347">- oder - </span><span class="sxs-lookup"><span data-stu-id="262af-347">-or-</span></span>  
  
 <span data-ttu-id="262af-348">Das <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt hat eine feste Größe.</span><span class="sxs-lookup"><span data-stu-id="262af-348">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="262af-349">Das Objekt, das den Rückruf initiiert hat.</span><span class="sxs-lookup"><span data-stu-id="262af-349">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="262af-350">Wird ausgeführt, nachdem das gesamte <see cref="T:Microsoft.VisualBasic.Collection" />-Objektdiagramm deserialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-350">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span> <span data-ttu-id="262af-351">Implementiert die <see cref="T:System.Runtime.Serialization.IDeserializationCallback" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-351">Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-352">Diese Methode wird aufgerufen, nachdem die gesamte <xref:Microsoft.VisualBasic.Collection> Objektdiagramm deserialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="262af-352">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="262af-353">Ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den zum Serialisieren des <see cref="T:Microsoft.VisualBasic.Collection" />-Objekts erforderlichen Informationen.</span><span class="sxs-lookup"><span data-stu-id="262af-353">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="262af-354">Ein <see cref="T:System.Runtime.Serialization.StreamingContext" />-Objekt mit der Quelle und dem Ziel des serialisierten Streams, der dem <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="262af-354">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="262af-355">Gibt die zum Serialisieren des <see cref="T:Microsoft.VisualBasic.Collection" />-Objekts erforderlichen Daten zurück.</span><span class="sxs-lookup"><span data-stu-id="262af-355">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="262af-356">Implementiert die <see cref="T:System.Runtime.Serialization.ISerializable" />-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="262af-356">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262af-357">Diese Methode gibt die zum Serialisieren von Daten die <xref:Microsoft.VisualBasic.Collection> Objekt.</span><span class="sxs-lookup"><span data-stu-id="262af-357">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
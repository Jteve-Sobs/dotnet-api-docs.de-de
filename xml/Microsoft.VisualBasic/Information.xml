<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="96ecba38ed21212b1bd42da6d2ce2ef30e61426e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57913253" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Information" />-Modul enthält Prozeduren, mit denen Informationen zurückgegeben, getestet oder überprüft werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und -Laufzeitbibliothek-Member, die Fehlerinformationen bereitstellen, Überprüfen von Daten, Arraygrenzen bestimmen und Abrufen von Informationen zu Daten und Farben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `VbTypeName` Funktion Datentypnamen für einige Variablen zurückgibt.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Informationen und Interaktionen: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">Deklarationen und Konstanten: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Member der Visual Basic-Laufzeitbibliothek</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt. Schreibgeschützt.</summary>
        <returns>Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt. Schreibgeschützt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie Visual Basic keine Zeilennummern findet, wird 0 zurückgegeben.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Erl` Eigenschaft, die die Nummer der Zeile angibt.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enthält Informationen über Laufzeitfehler.</summary>
        <returns>Enthält Informationen über Laufzeitfehler.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften der `Err` Objekt durch den Generator eines Fehlers – Visual Basic, ein Objekt oder der Programmierer festgelegt werden.  
  
 Wenn ein Laufzeitfehler auftritt, werden die Eigenschaften der `Err` -Objekt gefüllt mit Informationen, die den Fehler eindeutig identifiziert und, mit denen Sie können den Fehler zu behandeln. Verwenden Sie zum generieren einen Laufzeitfehler im Code die `Raise` Methode.  
  
 Die `Err` Eigenschaften des Objekts werden auf 0 (null) oder Zeichenfolgen der Länge 0 (null) zurückgesetzt ("") nach einem `Exit Sub`, `Exit Function`, `Exit Property`, oder `Resume Next` Anweisung innerhalb einer Fehlerbehandlungsroutine. Mit einer Form von der `Resume` Anweisung ist außerhalb einer Fehlerbehandlungsroutine werden nicht zurückgesetzt werden. die `Err` Eigenschaften des Objekts. Sie können die `Clear` Methode explizit zurückgesetzt `Err`.  
  
 Verwenden der `Raise` Methode anstelle der `Error` Laufzeitfehler für Fehler im Dateisystem zu generieren und Klassenmodule-Anweisung. Ihre Entscheidung, ob Sie verwenden die `Raise` -Methode in der anderen Code hängt vom Umfang der Informationen zurückgegeben werden soll.  
  
 Die `Err` Objekt ist ein systeminternes Objekt mit globalem Bereich. Aus diesem Grund müssen Sie nicht in Ihrem Code eine Instanz davon erstellen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die Eigenschaften der `Err` Objekt in ein Dialogfeld Fehlermeldung erstellt. Beachten Sie, dass bei Verwendung der `Clear` Methode erstmals, wenn Sie mit Visual Basic-Fehler generieren, die `Raise` -Methode, die Visual Basic Default-Werte zu den Eigenschaften des der `Err` Objekt.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error-Anweisung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume-Anweisung</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">Fehlermeldungen (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Erforderlich. <see langword="Object" />-Variable.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` Gibt `True` , wenn die Variable auf ein Array verweist, andernfalls `False`. `IsArray` ist besonders hilfreich bei Objekten, die Arrays enthalten können.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `IsArray` Funktion zu überprüfen, ob verschiedene Variablen in ein Array verweisen.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Arrays in Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` Gibt `True` Wenn `Expression` ist die <xref:System.DateTime> Daten eingeben oder konvertiert werden kann, andernfalls gibt `False`.  
  
 Die <xref:System.DateTime> Datentyp enthält sowohl einen Datumswert als auch einen Uhrzeitwert. `IsDate` Gibt `True` Wenn `Expression` ein gültiges Datum, eine gültige Uhrzeit ein, oder ein gültiges Datum und die Uhrzeit darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `IsDate` Funktion, um zu bestimmen, ob mehrere Variablen gültig darstellen <xref:System.DateTime> Werte.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 Im vorherigen Beispiel `IsDate` gibt `True` für die ersten vier Aufrufe und `False` für den letzten Aufruf.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` Gibt `True` , wenn der Datentyp des `Expression` ergibt die <xref:System.DBNull> -Typ. hingegen `IsDBNull` gibt `False`.  
  
 Die <xref:System.DBNull?displayProperty=nameWithType> gibt an, dass die `Object` fehlende oder nicht vorhandene Daten darstellt. `DBNull` entspricht nicht der `Nothing`, was bedeutet, dass eine Variable noch nicht initialisiert wurde. `DBNull` ist auch nicht identisch mit der eine Zeichenfolge der Länge 0 (null) (`""`), dies wird manchmal als null-Zeichenfolge bezeichnet.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `IsDBNull` Funktion, um zu bestimmen, ob eine Variable ergibt `DBNull`.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` Gibt `True` Wenn der Ausdruck darstellt ein `Object` Variable, die von abgeleitet ist die <xref:System.Exception> -Klasse in der <xref:System> Namespace.  
  
 Eine Ausnahme, die abgeleitet <xref:System.Exception?displayProperty=nameWithType> abgefangen werden kann, mit der `Try...Catch...Finally` Anweisungen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `IsError` Funktion zu überprüfen, ob ein Ausdruck eine Systemausnahme darstellt.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` Gibt `True` der Ausdruck eine Objektvariable darstellt, der derzeit kein Objekt zugewiesen ist, andernfalls aufweist, gibt `False`.  
  
 `IsNothing` Dient zum Verweistypen arbeiten. Ein Werttyp kann einen Wert enthalten und wird auf seinen Standardwert zurückgesetzt, wenn Sie zuweisen `Nothing` zuzuweisen. Wenn Sie angeben, dass einen Werttyp in `Expression`, `IsNothing` gibt immer `False`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `IsNothing` Funktion, um zu bestimmen, ob eine Objektvariable Objektinstanz zugeordnet ist.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Wert- und Verweistypen</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` Gibt `True` , wenn der Datentyp des `Expression` ist `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, oder `UShort`. Sie gibt überdies `True` Wenn `Expression` ist eine `Char`, `String`, oder `Object` erfolgreich in eine Zahl konvertiert werden kann. `Expression` kann nicht numerische Zeichen enthalten. `IsNumeric` Gibt `True` Wenn `Expression` ist eine Zeichenfolge, die eine gültige hexadezimale oder oktale Zahl enthält. `IsNumeric` Außerdem gibt `True` Wenn `Expression` enthält einen gültigen numerischen Ausdruck, der mit beginnt eine + "oder" - Zeichen oder enthält Kommas.  
  
 `IsNumeric` Gibt `False` Wenn `Expression` ist vom Datentyp `Date`. Es gibt `False` Wenn `Expression` ist eine `Char`, `String`, oder `Object` , die nicht erfolgreich in eine Zahl konvertiert werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `IsNumeric` Funktion, um zu bestimmen, ob der Inhalt einer Variablen als Zahl ausgewertet werden können.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` Gibt `True` Wenn `Expression` stellt einen Verweistyp, wie z. B. eine Klasseninstanz einen `String` Typ oder ein Array eines beliebigen Typs; andernfalls wird `False`.  
  
 Ein Verweistyp enthält einen Zeiger auf Daten, die an anderer Stelle im Arbeitsspeicher gespeichert. Ein Werttyp enthält seine eigenen Daten.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `IsReference` Funktion zu überprüfen, ob mehrere Variablen, die auf Referenztypen verweisen.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 Im vorherigen Beispiel die ersten drei Aufrufe `IsReference` zurückgeben `True`. Gibt der letzte Aufruf `False`, da `Integer` ein Werttyp, der kein Verweistyp ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Wert- und Verweistypen</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Erforderlich. Array eines beliebigen Datentyps. Das Array, in dem der niedrigste mögliche Feldindex einer Dimension ermittelt werden soll.</param>
        <param name="Rank">Dies ist optional. <see langword="Integer" />. Die Dimension, für die der niedrigste mögliche Feldindex zurückgegeben wird. Verwenden Sie für die erste Dimension 1, für die zweite 2 usw. Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</param>
        <summary>Gibt den niedrigsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</summary>
        <returns><see langword="Integer" />. Der niedrigste Wert, den der Feldindex für die angegebene Dimension enthalten kann. <see langword="LBound" /> gibt immer 0 zurück, sobald <paramref name="Array" /> initialisiert wurde, auch wenn es keine Elemente enthält (z. B. bei einer Zeichenfolge der Länge 0). Wenn <paramref name="Array" /><see langword="Nothing" /> ist, löst <see langword="LBound" /> eine <see cref="T:System.ArgumentNullException" /> aus.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da Arrayfeldindizes bei 0 beginnen, ist der niedrigste mögliche Feldindex für eine Dimension immer 0.  
  
 Für ein Array mit den folgenden Dimensionen `LBound` gibt die Werte in der folgenden Tabelle zurück:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Aufruf von LBound|Rückgabewert|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `LBound` -Funktion können Sie den niedrigsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zu ermitteln.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Erforderlich. Eine ganze Zahl zwischen 0–15.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beginnend mit dem niedrigstwertigen Byte, gibt der zurückgegebene Wert die Rot-, Grün- und Blau-Werte, die zum Festlegen der entsprechenden Farbe im RGB-System, die von Visual Basic-Sprache verwendet.  
  
 Die `Color` Argument verfügt über diese Einstellungen.  
  
|Anzahl|Farbe|Anzahl|Farbe|  
|------------|-----------|------------|-----------|  
|0|Schwarz|8|Grau|  
|1|Blau|9|Hellblau|  
|2|Grün|10|Hellgrün|  
|3|Cyan|11|Hellzyan|  
|4|Rot|12|Hellrot|  
|5|Magenta|13|Helles magenta|  
|6|Gelb|14|Hosttags in Gelb|  
|7|Weiß|15|Helle weiß|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `QBColor` -Funktion zum Ändern der Farbe erkennbar `colorInteger`. `QBColor` akzeptiert die ganze Zahlen zwischen 0 und 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" /> befindet sich nicht im Bereich von 0 bis einschließlich 15.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Rotanteils der Farbe darstellt.</param>
        <param name="Green">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Grünanteils der Farbe darstellt.</param>
        <param name="Blue">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Blauanteils der Farbe darstellt.</param>
        <summary>Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</summary>
        <returns>Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Application-Methoden und Eigenschaften, die eine Farbe-Spezifikation akzeptieren erwarten, dass Spezifikation soll eine Zahl, die RGB-Farbwert aus. Ein RGB-Wert gibt die relative Intensität von Rot, Grün und Blau dazu führen, dass eine bestimmte Farbe an, die angezeigt werden.  
  
 Wenn der Wert eines Arguments für `RGB` ist größer als 255, 255 wird verwendet.  
  
 Die folgende Tabelle enthält einige Standardfarben und die Rot-, Grün- und Blau-Werte, die sie enthalten.  
  
|Farbe|Wert|Grünwert|Blau Wert|  
|-----------|---------------|-----------------|----------------|  
|Schwarz|0|0|0|  
|Blau|0|0|255|  
|Grün|0|255|0|  
|Cyan|0|255|255|  
|Rot|255|0|0|  
|Magenta|255|0|255|  
|Gelb|255|255|0|  
|Weiß|255|255|255|  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie die `RGB` Funktion wird verwendet, um eine ganze Zahl, Zurückgeben einer `RGB` Farbwert.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> befindet sich außerhalb des Bereichs 0 bis 255 (einschließlich).</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Erforderlich. Eine <see langword="String" />-Variable, die einen Visual Basic-Typnamen enthält.</param>
        <summary>Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</summary>
        <returns>Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` Gibt die vollqualifizierten common Language Runtime (CLR) Typnamen zurück auf den Visual Basic-Typnamen zurück. Z. B. wenn `VbName` "Date", enthält `SystemTypeName` "System.DateTime" zurückgegeben. Wenn `SystemTypeName` erkennt Sie nicht den Wert der `VbName`, gibt `Nothing` (nicht die Zeichenfolge "Nichts").  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `SystemTypeName` Funktion Datentypnamen für einige Variablen zurückgibt.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="VarName">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
        <summary>Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</summary>
        <returns>Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Tabelle zeigt die `String` Rückgabewerte `TypeName` für verschiedene Inhalte von `VarName`.  
  
|`VarName` Inhalt|Zurückgegebene Zeichenfolge|  
|------------------------|---------------------|  
|16-Bit- `True` oder `False` Werttyp.|"Boolean"|  
|8-Bit-Binärwert-Typ|"Byte"|  
|16-Bit-Zeichen-Werttyp|"Char"|  
|Geben Sie die 64-Bit-Datums- und Uhrzeitwert|"Date"|  
|Verweistyp, der angibt, fehlender oder nicht vorhandener Daten|"DBNull"|  
|128-Bit-Festkomma-numerischer Werttyp|"Decimal"|  
|64-Bit-Gleitkommazahl numerischer Werttyp|"Double"|  
|32-Bit-Ganzzahl-Werttyp|"Integer"|  
|Verweist auf ein Objekt nicht spezialisierte Verweistyp|"Object"|  
|Verweistyp, der auf ein spezielles Objekt, das aus der Klasse erstellt *"objectClass"*|"*" objectClass "*"|  
|64-Bit-Ganzzahl-Werttyp|"Long"|  
|Verweistyp ohne Objekt zurzeit zugewiesen|"Nothing"|  
|8-Bit-Ganzzahl mit Vorzeichen-Werttyp|"SByte"|  
|16-Bit-Ganzzahl-Werttyp|"Short"|  
|32-Bit-Gleitkommazahl numerischer Werttyp|"Einfach"|  
|Verweistyp, der auf eine Zeichenfolge mit 16-Bit-Zeichen|"String"|  
|32-Bit-Ganzzahl-Werttyp|"UInteger"|  
|64-Bit-Ganzzahl-Werttyp|"ULong"|  
|16-Bit-Ganzzahl-Werttyp|"UShort"|  
  
 Wenn `VarName` ein Array ist, wird die zurückgegebene Zeichenfolge kann eine der Zeichenfolgen in der obigen Tabelle mit leeren Klammern, die angefügt werden. Z. B. wenn `VarName` zeigt auf ein Array von ganzen Zahlen, `TypeName` "Integer()" zurückgegeben.  
  
 Wenn `TypeName` gibt den Namen eines Referenztyps zurück wie z. B. eine Klasse, wird nur der Name selbst nicht den vollqualifizierten Namen. Z. B. wenn `VarName` verweist auf ein Objekt der Klasse <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` gibt "PaperSource" zurück. Beachten Sie, dass, wenn die Variable deklariert wird, um einen bestimmten Klassentyp sein, aber ein Objekt zugewiesen ist, verfügt nicht über `TypeName` gibt "Nothing" zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `TypeName` -Funktion zum Zurückgeben von Informationen zu verschiedenen Variablen.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Erforderlich. Array eines beliebigen Datentyps. Das Array, in dem der höchste mögliche Feldindex einer Dimension ermittelt werden soll.</param>
        <param name="Rank">Dies ist optional. <see langword="Integer" />. Die Dimension, für die der höchste mögliche Feldindex zurückgegeben wird. Verwenden Sie für die erste Dimension 1, für die zweite 2 usw. Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</param>
        <summary>Gibt den höchsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</summary>
        <returns><see langword="Integer" />. Der höchste Wert, den der Feldindex für die angegebene Dimension enthalten kann. Wenn <paramref name="Array" /> nur über ein Element verfügt, gibt <see langword="UBound" /> 0 zurück. Wenn <paramref name="Array" /> keine Elemente enthält, z. B., wenn es eine Zeichenfolge der Länge 0 ist, gibt <see langword="UBound" /> -1 zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da Arrayfeldindizes bei 0 beginnen, ist die Länge einer Dimension um eins größer als der höchste mögliche Feldindex für diese Dimension.  
  
 Für ein Array mit den folgenden Dimensionen `UBound` gibt die Werte in der folgenden Tabelle zurück:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Aufruf von UBound|Rückgabewert|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Sie können `UBound` um zu bestimmen, die Summe muss Anzahl von Elementen in ein Array, aber Sie passen Sie den Wert, der zum Konto für die Tatsache, die die tiefgestellten Zeichen bei 0 beginnen zurück. Das folgende Beispiel berechnet die Gesamtgröße des Arrays `a` im vorherigen Beispiel:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Der Wert berechnet, für die `total` ist 3030, also 101 * 6 * 5.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `UBound` Funktion, die den höchsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zu bestimmen.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ganzzahlwert, der vom `VarType` ist ein Mitglied der <xref:Microsoft.VisualBasic.VariantType>.  
  
 Die folgende Tabelle zeigt die Rückgabewerte `VarType` für spezielle Fälle von `VarName`.  
  
|Von dargestellter Datentyp `VarName`|Rückgabewert `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Enumeration|Der zugrunde liegende Datentyp (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, oder `ULong`)|  
|Array|Bitweise OR der Elementtyp des Arrays und `VariantType.Array`|  
|Array von arrays|Bitweise OR von `VariantType.Object` und `VariantType.Array`|  
|Struktur (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Unbekannt|`VariantType.Object`|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `VarType` Funktion, um die Klassifizierung für Datentypinformationen zu verschiedenen Variablen zurückgegeben.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Erforderlich. <see langword="String" />-Variable mit einem Typnamen, der von der Common Language Runtime verwendet wird.</param>
        <summary>Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</summary>
        <returns>Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` Gibt den Visual Basic-Typnamen, die für die common Language Runtime-Typnamen zurück. Z. B. wenn `UrtName` enthält "Int32" oder "System. Int32" `VbTypeName` "Integer" zurückgegeben. Wenn `VbTypeName` erkennt Sie nicht den Wert der `UrtName`, gibt `Nothing` (nicht die Zeichenfolge "Nichts").  
  
 Der Typname in `UrtName` aus abgerufen werden kann aus verschiedenen Quellen, z. B. die <xref:System.Reflection.MemberInfo.Name%2A> -Eigenschaft in der <xref:System.Reflection.MemberInfo> Array von der <xref:System.Type> Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `VbTypeName` Funktion Datentypnamen für einige Variablen zurückgibt.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
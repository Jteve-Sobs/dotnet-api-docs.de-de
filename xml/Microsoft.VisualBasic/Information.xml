<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ae76229b66a7a71d521a64a406df63f7e7cf230" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70416606" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="93181-101">Das <see langword="Information" />-Modul enthält Prozeduren, mit denen Informationen zurückgegeben, getestet oder überprüft werden.</span><span class="sxs-lookup"><span data-stu-id="93181-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-102">Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und-Lauf Zeit Bibliothekselemente, die Fehlerinformationen bereitstellen, Daten überprüfen, Array Grenzen bestimmen und Datentyp-und Farbinformationen abrufen.</span><span class="sxs-lookup"><span data-stu-id="93181-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-103">Im folgenden Beispiel wird die `VbTypeName` -Funktion verwendet, um Datentyp Namen für verschiedene Variablen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="93181-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="93181-104">Informationen und Interaktionen: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="93181-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="93181-105">Data Types Summary</span><span class="sxs-lookup"><span data-stu-id="93181-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="93181-106">Deklarationen und Konstanten: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="93181-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="93181-107">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="93181-108">Visual Basic von Lauf Zeit Bibliotheks Membern</span><span class="sxs-lookup"><span data-stu-id="93181-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93181-109">Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt.</span><span class="sxs-lookup"><span data-stu-id="93181-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="93181-110">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="93181-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="93181-111">Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt.</span><span class="sxs-lookup"><span data-stu-id="93181-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="93181-112">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="93181-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-113">Wenn Visual Basic keine Zeilennummern trifft, wird 0 zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-114">In diesem Beispiel wird `Erl` die-Eigenschaft verwendet, um die Zeilennummer anzugeben.</span><span class="sxs-lookup"><span data-stu-id="93181-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93181-115">Enthält Informationen über Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="93181-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="93181-116">Enthält Informationen über Laufzeitfehler.</span><span class="sxs-lookup"><span data-stu-id="93181-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-117">Die Eigenschaften des `Err` Objekts werden vom Generator eines Fehler Visual Basic, eines Objekts oder des Programmierers festgelegt.</span><span class="sxs-lookup"><span data-stu-id="93181-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="93181-118">Wenn ein Laufzeitfehler auftritt, werden die Eigenschaften des `Err` -Objekts mit Informationen aufgefüllt, die den Fehler eindeutig identifizieren und die Sie verwenden können, um den Fehler zu behandeln.</span><span class="sxs-lookup"><span data-stu-id="93181-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="93181-119">Verwenden Sie die `Raise` -Methode, um einen Laufzeitfehler im Code zu generieren.</span><span class="sxs-lookup"><span data-stu-id="93181-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="93181-120">Die `Err` -Eigenschaften des-Objekts werden nach einer `Exit Sub`-, `Exit Function` `Exit Property`-,-oder `Resume Next` -Anweisung in einer Fehler Behandlungs Routine auf NULL oder Zeichen folgen der Länge 0 (null) zurückgesetzt.</span><span class="sxs-lookup"><span data-stu-id="93181-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="93181-121">Wenn Sie ein beliebiges `Resume` Formular der Anweisung außerhalb einer Fehler Behandlungs Routine verwenden, werden die `Err` Eigenschaften des Objekts nicht zurückgesetzt.</span><span class="sxs-lookup"><span data-stu-id="93181-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="93181-122">Sie können die `Clear` -Methode verwenden, um `Err`explizit zurückzusetzen.</span><span class="sxs-lookup"><span data-stu-id="93181-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="93181-123">Verwenden Sie `Raise` anstelle der `Error` -Anweisung die-Methode, um Laufzeitfehler für Systemfehler und Klassen Module zu generieren.</span><span class="sxs-lookup"><span data-stu-id="93181-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="93181-124">Die Entscheidung, ob die `Raise` Methode in anderem Code verwendet werden soll, hängt von der Fülle der Informationen ab, die Sie zurückgeben möchten.</span><span class="sxs-lookup"><span data-stu-id="93181-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="93181-125">Das `Err` -Objekt ist ein System internes Objekt mit globalem Gültigkeitsbereich.</span><span class="sxs-lookup"><span data-stu-id="93181-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="93181-126">Daher ist es nicht erforderlich, dass Sie im Code eine Instanz davon erstellen.</span><span class="sxs-lookup"><span data-stu-id="93181-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-127">In diesem Beispiel werden die Eigenschaften des `Err` -Objekts unter Erstellen eines Fehlermeldungs Dialogfelds verwendet.</span><span class="sxs-lookup"><span data-stu-id="93181-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="93181-128">Beachten Sie, dass bei Verwendung `Clear` der-Methode zuerst beim Generieren eines Visual Basic Fehlers mit der `Raise` -Methode Visual Basic Standardwerte `Err` zu den Eigenschaften des-Objekts werden.</span><span class="sxs-lookup"><span data-stu-id="93181-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="93181-129">Error-Anweisung</span><span class="sxs-lookup"><span data-stu-id="93181-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="93181-130">On Error-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="93181-131">Exit-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="93181-132">Resume-Anweisung</span><span class="sxs-lookup"><span data-stu-id="93181-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="93181-133">Fehlermeldungen (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="93181-134">Try...Catch...Finally-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="93181-135">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-135">Required.</span></span> <span data-ttu-id="93181-136"><see langword="Object" />-Variable.</span><span class="sxs-lookup"><span data-stu-id="93181-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="93181-137">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</span><span class="sxs-lookup"><span data-stu-id="93181-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="93181-138">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</span><span class="sxs-lookup"><span data-stu-id="93181-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-139">`IsArray`gibt `True` zurück, wenn die Variable auf ein Array zeigt; andernfalls wird `False`zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="93181-140">`IsArray`ist besonders hilfreich bei Objekten, die möglicherweise Arrays enthalten.</span><span class="sxs-lookup"><span data-stu-id="93181-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-141">In diesem Beispiel wird `IsArray` die-Funktion verwendet, um zu überprüfen, ob mehrere Variablen auf ein Array verweisen.</span><span class="sxs-lookup"><span data-stu-id="93181-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="93181-142">Arrays in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="93181-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="93181-143">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-143">Required.</span></span> <span data-ttu-id="93181-144"><see langword="Object" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="93181-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="93181-145">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="93181-146">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-147">`IsDate`gibt `True` zurück `Expression` , wenn vom <xref:System.DateTime> Datentyp ist oder in dieses konvertiert werden kann. andernfalls wird zurück `False`gegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="93181-148">Der <xref:System.DateTime> -Datentyp enthält sowohl einen Datumswert als auch einen Uhrzeitwert.</span><span class="sxs-lookup"><span data-stu-id="93181-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="93181-149">`IsDate`gibt `True` zurück `Expression` , wenn ein gültiges Datum, eine gültige Uhrzeit oder ein gültiges Datum und eine gültige Uhrzeit darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-150">Im folgenden Beispiel wird die `IsDate` -Funktion verwendet, um zu bestimmen, <xref:System.DateTime> ob mehrere Variablen gültige Werte darstellen.</span><span class="sxs-lookup"><span data-stu-id="93181-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="93181-151">Im vorherigen Beispiel `IsDate` gibt für die `True` ersten vier Aufrufe und `False` für den letzten Aufruf zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="93181-152">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-152">Required.</span></span> <span data-ttu-id="93181-153"><see langword="Object" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="93181-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="93181-154">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</span><span class="sxs-lookup"><span data-stu-id="93181-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="93181-155">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</span><span class="sxs-lookup"><span data-stu-id="93181-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-156">`IsDBNull`gibt `True` zurück, wenn der Datentyp von `Expression` den <xref:System.DBNull> -Typ ergibt; `IsDBNull` andernfalls `False`wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="93181-157">Der <xref:System.DBNull?displayProperty=nameWithType> Wert gibt an `Object` , dass fehlende oder nicht vorhandene Daten darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="93181-158">`DBNull`ist nicht identisch `Nothing`mit, was bedeutet, dass eine Variable noch nicht initialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="93181-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="93181-159">`DBNull`ist auch nicht mit einer Zeichenfolge der Länge 0 (`""`null) identisch, was manchmal auch als NULL-Zeichenfolge bezeichnet wird.</span><span class="sxs-lookup"><span data-stu-id="93181-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-160">Dieses Beispiel verwendet die `IsDBNull` -Funktion, um zu bestimmen, ob `DBNull`eine Variable als ausgewertet wird.</span><span class="sxs-lookup"><span data-stu-id="93181-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="93181-161">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-161">Required.</span></span> <span data-ttu-id="93181-162"><see langword="Object" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="93181-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="93181-163">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</span><span class="sxs-lookup"><span data-stu-id="93181-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="93181-164">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</span><span class="sxs-lookup"><span data-stu-id="93181-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-165">`IsError`gibt `True` zurück, wenn der Ausdruck `Object` eine Variable darstellt, die <xref:System.Exception> <xref:System> von der-Klasse im-Namespace abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="93181-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="93181-166">Eine Ausnahme, die von <xref:System.Exception?displayProperty=nameWithType> abgeleitet wird, kann mit `Try...Catch...Finally` den-Anweisungen abgefangen werden.</span><span class="sxs-lookup"><span data-stu-id="93181-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-167">Im folgenden Beispiel wird die `IsError` -Funktion verwendet, um zu überprüfen, ob ein Ausdruck eine System Ausnahme darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="93181-168">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-168">Required.</span></span> <span data-ttu-id="93181-169"><see langword="Object" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="93181-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="93181-170">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="93181-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="93181-171">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="93181-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-172">`IsNothing`gibt `True` zurück, wenn der Ausdruck eine Objekt Variable darstellt, der derzeit kein Objekt zugewiesen ist. andernfalls wird zurück `False`gegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="93181-173">`IsNothing`ist für die Arbeit mit Verweis Typen vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="93181-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="93181-174">Ein Werttyp kann nicht den Wert [Nothing](~/docs/visual-basic/language-reference/nothing.md) enthalten und wird auf seinen Standardwert zurückgesetzt, `Nothing` Wenn Sie ihn zuweisen.</span><span class="sxs-lookup"><span data-stu-id="93181-174">A value type cannot hold a value of [Nothing](~/docs/visual-basic/language-reference/nothing.md) and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="93181-175">Wenn Sie in `Expression`einen Werttyp angeben `IsNothing` , gibt `False`immer zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-176">Im folgenden Beispiel wird die `IsNothing` -Funktion verwendet, um zu bestimmen, ob eine Objekt Variable einer Objektinstanz zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="93181-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="93181-177">Wert- und Verweistypen</span><span class="sxs-lookup"><span data-stu-id="93181-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="93181-178">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-178">Required.</span></span> <span data-ttu-id="93181-179"><see langword="Object" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="93181-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="93181-180">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</span><span class="sxs-lookup"><span data-stu-id="93181-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="93181-181">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</span><span class="sxs-lookup"><span data-stu-id="93181-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-182">`IsNumeric`gibt `True` zurück, wenn der Datentyp `Boolean`von `Byte` `Expression` , `Decimal`, `Double`,, `Integer`, , `SByte` , , , `UInteger`  `Short` `Long` `Single` , `ULong`oder . `UShort`</span><span class="sxs-lookup"><span data-stu-id="93181-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="93181-183">Außerdem gibt Sie `True` zurück `Expression` , wenn `Char`ein `String`, oder `Object` ist, das erfolgreich in eine Zahl konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="93181-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="93181-184">`Expression`kann nicht numerische Zeichen enthalten.</span><span class="sxs-lookup"><span data-stu-id="93181-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="93181-185">`IsNumeric`gibt `True` zurück `Expression` , wenn eine Zeichenfolge ist, die eine gültige hexadezimale oder oktale Zahl enthält.</span><span class="sxs-lookup"><span data-stu-id="93181-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="93181-186">`IsNumeric`gibt auch `True` dann `Expression` zurück, wenn einen gültigen numerischen Ausdruck enthält, der mit einem +-oder-Zeichen beginnt oder Kommas enthält.</span><span class="sxs-lookup"><span data-stu-id="93181-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="93181-187">`IsNumeric`gibt `False` zurück `Expression` , wenn vom Datentyp `Date`ist.</span><span class="sxs-lookup"><span data-stu-id="93181-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="93181-188">Es wird `False` zurück `Expression` gegeben, `Char`Wenn `String`ein, `Object` oder ist, das nicht erfolgreich in eine Zahl konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="93181-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-189">Im folgenden Beispiel wird die `IsNumeric` -Funktion verwendet, um zu bestimmen, ob der Inhalt einer Variablen als Zahl ausgewertet werden kann.</span><span class="sxs-lookup"><span data-stu-id="93181-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="93181-190">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-190">Required.</span></span> <span data-ttu-id="93181-191"><see langword="Object" />-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="93181-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="93181-192">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</span><span class="sxs-lookup"><span data-stu-id="93181-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="93181-193">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</span><span class="sxs-lookup"><span data-stu-id="93181-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-194">`IsReference`gibt `True` zurück `Expression` , wenn einen Verweistyp (z. b. eine Klassen `String` Instanz, einen Typ oder ein Array eines beliebigen Typs) darstellt, `False`andernfalls wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="93181-195">Ein Verweistyp enthält einen Zeiger auf Daten, die an anderer Stelle im Arbeitsspeicher gespeichert sind.</span><span class="sxs-lookup"><span data-stu-id="93181-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="93181-196">Ein Werttyp enthält seine eigenen Daten.</span><span class="sxs-lookup"><span data-stu-id="93181-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-197">In diesem Beispiel wird `IsReference` die-Funktion verwendet, um zu überprüfen, ob mehrere Variablen auf Verweis Typen verweisen.</span><span class="sxs-lookup"><span data-stu-id="93181-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="93181-198">Im vorherigen Beispiel werden die ersten drei Aufrufe von `IsReference` zurückgegeben. `True`</span><span class="sxs-lookup"><span data-stu-id="93181-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="93181-199">Der letzte-Rückruf `False`gibt zurück `Integer` , da ein Werttyp und kein Verweistyp ist.</span><span class="sxs-lookup"><span data-stu-id="93181-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="93181-200">Wert- und Verweistypen</span><span class="sxs-lookup"><span data-stu-id="93181-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="93181-201">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-201">Required.</span></span> <span data-ttu-id="93181-202">Array eines beliebigen Datentyps.</span><span class="sxs-lookup"><span data-stu-id="93181-202">Array of any data type.</span></span> <span data-ttu-id="93181-203">Das Array, in dem der niedrigste mögliche Feldindex einer Dimension ermittelt werden soll.</span><span class="sxs-lookup"><span data-stu-id="93181-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="93181-204">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="93181-204">Optional.</span></span> <span data-ttu-id="93181-205"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="93181-205"><see langword="Integer" />.</span></span> <span data-ttu-id="93181-206">Die Dimension, für die der niedrigste mögliche Feldindex zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="93181-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="93181-207">Verwenden Sie für die erste Dimension 1, für die zweite 2 usw.</span><span class="sxs-lookup"><span data-stu-id="93181-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="93181-208">Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</span><span class="sxs-lookup"><span data-stu-id="93181-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="93181-209">Gibt den niedrigsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="93181-210"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="93181-210"><see langword="Integer" />.</span></span> <span data-ttu-id="93181-211">Der niedrigste Wert, den der Feldindex für die angegebene Dimension enthalten kann.</span><span class="sxs-lookup"><span data-stu-id="93181-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="93181-212"><see langword="LBound" /> gibt immer 0 zurück, sobald <paramref name="Array" /> initialisiert wurde, auch wenn es keine Elemente enthält (z. B. bei einer Zeichenfolge der Länge 0).</span><span class="sxs-lookup"><span data-stu-id="93181-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="93181-213">Wenn <paramref name="Array" /><see langword="Nothing" /> ist, löst <see langword="LBound" /> eine <see cref="T:System.ArgumentNullException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="93181-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-214">Da Arrayfeldindizes bei 0 beginnen, ist der niedrigste mögliche Feldindex für eine Dimension immer 0.</span><span class="sxs-lookup"><span data-stu-id="93181-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="93181-215">Für ein Array mit den folgenden Dimensionen werden `LBound` die Werte in der folgenden Tabelle zurückgegeben:</span><span class="sxs-lookup"><span data-stu-id="93181-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="93181-216">LBound-Aufrufe</span><span class="sxs-lookup"><span data-stu-id="93181-216">Call to LBound</span></span>|<span data-ttu-id="93181-217">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="93181-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="93181-218">0</span><span class="sxs-lookup"><span data-stu-id="93181-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="93181-219">0</span><span class="sxs-lookup"><span data-stu-id="93181-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="93181-220">0</span><span class="sxs-lookup"><span data-stu-id="93181-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="93181-221">Im folgenden Beispiel wird die `LBound` -Funktion verwendet, um den niedrigsten verfügbaren Index für die festgestellte Dimension eines Arrays zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="93181-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93181-222"><paramref name="Array" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="93181-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="93181-223"><paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="93181-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="93181-224">Dim-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="93181-225">ReDim-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="93181-226">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-226">Required.</span></span> <span data-ttu-id="93181-227">Eine ganze Zahl zwischen 0–15.</span><span class="sxs-lookup"><span data-stu-id="93181-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="93181-228">Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="93181-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="93181-229">Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</span><span class="sxs-lookup"><span data-stu-id="93181-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-230">Beginnend mit dem am wenigsten signifikanten Byte gibt der zurückgegebene Wert die roten, grünen und blauen Werte an, die verwendet werden, um die entsprechende Farbe im RGB-System festzulegen, die von der Visual Basic Sprache verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="93181-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="93181-231">Das `Color` -Argument weist diese Einstellungen auf.</span><span class="sxs-lookup"><span data-stu-id="93181-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="93181-232">Anzahl</span><span class="sxs-lookup"><span data-stu-id="93181-232">Number</span></span>|<span data-ttu-id="93181-233">Farbe</span><span class="sxs-lookup"><span data-stu-id="93181-233">Color</span></span>|<span data-ttu-id="93181-234">Anzahl</span><span class="sxs-lookup"><span data-stu-id="93181-234">Number</span></span>|<span data-ttu-id="93181-235">Farbe</span><span class="sxs-lookup"><span data-stu-id="93181-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="93181-236">0</span><span class="sxs-lookup"><span data-stu-id="93181-236">0</span></span>|<span data-ttu-id="93181-237">Schwarz</span><span class="sxs-lookup"><span data-stu-id="93181-237">Black</span></span>|<span data-ttu-id="93181-238">8</span><span class="sxs-lookup"><span data-stu-id="93181-238">8</span></span>|<span data-ttu-id="93181-239">Grau</span><span class="sxs-lookup"><span data-stu-id="93181-239">Gray</span></span>|  
|<span data-ttu-id="93181-240">1</span><span class="sxs-lookup"><span data-stu-id="93181-240">1</span></span>|<span data-ttu-id="93181-241">Blau</span><span class="sxs-lookup"><span data-stu-id="93181-241">Blue</span></span>|<span data-ttu-id="93181-242">9</span><span class="sxs-lookup"><span data-stu-id="93181-242">9</span></span>|<span data-ttu-id="93181-243">Hellblau</span><span class="sxs-lookup"><span data-stu-id="93181-243">Light blue</span></span>|  
|<span data-ttu-id="93181-244">2</span><span class="sxs-lookup"><span data-stu-id="93181-244">2</span></span>|<span data-ttu-id="93181-245">Grün</span><span class="sxs-lookup"><span data-stu-id="93181-245">Green</span></span>|<span data-ttu-id="93181-246">10</span><span class="sxs-lookup"><span data-stu-id="93181-246">10</span></span>|<span data-ttu-id="93181-247">Hellgrün</span><span class="sxs-lookup"><span data-stu-id="93181-247">Light green</span></span>|  
|<span data-ttu-id="93181-248">3</span><span class="sxs-lookup"><span data-stu-id="93181-248">3</span></span>|<span data-ttu-id="93181-249">Zyan</span><span class="sxs-lookup"><span data-stu-id="93181-249">Cyan</span></span>|<span data-ttu-id="93181-250">11</span><span class="sxs-lookup"><span data-stu-id="93181-250">11</span></span>|<span data-ttu-id="93181-251">Helles Zyan</span><span class="sxs-lookup"><span data-stu-id="93181-251">Light cyan</span></span>|  
|<span data-ttu-id="93181-252">4</span><span class="sxs-lookup"><span data-stu-id="93181-252">4</span></span>|<span data-ttu-id="93181-253">Rot</span><span class="sxs-lookup"><span data-stu-id="93181-253">Red</span></span>|<span data-ttu-id="93181-254">12</span><span class="sxs-lookup"><span data-stu-id="93181-254">12</span></span>|<span data-ttu-id="93181-255">Hellrot</span><span class="sxs-lookup"><span data-stu-id="93181-255">Light red</span></span>|  
|<span data-ttu-id="93181-256">5</span><span class="sxs-lookup"><span data-stu-id="93181-256">5</span></span>|<span data-ttu-id="93181-257">Magenta</span><span class="sxs-lookup"><span data-stu-id="93181-257">Magenta</span></span>|<span data-ttu-id="93181-258">13</span><span class="sxs-lookup"><span data-stu-id="93181-258">13</span></span>|<span data-ttu-id="93181-259">Hell Magenta</span><span class="sxs-lookup"><span data-stu-id="93181-259">Light magenta</span></span>|  
|<span data-ttu-id="93181-260">6</span><span class="sxs-lookup"><span data-stu-id="93181-260">6</span></span>|<span data-ttu-id="93181-261">Gelb</span><span class="sxs-lookup"><span data-stu-id="93181-261">Yellow</span></span>|<span data-ttu-id="93181-262">14</span><span class="sxs-lookup"><span data-stu-id="93181-262">14</span></span>|<span data-ttu-id="93181-263">Hellgelb</span><span class="sxs-lookup"><span data-stu-id="93181-263">Light yellow</span></span>|  
|<span data-ttu-id="93181-264">7</span><span class="sxs-lookup"><span data-stu-id="93181-264">7</span></span>|<span data-ttu-id="93181-265">Weiß</span><span class="sxs-lookup"><span data-stu-id="93181-265">White</span></span>|<span data-ttu-id="93181-266">15</span><span class="sxs-lookup"><span data-stu-id="93181-266">15</span></span>|<span data-ttu-id="93181-267">Helles Weiß</span><span class="sxs-lookup"><span data-stu-id="93181-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="93181-268">In diesem Beispiel wird `QBColor` die-Funktion verwendet, um zu der `colorInteger`durch gekennzeichneten Farbe zu wechseln.</span><span class="sxs-lookup"><span data-stu-id="93181-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="93181-269">`QBColor`akzeptiert ganzzahlige Werte zwischen 0 und 15.</span><span class="sxs-lookup"><span data-stu-id="93181-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93181-270"><paramref name="Color" /> befindet sich nicht im Bereich von 0 bis einschließlich 15.</span><span class="sxs-lookup"><span data-stu-id="93181-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="93181-271">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-271">Required.</span></span> <span data-ttu-id="93181-272"><see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Rotanteils der Farbe darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="93181-273">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-273">Required.</span></span> <span data-ttu-id="93181-274"><see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Grünanteils der Farbe darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="93181-275">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-275">Required.</span></span> <span data-ttu-id="93181-276"><see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Blauanteils der Farbe darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="93181-277">Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="93181-278">Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-279">Anwendungsmethoden und-Eigenschaften, die eine Farbspezifikation akzeptieren, erwarten, dass diese Spezifikation eine Zahl ist, die einen RGB-Farbwert darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="93181-280">Ein RGB-Farbwert gibt die relative Intensität von rot, grün und blau an, sodass eine bestimmte Farbe angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="93181-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="93181-281">Wenn der Wert für ein beliebiges `RGB` Argument größer als 255 ist, wird 255 verwendet.</span><span class="sxs-lookup"><span data-stu-id="93181-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="93181-282">In der folgenden Tabelle sind einige Standardfarben und die darin aufgeführten roten, grünen und blauen Werte aufgelistet.</span><span class="sxs-lookup"><span data-stu-id="93181-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="93181-283">Farbe</span><span class="sxs-lookup"><span data-stu-id="93181-283">Color</span></span>|<span data-ttu-id="93181-284">Roter Wert</span><span class="sxs-lookup"><span data-stu-id="93181-284">Red value</span></span>|<span data-ttu-id="93181-285">Grüner Wert</span><span class="sxs-lookup"><span data-stu-id="93181-285">Green value</span></span>|<span data-ttu-id="93181-286">Blauer Wert</span><span class="sxs-lookup"><span data-stu-id="93181-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="93181-287">Schwarz</span><span class="sxs-lookup"><span data-stu-id="93181-287">Black</span></span>|<span data-ttu-id="93181-288">0</span><span class="sxs-lookup"><span data-stu-id="93181-288">0</span></span>|<span data-ttu-id="93181-289">0</span><span class="sxs-lookup"><span data-stu-id="93181-289">0</span></span>|<span data-ttu-id="93181-290">0</span><span class="sxs-lookup"><span data-stu-id="93181-290">0</span></span>|  
|<span data-ttu-id="93181-291">Blau</span><span class="sxs-lookup"><span data-stu-id="93181-291">Blue</span></span>|<span data-ttu-id="93181-292">0</span><span class="sxs-lookup"><span data-stu-id="93181-292">0</span></span>|<span data-ttu-id="93181-293">0</span><span class="sxs-lookup"><span data-stu-id="93181-293">0</span></span>|<span data-ttu-id="93181-294">255</span><span class="sxs-lookup"><span data-stu-id="93181-294">255</span></span>|  
|<span data-ttu-id="93181-295">Grün</span><span class="sxs-lookup"><span data-stu-id="93181-295">Green</span></span>|<span data-ttu-id="93181-296">0</span><span class="sxs-lookup"><span data-stu-id="93181-296">0</span></span>|<span data-ttu-id="93181-297">255</span><span class="sxs-lookup"><span data-stu-id="93181-297">255</span></span>|<span data-ttu-id="93181-298">0</span><span class="sxs-lookup"><span data-stu-id="93181-298">0</span></span>|  
|<span data-ttu-id="93181-299">Zyan</span><span class="sxs-lookup"><span data-stu-id="93181-299">Cyan</span></span>|<span data-ttu-id="93181-300">0</span><span class="sxs-lookup"><span data-stu-id="93181-300">0</span></span>|<span data-ttu-id="93181-301">255</span><span class="sxs-lookup"><span data-stu-id="93181-301">255</span></span>|<span data-ttu-id="93181-302">255</span><span class="sxs-lookup"><span data-stu-id="93181-302">255</span></span>|  
|<span data-ttu-id="93181-303">Rot</span><span class="sxs-lookup"><span data-stu-id="93181-303">Red</span></span>|<span data-ttu-id="93181-304">255</span><span class="sxs-lookup"><span data-stu-id="93181-304">255</span></span>|<span data-ttu-id="93181-305">0</span><span class="sxs-lookup"><span data-stu-id="93181-305">0</span></span>|<span data-ttu-id="93181-306">0</span><span class="sxs-lookup"><span data-stu-id="93181-306">0</span></span>|  
|<span data-ttu-id="93181-307">Magenta</span><span class="sxs-lookup"><span data-stu-id="93181-307">Magenta</span></span>|<span data-ttu-id="93181-308">255</span><span class="sxs-lookup"><span data-stu-id="93181-308">255</span></span>|<span data-ttu-id="93181-309">0</span><span class="sxs-lookup"><span data-stu-id="93181-309">0</span></span>|<span data-ttu-id="93181-310">255</span><span class="sxs-lookup"><span data-stu-id="93181-310">255</span></span>|  
|<span data-ttu-id="93181-311">Gelb</span><span class="sxs-lookup"><span data-stu-id="93181-311">Yellow</span></span>|<span data-ttu-id="93181-312">255</span><span class="sxs-lookup"><span data-stu-id="93181-312">255</span></span>|<span data-ttu-id="93181-313">255</span><span class="sxs-lookup"><span data-stu-id="93181-313">255</span></span>|<span data-ttu-id="93181-314">0</span><span class="sxs-lookup"><span data-stu-id="93181-314">0</span></span>|  
|<span data-ttu-id="93181-315">Weiß</span><span class="sxs-lookup"><span data-stu-id="93181-315">White</span></span>|<span data-ttu-id="93181-316">255</span><span class="sxs-lookup"><span data-stu-id="93181-316">255</span></span>|<span data-ttu-id="93181-317">255</span><span class="sxs-lookup"><span data-stu-id="93181-317">255</span></span>|<span data-ttu-id="93181-318">255</span><span class="sxs-lookup"><span data-stu-id="93181-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="93181-319">Dieses Beispiel zeigt, wie `RGB` die-Funktion verwendet wird, um eine ganze Zahl `RGB` zurückzugeben, die einen Farbwert darstellt.</span><span class="sxs-lookup"><span data-stu-id="93181-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93181-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> befindet sich außerhalb des Bereichs 0 bis 255 (einschließlich).</span><span class="sxs-lookup"><span data-stu-id="93181-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="93181-321">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-321">Required.</span></span> <span data-ttu-id="93181-322">Eine <see langword="String" />-Variable, die einen Visual Basic-Typnamen enthält.</span><span class="sxs-lookup"><span data-stu-id="93181-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="93181-323">Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="93181-324">Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-325">`SystemTypeName`Gibt den voll qualifizierten Common Language Runtime (CLR)-Typnamen zurück, der dem Namen des Visual Basic Typs entspricht.</span><span class="sxs-lookup"><span data-stu-id="93181-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="93181-326">Wenn `VbName` z. b. "Date" enthält `SystemTypeName` , wird "System. DateTime" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="93181-327">Wenn `SystemTypeName` den Wert von `VbName`nicht erkennt, wird zurück `Nothing` gegeben (nicht die Zeichenfolge "Nothing").</span><span class="sxs-lookup"><span data-stu-id="93181-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-328">Im folgenden Beispiel wird die `SystemTypeName` -Funktion verwendet, um Datentyp Namen für verschiedene Variablen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="93181-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="93181-329">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="93181-330">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-330">Required.</span></span> <span data-ttu-id="93181-331"><see langword="Object" />-Variable.</span><span class="sxs-lookup"><span data-stu-id="93181-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="93181-332">Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</span><span class="sxs-lookup"><span data-stu-id="93181-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="93181-333">Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</span><span class="sxs-lookup"><span data-stu-id="93181-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="93181-334">Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</span><span class="sxs-lookup"><span data-stu-id="93181-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-335">In der folgenden Tabelle sind `String` die Werte aufgeführt `TypeName` , die von für `VarName`andere Inhalte von zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="93181-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="93181-336">`VarName`Haus</span><span class="sxs-lookup"><span data-stu-id="93181-336">`VarName` contents</span></span>|<span data-ttu-id="93181-337">Zurückgegebene Zeichenfolge</span><span class="sxs-lookup"><span data-stu-id="93181-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="93181-338">16-Bit `True` - `False` oder Werttyp</span><span class="sxs-lookup"><span data-stu-id="93181-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="93181-339">Booleschen</span><span class="sxs-lookup"><span data-stu-id="93181-339">"Boolean"</span></span>|  
|<span data-ttu-id="93181-340">8-Bit-binärwerttyp</span><span class="sxs-lookup"><span data-stu-id="93181-340">8-bit binary value type</span></span>|<span data-ttu-id="93181-341">Hobby</span><span class="sxs-lookup"><span data-stu-id="93181-341">"Byte"</span></span>|  
|<span data-ttu-id="93181-342">16-Bit-Zeichen Werttyp</span><span class="sxs-lookup"><span data-stu-id="93181-342">16-bit character value type</span></span>|<span data-ttu-id="93181-343">Char</span><span class="sxs-lookup"><span data-stu-id="93181-343">"Char"</span></span>|  
|<span data-ttu-id="93181-344">64-Bit-Werttyp für Datum und Uhrzeit</span><span class="sxs-lookup"><span data-stu-id="93181-344">64-bit date and time value type</span></span>|<span data-ttu-id="93181-345">Datum</span><span class="sxs-lookup"><span data-stu-id="93181-345">"Date"</span></span>|  
|<span data-ttu-id="93181-346">Verweistyp, der fehlende oder nicht vorhandene Daten angibt</span><span class="sxs-lookup"><span data-stu-id="93181-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="93181-347">DBNull</span><span class="sxs-lookup"><span data-stu-id="93181-347">"DBNull"</span></span>|  
|<span data-ttu-id="93181-348">128-Bit-numerischer Werttyp mit festem Punkt</span><span class="sxs-lookup"><span data-stu-id="93181-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="93181-349">Mierte</span><span class="sxs-lookup"><span data-stu-id="93181-349">"Decimal"</span></span>|  
|<span data-ttu-id="93181-350">64-Bit-numerischer Werttyp für Gleit Komma Zahl</span><span class="sxs-lookup"><span data-stu-id="93181-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="93181-351">Maß</span><span class="sxs-lookup"><span data-stu-id="93181-351">"Double"</span></span>|  
|<span data-ttu-id="93181-352">32-Bit-Ganzzahl-Werttyp</span><span class="sxs-lookup"><span data-stu-id="93181-352">32-bit integer value type</span></span>|<span data-ttu-id="93181-353">Zah</span><span class="sxs-lookup"><span data-stu-id="93181-353">"Integer"</span></span>|  
|<span data-ttu-id="93181-354">Verweistyp, der auf ein nicht spezialisiertes Objekt verweist</span><span class="sxs-lookup"><span data-stu-id="93181-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="93181-355">Objekt</span><span class="sxs-lookup"><span data-stu-id="93181-355">"Object"</span></span>|  
|<span data-ttu-id="93181-356">Verweistyp, der auf ein aus der Klasse *objectClass* erstelltes spezialisiertes Objekt verweist</span><span class="sxs-lookup"><span data-stu-id="93181-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="93181-357">"*objectClass*"</span><span class="sxs-lookup"><span data-stu-id="93181-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="93181-358">64-Bit-Ganzzahl-Werttyp</span><span class="sxs-lookup"><span data-stu-id="93181-358">64-bit integer value type</span></span>|<span data-ttu-id="93181-359">Lange</span><span class="sxs-lookup"><span data-stu-id="93181-359">"Long"</span></span>|  
|<span data-ttu-id="93181-360">Verweistyp ohne derzeit zugewiesenes Objekt</span><span class="sxs-lookup"><span data-stu-id="93181-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="93181-361">Schweigen</span><span class="sxs-lookup"><span data-stu-id="93181-361">"Nothing"</span></span>|  
|<span data-ttu-id="93181-362">8-Bit-ganz Zahl Wert mit Vorzeichen</span><span class="sxs-lookup"><span data-stu-id="93181-362">8-bit signed integer value type</span></span>|<span data-ttu-id="93181-363">SByte</span><span class="sxs-lookup"><span data-stu-id="93181-363">"SByte"</span></span>|  
|<span data-ttu-id="93181-364">ganzzahliger 16-Bit-Werttyp</span><span class="sxs-lookup"><span data-stu-id="93181-364">16-bit integer value type</span></span>|<span data-ttu-id="93181-365">Kurzem</span><span class="sxs-lookup"><span data-stu-id="93181-365">"Short"</span></span>|  
|<span data-ttu-id="93181-366">32-Bit-numerischer Werttyp für Gleit Komma Zahl</span><span class="sxs-lookup"><span data-stu-id="93181-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="93181-367">Gänger</span><span class="sxs-lookup"><span data-stu-id="93181-367">"Single"</span></span>|  
|<span data-ttu-id="93181-368">Verweistyp, der auf eine Zeichenfolge mit 16-Bit-Zeichen zeigt</span><span class="sxs-lookup"><span data-stu-id="93181-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="93181-369">Schnür</span><span class="sxs-lookup"><span data-stu-id="93181-369">"String"</span></span>|  
|<span data-ttu-id="93181-370">32-Bit-Ganzzahl-Werttyp ohne Vorzeichen</span><span class="sxs-lookup"><span data-stu-id="93181-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="93181-371">UInteger</span><span class="sxs-lookup"><span data-stu-id="93181-371">"UInteger"</span></span>|  
|<span data-ttu-id="93181-372">64-Bit-Ganzzahl-Werttyp ohne Vorzeichen</span><span class="sxs-lookup"><span data-stu-id="93181-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="93181-373">ULONG</span><span class="sxs-lookup"><span data-stu-id="93181-373">"ULong"</span></span>|  
|<span data-ttu-id="93181-374">16-Bit-ganz Zahl Wert ohne Vorzeichen</span><span class="sxs-lookup"><span data-stu-id="93181-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="93181-375">UShort</span><span class="sxs-lookup"><span data-stu-id="93181-375">"UShort"</span></span>|  
  
 <span data-ttu-id="93181-376">Wenn `VarName` ein Array ist, kann die zurückgegebene Zeichenfolge eine beliebige Zeichenfolge in der vorangehenden Tabelle mit angefügten leeren Klammern sein.</span><span class="sxs-lookup"><span data-stu-id="93181-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="93181-377">Wenn `VarName` z. b. auf ein Array aus ganzen Zahlen zeigt `TypeName` , gibt "Integer ()" zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="93181-378">Wenn `TypeName` den Namen eines Verweis Typs (z. b. eine Klasse) zurückgibt, wird nur der Name selbst zurückgegeben, nicht der qualifizierte Name.</span><span class="sxs-lookup"><span data-stu-id="93181-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="93181-379">Wenn `VarName` z. b. auf ein Objekt der Klasse <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>verweist `TypeName` , wird "Taschen Quelle" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="93181-380">Beachten Sie, dass die Variable "Nothing" zurückgibt, wenn die Variable als einen bestimmten Klassentyp deklariert ist, `TypeName` aber kein Objekt zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="93181-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-381">Im folgenden Beispiel wird die `TypeName` -Funktion verwendet, um Datentyp Informationen zu mehreren Variablen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="93181-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="93181-382">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="93181-383">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-383">Required.</span></span> <span data-ttu-id="93181-384">Array eines beliebigen Datentyps.</span><span class="sxs-lookup"><span data-stu-id="93181-384">Array of any data type.</span></span> <span data-ttu-id="93181-385">Das Array, in dem der höchste mögliche Feldindex einer Dimension ermittelt werden soll.</span><span class="sxs-lookup"><span data-stu-id="93181-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="93181-386">Optional.</span><span class="sxs-lookup"><span data-stu-id="93181-386">Optional.</span></span> <span data-ttu-id="93181-387"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="93181-387"><see langword="Integer" />.</span></span> <span data-ttu-id="93181-388">Die Dimension, für die der höchste mögliche Feldindex zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="93181-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="93181-389">Verwenden Sie für die erste Dimension 1, für die zweite 2 usw.</span><span class="sxs-lookup"><span data-stu-id="93181-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="93181-390">Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</span><span class="sxs-lookup"><span data-stu-id="93181-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="93181-391">Gibt den höchsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="93181-392"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="93181-392"><see langword="Integer" />.</span></span> <span data-ttu-id="93181-393">Der höchste Wert, den der Feldindex für die angegebene Dimension enthalten kann.</span><span class="sxs-lookup"><span data-stu-id="93181-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="93181-394">Wenn <paramref name="Array" /> nur über ein Element verfügt, gibt <see langword="UBound" /> 0 zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="93181-395">Wenn <paramref name="Array" /> keine Elemente enthält, z. B., wenn es eine Zeichenfolge der Länge 0 ist, gibt <see langword="UBound" /> -1 zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-396">Da Array Indizes bei 0 beginnen, ist die Länge einer Dimension um eins größer als der höchste verfügbare Index für diese Dimension.</span><span class="sxs-lookup"><span data-stu-id="93181-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="93181-397">Für ein Array mit den folgenden Dimensionen werden `UBound` die Werte in der folgenden Tabelle zurückgegeben:</span><span class="sxs-lookup"><span data-stu-id="93181-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="93181-398">Aufrufe von "UBound"</span><span class="sxs-lookup"><span data-stu-id="93181-398">Call to UBound</span></span>|<span data-ttu-id="93181-399">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="93181-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="93181-400">100</span><span class="sxs-lookup"><span data-stu-id="93181-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="93181-401">5</span><span class="sxs-lookup"><span data-stu-id="93181-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="93181-402">4</span><span class="sxs-lookup"><span data-stu-id="93181-402">4</span></span>|  
  
 <span data-ttu-id="93181-403">Mithilfe von können `UBound` Sie die Gesamtanzahl von Elementen in einem Array ermitteln, aber Sie müssen den zurückgegebenen Wert so anpassen, dass er die Tatsache berücksichtigt, dass die Indizes bei 0 beginnen.</span><span class="sxs-lookup"><span data-stu-id="93181-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="93181-404">Im folgenden Beispiel wird die Gesamtgröße des Arrays `a` im vorherigen Beispiel berechnet:</span><span class="sxs-lookup"><span data-stu-id="93181-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="93181-405">Der für `total` berechnete Wert ist 3030, d. h. 101 \* 6 \* 5.</span><span class="sxs-lookup"><span data-stu-id="93181-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-406">Im folgenden Beispiel wird die `UBound` -Funktion verwendet, um den höchsten verfügbaren Index für die angegeben Dimension eines Arrays zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="93181-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93181-407"><paramref name="Array" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="93181-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="93181-408"><paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="93181-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="93181-409">Dim-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="93181-410">ReDim-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="93181-411">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-411">Required.</span></span> <span data-ttu-id="93181-412"><see langword="Object" />-Variable.</span><span class="sxs-lookup"><span data-stu-id="93181-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="93181-413">Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</span><span class="sxs-lookup"><span data-stu-id="93181-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="93181-414">Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="93181-415">Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-416">Der von `VarType` zurückgegebene ganzzahlige Wert ist ein <xref:Microsoft.VisualBasic.VariantType>Member von.</span><span class="sxs-lookup"><span data-stu-id="93181-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="93181-417">In der folgenden Tabelle sind die Werte aufgeführt `VarType` , die von für `VarName`Sonderfälle von zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="93181-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="93181-418">Der durch dargestellte Datentyp.`VarName`</span><span class="sxs-lookup"><span data-stu-id="93181-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="93181-419">Von zurückgegebener Wert`VarType`</span><span class="sxs-lookup"><span data-stu-id="93181-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="93181-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="93181-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="93181-421">Enumeration</span><span class="sxs-lookup"><span data-stu-id="93181-421">Enumeration</span></span>|<span data-ttu-id="93181-422">Zugrunde liegender Datentyp `Byte`( `Short``SByte`, `UShort`,, `UInteger`, `Integer`,, `Long`oder ) `ULong`</span><span class="sxs-lookup"><span data-stu-id="93181-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="93181-423">Array</span><span class="sxs-lookup"><span data-stu-id="93181-423">Array</span></span>|<span data-ttu-id="93181-424">Bitweises OR von Array Elementtyp und`VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="93181-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="93181-425">Array von Arrays</span><span class="sxs-lookup"><span data-stu-id="93181-425">Array of arrays</span></span>|<span data-ttu-id="93181-426">Bitweises OR von `VariantType.Object` and`VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="93181-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="93181-427">Struktur (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="93181-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="93181-428">Unbekannt</span><span class="sxs-lookup"><span data-stu-id="93181-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="93181-429">Im folgenden Beispiel wird die `VarType` -Funktion verwendet, um Informationen zu Datentyp Klassifizierungen zu mehreren Variablen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="93181-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="93181-430">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="93181-431">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="93181-431">Required.</span></span> <span data-ttu-id="93181-432"><see langword="String" />-Variable mit einem Typnamen, der von der Common Language Runtime verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="93181-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="93181-433">Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="93181-434">Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="93181-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93181-435">`VbTypeName`Gibt den Visual Basic Typnamen zurück, der dem Namen des Common Language Runtime Typs entspricht.</span><span class="sxs-lookup"><span data-stu-id="93181-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="93181-436">Wenn `UrtName` z. b. "Int32" oder "System. Int32" enthält `VbTypeName` , wird "Integer" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="93181-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="93181-437">Wenn `VbTypeName` den Wert von `UrtName`nicht erkennt, wird zurück `Nothing` gegeben (nicht die Zeichenfolge "Nothing").</span><span class="sxs-lookup"><span data-stu-id="93181-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="93181-438">Der Typname in `UrtName` kann aus verschiedenen Quellen abgerufen werden, z. b. <xref:System.Reflection.MemberInfo.Name%2A> von der- <xref:System.Reflection.MemberInfo> Eigenschaft <xref:System.Type> im-Array der-Klasse.</span><span class="sxs-lookup"><span data-stu-id="93181-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93181-439">Im folgenden Beispiel wird die `VbTypeName` -Funktion verwendet, um Datentyp Namen für verschiedene Variablen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="93181-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="93181-440">Datentyp: Zusammenfassung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="93181-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

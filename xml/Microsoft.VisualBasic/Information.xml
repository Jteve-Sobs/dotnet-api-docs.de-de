<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2eb7b4c550a11b5654a23c73a2f51fb4d5c2526a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36726776" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bd96f-101">Das <see langword="Information" />-Modul enthält Prozeduren, mit denen Informationen zurückgegeben, getestet oder überprüft werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bd96f-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-102">Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Fehlerinformationen bereitstellen, überprüfen Sie die Daten, Arraygrenzen bestimmen und Abrufen von Informationen zu Typ und die Farbe.</span><span class="sxs-lookup"><span data-stu-id="bd96f-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-103">Im folgenden Beispiel wird die `VbTypeName` -Funktion Datentypnamen für mehrere Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bd96f-104">Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-104">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="bd96f-105">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-105">Read-only.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-106">Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-106">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="bd96f-107">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-107">Read-only.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-108">Wenn Visual Basic keine Zeilennummern findet, wird 0 zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-108">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-109">Dieses Beispiel verwendet die `Erl` Eigenschaft, um die Nummer der Zeile anzugeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-109">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bd96f-110">Enthält Informationen über Laufzeitfehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-110">Contains information about run-time errors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-111">Enthält Informationen über Laufzeitfehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-111">Contains information about run-time errors.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-112">Die Eigenschaften der `Err` Objektsatz vom Generator Fehler – Visual Basic, ein Objekt oder den Programmierer.</span><span class="sxs-lookup"><span data-stu-id="bd96f-112">The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="bd96f-113">Wenn ein Laufzeitfehler auftritt, werden die Eigenschaften der `Err` -Objekt mit Informationen, die den Fehler eindeutig identifiziert gefüllt und, mit denen Sie können den Fehler zu behandeln.</span><span class="sxs-lookup"><span data-stu-id="bd96f-113">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="bd96f-114">Verwenden Sie zum generieren einen Laufzeitfehler im Code die `Raise` Methode.</span><span class="sxs-lookup"><span data-stu-id="bd96f-114">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="bd96f-115">Die `Err` Eigenschaften des Objekts auf 0 (null) oder Zeichenfolgen der Länge 0 (null) zurückgesetzt ("") nach einer `Exit Sub`, `Exit Function`, `Exit Property`, oder `Resume Next` Anweisung innerhalb einer Fehlerbehandlungsroutine.</span><span class="sxs-lookup"><span data-stu-id="bd96f-115">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="bd96f-116">Mithilfe einer Formulars von den `Resume` Anweisung ist außerhalb einer Fehlerbehandlungsroutine nicht zurückgesetzt, die `Err` Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="bd96f-116">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="bd96f-117">Sie können die `Clear` Methode explizit zurückgesetzt `Err`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-117">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="bd96f-118">Verwenden der `Raise` Methode statt über das `Error` Laufzeitfehler für Fehler im Dateisystem zu generieren und der Klassen-Module-Anweisung.</span><span class="sxs-lookup"><span data-stu-id="bd96f-118">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="bd96f-119">Die Entscheidung darüber, ob verwendet die `Raise` Methode in einem anderen Code hängt der Umfang der Informationen, die Sie zurückgeben möchten.</span><span class="sxs-lookup"><span data-stu-id="bd96f-119">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="bd96f-120">Die `Err` Objekt ist ein systeminternes Objekt mit globalem Bereich.</span><span class="sxs-lookup"><span data-stu-id="bd96f-120">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="bd96f-121">Aus diesem Grund müssen Sie keine Instanz im Code zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-121">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-122">In diesem Beispiel verwendet die Eigenschaften der `Err` Objekt in ein Dialogfeld Fehlermeldungen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-122">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="bd96f-123">Beachten Sie, dass bei Verwendung der `Clear` Methode erstmals, wenn Sie einen Visual Basic-Fehler mit generieren die `Raise` -Methode, die Visual Basic Standardwerte zu den Eigenschaften des der `Err` Objekt.</span><span class="sxs-lookup"><span data-stu-id="bd96f-123">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="bd96f-124">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-124">Required.</span>
          </span>
          <span data-ttu-id="bd96f-125">
            <see langword="Object" />-Variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-125">
              <see langword="Object" /> variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-126">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-126">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-127">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-127">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-128">`IsArray` Gibt `True` , wenn die Variable auf ein Array verweist, andernfalls wird zurückgegeben `False`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-128">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="bd96f-129">`IsArray` ist besonders hilfreich bei Objekten, die Arrays enthalten können.</span><span class="sxs-lookup"><span data-stu-id="bd96f-129">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-130">Dieses Beispiel verwendet die `IsArray` Funktion zum Überprüfen, ob mehrere Variablen in ein Array verweisen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-130">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="bd96f-131">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-131">Required.</span>
          </span>
          <span data-ttu-id="bd96f-132">
            <see langword="Object" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-132">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-133">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-133">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-134">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-134">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-135">`IsDate` Gibt `True` Wenn `Expression` wird von der <xref:System.DateTime> Daten eingeben oder können konvertiert werden, andernfalls, es gibt `False`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-135">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="bd96f-136">Die <xref:System.DateTime> -Datentyp enthält sowohl einen Datumswert als auch einen Zeitwert.</span><span class="sxs-lookup"><span data-stu-id="bd96f-136">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="bd96f-137">`IsDate` Gibt `True` Wenn `Expression` ein gültiges Datum, eine gültige Uhrzeit oder ein gültiges Datum und die Uhrzeit darstellt.</span><span class="sxs-lookup"><span data-stu-id="bd96f-137">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-138">Im folgenden Beispiel wird die `IsDate` Funktion, um zu bestimmen, ob mehrere Variablen gültige darstellen <xref:System.DateTime> Werte.</span><span class="sxs-lookup"><span data-stu-id="bd96f-138">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="bd96f-139">Im vorherigen Beispiel `IsDate` gibt `True` für die ersten vier Aufrufe und `False` für den letzten Aufruf.</span><span class="sxs-lookup"><span data-stu-id="bd96f-139">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="bd96f-140">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-140">Required.</span>
          </span>
          <span data-ttu-id="bd96f-141">
            <see langword="Object" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-141">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-142">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-142">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-143">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-143">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-144">`IsDBNull` Gibt `True` , wenn der Datentyp des `Expression` ergibt die <xref:System.DBNull> geben; andernfalls `IsDBNull` gibt `False`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-144">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="bd96f-145">Die <xref:System.DBNull?displayProperty=nameWithType> Wert gibt an, dass die `Object` fehlende oder nicht vorhandene Daten darstellt.</span><span class="sxs-lookup"><span data-stu-id="bd96f-145">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="bd96f-146">`DBNull` entspricht nicht dem als `Nothing`, was bedeutet, dass eine Variable noch nicht initialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="bd96f-146">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="bd96f-147">`DBNull` ist auch nicht identisch mit einer Zeichenfolge der Länge 0 (`""`), dies wird manchmal als null-Zeichenfolgen bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="bd96f-147">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-148">Dieses Beispiel verwendet die `IsDBNull` Funktion, um zu bestimmen, ob eine Variable ergibt `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-148">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="bd96f-149">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-149">Required.</span>
          </span>
          <span data-ttu-id="bd96f-150">
            <see langword="Object" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-150">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-151">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-151">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-152">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-152">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-153">`IsError` Gibt `True` Wenn der Ausdruck darstellt ein `Object` Variable, die von abgeleitet ist die <xref:System.Exception> -Klasse in der <xref:System> Namespace.</span><span class="sxs-lookup"><span data-stu-id="bd96f-153">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="bd96f-154">Eine Ausnahme, die abgeleitet <xref:System.Exception?displayProperty=nameWithType> abgefangen werden kann, mit der `Try...Catch...Finally` Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-154">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-155">Im folgenden Beispiel wird die `IsError` Funktion zum Überprüfen, ob ein Ausdruck eine Systemausnahme darstellt.</span><span class="sxs-lookup"><span data-stu-id="bd96f-155">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="bd96f-156">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-156">Required.</span>
          </span>
          <span data-ttu-id="bd96f-157">
            <see langword="Object" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-157">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-158">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-158">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-159">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-159">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-160">`IsNothing` Gibt `True` , wenn der Ausdruck eine Objektvariable darstellt, die derzeit keine-Objekt zugewiesen ist, andernfalls gibt es `False`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-160">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="bd96f-161">`IsNothing` ist vorgesehen, um Verweistypen zu arbeiten.</span><span class="sxs-lookup"><span data-stu-id="bd96f-161">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="bd96f-162">Ein Werttyp kann einen Wert enthalten und wird auf den Standardwert zurückgesetzt, wenn Sie zuweisen `Nothing` darauf.</span><span class="sxs-lookup"><span data-stu-id="bd96f-162">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="bd96f-163">Wenn Sie angeben, dass einen Werttyp in `Expression`, `IsNothing` gibt immer `False`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-163">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-164">Im folgenden Beispiel wird die `IsNothing` Funktion, um zu bestimmen, ob eine Objektvariable jede Objektinstanz zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="bd96f-164">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="bd96f-165">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-165">Required.</span>
          </span>
          <span data-ttu-id="bd96f-166">
            <see langword="Object" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-166">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-167">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-167">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-168">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-168">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-169">`IsNumeric` Gibt `True` , wenn der Datentyp des `Expression` ist `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, oder `UShort`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-169">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="bd96f-170">Sie gibt überdies `True` Wenn `Expression` ist ein `Char`, `String`, oder `Object` erfolgreich in eine Zahl konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="bd96f-170">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="bd96f-171">`Expression` kann nicht numerische Zeichen enthalten.</span><span class="sxs-lookup"><span data-stu-id="bd96f-171">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="bd96f-172">`IsNumeric` Gibt `True` Wenn `Expression` ist eine Zeichenfolge, die eine gültige oktale oder hexadezimale Zahl enthält.</span><span class="sxs-lookup"><span data-stu-id="bd96f-172">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="bd96f-173">`IsNumeric` gibt auch `True` Wenn `Expression` enthält einen gültigen numerischen Ausdruck, der mit einem + "oder" - Zeichen oder Kommas enthält.</span><span class="sxs-lookup"><span data-stu-id="bd96f-173">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="bd96f-174">`IsNumeric` Gibt `False` Wenn `Expression` ist vom Datentyp `Date`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-174">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="bd96f-175">Es gibt `False` Wenn `Expression` ist ein `Char`, `String`, oder `Object` , die nicht erfolgreich in eine Zahl konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="bd96f-175">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-176">Im folgenden Beispiel wird die `IsNumeric` Funktion, um zu bestimmen, ob der Inhalt einer Variablen als Zahl ausgewertet werden können.</span><span class="sxs-lookup"><span data-stu-id="bd96f-176">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="bd96f-177">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-177">Required.</span>
          </span>
          <span data-ttu-id="bd96f-178">
            <see langword="Object" />-Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-178">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-179">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-179">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-180">Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-180">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-181">`IsReference` Gibt `True` Wenn `Expression` stellt einen Verweistyp, wie z. B. eine Klasseninstanz ein `String` Typ oder ein Array eines beliebigen Typs; zurückgegeben, andernfalls `False`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-181">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="bd96f-182">Ein Verweistyp enthält einen Zeiger auf Daten, die an anderer Stelle im Arbeitsspeicher gespeichert.</span><span class="sxs-lookup"><span data-stu-id="bd96f-182">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="bd96f-183">Ein Werttyp enthält eigene Daten.</span><span class="sxs-lookup"><span data-stu-id="bd96f-183">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-184">Dieses Beispiel verwendet die `IsReference` Funktion zum Überprüfen, ob mehrere Variablen mit Verweistypen verweisen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-184">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="bd96f-185">Im vorherigen Beispiel die ersten drei Aufrufe von `IsReference` zurückgeben `True`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-185">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="bd96f-186">Gibt der letzte Aufruf `False`, da `Integer` ein Werttyp, der kein Verweistyp ist.</span><span class="sxs-lookup"><span data-stu-id="bd96f-186">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="bd96f-187">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-187">Required.</span>
          </span>
          <span data-ttu-id="bd96f-188">Array eines beliebigen Datentyps.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-188">Array of any data type.</span>
          </span>
          <span data-ttu-id="bd96f-189">Das Array, in dem der niedrigste mögliche Feldindex einer Dimension ermittelt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-189">The array in which you want to find the lowest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="bd96f-190">Dies ist optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-190">Optional.</span>
          </span>
          <span data-ttu-id="bd96f-191">
            <see langword="Integer" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-191">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="bd96f-192">Die Dimension, für die der niedrigste mögliche Feldindex zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-192">The dimension for which the lowest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="bd96f-193">Verwenden Sie für die erste Dimension 1, für die zweite 2 usw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-193">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="bd96f-194">Wird <c>Rank</c> ausgelassen, so wird bei 1 begonnen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-194">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-195">Gibt den niedrigsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-195">Returns the lowest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-196">
            <see langword="Integer" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-196">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="bd96f-197">Der niedrigste Wert, den der Feldindex für die angegebene Dimension enthalten kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-197">The lowest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="bd96f-198">
            <see langword="LBound" /> gibt immer 0 zurück, sobald <paramref name="Array" /> initialisiert wurde, auch wenn es keine Elemente enthält (z. B. bei einer Zeichenfolge der Länge 0).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-198">
              <see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span>
          </span>
          <span data-ttu-id="bd96f-199">Wenn <paramref name="Array" /><see langword="Nothing" /> ist, löst <see langword="LBound" /> eine <see cref="T:System.ArgumentNullException" /> aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-199">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-200">Da Arrayfeldindizes bei 0 beginnen, ist der niedrigste mögliche Feldindex für eine Dimension immer 0.</span><span class="sxs-lookup"><span data-stu-id="bd96f-200">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="bd96f-201">Für ein Array mit den folgenden Dimensionen `LBound` gibt die Werte in der folgenden Tabelle zurück:</span><span class="sxs-lookup"><span data-stu-id="bd96f-201">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="bd96f-202">Aufruf von LBound</span><span class="sxs-lookup"><span data-stu-id="bd96f-202">Call to LBound</span></span>|<span data-ttu-id="bd96f-203">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="bd96f-203">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="bd96f-204">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-204">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="bd96f-205">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-205">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="bd96f-206">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-206">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-207">Im folgenden Beispiel wird die `LBound` -Funktion können Sie die niedrigste mögliche Feldindex für die angegebene Dimension eines Arrays zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="bd96f-207">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bd96f-208">
            <paramref name="Array" /> ist <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-208">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="bd96f-209">
            <paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-209">
              <paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">
          <span data-ttu-id="bd96f-210">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-210">Required.</span>
          </span>
          <span data-ttu-id="bd96f-211">Eine ganze Zahl zwischen 0 – 15.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-211">A whole number in the range 0–15.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-212">Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-212">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-213">Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-213">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-214">Beginnend mit dem niedrigstwertigen Byte, gibt der zurückgegebene Wert die Rot-, Grün- und Blau-Werte, die verwendet, um die entsprechende Farbe im RGB-System, das von der Sprache Visual Basic verwendet festzulegen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-214">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="bd96f-215">Die `Color` -Argument verfügt über diese Einstellungen.</span><span class="sxs-lookup"><span data-stu-id="bd96f-215">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="bd96f-216">Anzahl</span><span class="sxs-lookup"><span data-stu-id="bd96f-216">Number</span></span>|<span data-ttu-id="bd96f-217">Farbe</span><span class="sxs-lookup"><span data-stu-id="bd96f-217">Color</span></span>|<span data-ttu-id="bd96f-218">Anzahl</span><span class="sxs-lookup"><span data-stu-id="bd96f-218">Number</span></span>|<span data-ttu-id="bd96f-219">Farbe</span><span class="sxs-lookup"><span data-stu-id="bd96f-219">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="bd96f-220">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-220">0</span></span>|<span data-ttu-id="bd96f-221">Schwarz</span><span class="sxs-lookup"><span data-stu-id="bd96f-221">Black</span></span>|<span data-ttu-id="bd96f-222">8</span><span class="sxs-lookup"><span data-stu-id="bd96f-222">8</span></span>|<span data-ttu-id="bd96f-223">Grau</span><span class="sxs-lookup"><span data-stu-id="bd96f-223">Gray</span></span>|  
|<span data-ttu-id="bd96f-224">1</span><span class="sxs-lookup"><span data-stu-id="bd96f-224">1</span></span>|<span data-ttu-id="bd96f-225">Blau</span><span class="sxs-lookup"><span data-stu-id="bd96f-225">Blue</span></span>|<span data-ttu-id="bd96f-226">9</span><span class="sxs-lookup"><span data-stu-id="bd96f-226">9</span></span>|<span data-ttu-id="bd96f-227">Hellblau</span><span class="sxs-lookup"><span data-stu-id="bd96f-227">Light blue</span></span>|  
|<span data-ttu-id="bd96f-228">2</span><span class="sxs-lookup"><span data-stu-id="bd96f-228">2</span></span>|<span data-ttu-id="bd96f-229">Grün</span><span class="sxs-lookup"><span data-stu-id="bd96f-229">Green</span></span>|<span data-ttu-id="bd96f-230">10</span><span class="sxs-lookup"><span data-stu-id="bd96f-230">10</span></span>|<span data-ttu-id="bd96f-231">Hellgrün</span><span class="sxs-lookup"><span data-stu-id="bd96f-231">Light green</span></span>|  
|<span data-ttu-id="bd96f-232">3</span><span class="sxs-lookup"><span data-stu-id="bd96f-232">3</span></span>|<span data-ttu-id="bd96f-233">Zyan</span><span class="sxs-lookup"><span data-stu-id="bd96f-233">Cyan</span></span>|<span data-ttu-id="bd96f-234">11</span><span class="sxs-lookup"><span data-stu-id="bd96f-234">11</span></span>|<span data-ttu-id="bd96f-235">Helles Zyan</span><span class="sxs-lookup"><span data-stu-id="bd96f-235">Light cyan</span></span>|  
|<span data-ttu-id="bd96f-236">4</span><span class="sxs-lookup"><span data-stu-id="bd96f-236">4</span></span>|<span data-ttu-id="bd96f-237">Rot</span><span class="sxs-lookup"><span data-stu-id="bd96f-237">Red</span></span>|<span data-ttu-id="bd96f-238">12</span><span class="sxs-lookup"><span data-stu-id="bd96f-238">12</span></span>|<span data-ttu-id="bd96f-239">Rot</span><span class="sxs-lookup"><span data-stu-id="bd96f-239">Light red</span></span>|  
|<span data-ttu-id="bd96f-240">5</span><span class="sxs-lookup"><span data-stu-id="bd96f-240">5</span></span>|<span data-ttu-id="bd96f-241">Magenta</span><span class="sxs-lookup"><span data-stu-id="bd96f-241">Magenta</span></span>|<span data-ttu-id="bd96f-242">13</span><span class="sxs-lookup"><span data-stu-id="bd96f-242">13</span></span>|<span data-ttu-id="bd96f-243">Helles magenta</span><span class="sxs-lookup"><span data-stu-id="bd96f-243">Light magenta</span></span>|  
|<span data-ttu-id="bd96f-244">6</span><span class="sxs-lookup"><span data-stu-id="bd96f-244">6</span></span>|<span data-ttu-id="bd96f-245">Gelb</span><span class="sxs-lookup"><span data-stu-id="bd96f-245">Yellow</span></span>|<span data-ttu-id="bd96f-246">14</span><span class="sxs-lookup"><span data-stu-id="bd96f-246">14</span></span>|<span data-ttu-id="bd96f-247">Hellgelb</span><span class="sxs-lookup"><span data-stu-id="bd96f-247">Light yellow</span></span>|  
|<span data-ttu-id="bd96f-248">7</span><span class="sxs-lookup"><span data-stu-id="bd96f-248">7</span></span>|<span data-ttu-id="bd96f-249">Weiß</span><span class="sxs-lookup"><span data-stu-id="bd96f-249">White</span></span>|<span data-ttu-id="bd96f-250">15</span><span class="sxs-lookup"><span data-stu-id="bd96f-250">15</span></span>|<span data-ttu-id="bd96f-251">Weiß</span><span class="sxs-lookup"><span data-stu-id="bd96f-251">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-252">Dieses Beispiel verwendet die `QBColor` Function zum Ändern der Farbe erkennbar `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-252">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="bd96f-253">`QBColor` akzeptiert Ganzzahlwerte zwischen 0 und 15.</span><span class="sxs-lookup"><span data-stu-id="bd96f-253">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bd96f-254">
            <paramref name="Color" /> befindet sich nicht im Bereich von 0 bis einschließlich 15.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-254">
              <paramref name="Color" /> is outside of range 0 to 15, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">
          <span data-ttu-id="bd96f-255">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-255">Required.</span>
          </span>
          <span data-ttu-id="bd96f-256">
            <see langword="Integer" /> im Bereich von 0 bis einschließlich 255, der die Intensität des Rotanteils der Farbe darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-256">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</span>
          </span>
        </param>
        <param name="Green">
          <span data-ttu-id="bd96f-257">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-257">Required.</span>
          </span>
          <span data-ttu-id="bd96f-258">
            <see langword="Integer" /> im Bereich von 0 bis einschließlich 255, der die Intensität des Grünanteils der Farbe darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-258">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</span>
          </span>
        </param>
        <param name="Blue">
          <span data-ttu-id="bd96f-259">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-259">Required.</span>
          </span>
          <span data-ttu-id="bd96f-260">
            <see langword="Integer" /> im Bereich von 0 bis einschließlich 255, der die Intensität des Blauanteils der Farbe darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-260">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-261">Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-261">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-262">Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-262">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-263">Application-Methoden und Eigenschaften, die eine Farbe-Spezifikation akzeptieren erwarten, dass Spezifikation ist eine Zahl, die einen RGB-Farbwert ein.</span><span class="sxs-lookup"><span data-stu-id="bd96f-263">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="bd96f-264">Ein RGB-Farbwert gibt die relative Intensität von Rot-, Grün- und Blau, dazu führen, dass eine bestimmte Farbe an, die angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="bd96f-264">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="bd96f-265">Wenn der Wert eines Arguments für `RGB` ist größer als 255, 255 wird verwendet.</span><span class="sxs-lookup"><span data-stu-id="bd96f-265">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="bd96f-266">Die folgende Tabelle enthält einige Standardfarben und die darin enthaltenen Werte für Rot-, Grün- und Blau.</span><span class="sxs-lookup"><span data-stu-id="bd96f-266">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="bd96f-267">Farbe</span><span class="sxs-lookup"><span data-stu-id="bd96f-267">Color</span></span>|<span data-ttu-id="bd96f-268">Rote Wert</span><span class="sxs-lookup"><span data-stu-id="bd96f-268">Red value</span></span>|<span data-ttu-id="bd96f-269">Grün Wert</span><span class="sxs-lookup"><span data-stu-id="bd96f-269">Green value</span></span>|<span data-ttu-id="bd96f-270">Blaue Wert</span><span class="sxs-lookup"><span data-stu-id="bd96f-270">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="bd96f-271">Schwarz</span><span class="sxs-lookup"><span data-stu-id="bd96f-271">Black</span></span>|<span data-ttu-id="bd96f-272">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-272">0</span></span>|<span data-ttu-id="bd96f-273">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-273">0</span></span>|<span data-ttu-id="bd96f-274">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-274">0</span></span>|  
|<span data-ttu-id="bd96f-275">Blau</span><span class="sxs-lookup"><span data-stu-id="bd96f-275">Blue</span></span>|<span data-ttu-id="bd96f-276">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-276">0</span></span>|<span data-ttu-id="bd96f-277">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-277">0</span></span>|<span data-ttu-id="bd96f-278">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-278">255</span></span>|  
|<span data-ttu-id="bd96f-279">Grün</span><span class="sxs-lookup"><span data-stu-id="bd96f-279">Green</span></span>|<span data-ttu-id="bd96f-280">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-280">0</span></span>|<span data-ttu-id="bd96f-281">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-281">255</span></span>|<span data-ttu-id="bd96f-282">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-282">0</span></span>|  
|<span data-ttu-id="bd96f-283">Zyan</span><span class="sxs-lookup"><span data-stu-id="bd96f-283">Cyan</span></span>|<span data-ttu-id="bd96f-284">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-284">0</span></span>|<span data-ttu-id="bd96f-285">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-285">255</span></span>|<span data-ttu-id="bd96f-286">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-286">255</span></span>|  
|<span data-ttu-id="bd96f-287">Rot</span><span class="sxs-lookup"><span data-stu-id="bd96f-287">Red</span></span>|<span data-ttu-id="bd96f-288">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-288">255</span></span>|<span data-ttu-id="bd96f-289">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-289">0</span></span>|<span data-ttu-id="bd96f-290">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-290">0</span></span>|  
|<span data-ttu-id="bd96f-291">Magenta</span><span class="sxs-lookup"><span data-stu-id="bd96f-291">Magenta</span></span>|<span data-ttu-id="bd96f-292">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-292">255</span></span>|<span data-ttu-id="bd96f-293">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-293">0</span></span>|<span data-ttu-id="bd96f-294">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-294">255</span></span>|  
|<span data-ttu-id="bd96f-295">Gelb</span><span class="sxs-lookup"><span data-stu-id="bd96f-295">Yellow</span></span>|<span data-ttu-id="bd96f-296">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-296">255</span></span>|<span data-ttu-id="bd96f-297">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-297">255</span></span>|<span data-ttu-id="bd96f-298">0</span><span class="sxs-lookup"><span data-stu-id="bd96f-298">0</span></span>|  
|<span data-ttu-id="bd96f-299">Weiß</span><span class="sxs-lookup"><span data-stu-id="bd96f-299">White</span></span>|<span data-ttu-id="bd96f-300">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-300">255</span></span>|<span data-ttu-id="bd96f-301">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-301">255</span></span>|<span data-ttu-id="bd96f-302">255</span><span class="sxs-lookup"><span data-stu-id="bd96f-302">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-303">Dieses Beispiel zeigt, wie die `RGB` Funktion wird verwendet, um eine ganze Zahl, Zurückgeben einer `RGB` Farbwert.</span><span class="sxs-lookup"><span data-stu-id="bd96f-303">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bd96f-304">
            <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> befindet sich außerhalb des Bereichs 0 bis 255 (einschließlich).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-304">
              <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">
          <span data-ttu-id="bd96f-305">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-305">Required.</span>
          </span>
          <span data-ttu-id="bd96f-306">Eine <see langword="String" />-Variable, die einen Visual Basic-Typnamen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-306">A <see langword="String" /> variable containing a Visual Basic type name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-307">Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-307">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-308">Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-308">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-309">`SystemTypeName` vollqualifizierte common Language Common Language Runtime (CLR) gibt den Typnamen zurück, die Visual Basic-Typnamen entspricht.</span><span class="sxs-lookup"><span data-stu-id="bd96f-309">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="bd96f-310">Z. B. wenn `VbName` "Date", enthält `SystemTypeName` "System.DateTime" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-310">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="bd96f-311">Wenn `SystemTypeName` erkennt nicht den Wert der `VbName`, gibt `Nothing` (nicht die Zeichenfolge "Nothing").</span><span class="sxs-lookup"><span data-stu-id="bd96f-311">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-312">Im folgenden Beispiel wird die `SystemTypeName` -Funktion Datentypnamen für mehrere Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-312">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="bd96f-313">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-313">Required.</span>
          </span>
          <span data-ttu-id="bd96f-314">
            <see langword="Object" />-Variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-314">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="bd96f-315">Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-315">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-316">Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-316">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-317">Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-317">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-318">Die folgende Tabelle zeigt die `String` zurückgegebenen Werte `TypeName` für verschiedene Inhalte von `VarName`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-318">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="bd96f-319">`VarName` Inhalt</span><span class="sxs-lookup"><span data-stu-id="bd96f-319">`VarName` contents</span></span>|<span data-ttu-id="bd96f-320">Zurückgegebene Zeichenfolge</span><span class="sxs-lookup"><span data-stu-id="bd96f-320">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="bd96f-321">16-Bit- `True` oder `False` Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-321">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="bd96f-322">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="bd96f-322">"Boolean"</span></span>|  
|<span data-ttu-id="bd96f-323">8-Bit-Binärwert-Typ</span><span class="sxs-lookup"><span data-stu-id="bd96f-323">8-bit binary value type</span></span>|<span data-ttu-id="bd96f-324">"Byte"</span><span class="sxs-lookup"><span data-stu-id="bd96f-324">"Byte"</span></span>|  
|<span data-ttu-id="bd96f-325">16-Bit-Zeichen-Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-325">16-bit character value type</span></span>|<span data-ttu-id="bd96f-326">"Char"</span><span class="sxs-lookup"><span data-stu-id="bd96f-326">"Char"</span></span>|  
|<span data-ttu-id="bd96f-327">Geben Sie die 64-Bit-Datums- und Uhrzeitwert</span><span class="sxs-lookup"><span data-stu-id="bd96f-327">64-bit date and time value type</span></span>|<span data-ttu-id="bd96f-328">"Date"</span><span class="sxs-lookup"><span data-stu-id="bd96f-328">"Date"</span></span>|  
|<span data-ttu-id="bd96f-329">Reference-Typ, der angibt, fehlender oder nicht vorhandener Daten</span><span class="sxs-lookup"><span data-stu-id="bd96f-329">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="bd96f-330">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="bd96f-330">"DBNull"</span></span>|  
|<span data-ttu-id="bd96f-331">numerische Festkommawert 128-Bit-Typ</span><span class="sxs-lookup"><span data-stu-id="bd96f-331">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="bd96f-332">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="bd96f-332">"Decimal"</span></span>|  
|<span data-ttu-id="bd96f-333">numerisch Gleitkommawert 64-Bit-Typ</span><span class="sxs-lookup"><span data-stu-id="bd96f-333">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="bd96f-334">Datentyp "double"</span><span class="sxs-lookup"><span data-stu-id="bd96f-334">"Double"</span></span>|  
|<span data-ttu-id="bd96f-335">32-Bit-Ganzzahl-Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-335">32-bit integer value type</span></span>|<span data-ttu-id="bd96f-336">"Integer"</span><span class="sxs-lookup"><span data-stu-id="bd96f-336">"Integer"</span></span>|  
|<span data-ttu-id="bd96f-337">Verweist auf eine nicht spezialisierte Objekt Verweistyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-337">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="bd96f-338">"Object"</span><span class="sxs-lookup"><span data-stu-id="bd96f-338">"Object"</span></span>|  
|<span data-ttu-id="bd96f-339">Verweist auf eine spezialisierte Klasse erstellte Objekttyp Verweistyp *Objectclass*</span><span class="sxs-lookup"><span data-stu-id="bd96f-339">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="bd96f-340">"*Objectclass*"</span><span class="sxs-lookup"><span data-stu-id="bd96f-340">"*objectclass*"</span></span>|  
|<span data-ttu-id="bd96f-341">64-Bit-Ganzzahl-Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-341">64-bit integer value type</span></span>|<span data-ttu-id="bd96f-342">"Long"</span><span class="sxs-lookup"><span data-stu-id="bd96f-342">"Long"</span></span>|  
|<span data-ttu-id="bd96f-343">Verweistyp mit kein Objekt zugewiesen</span><span class="sxs-lookup"><span data-stu-id="bd96f-343">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="bd96f-344">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="bd96f-344">"Nothing"</span></span>|  
|<span data-ttu-id="bd96f-345">8-Bit-Ganzzahl mit Vorzeichen-Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-345">8-bit signed integer value type</span></span>|<span data-ttu-id="bd96f-346">"SByte"</span><span class="sxs-lookup"><span data-stu-id="bd96f-346">"SByte"</span></span>|  
|<span data-ttu-id="bd96f-347">16-Bit-Ganzzahl-Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-347">16-bit integer value type</span></span>|<span data-ttu-id="bd96f-348">"Kurz"</span><span class="sxs-lookup"><span data-stu-id="bd96f-348">"Short"</span></span>|  
|<span data-ttu-id="bd96f-349">numerisch Gleitkommawert 32-Bit-Typ</span><span class="sxs-lookup"><span data-stu-id="bd96f-349">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="bd96f-350">"Einfach"</span><span class="sxs-lookup"><span data-stu-id="bd96f-350">"Single"</span></span>|  
|<span data-ttu-id="bd96f-351">Verweistyp verweist auf eine Zeichenfolge mit 16-Bit-Zeichen</span><span class="sxs-lookup"><span data-stu-id="bd96f-351">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="bd96f-352">"String"</span><span class="sxs-lookup"><span data-stu-id="bd96f-352">"String"</span></span>|  
|<span data-ttu-id="bd96f-353">Werttyp für 32-Bit-Ganzzahl ohne Vorzeichen</span><span class="sxs-lookup"><span data-stu-id="bd96f-353">32-bit unsigned integer value type</span></span>|<span data-ttu-id="bd96f-354">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="bd96f-354">"UInteger"</span></span>|  
|<span data-ttu-id="bd96f-355">Werttyp für 64-Bit-Ganzzahl ohne Vorzeichen</span><span class="sxs-lookup"><span data-stu-id="bd96f-355">64-bit unsigned integer value type</span></span>|<span data-ttu-id="bd96f-356">"ULong"</span><span class="sxs-lookup"><span data-stu-id="bd96f-356">"ULong"</span></span>|  
|<span data-ttu-id="bd96f-357">16-Bit-Ganzzahl ohne Vorzeichen-Werttyp</span><span class="sxs-lookup"><span data-stu-id="bd96f-357">16-bit unsigned integer value type</span></span>|<span data-ttu-id="bd96f-358">"UShort"</span><span class="sxs-lookup"><span data-stu-id="bd96f-358">"UShort"</span></span>|  
  
 <span data-ttu-id="bd96f-359">Wenn `VarName` ein Array ist, wird die zurückgegebene Zeichenfolge kann eine der Zeichenfolgen in der obigen Tabelle mit leeren Klammern angehängt werden.</span><span class="sxs-lookup"><span data-stu-id="bd96f-359">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="bd96f-360">Z. B. wenn `VarName` verweist auf ein Array von Ganzzahlen, `TypeName` "Integer()" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-360">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="bd96f-361">Wenn `TypeName` gibt den Namen eines Verweistyps z. B. eine Klasse wird nur der Name selbst, nicht der qualifizierte Name zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-361">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="bd96f-362">Z. B. wenn `VarName` verweist auf ein Objekt der Klasse <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` "PaperSource" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-362">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="bd96f-363">Beachten Sie, dass, wenn die Variable deklariert wird, um einen bestimmten Klassentyp sein, aber ein Objekt zugewiesen, verfügt nicht über `TypeName` "Nothing" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-363">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-364">Im folgenden Beispiel wird die `TypeName` -Funktion Datentypinformationen zu verschiedenen Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-364">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="bd96f-365">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-365">Required.</span>
          </span>
          <span data-ttu-id="bd96f-366">Array eines beliebigen Datentyps.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-366">Array of any data type.</span>
          </span>
          <span data-ttu-id="bd96f-367">Das Array, in dem der höchste mögliche Feldindex einer Dimension ermittelt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-367">The array in which you want to find the highest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="bd96f-368">Dies ist optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-368">Optional.</span>
          </span>
          <span data-ttu-id="bd96f-369">
            <see langword="Integer" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-369">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="bd96f-370">Die Dimension, für die der höchste mögliche Feldindex zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-370">The dimension for which the highest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="bd96f-371">Verwenden Sie für die erste Dimension 1, für die zweite 2 usw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-371">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="bd96f-372">Wird <c>Rank</c> ausgelassen, so wird bei 1 begonnen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-372">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-373">Gibt den höchsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-373">Returns the highest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-374">
            <see langword="Integer" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-374">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="bd96f-375">Der höchste Wert, den der Feldindex für die angegebene Dimension enthalten kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-375">The highest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="bd96f-376">Wenn <paramref name="Array" /> nur über ein Element verfügt, gibt <see langword="UBound" /> 0 zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-376">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span>
          </span>
          <span data-ttu-id="bd96f-377">Wenn <paramref name="Array" /> keine Elemente enthält, z. B., wenn es eine Zeichenfolge der Länge 0 ist, gibt <see langword="UBound" /> -1 zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-377">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-378">Da Arrayfeldindizes bei 0 beginnen, ist die Länge einer Dimension um eins größer als der höchste mögliche Feldindex für diese Dimension.</span><span class="sxs-lookup"><span data-stu-id="bd96f-378">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="bd96f-379">Für ein Array mit den folgenden Dimensionen `UBound` gibt die Werte in der folgenden Tabelle zurück:</span><span class="sxs-lookup"><span data-stu-id="bd96f-379">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="bd96f-380">Aufruf von UBound</span><span class="sxs-lookup"><span data-stu-id="bd96f-380">Call to UBound</span></span>|<span data-ttu-id="bd96f-381">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="bd96f-381">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="bd96f-382">100</span><span class="sxs-lookup"><span data-stu-id="bd96f-382">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="bd96f-383">5</span><span class="sxs-lookup"><span data-stu-id="bd96f-383">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="bd96f-384">4</span><span class="sxs-lookup"><span data-stu-id="bd96f-384">4</span></span>|  
  
 <span data-ttu-id="bd96f-385">Sie können `UBound` um zu bestimmen, die insgesamt muss Anzahl von Elementen in ein Array, aber Sie passen Sie den Wert an das Konto für den Fakt, die die Feldindizes bei 0 beginnen zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-385">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="bd96f-386">Das folgende Beispiel berechnet die Gesamtgröße des Arrays `a` im vorangehenden Beispiel:</span><span class="sxs-lookup"><span data-stu-id="bd96f-386">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="bd96f-387">Der Wert für berechnet `total` ist 3030, also 101 * 6 * 5.</span><span class="sxs-lookup"><span data-stu-id="bd96f-387">The value calculated for `total` is 3030, which is 101 * 6 * 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-388">Im folgenden Beispiel wird die `UBound` -Funktion können Sie die höchste mögliche Feldindex für die angegebene Dimension eines Arrays zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="bd96f-388">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bd96f-389">
            <paramref name="Array" /> ist <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-389">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="bd96f-390">
            <paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-390">
              <paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="bd96f-391">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-391">Required.</span>
          </span>
          <span data-ttu-id="bd96f-392">
            <see langword="Object" />-Variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-392">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="bd96f-393">Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-393">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-394">Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-394">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-395">Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-395">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-396">Der ganzzahlige Wert zurückgegebenes `VarType` ist ein Mitglied der <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="bd96f-396">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="bd96f-397">Die folgende Tabelle zeigt die Rückgabewerte `VarType` für Sonderfälle von `VarName`.</span><span class="sxs-lookup"><span data-stu-id="bd96f-397">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="bd96f-398">-Datentyp dargestellte `VarName`</span><span class="sxs-lookup"><span data-stu-id="bd96f-398">Data type represented by `VarName`</span></span>|<span data-ttu-id="bd96f-399">Zurückgegebener Wert `VarType`</span><span class="sxs-lookup"><span data-stu-id="bd96f-399">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="bd96f-400">Nothing</span><span class="sxs-lookup"><span data-stu-id="bd96f-400">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="bd96f-401">Enumeration</span><span class="sxs-lookup"><span data-stu-id="bd96f-401">Enumeration</span></span>|<span data-ttu-id="bd96f-402">Zugrunde liegende Datentyp (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, oder `ULong`)</span><span class="sxs-lookup"><span data-stu-id="bd96f-402">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="bd96f-403">Array</span><span class="sxs-lookup"><span data-stu-id="bd96f-403">Array</span></span>|<span data-ttu-id="bd96f-404">Bitweise OR-Operator des Arrayelementtyp und `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="bd96f-404">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="bd96f-405">Array von arrays</span><span class="sxs-lookup"><span data-stu-id="bd96f-405">Array of arrays</span></span>|<span data-ttu-id="bd96f-406">Bitweise OR-Operator des `VariantType.Object` und `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="bd96f-406">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="bd96f-407">Struktur (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="bd96f-407">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="bd96f-408">Unbekannt</span><span class="sxs-lookup"><span data-stu-id="bd96f-408">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-409">Im folgenden Beispiel wird die `VarType` Funktion, um die Klassifizierung für Datentypinformationen zu verschiedenen Variablen zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bd96f-409">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">
          <span data-ttu-id="bd96f-410">Erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-410">Required.</span>
          </span>
          <span data-ttu-id="bd96f-411">
            <see langword="String" />-Variable mit einem Typnamen, der von der Common Language Runtime verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-411">
              <see langword="String" /> variable containing a type name used by the common language runtime.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd96f-412">Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-412">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd96f-413">Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd96f-413">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd96f-414">`VbTypeName` Gibt den Namen der Visual Basic entspricht der Typname der common Language Runtime zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-414">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="bd96f-415">Z. B. wenn `UrtName` "Int32" oder "System. Int32" enthält `VbTypeName` gibt "Integer" zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-415">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="bd96f-416">Wenn `VbTypeName` erkennt nicht den Wert der `UrtName`, gibt `Nothing` (nicht die Zeichenfolge "Nothing").</span><span class="sxs-lookup"><span data-stu-id="bd96f-416">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="bd96f-417">Der Typname im `UrtName` abgerufen werden kann aus verschiedenen Quellen, z. B. aus der <xref:System.Reflection.MemberInfo.Name%2A> Eigenschaft in der <xref:System.Reflection.MemberInfo> Array von der <xref:System.Type> Klasse.</span><span class="sxs-lookup"><span data-stu-id="bd96f-417">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd96f-418">Im folgenden Beispiel wird die `VbTypeName` -Funktion Datentypnamen für mehrere Variablen zurück.</span><span class="sxs-lookup"><span data-stu-id="bd96f-418">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
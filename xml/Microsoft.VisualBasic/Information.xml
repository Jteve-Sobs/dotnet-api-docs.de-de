<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0f69dc3e906de9c9c3dfeecfe6ff03371a151a5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86591638" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Information extends System.Object" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.VisualBasic.CompilerServices.StandardModule]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.VisualBasic.CompilerServices.StandardModule&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Information" />-Modul enthält Prozeduren, mit denen Informationen zurückgegeben, getestet oder überprüft werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und-Lauf Zeit Bibliothekselemente, die Fehlerinformationen bereitstellen, Daten überprüfen, Array Grenzen bestimmen und Datentyp-und Farbinformationen abrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `VbTypeName` Funktion verwendet, um Datentyp Namen für verschiedene Variablen zurückzugeben.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/information-and-interaction-summary">Informationen und Interaktionen: Zusammenfassung</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/data-types-summary">Data Types Summary</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/declarations-and-constants-summary">Deklarationen und Konstanten: Zusammenfassung</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Erl() cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt. Schreibgeschützt.</summary>
        <returns>Gibt eine ganze Zahl zurück, die die Zeilennummer der letzten ausgeführten Anweisung angibt. Schreibgeschützt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Visual Basic keine Zeilennummern trifft, wird 0 zurückgegeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die- `Erl` Eigenschaft verwendet, um die Zeilennummer anzugeben.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualBasic.ErrObject Err() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enthält Informationen über Laufzeitfehler.</summary>
        <returns>Enthält Informationen über Laufzeitfehler.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften des `Err` Objekts werden vom Generator eines Fehler Visual Basic, eines Objekts oder des Programmierers festgelegt.  
  
 Wenn ein Laufzeitfehler auftritt, werden die Eigenschaften des- `Err` Objekts mit Informationen aufgefüllt, die den Fehler eindeutig identifizieren und die Sie verwenden können, um den Fehler zu behandeln. Verwenden Sie die-Methode, um einen Laufzeitfehler im Code zu generieren `Raise` .  
  
 Die `Err` -Eigenschaften des-Objekts werden nach einer-,-,- `Exit Sub` `Exit Function` `Exit Property` oder- `Resume Next` Anweisung in einer Fehler Behandlungs Routine auf NULL oder Zeichen folgen der Länge 0 (null) zurückgesetzt. Wenn Sie ein beliebiges Formular der `Resume` Anweisung außerhalb einer Fehler Behandlungs Routine verwenden, werden die Eigenschaften des Objekts nicht zurückgesetzt `Err` . Sie können die- `Clear` Methode verwenden, um explizit zurückzusetzen `Err` .  
  
 Verwenden `Raise` Sie anstelle der- `Error` Anweisung die-Methode, um Laufzeitfehler für Systemfehler und Klassen Module zu generieren. Die Entscheidung, ob die `Raise` Methode in anderem Code verwendet werden soll, hängt von der Fülle der Informationen ab, die Sie zurückgeben möchten.  
  
 Das- `Err` Objekt ist ein System internes Objekt mit globalem Gültigkeitsbereich. Daher ist es nicht erforderlich, dass Sie im Code eine Instanz davon erstellen.  
  
   
  
## Examples  
 In diesem Beispiel werden die Eigenschaften des- `Err` Objekts unter Erstellen eines Fehlermeldungs Dialogfelds verwendet. Beachten Sie, dass bei Verwendung der `Clear` -Methode zuerst beim Generieren eines Visual Basic Fehlers mit der `Raise` -Methode Visual Basic Standardwerte zu den Eigenschaften des- `Err` Objekts werden.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/error-statement">Error-Anweisung</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement">On Error-Anweisung (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/exit-statement">Exit-Anweisung (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/resume-statement">Resume-Anweisung</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/error-messages/">Fehlermeldungen (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement">Try...Catch...Finally-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsArray(object VarName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Erforderlich. <see langword="Object" />-Variable.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` Gibt zurück, `True` Wenn die Variable auf ein Array zeigt; andernfalls wird zurückgegeben `False` . `IsArray` ist besonders hilfreich bei Objekten, die möglicherweise Arrays enthalten.  
  
   
  
## Examples  
 In diesem Beispiel wird die- `IsArray` Funktion verwendet, um zu überprüfen, ob mehrere Variablen auf ein Array verweisen.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/arrays/">Arrays in Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDate(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` gibt `True` zurück `Expression` , wenn vom <xref:System.DateTime> Datentyp ist oder in dieses konvertiert werden kann. andernfalls wird zurückgegeben `False` .  
  
 Der <xref:System.DateTime> -Datentyp enthält sowohl einen Datumswert als auch einen Uhrzeitwert. `IsDate` gibt `True` zurück `Expression` , wenn ein gültiges Datum, eine gültige Uhrzeit oder ein gültiges Datum und eine gültige Uhrzeit darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `IsDate` Funktion verwendet, um zu bestimmen, ob mehrere Variablen gültige <xref:System.DateTime> Werte darstellen.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 Im vorherigen Beispiel `IsDate` gibt `True` für die ersten vier Aufrufe und `False` für den letzten Aufruf zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDBNull(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` Gibt zurück, `True` Wenn der Datentyp von `Expression` den-Typ ergibt <xref:System.DBNull> ; andernfalls wird `IsDBNull` zurückgegeben `False` .  
  
 Der <xref:System.DBNull?displayProperty=nameWithType> Wert gibt an, dass `Object` fehlende oder nicht vorhandene Daten darstellt. `DBNull` ist nicht identisch `Nothing` mit, was bedeutet, dass eine Variable noch nicht initialisiert wurde. `DBNull` ist auch nicht mit einer Zeichenfolge der Länge 0 (NULL `""` ) identisch, was manchmal auch als NULL-Zeichenfolge bezeichnet wird.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die- `IsDBNull` Funktion, um zu bestimmen, ob eine Variable als ausgewertet wird `DBNull` .  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsError(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` Gibt zurück `True` , wenn der Ausdruck eine `Object` Variable darstellt, die von der- <xref:System.Exception> Klasse im- <xref:System> Namespace abgeleitet ist.  
  
 Eine Ausnahme, die von abgeleitet <xref:System.Exception?displayProperty=nameWithType> wird, kann mit den-Anweisungen abgefangen werden `Try...Catch...Finally` .  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `IsError` Funktion verwendet, um zu überprüfen, ob ein Ausdruck eine System Ausnahme darstellt.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNothing(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` Gibt zurück `True` , wenn der Ausdruck eine Objekt Variable darstellt, der derzeit kein Objekt zugewiesen ist. andernfalls wird zurückgegeben `False` .  
  
 `IsNothing` ist für die Arbeit mit Verweis Typen vorgesehen. Ein Werttyp kann nicht den Wert [Nothing](/dotnet/visual-basic/language-reference/nothing) enthalten und wird auf seinen Standardwert zurückgesetzt, wenn Sie `Nothing` ihn zuweisen. Wenn Sie in einen Werttyp angeben `Expression` , `IsNothing` gibt immer zurück `False` .  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `IsNothing` Funktion verwendet, um zu bestimmen, ob eine Objekt Variable einer Objektinstanz zugeordnet ist.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types">Wert- und Verweistypen</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumeric(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` Gibt zurück, `True` Wenn der Datentyp von `Expression` `Boolean` , `Byte` , `Decimal` , `Double` , `Integer` , `Long` , `SByte` , `Short` , `Single` , `UInteger` , `ULong` oder ist `UShort` . Außerdem gibt Sie `True` zurück `Expression` , wenn ein `Char` , oder ist, `String` `Object` das erfolgreich in eine Zahl konvertiert werden kann. `Expression` kann nicht numerische Zeichen enthalten. `IsNumeric` gibt `True` zurück `Expression` , wenn eine Zeichenfolge ist, die eine gültige hexadezimale oder oktale Zahl enthält. `IsNumeric` gibt auch `True` dann zurück `Expression` , wenn einen gültigen numerischen Ausdruck enthält, der mit einem +-oder-Zeichen beginnt oder Kommas enthält.  
  
 `IsNumeric` Gibt zurück, `False` Wenn `Expression` vom Datentyp ist `Date` . Es wird zurückgegeben, `False` Wenn `Expression` ein `Char` , oder ist, `String` `Object` das nicht erfolgreich in eine Zahl konvertiert werden kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `IsNumeric` Funktion verwendet, um zu bestimmen, ob der Inhalt einer Variablen als Zahl ausgewertet werden kann.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsReference(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
        <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</summary>
        <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` gibt `True` zurück `Expression` , wenn einen Verweistyp (z. b. eine Klasseninstanz, einen `String` Typ oder ein Array eines beliebigen Typs) darstellt, andernfalls wird zurückgegeben `False` .  
  
 Ein Verweistyp enthält einen Zeiger auf Daten, die an anderer Stelle im Arbeitsspeicher gespeichert sind. Ein Werttyp enthält seine eigenen Daten.  
  
   
  
## Examples  
 In diesem Beispiel wird die- `IsReference` Funktion verwendet, um zu überprüfen, ob mehrere Variablen auf Verweis Typen verweisen.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 Im vorherigen Beispiel werden die ersten drei Aufrufe von `IsReference` zurückgegeben `True` . Der letzte-Rückruf gibt zurück `False` , da `Integer` ein Werttyp und kein Verweistyp ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types">Wert- und Verweistypen</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LBound (Array As Array, Optional Rank As Integer = 1) As Integer" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Erforderlich. Array eines beliebigen Datentyps. Das Array, in dem der niedrigste mögliche Feldindex einer Dimension ermittelt werden soll.</param>
        <param name="Rank">Optional. <see langword="Integer" />. Die Dimension, für die der niedrigste mögliche Feldindex zurückgegeben wird. Verwenden Sie für die erste Dimension 1, für die zweite 2 usw. Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</param>
        <summary>Gibt den niedrigsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</summary>
        <returns><see langword="Integer" />. Der niedrigste Wert, den der Feldindex für die angegebene Dimension enthalten kann. <see langword="LBound" /> gibt immer 0 zurück, sobald <paramref name="Array" /> initialisiert wurde, auch wenn es keine Elemente enthält (z. B. bei einer Zeichenfolge der Länge 0). Wenn <paramref name="Array" /><see langword="Nothing" /> ist, löst <see langword="LBound" /> eine <see cref="T:System.ArgumentNullException" /> aus.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da Arrayfeldindizes bei 0 beginnen, ist der niedrigste mögliche Feldindex für eine Dimension immer 0.  
  
 Für ein Array mit den folgenden Dimensionen werden `LBound` die Werte in der folgenden Tabelle zurückgegeben:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|LBound-Aufrufe|Rückgabewert|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `LBound` Funktion verwendet, um den niedrigsten verfügbaren Index für die festgestellte Dimension eines Arrays zu ermitteln.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/dim-statement">Dim-Anweisung (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/redim-statement">ReDim-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 QBColor(int32 Color) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Erforderlich. Eine ganze Zahl zwischen 0–15.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beginnend mit dem am wenigsten signifikanten Byte gibt der zurückgegebene Wert die roten, grünen und blauen Werte an, die verwendet werden, um die entsprechende Farbe im RGB-System festzulegen, die von der Visual Basic Sprache verwendet wird.  
  
 Das- `Color` Argument weist diese Einstellungen auf.  
  
|Number|Color|Number|Color|  
|------------|-----------|------------|-----------|  
|0|Schwarz|8|Grau|  
|1|Blau|9|Hellblau|  
|2|Grün|10|Hellgrün|  
|3|Cyan|11|Helles Zyan|  
|4|Red|12|Hellrot|  
|5|Magenta|13|Hell Magenta|  
|6|Gelb|14|Hellgelb|  
|7|White|15|Helles Weiß|  
  
   
  
## Examples  
 In diesem Beispiel wird die- `QBColor` Funktion verwendet, um zu der durch gekennzeichneten Farbe zu wechseln `colorInteger` . `QBColor` akzeptiert ganzzahlige Werte zwischen 0 und 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" /> befindet sich nicht im Bereich von 0 bis einschließlich 15.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Rotanteils der Farbe darstellt.</param>
        <param name="Green">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Grünanteils der Farbe darstellt.</param>
        <param name="Blue">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Blauanteils der Farbe darstellt.</param>
        <summary>Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</summary>
        <returns>Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungsmethoden und-Eigenschaften, die eine Farbspezifikation akzeptieren, erwarten, dass diese Spezifikation eine Zahl ist, die einen RGB-Farbwert darstellt. Ein RGB-Farbwert gibt die relative Intensität von rot, grün und blau an, sodass eine bestimmte Farbe angezeigt wird.  
  
 Wenn der Wert für ein beliebiges Argument `RGB` größer als 255 ist, wird 255 verwendet.  
  
 In der folgenden Tabelle sind einige Standardfarben und die darin aufgeführten roten, grünen und blauen Werte aufgelistet.  
  
|Color|Roter Wert|Grüner Wert|Blauer Wert|  
|-----------|---------------|-----------------|----------------|  
|Schwarz|0|0|0|  
|Blau|0|0|255|  
|Grün|0|255|0|  
|Cyan|0|255|255|  
|Red|255|0|0|  
|Magenta|255|0|255|  
|Gelb|255|255|0|  
|White|255|255|255|  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie die- `RGB` Funktion verwendet wird, um eine ganze Zahl zurückzugeben, die einen `RGB` Farbwert darstellt.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> befindet sich außerhalb des Bereichs 0 bis 255 (einschließlich).</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SystemTypeName(string VbName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Erforderlich. Eine <see langword="String" />-Variable, die einen Visual Basic-Typnamen enthält.</param>
        <summary>Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</summary>
        <returns>Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` Gibt den voll qualifizierten Common Language Runtime (CLR)-Typnamen zurück, der dem Namen des Visual Basic Typs entspricht. Wenn z. b `VbName` . "Date" enthält, wird `SystemTypeName` "System. DateTime" zurückgegeben. Wenn `SystemTypeName` den Wert von nicht erkennt `VbName` , wird zurückgegeben `Nothing` (nicht die Zeichenfolge "Nothing").  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `SystemTypeName` Funktion verwendet, um Datentyp Namen für verschiedene Variablen zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object? VarName);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TypeName(object VarName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
        <summary>Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</summary>
        <returns>Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle sind die Werte aufgeführt, die `String` von `TypeName` für andere Inhalte von zurückgegeben werden `VarName` .  
  
|`VarName` Haus|Zurückgegebene Zeichenfolge|  
|------------------------|---------------------|  
|16-Bit- `True` oder `False` Werttyp|Booleschen|  
|8-Bit-binärwerttyp|Hobby|  
|16-Bit-Zeichen Werttyp|Char|  
|64-Bit-Werttyp für Datum und Uhrzeit|Datum|  
|Verweistyp, der fehlende oder nicht vorhandene Daten angibt|DBNull|  
|128-Bit-numerischer Werttyp mit festem Punkt|Mierte|  
|64-Bit-numerischer Werttyp für Gleit Komma Zahl|Maß|  
|32-Bit-Ganzzahl-Werttyp|Zah|  
|Verweistyp, der auf ein nicht spezialisiertes Objekt verweist|Objekt|  
|Verweistyp, der auf ein aus der Klasse *objectClass* erstelltes spezialisiertes Objekt verweist|"*objectClass*"|  
|64-Bit-Ganzzahl-Werttyp|Lange|  
|Verweistyp ohne derzeit zugewiesenes Objekt|Schweigen|  
|8-Bit-ganz Zahl Wert mit Vorzeichen|SByte|  
|ganzzahliger 16-Bit-Werttyp|Kurzem|  
|32-Bit-numerischer Werttyp für Gleit Komma Zahl|Gänger|  
|Verweistyp, der auf eine Zeichenfolge mit 16-Bit-Zeichen zeigt|Schnür|  
|32-Bit-Ganzzahl-Werttyp ohne Vorzeichen|UInteger|  
|64-Bit-Ganzzahl-Werttyp ohne Vorzeichen|ULONG|  
|16-Bit-ganz Zahl Wert ohne Vorzeichen|UShort|  
  
 Wenn `VarName` ein Array ist, kann die zurückgegebene Zeichenfolge eine beliebige Zeichenfolge in der vorangehenden Tabelle mit angefügten leeren Klammern sein. Wenn z. b `VarName` . auf ein Array aus ganzen Zahlen zeigt, `TypeName` gibt "Integer ()" zurück.  
  
 Wenn `TypeName` den Namen eines Verweis Typs (z. b. eine Klasse) zurückgibt, wird nur der Name selbst zurückgegeben, nicht der qualifizierte Name. Wenn z. b `VarName` . auf ein Objekt der Klasse verweist <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType> , wird `TypeName` "Taschen Quelle" zurückgegeben. Beachten Sie, dass die Variable `TypeName` "Nothing" zurückgibt, wenn die Variable als einen bestimmten Klassentyp deklariert ist, aber kein Objekt zugewiesen ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `TypeName` Funktion verwendet, um Datentyp Informationen zu mehreren Variablen zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 UBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UBound (Array As Array, Optional Rank As Integer = 1) As Integer" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Erforderlich. Array eines beliebigen Datentyps. Das Array, in dem der höchste mögliche Feldindex einer Dimension ermittelt werden soll.</param>
        <param name="Rank">Optional. <see langword="Integer" />. Die Dimension, für die der höchste mögliche Feldindex zurückgegeben wird. Verwenden Sie für die erste Dimension 1, für die zweite 2 usw. Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</param>
        <summary>Gibt den höchsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</summary>
        <returns><see langword="Integer" />. Der höchste Wert, den der Feldindex für die angegebene Dimension enthalten kann. Wenn <paramref name="Array" /> nur über ein Element verfügt, gibt <see langword="UBound" /> 0 zurück. Wenn <paramref name="Array" /> keine Elemente enthält, z. B., wenn es eine Zeichenfolge der Länge 0 ist, gibt <see langword="UBound" /> -1 zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da Array Indizes bei 0 beginnen, ist die Länge einer Dimension um eins größer als der höchste verfügbare Index für diese Dimension.  
  
 Für ein Array mit den folgenden Dimensionen werden `UBound` die Werte in der folgenden Tabelle zurückgegeben:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Aufrufe von "UBound"|Rückgabewert|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Mithilfe von können Sie `UBound` die Gesamtanzahl von Elementen in einem Array ermitteln, aber Sie müssen den zurückgegebenen Wert so anpassen, dass er die Tatsache berücksichtigt, dass die Indizes bei 0 beginnen. Im folgenden Beispiel wird die Gesamtgröße des Arrays `a` im vorherigen Beispiel berechnet:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Der für berechnete Wert `total` ist 3030, d. h. 101 * 6 * 5.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `UBound` Funktion verwendet, um den höchsten verfügbaren Index für die angegeben Dimension eines Arrays zu ermitteln.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> ist <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/dim-statement">Dim-Anweisung (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/redim-statement">ReDim-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der von zurückgegebene ganzzahlige Wert `VarType` ist ein Member von <xref:Microsoft.VisualBasic.VariantType> .  
  
 In der folgenden Tabelle sind die Werte aufgeführt, die von `VarType` für Sonderfälle von zurückgegeben werden `VarName` .  
  
|Der durch dargestellte Datentyp. `VarName`|Von zurückgegebener Wert `VarType`|  
|----------------------------------------|---------------------------------|  
|[Schweigen](/dotnet/visual-basic/language-reference/nothing)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Enumeration|Zugrunde liegender Datentyp ( `SByte` , `Byte` , `Short` , `UShort` , `Integer` , `UInteger` , `Long` oder `ULong` )|  
|Array|Bitweises OR von Array Elementtyp und `VariantType.Array`|  
|Array von Arrays|Bitweises OR von `VariantType.Object` and `VariantType.Array`|  
|Struktur ( <xref:System.ValueType?displayProperty=nameWithType> )|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Unbekannt|`VariantType.Object`|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `VarType` Funktion verwendet, um Informationen zu Datentyp Klassifizierungen zu mehreren Variablen zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VbTypeName(string UrtName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Erforderlich. <see langword="String" />-Variable mit einem Typnamen, der von der Common Language Runtime verwendet wird.</param>
        <summary>Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</summary>
        <returns>Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` Gibt den Visual Basic Typnamen zurück, der dem Namen des Common Language Runtime Typs entspricht. Wenn z. b `UrtName` . "Int32" oder "System. Int32" enthält, wird `VbTypeName` "Integer" zurückgegeben. Wenn `VbTypeName` den Wert von nicht erkennt `UrtName` , wird zurückgegeben `Nothing` (nicht die Zeichenfolge "Nothing").  
  
 Der Typname in `UrtName` kann aus verschiedenen Quellen abgerufen werden, z. b. von der- <xref:System.Reflection.MemberInfo.Name%2A> Eigenschaft im- <xref:System.Reflection.MemberInfo> Array der- <xref:System.Type> Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die- `VbTypeName` Funktion verwendet, um Datentyp Namen für verschiedene Variablen zurückzugeben.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">Datentyp: Zusammenfassung (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>

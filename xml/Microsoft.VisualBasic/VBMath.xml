<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed5678248f78e854ccebc41cb690d5ae586d385c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39970878" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <TypeSignature Language="VB.NET" Value="Public Module VBMath" />
  <TypeSignature Language="C++ CLI" Value="public ref class VBMath sealed" />
  <TypeSignature Language="F#" Value="type VBMath = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="VbMath" />-Modul enthält Prozeduren, mit denen mathematische Operationen ausgeführt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Member der Laufzeitbibliothek zum Generieren von Zufallszahlen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rnd` -Funktion generiert eine zufällige ganze Zahl im Bereich von 1 bis 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert den Zufallszahlengenerator.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize();" />
      <MemberSignature Language="F#" Value="static member Randomize : unit -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert den Zufallszahlengenerator.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der `Randomize` Methode nimmt einen Ausgangswert nicht. Stattdessen ist der Rückgabewert vom Systemzeitgeber neuen Wert als Ausgangswert verwendet.  
  
 Wenn `Randomize` nicht verwendet wird, die `Rnd` -Funktion (mit ohne Argumente) verwendet die gleiche Anzahl als Ausgangswert zum ersten Mal es aufgerufen wird, und verwendet anschließend die letzte generierte Nummer als ein Startwert.  
  
> [!NOTE]
>  Aufrufen, um Sequenzen von Zufallszahlen zu wiederholen, `Rnd` mit einem negativen Argument unmittelbar vor der Verwendung `Randomize` mit einem numerischen Argument.  
  
> [!IMPORTANT]
>  Da die `Random` Anweisung und die `Rnd` Funktion mit einem Startwert beginnen, und Generieren von Zahlen, die in einem begrenzten Bereich fallen, die Ergebnisse sind möglicherweise von einer Person, die die Algorithmus zur Generierung verwendeten weiß vorhergesagt. Daher die `Random` Anweisung und die `Rnd` Funktion sollte nicht zum Generieren von Zufallszahlen für die Verwendung der Verschlüsselung verwendet werden. Weitere Informationen finden Sie unter <xref:System.Security.Cryptography.RandomNumberGenerator>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Randomize` Anweisung zum Initialisieren des Zufallszahlen-Generators. Da das Number-Argument nicht angegeben wurde, `Randomize` verwendet den zurückgegebenen Wert aus der `Timer` fungieren als neuer Startwert.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize (Number As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize(double Number);" />
      <MemberSignature Language="F#" Value="static member Randomize : double -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Dies ist optional. Ein <see langword="Object" /> oder ein gültiger numerischer Ausdruck.</param>
        <summary>Initialisiert den Zufallszahlengenerator.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Randomize` verwendet `Number` zum Initialisieren der `Rnd` Funktion Zufallszahlengenerator, legen sie einen neuen Startwert. Wenn Sie weglassen `Number`, der Rückgabewert vom Systemzeitgeber neuen Wert als Ausgangswert verwendet wird.  
  
 Wenn `Randomize` nicht verwendet wird, die `Rnd` -Funktion (mit ohne Argumente) verwendet die gleiche Anzahl als Ausgangswert zum ersten Mal es aufgerufen wird, und verwendet anschließend die letzte generierte Nummer als ein Startwert.  
  
> [!NOTE]
>  Aufrufen, um Sequenzen von Zufallszahlen zu wiederholen, `Rnd` mit einem negativen Argument unmittelbar vor der Verwendung `Randomize` mit einem numerischen Argument. Mithilfe von `Randomize` mit den gleichen Wert für `Number` die vorherige Sequenz nicht wiederholt.  
  
> [!IMPORTANT]
>  Da die `Random` Anweisung und die `Rnd` Funktion mit einem Startwert beginnen, und Generieren von Zahlen, die in einem begrenzten Bereich fallen, die Ergebnisse sind möglicherweise von einer Person, die die Algorithmus zur Generierung verwendeten weiß vorhergesagt. Daher die `Random` Anweisung und die `Rnd` Funktion sollte nicht zum Generieren von Zufallszahlen für die Verwendung der Verschlüsselung verwendet werden. Weitere Informationen finden Sie unter <xref:System.Security.Cryptography.RandomNumberGenerator>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Randomize` Anweisung zum Initialisieren des Zufallszahlen-Generators. Da das Number-Argument nicht angegeben wurde, `Randomize` verwendet den zurückgegebenen Wert aus der `Timer` fungieren als neuer Startwert.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Zufallszahl des Typs <see langword="Single" /> zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd();" />
      <MemberSignature Language="F#" Value="static member Rnd : unit -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zufallszahl des Typs <see langword="Single" /> zurück.</summary>
        <returns>Die nächste Zufallszahl in der Folge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Rnd` Funktion gibt einen Wert kleiner als 1, jedoch größer als oder gleich 0 (null).  
  
 Vor dem Aufruf `Rnd`, verwenden Sie die `Randomize` Anweisung ohne Argument zum Initialisieren des Zufallszahlen-Generators mit einem Startwert basierend auf dem Systemzeitgeber.  
  
 Um zufällige ganze Zahlen in einem angegebenen Bereich zu erstellen, verwenden Sie die folgende Formel ein.  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 Hier `upperbound` die höchste Zahl im Bereich und `lowerbound` ist die niedrigste Zahl im Bereich.  
  
> [!NOTE]
>  Aufrufen, um Sequenzen von Zufallszahlen zu wiederholen, `Rnd` mit einem negativen Argument unmittelbar vor der Verwendung `Randomize` mit einem numerischen Argument.  
  
> [!IMPORTANT]
>  Da die `Random` Anweisung und die `Rnd` Funktion mit einem Startwert beginnen, und Generieren von Zahlen, die in einem begrenzten Bereich fallen, die Ergebnisse sind möglicherweise von einer Person, die die Algorithmus zur Generierung verwendeten weiß vorhergesagt. Daher die `Random` Anweisung und die `Rnd` Funktion sollte nicht zum Generieren von Zufallszahlen für die Verwendung der Verschlüsselung verwendet werden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rnd` -Funktion generiert eine zufällige ganze Zahl im Bereich von 1 bis 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd(float Number);" />
      <MemberSignature Language="F#" Value="static member Rnd : single -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Dies ist optional. Ein <see langword="Single" />-Wert oder ein gültiger <see langword="Single" />-Ausdruck.</param>
        <summary>Gibt eine Zufallszahl des Typs <see langword="Single" /> zurück.</summary>
        <returns>Wenn die Zahl kleiner als 0 ist, generiert Rnd jedes Mal dieselbe Zahl und verwendet <paramref name="Number" /> als Startwert. Ist die Zahl größer als 0, generiert Rnd die nächste Zufallszahl in der Folge. Wenn die Zahl gleich 0 ist, generiert Rnd die zuletzt generierte Zahl. Wird die Zahl nicht angegeben, generiert Rnd die nächste Zufallszahl in der Folge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Rnd` Funktion gibt einen Wert kleiner als 1, jedoch größer als oder gleich 0 (null).  
  
 Der Wert des `Number` bestimmt, wie `Rnd` generiert eine Zufallszahl.  
  
 Für jeden angegebenen Startwert wird die gleiche Anzahl Sequenz generiert, da jedem nachfolgenden Aufruf der `Rnd` Funktion verwendet die zuvor generierte Zahl als Ausgangswert für die nächste Zahl in der Sequenz.  
  
 Vor dem Aufruf `Rnd`, verwenden Sie die `Randomize` Anweisung ohne Argument zum Initialisieren des Zufallszahlen-Generators mit einem Startwert basierend auf dem Systemzeitgeber.  
  
 Um zufällige ganze Zahlen in einem angegebenen Bereich zu erstellen, verwenden Sie die folgende Formel ein.  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 Hier `upperbound` die höchste Zahl im Bereich und `lowerbound` ist die niedrigste Zahl im Bereich.  
  
> [!NOTE]
>  Aufrufen, um Sequenzen von Zufallszahlen zu wiederholen, `Rnd` mit einem negativen Argument unmittelbar vor der Verwendung `Randomize` mit einem numerischen Argument. Mithilfe von `Randomize` mit den gleichen Wert für `Number` die vorherige Sequenz nicht wiederholt.  
  
> [!IMPORTANT]
>  Da die `Random` Anweisung und die `Rnd` Funktion mit einem Startwert beginnen, und Generieren von Zahlen, die in einem begrenzten Bereich fallen, die Ergebnisse sind möglicherweise von einer Person, die die Algorithmus zur Generierung verwendeten weiß vorhergesagt. Daher die `Random` Anweisung und die `Rnd` Funktion sollte nicht zum Generieren von Zufallszahlen für die Verwendung der Verschlüsselung verwendet werden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rnd` -Funktion generiert eine zufällige ganze Zahl im Bereich von 1 bis 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
  </Members>
</Type>
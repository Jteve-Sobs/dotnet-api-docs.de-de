<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="757b138ad08a57ad8a16b1f7210ead2e45005193" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36728095" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="90296-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="90296-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="90296-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="90296-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="90296-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="90296-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-104">Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Zugriff auf Dateien und Ordner.</span><span class="sxs-lookup"><span data-stu-id="90296-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-105">Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und das Verzeichnis oder die Ordner zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="90296-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="90296-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-106">Required.</span>
          </span>
          <span data-ttu-id="90296-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="90296-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="90296-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="90296-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="90296-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-113">Die `ChDir` -Funktion ändert das Standardverzeichnis, aber nicht das Standardlaufwerk.</span><span class="sxs-lookup"><span data-stu-id="90296-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="90296-114">Beispielsweise ist das Standard-Laufwerk C, die folgende Anweisung ändert das Standardverzeichnis auf Laufwerk D, C, bleibt das Standardlaufwerk jedoch:</span><span class="sxs-lookup"><span data-stu-id="90296-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="90296-115">Lassen Sie relative verzeichnisänderungen wird durch zwei Punkte wie folgt eingeben:</span><span class="sxs-lookup"><span data-stu-id="90296-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-116">Die `ChDir` -Funktion erfordert die Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="90296-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="90296-117">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und.</span><span class="sxs-lookup"><span data-stu-id="90296-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-118">Dieses Beispiel verwendet die `ChDir` Funktion, um das aktuelle Verzeichnis oder einen Ordner zu ändern.</span><span class="sxs-lookup"><span data-stu-id="90296-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="90296-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-122">Required.</span>
          </span>
          <span data-ttu-id="90296-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="90296-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="90296-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-127">Die `ChDrive` -Funktion erfordert die Berechtigung nicht verwaltete Code sich möglicherweise auf ihre Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken.</span><span class="sxs-lookup"><span data-stu-id="90296-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="90296-128">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="90296-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-129">Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="90296-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="90296-130">Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="90296-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-132">Required.</span>
          </span>
          <span data-ttu-id="90296-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="90296-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="90296-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-137">Die `ChDrive` -Funktion erfordert die Berechtigung nicht verwaltete Code sich möglicherweise auf ihre Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken.</span><span class="sxs-lookup"><span data-stu-id="90296-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="90296-138">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="90296-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-139">Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="90296-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="90296-140">Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="90296-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="90296-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90296-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="90296-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="90296-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90296-149">Dieses Beispiel verwendet die `CurDir` Funktion, um den aktuellen Pfad zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="90296-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-150">Optional.</span>
          </span>
          <span data-ttu-id="90296-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="90296-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="90296-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="90296-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90296-157">Dieses Beispiel verwendet die `CurDir` Funktion, um den aktuellen Pfad zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="90296-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="90296-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90296-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="90296-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="90296-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-165">Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="90296-166">`VbVolume` Gibt die Volumebezeichnung für das Laufwerk anstelle von einem bestimmten Dateinamen zurück.</span><span class="sxs-lookup"><span data-stu-id="90296-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="90296-167">Geben Sie an einer `PathName` erstmalig, die Sie Aufrufen der `Dir` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="90296-168">Um das nächste Element abzurufen, können Sie aufeinander folgende Aufrufe vorzunehmen die `Dir` Funktion ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="90296-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-169">Ordnungsgemäß ausgeführt. die `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> des flags <xref:System.Security.Permissions.FileIOPermission> , die den Ausführungscode gewährt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="90296-170">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="90296-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="90296-171">Die `Attributes` Argument Enumerationswerte sind wie folgt:</span><span class="sxs-lookup"><span data-stu-id="90296-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="90296-172">Wert</span><span class="sxs-lookup"><span data-stu-id="90296-172">Value</span></span>|<span data-ttu-id="90296-173">Konstante</span><span class="sxs-lookup"><span data-stu-id="90296-173">Constant</span></span>|<span data-ttu-id="90296-174">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="90296-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="90296-175">Standard.</span><span class="sxs-lookup"><span data-stu-id="90296-175">Default.</span></span> <span data-ttu-id="90296-176">Gibt Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="90296-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="90296-177">Gibt an, schreibgeschützte Dateien sowie Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="90296-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="90296-178">Gibt an, ausgeblendete Dateien sowie Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="90296-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="90296-179">Gibt an, das Systemdateien und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="90296-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="90296-180">Gibt die Volumebezeichnung. Wenn andere Attribute angegeben wird, `vbVolume` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="90296-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="90296-181">Gibt an, Verzeichnissen oder Ordnern sowie Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="90296-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="90296-182">Datei wurde seit der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="90296-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="90296-183">Datei weist einen anderen Namen an.</span><span class="sxs-lookup"><span data-stu-id="90296-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="90296-184">Diese Enumerationen werden von der Visual Basic-Sprache angegeben und können überall im Code anstelle der eigentlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="90296-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-185">Dieses Beispiel verwendet die `Dir` Funktion zum Überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="90296-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="90296-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-186">Optional.</span>
          </span>
          <span data-ttu-id="90296-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="90296-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="90296-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-189">Optional.</span>
          </span>
          <span data-ttu-id="90296-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="90296-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="90296-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="90296-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-196">Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="90296-197">`VbVolume` Gibt die Volumebezeichnung für das Laufwerk anstelle von einem bestimmten Dateinamen zurück.</span><span class="sxs-lookup"><span data-stu-id="90296-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="90296-198">Geben Sie an einer `PathName` erstmalig, die Sie Aufrufen der `Dir` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="90296-199">Um das nächste Element abzurufen, können Sie aufeinander folgende Aufrufe vorzunehmen die `Dir` Funktion ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="90296-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-200">Ordnungsgemäß ausgeführt. die `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> des flags <xref:System.Security.Permissions.FileIOPermission> , die den Ausführungscode gewährt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="90296-201">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="90296-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="90296-202">Die `Attributes` Argument Enumerationswerte sind wie folgt:</span><span class="sxs-lookup"><span data-stu-id="90296-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="90296-203">Wert</span><span class="sxs-lookup"><span data-stu-id="90296-203">Value</span></span>|<span data-ttu-id="90296-204">Konstante</span><span class="sxs-lookup"><span data-stu-id="90296-204">Constant</span></span>|<span data-ttu-id="90296-205">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="90296-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="90296-206">Standard.</span><span class="sxs-lookup"><span data-stu-id="90296-206">Default.</span></span> <span data-ttu-id="90296-207">Gibt die Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="90296-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="90296-208">Gibt schreibgeschützte Dateien zusätzlich zu Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="90296-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="90296-209">Gibt versteckte Dateien zusätzlich zu Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="90296-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="90296-210">Gibt die Systemdateien, zusätzlich zu Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="90296-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="90296-211">Gibt die Volumebezeichnung. Wenn andere Attribute angegeben wird, `vbVolume` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="90296-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="90296-212">Gibt an, Verzeichnissen oder Ordnern, zusätzlich zu Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="90296-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="90296-213">Datei wurde seit der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="90296-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="90296-214">Datei weist einen anderen Namen an.</span><span class="sxs-lookup"><span data-stu-id="90296-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="90296-215">Diese Enumerationen werden von der Visual Basic-Sprache angegeben und können überall im Code anstelle der eigentlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="90296-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-216">Dieses Beispiel verwendet die `Dir` Funktion zum Überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="90296-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-217">Required.</span>
          </span>
          <span data-ttu-id="90296-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-221">Verwendung `EOF` vermeiden Sie den Fehler generiert, wird versucht, die nach dem Ende einer Datei Eingabe abzurufen.</span><span class="sxs-lookup"><span data-stu-id="90296-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="90296-222">Die `EOF` -Funktion gibt `False` fort, bis das Ende der Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="90296-223">Dateien für geöffnet `Random` oder `Binary` Zugriff `EOF` gibt `False` erst nach der Ausführung der letzten `FileGet` Funktion kann nicht zum Lesen der vollständigen Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="90296-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="90296-224">Dateien für geöffnet `Binary` zugreifen, beim Lesen der Datei mithilfe der `Input` Funktion bis `EOF` gibt `True` wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="90296-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="90296-225">Verwenden Sie die `LOF` und `Loc` anstelle von Funktionen `EOF` beim Lesen von Binärdateien mit `Input`, oder verwenden Sie `Get` bei Verwendung der `EOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="90296-226">Dateien für geöffnet `Output`, `EOF` gibt immer `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-227">Dieses Beispiel verwendet die `EOF` Funktion, um das Ende einer Datei zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="90296-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="90296-228">In diesem Beispiel wird vorausgesetzt, dass `Testfile` ist eine Textdatei, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-230">Required.</span>
          </span>
          <span data-ttu-id="90296-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="90296-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="90296-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-237">Diese Funktion gibt eine Enumeration, die den Dateimodus mit geöffneten Dateien darstellt. die `FileOpen` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-238">Dieses Beispiel verwendet die `FileAttr` Funktion, um den Dateimodus einer geöffneten Datei zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="90296-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-239">Optional.</span>
          </span>
          <span data-ttu-id="90296-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="90296-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-244">Die `FileClose` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-245">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-246">Weitere Informationen finden Sie unter [wie: Lesen von Text aus Dateien mit einem StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[wie: Schreiben von Text in Dateien mit einem StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), und [Exemplarische Vorgehensweise: Bearbeiten von Dateien und Verzeichnissen in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="90296-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="90296-247">Wenn Sie weglassen `FileNumbers`, allen aktive Dateien geöffnet werden, indem Sie die `FileOpen` Funktion geschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="90296-248">Beim Schließen von Dateien, die für geöffnet waren `Output` oder `Append`, wird der endgültige Puffer der Ausgabe in die Betriebssystempuffer für diese Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="90296-249">Alle geschlossenen zugeordnete Pufferspeicher Datei freigegeben ist.</span><span class="sxs-lookup"><span data-stu-id="90296-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="90296-250">Wenn die `FileClose` Funktion ausgeführt wird, wird die Zuordnung einer Datei mit der Datei Zahl enden.</span><span class="sxs-lookup"><span data-stu-id="90296-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-251">Dieses Beispiel verwendet die `FileClose` Funktion zum Schließen einer Datei geöffnet wird, für `Input`.</span><span class="sxs-lookup"><span data-stu-id="90296-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="90296-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-253">Required.</span>
          </span>
          <span data-ttu-id="90296-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="90296-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="90296-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-256">Required.</span>
          </span>
          <span data-ttu-id="90296-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="90296-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-259">Copies a file.</span>
          </span>
          <span data-ttu-id="90296-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="90296-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-262">Wenn Sie versuchen, verwenden Sie die `FileCopy` -Funktion auf eine aktuell geöffnete Datei ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="90296-263">`FileCopy` erfordert volle Vertrauenswürdigkeit auf dem lokalen Laufwerk funktioniert.</span><span class="sxs-lookup"><span data-stu-id="90296-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-264">Dieses Beispiel verwendet die `FileCopy` Funktion, um eine Datei auf einen anderen kopieren.</span><span class="sxs-lookup"><span data-stu-id="90296-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="90296-265">Für dieses Beispiel wird davon ausgegangen, die `SrcFile` ist eine Datei, die Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="90296-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-269">Required.</span>
          </span>
          <span data-ttu-id="90296-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="90296-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="90296-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="90296-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90296-276">Dieses Beispiel verwendet die `FileDateTime` Funktion, um das Datum zu bestimmen und die Uhrzeit einer Datei erstellt oder zuletzt geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="90296-277">Das Format von Datum und Uhrzeit angezeigt, basiert auf dem Gebietsschema des Systems.</span><span class="sxs-lookup"><span data-stu-id="90296-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-283">Required.</span>
          </span>
          <span data-ttu-id="90296-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-285">Required.</span>
          </span>
          <span data-ttu-id="90296-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-287">Optional.</span>
          </span>
          <span data-ttu-id="90296-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-292">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-293">Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-294">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-295">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-296">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-297">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-298">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-298">Random Mode</span></span>  
 <span data-ttu-id="90296-299">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-300">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-301">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-302">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-303">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-304">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-305">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-306">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-307">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-308">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-309">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-310">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-311">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-312">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-313">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-314">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-315">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-316">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-317">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-318">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-319">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-320">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-321">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-322">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-323">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-324">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-325">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-326">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-326">Binary Mode</span></span>  
 <span data-ttu-id="90296-327">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-328">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-329">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-330">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-331">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-332">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-333">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-334">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-335">Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-338">Required.</span>
          </span>
          <span data-ttu-id="90296-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-340">Required.</span>
          </span>
          <span data-ttu-id="90296-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-342">Optional.</span>
          </span>
          <span data-ttu-id="90296-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-347">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-348">Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-349">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-350">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-351">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-352">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-353">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-353">Random Mode</span></span>  
 <span data-ttu-id="90296-354">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-355">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-356">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-357">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-358">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-359">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-360">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-361">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-362">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-363">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-364">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-365">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-366">Wenn der Deskriptor nicht verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="90296-366">If the descriptor is not used.</span></span> <span data-ttu-id="90296-367">Übergeben Sie die Größe und die Grenzen des Arrays in `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-368">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-369">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-370">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-371">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-372">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-373">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-374">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-375">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-376">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-377">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-378">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-379">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-380">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-381">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-382">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-382">Binary Mode</span></span>  
 <span data-ttu-id="90296-383">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-384">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-385">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-386">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-387">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-388">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-389">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-390">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-391">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-394">Required.</span>
          </span>
          <span data-ttu-id="90296-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-396">Required.</span>
          </span>
          <span data-ttu-id="90296-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-398">Optional.</span>
          </span>
          <span data-ttu-id="90296-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-403">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-404">Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-405">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-406">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-407">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-408">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-409">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-409">Random Mode</span></span>  
 <span data-ttu-id="90296-410">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-411">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-412">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-413">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-414">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-415">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-416">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-417">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-418">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-419">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-420">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-421">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-422">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-423">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-424">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-425">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-426">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-427">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-428">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-429">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-430">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-431">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-432">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-433">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-434">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-435">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-436">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-437">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-437">Binary Mode</span></span>  
 <span data-ttu-id="90296-438">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-439">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-440">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-441">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-442">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-443">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-444">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-445">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-446">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-449">Required.</span>
          </span>
          <span data-ttu-id="90296-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-451">Required.</span>
          </span>
          <span data-ttu-id="90296-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-453">Optional.</span>
          </span>
          <span data-ttu-id="90296-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-458">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-459">Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-460">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-461">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-462">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-463">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-464">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-464">Random Mode</span></span>  
 <span data-ttu-id="90296-465">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-466">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion,`FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-467">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-468">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-469">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-470">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-471">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-472">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-473">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-474">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-475">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-476">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-477">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-478">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-479">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-480">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-481">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-482">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-483">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-484">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-485">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-486">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-487">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-488">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-489">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-490">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-491">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-492">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-492">Binary Mode</span></span>  
 <span data-ttu-id="90296-493">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-494">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-495">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-496">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-497">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-498">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-499">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-500">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-501">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-504">Required.</span>
          </span>
          <span data-ttu-id="90296-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-506">Required.</span>
          </span>
          <span data-ttu-id="90296-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-508">Optional.</span>
          </span>
          <span data-ttu-id="90296-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-513">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-514">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-515">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-516">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-517">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-518">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-519">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-519">Random Mode</span></span>  
 <span data-ttu-id="90296-520">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-521">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-522">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-523">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-524">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-525">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-526">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-527">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-528">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-529">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-530">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-531">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-532">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-533">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-534">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-535">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-536">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-537">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-538">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-539">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-540">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-541">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-542">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-543">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-544">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-545">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-546">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-547">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-547">Binary Mode</span></span>  
 <span data-ttu-id="90296-548">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-549">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-550">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-551">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-552">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-553">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-554">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-555">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-556">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-559">Required.</span>
          </span>
          <span data-ttu-id="90296-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-561">Required.</span>
          </span>
          <span data-ttu-id="90296-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-563">Optional.</span>
          </span>
          <span data-ttu-id="90296-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-568">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-569">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-570">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-571">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-572">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-573">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-574">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-574">Random Mode</span></span>  
 <span data-ttu-id="90296-575">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-576">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-577">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-578">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-579">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-580">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-581">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-582">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-583">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-584">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-585">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-586">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-587">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-588">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-589">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-590">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-591">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-592">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-593">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-594">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-595">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-596">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-597">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-598">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-599">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-600">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-601">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-602">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-602">Binary Mode</span></span>  
 <span data-ttu-id="90296-603">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-604">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-605">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-606">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-607">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-608">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-609">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-610">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-611">Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-614">Required.</span>
          </span>
          <span data-ttu-id="90296-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-616">Required.</span>
          </span>
          <span data-ttu-id="90296-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-618">Optional.</span>
          </span>
          <span data-ttu-id="90296-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-623">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-624">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-625">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-626">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-627">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-628">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-629">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-629">Random Mode</span></span>  
 <span data-ttu-id="90296-630">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-631">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-632">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-633">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-634">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-635">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-636">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-637">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-638">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-639">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-640">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-641">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-642">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-643">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-644">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-645">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-646">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-647">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-648">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-649">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-650">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-651">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-652">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-653">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-654">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-655">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-656">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-657">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-657">Binary Mode</span></span>  
 <span data-ttu-id="90296-658">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-659">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-660">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-661">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-662">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-663">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-664">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-665">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-666">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-669">Required.</span>
          </span>
          <span data-ttu-id="90296-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-671">Required.</span>
          </span>
          <span data-ttu-id="90296-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-673">Optional.</span>
          </span>
          <span data-ttu-id="90296-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-678">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-679">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-680">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-681">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-682">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-683">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-684">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-684">Random Mode</span></span>  
 <span data-ttu-id="90296-685">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-686">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-687">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-688">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-689">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-690">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-691">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-692">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-693">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-694">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-695">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-696">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-697">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-698">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-699">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-700">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-701">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-702">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-703">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-704">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-705">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-706">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-707">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-708">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-709">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-710">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-711">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-712">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-712">Binary Mode</span></span>  
 <span data-ttu-id="90296-713">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-714">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-715">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-716">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-717">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-718">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-719">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-720">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-721">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-724">Required.</span>
          </span>
          <span data-ttu-id="90296-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-726">Required.</span>
          </span>
          <span data-ttu-id="90296-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-728">Optional.</span>
          </span>
          <span data-ttu-id="90296-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-733">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-734">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-735">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-736">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-737">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-738">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-739">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-739">Random Mode</span></span>  
 <span data-ttu-id="90296-740">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-741">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-742">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-743">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-744">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-745">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-746">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-747">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-748">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-749">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-750">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-751">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-752">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-753">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-754">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-755">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-756">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-757">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-758">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-759">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-760">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-761">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-762">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-763">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-764">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-765">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-766">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-767">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-767">Binary Mode</span></span>  
 <span data-ttu-id="90296-768">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-769">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-770">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-771">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-772">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-773">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-774">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-775">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-776">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-779">Required.</span>
          </span>
          <span data-ttu-id="90296-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-781">Required.</span>
          </span>
          <span data-ttu-id="90296-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-783">Optional.</span>
          </span>
          <span data-ttu-id="90296-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-788">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-789">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-790">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-791">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-792">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-793">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-794">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-794">Random Mode</span></span>  
 <span data-ttu-id="90296-795">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-796">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-797">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-798">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-799">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-800">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-801">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-802">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-803">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-804">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-805">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-806">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-807">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-808">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-809">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-810">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-811">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-812">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-813">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-814">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-815">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-816">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-817">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-818">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-819">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-820">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-821">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-822">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-822">Binary Mode</span></span>  
 <span data-ttu-id="90296-823">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-824">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-825">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-826">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-827">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-828">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-829">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-830">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-831">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-834">Required.</span>
          </span>
          <span data-ttu-id="90296-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-836">Required.</span>
          </span>
          <span data-ttu-id="90296-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-838">Optional.</span>
          </span>
          <span data-ttu-id="90296-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-843">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-844">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-845">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-846">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-847">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-848">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-849">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-849">Random Mode</span></span>  
 <span data-ttu-id="90296-850">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-851">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-852">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-853">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-854">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-855">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-856">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-857">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-858">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-859">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-860">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-861">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-862">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-863">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-864">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-865">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-866">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-867">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-868">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-869">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-870">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-871">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-872">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-873">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-874">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-875">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-876">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-877">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-877">Binary Mode</span></span>  
 <span data-ttu-id="90296-878">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-879">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-880">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-881">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-882">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-883">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-884">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-885">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-886">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-889">Required.</span>
          </span>
          <span data-ttu-id="90296-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-891">Required.</span>
          </span>
          <span data-ttu-id="90296-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-893">Optional.</span>
          </span>
          <span data-ttu-id="90296-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="90296-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-895">Optional.</span>
          </span>
          <span data-ttu-id="90296-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="90296-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="90296-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-902">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-903">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-904">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-905">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-906">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-907">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-908">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-908">Random Mode</span></span>  
 <span data-ttu-id="90296-909">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-910">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-911">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-912">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-913">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-914">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-915">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-916">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-917">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-918">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-919">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-920">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-921">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-922">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-923">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-924">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-925">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-926">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-927">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-928">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-929">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-930">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-931">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-932">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-933">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-934">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-935">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-936">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-936">Binary Mode</span></span>  
 <span data-ttu-id="90296-937">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-938">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-939">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-940">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-941">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-942">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-943">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-944">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-945">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-948">Required.</span>
          </span>
          <span data-ttu-id="90296-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-950">Required.</span>
          </span>
          <span data-ttu-id="90296-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-952">Optional.</span>
          </span>
          <span data-ttu-id="90296-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="90296-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-954">Optional.</span>
          </span>
          <span data-ttu-id="90296-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="90296-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="90296-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-957">Optional.</span>
          </span>
          <span data-ttu-id="90296-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="90296-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="90296-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="90296-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-964">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-965">Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="90296-966">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-967">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-968">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-969">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-970">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-970">Random Mode</span></span>  
 <span data-ttu-id="90296-971">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-972">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-973">Der Abstand zwischen dem Ende eines Datensatzes und das Starten des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-974">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-975">Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-976">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-977">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-978">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-979">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="90296-980">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-981">Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="90296-982">Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="90296-983">Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="90296-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="90296-984">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-985">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-986">Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-987">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="90296-988">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="90296-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="90296-989">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="90296-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="90296-990">200 Bytes für die Daten: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="90296-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="90296-991">Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="90296-992">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="90296-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-993">`FileGet` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-994">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-995">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="90296-996">Dies schließt alle Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="90296-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="90296-997">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-998">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-998">Binary Mode</span></span>  
 <span data-ttu-id="90296-999">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1000">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1001">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1002">`FileGet` Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1003">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="90296-1004">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="90296-1005">`FileGet` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1006">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="90296-1007">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1010">Required.</span>
          </span>
          <span data-ttu-id="90296-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1012">Required.</span>
          </span>
          <span data-ttu-id="90296-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1014">Optional.</span>
          </span>
          <span data-ttu-id="90296-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="90296-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="90296-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1019">Die `FileGetObject` -Funktion wird verwendet, statt `FileGet` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs zurückgegeben `Integer`, `Long`, `Short`usw. lauten.</span><span class="sxs-lookup"><span data-stu-id="90296-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="90296-1020">Wenn Sie beabsichtigen, schreiben die `Variant` Typ `FileGetObject` ist erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="90296-1021">Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, wird immer empfohlen, dass Sie verwenden `FilePutObject` und `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="90296-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="90296-1022">`FileGetObject` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1023">Datenlesevorgänge mit `FileGetObject` wird in der Regel mit geschrieben `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="90296-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="90296-1024">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1025">Wenn Sie weglassen `RecordNumber`, `FileGetObject` liest den Datensatz oder ein Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder verweist, zu dem letzten `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="90296-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1026">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1026">Random Mode</span></span>  
 <span data-ttu-id="90296-1027">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1028">Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGetObject` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="90296-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1029">Der Abstand zwischen dem Ende eines Datensatzes und den Anfang des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1030">Da die Menge der Leerstellen Daten genau ermittelt werden kann, ist es sinnvoll, die Datensatzlänge der Länge der zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="90296-1031">Wenn die Zielvariable eine Zeichenfolge, in der Standardeinstellung ist `FileGetObject` liest einen 2-Byte-Deskriptor mit der Zeichenfolgenlänge und liest dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="90296-1032">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1033">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge und in eine Datei beim Lesen der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="90296-1034">Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1035">Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1036">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1037">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="90296-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="90296-1038">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger:</span><span class="sxs-lookup"><span data-stu-id="90296-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="90296-1039">Die 218 Bytes werden wie folgt verteilt: 18 Bytes für den Deskriptor (2 + 8 \* 2) und 100 Bytes für die Daten (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="90296-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="90296-1040">`FileGetObject` liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="90296-1041">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePutObject`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="90296-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="90296-1042">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente, einschließlich aller Arrays und ihrer Deskriptoren erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="90296-1043">Die <xref:Microsoft.VisualBasic.VBFixedStringAttribute> Klasse angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1044">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1044">Binary Mode</span></span>  
 <span data-ttu-id="90296-1045">Für Dateien in geöffnet `Binary` aller-Modus die `Random` Regeln anwenden, mit den folgenden Ausnahmen:</span><span class="sxs-lookup"><span data-stu-id="90296-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="90296-1046">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1047">`FileGetObject` Liest alle Variablen vom Datenträger zusammenhängend, d. h. ohne Abstand zwischen den Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="90296-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1048">Für ein beliebiges Array als ein Array in einer Struktur `FileGetObject` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="90296-1049">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="90296-1050">`FileGetObject` liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1051">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-1052">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-1053">Eine Datei namens "Form1.vb" möglicherweise z. B. keine Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1054">Im folgenden Beispiel liest, einen Datensatz in einer Testdatei und ruft dann ab.</span><span class="sxs-lookup"><span data-stu-id="90296-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="90296-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1055">Required.</span>
          </span>
          <span data-ttu-id="90296-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="90296-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="90296-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="90296-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1062">Wenn die angegebene Datei geöffnet wann ist die `FileLen` Funktion aufgerufen wird, wird der zurückgegebene Wert stellt die Größe der Datei zu dem Zeitpunkt, der sie geöffnet wurde.</span><span class="sxs-lookup"><span data-stu-id="90296-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-1063">Um die aktuelle Länge einer geöffneten Datei abzurufen, verwenden die `LOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1064">Dieses Beispiel verwendet die `FileLen` Funktion, um die Länge einer Datei in Bytes zurück.</span><span class="sxs-lookup"><span data-stu-id="90296-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="90296-1065">Für dieses Beispiel wird davon ausgegangen, die `TestFile` ist eine Datei, die einige Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1067">Required.</span>
          </span>
          <span data-ttu-id="90296-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="90296-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="90296-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1070">Required.</span>
          </span>
          <span data-ttu-id="90296-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="90296-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1072">Required.</span>
          </span>
          <span data-ttu-id="90296-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="90296-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="90296-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1075">Optional.</span>
          </span>
          <span data-ttu-id="90296-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="90296-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="90296-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="90296-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1079">Optional.</span>
          </span>
          <span data-ttu-id="90296-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="90296-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="90296-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="90296-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1083">Optional.</span>
          </span>
          <span data-ttu-id="90296-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="90296-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="90296-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="90296-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="90296-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1090">Die `FileOpen` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-1091">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-1092">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-1093">Sie müssen eine Datei öffnen, bevor alle e/a-Vorgang darauf ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="90296-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="90296-1094">`FileOpen` reserviert einen Puffer für e/a auf die Datei, und bestimmt den Modus des Zugriffs für die Verwendung mit dem Puffer.</span><span class="sxs-lookup"><span data-stu-id="90296-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-1095">Beim Schreiben in eine Datei eine Anwendung möglicherweise eine Datei erstellen, wenn die Datei mit der er schreiben möchte nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="90296-1096">Zu diesem Zweck benötigt er die Berechtigung für das Verzeichnis, in dem die Datei erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="90296-1097">Jedoch, wenn die Datei durch angegeben `FileName` vorhanden ist, muss die Anwendung `Write` Berechtigungen nur für die Datei selbst.</span><span class="sxs-lookup"><span data-stu-id="90296-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="90296-1098">Immer, wenn möglich, zur Verbesserung der Sicherheit erstellen Sie die Datei während der Bereitstellung und gewähren Sie `Write` Berechtigungen für diese Datei nur, anstatt das gesamte Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="90296-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="90296-1099">Schreiben Sie Daten in Verzeichnissen nach Benutzer statt auf das Stammverzeichnis oder das Verzeichnis für Programmdateien, um Sicherheit zu verbessern.</span><span class="sxs-lookup"><span data-stu-id="90296-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="90296-1100">Der Kanal geöffnet verwendbaren mithilfe der `FreeFile()` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-1101">Die `FileOpen` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` -Enumeration, die sich möglicherweise auf ihre Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken.</span><span class="sxs-lookup"><span data-stu-id="90296-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="90296-1102">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1103">Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der der `FileOpen` Funktion, um ein- und Ausgabe in eine Datei zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="90296-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="90296-1104">Der folgende Code öffnet die Datei `TestFile` in `Input` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="90296-1105">In diesem Beispiel öffnet die Datei im `Binary` Modus ausschließlich für Schreibvorgänge.</span><span class="sxs-lookup"><span data-stu-id="90296-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="90296-1106">Das folgende Beispiel öffnet die Datei im `Random` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="90296-1107">Die Datei enthält die Datensätze mit der Struktur `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="90296-1108">Dieses Codebeispiel öffnet die Datei im `Output` Modus; jeder Prozess kann lesen oder Schreiben in die Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="90296-1109">Dieses Codebeispiel öffnet die Datei im `Binary` Modus zum Lesen; andere Prozesse die Datei können nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1115">Required.</span>
          </span>
          <span data-ttu-id="90296-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1117">Required.</span>
          </span>
          <span data-ttu-id="90296-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1119">Optional.</span>
          </span>
          <span data-ttu-id="90296-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1124">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1125">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1126">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1127">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1128">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1129">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1130">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1131">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1131">Random Mode</span></span>  
 <span data-ttu-id="90296-1132">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1133">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1134">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1135">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1136">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1137">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1138">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1139">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1140">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1141">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1142">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1143">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1144">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1145">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1146">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1147">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1148">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1149">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1150">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1151">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1152">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1153">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1154">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1155">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1156">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1157">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1158">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1159">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1159">Binary Mode</span></span>  
 <span data-ttu-id="90296-1160">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1161">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1162">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1163">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1164">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1165">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1166">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1167">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1168">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1169">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1170">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1171">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1174">Required.</span>
          </span>
          <span data-ttu-id="90296-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1176">Required.</span>
          </span>
          <span data-ttu-id="90296-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1178">Optional.</span>
          </span>
          <span data-ttu-id="90296-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1183">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1184">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1185">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1186">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1187">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1188">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1189">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1190">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1190">Random Mode</span></span>  
 <span data-ttu-id="90296-1191">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1192">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1193">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1194">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1195">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1196">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1197">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1198">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1199">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1200">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1201">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1202">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1203">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1204">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1205">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1206">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1207">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1208">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1209">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1210">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1211">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1212">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1213">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1214">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1215">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1216">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1217">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1218">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1218">Binary Mode</span></span>  
 <span data-ttu-id="90296-1219">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1220">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1221">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1222">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1223">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1224">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1225">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1226">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1227">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1228">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1229">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1230">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1233">Required.</span>
          </span>
          <span data-ttu-id="90296-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1235">Required.</span>
          </span>
          <span data-ttu-id="90296-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1237">Optional.</span>
          </span>
          <span data-ttu-id="90296-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1242">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1243">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1244">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1245">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1246">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1247">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1248">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1249">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1249">Random Mode</span></span>  
 <span data-ttu-id="90296-1250">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1251">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1252">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1253">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1254">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1255">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1256">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1257">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1258">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1259">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1260">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1261">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1262">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1263">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1264">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1265">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1266">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1267">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1268">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1269">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1270">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1271">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1272">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1273">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1274">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1275">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1276">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1277">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1277">Binary Mode</span></span>  
 <span data-ttu-id="90296-1278">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1279">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1280">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1281">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1282">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1283">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1284">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1285">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1286">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1287">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1288">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1289">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1292">Required.</span>
          </span>
          <span data-ttu-id="90296-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1294">Required.</span>
          </span>
          <span data-ttu-id="90296-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1296">Optional.</span>
          </span>
          <span data-ttu-id="90296-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1301">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1302">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1303">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1304">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1305">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1306">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1307">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1308">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1308">Random Mode</span></span>  
 <span data-ttu-id="90296-1309">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1310">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1311">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1312">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1313">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1314">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1315">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1316">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1317">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1318">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1319">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1320">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1321">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1322">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1323">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1324">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1325">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1326">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1327">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1328">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1329">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1330">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1331">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1332">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1333">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1334">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1335">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1336">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1336">Binary Mode</span></span>  
 <span data-ttu-id="90296-1337">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1338">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1339">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1340">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1341">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1342">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1343">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1344">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1345">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1346">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1347">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1348">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1351">Required.</span>
          </span>
          <span data-ttu-id="90296-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1353">Required.</span>
          </span>
          <span data-ttu-id="90296-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1355">Optional.</span>
          </span>
          <span data-ttu-id="90296-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1360">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1361">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1362">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1363">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1364">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1365">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1366">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1367">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1367">Random Mode</span></span>  
 <span data-ttu-id="90296-1368">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1369">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1370">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1371">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1372">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1373">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1374">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1375">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1376">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1377">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1378">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1379">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1380">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1381">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1382">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1383">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1384">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1385">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1386">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1387">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1388">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1389">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1390">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1391">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1392">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1393">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1394">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1395">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1395">Binary Mode</span></span>  
 <span data-ttu-id="90296-1396">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1397">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1398">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1399">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1400">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1401">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1402">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1403">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1404">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1405">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1406">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1407">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1410">Required.</span>
          </span>
          <span data-ttu-id="90296-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1412">Required.</span>
          </span>
          <span data-ttu-id="90296-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1414">Optional.</span>
          </span>
          <span data-ttu-id="90296-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1419">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1420">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1421">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1422">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1423">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1424">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1425">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1426">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1426">Random Mode</span></span>  
 <span data-ttu-id="90296-1427">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1428">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1429">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1430">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1431">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1432">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1433">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1434">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1435">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1436">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1437">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1438">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1439">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1440">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1441">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1442">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1443">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1444">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1445">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1446">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1447">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1448">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1449">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1450">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1451">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1452">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1453">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1454">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1454">Binary Mode</span></span>  
 <span data-ttu-id="90296-1455">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1456">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1457">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1458">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1459">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1460">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1461">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1462">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1463">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1464">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1465">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1466">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1469">Required.</span>
          </span>
          <span data-ttu-id="90296-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1471">Required.</span>
          </span>
          <span data-ttu-id="90296-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1473">Optional.</span>
          </span>
          <span data-ttu-id="90296-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1478">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1479">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1480">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1481">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1482">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1483">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1484">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1485">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1485">Random Mode</span></span>  
 <span data-ttu-id="90296-1486">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1487">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1488">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1489">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1490">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1491">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1492">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1493">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1494">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1495">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1496">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die`VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1497">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1498">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1499">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1500">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1501">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1502">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1503">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1504">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1505">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1506">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1507">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1508">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1509">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1510">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1511">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1512">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1513">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1513">Binary Mode</span></span>  
 <span data-ttu-id="90296-1514">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1515">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1516">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1517">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1518">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1519">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1520">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1521">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1522">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1523">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1524">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1525">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1528">Required.</span>
          </span>
          <span data-ttu-id="90296-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1530">Required.</span>
          </span>
          <span data-ttu-id="90296-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1532">Optional.</span>
          </span>
          <span data-ttu-id="90296-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1537">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1538">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1539">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1540">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1541">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1542">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1543">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1544">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1544">Random Mode</span></span>  
 <span data-ttu-id="90296-1545">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1546">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1547">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1548">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1549">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1550">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1551">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1552">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1553">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1554">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1555">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1556">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1557">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1558">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1559">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1560">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1561">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1562">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1563">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1564">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1565">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1566">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1567">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1568">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1569">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1570">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1571">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1572">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1572">Binary Mode</span></span>  
 <span data-ttu-id="90296-1573">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1574">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1575">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1576">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1577">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1578">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1579">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1580">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1581">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1582">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1583">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1584">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1587">Required.</span>
          </span>
          <span data-ttu-id="90296-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1589">Required.</span>
          </span>
          <span data-ttu-id="90296-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1591">Optional.</span>
          </span>
          <span data-ttu-id="90296-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1596">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1597">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1598">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1599">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1600">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1601">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1602">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1603">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1603">Random Mode</span></span>  
 <span data-ttu-id="90296-1604">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1605">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1606">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1607">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1608">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1609">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1610">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1611">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1612">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1613">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1614">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1615">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1616">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1617">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1618">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1619">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1620">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1621">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1622">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1623">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1624">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1625">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1626">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1627">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1628">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1629">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1630">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1631">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1631">Binary Mode</span></span>  
 <span data-ttu-id="90296-1632">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1633">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1634">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1635">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1636">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1637">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1638">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1639">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1640">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1641">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1642">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1643">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1646">Required.</span>
          </span>
          <span data-ttu-id="90296-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1648">Required.</span>
          </span>
          <span data-ttu-id="90296-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1650">Optional.</span>
          </span>
          <span data-ttu-id="90296-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1655">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1656">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1657">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1658">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1659">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1660">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1661">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1662">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1662">Random Mode</span></span>  
 <span data-ttu-id="90296-1663">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1664">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1665">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1666">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1667">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1668">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1669">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1670">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1671">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1672">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1673">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1674">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1675">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1676">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1677">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1678">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1679">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1680">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1681">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1682">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1683">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1684">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1685">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1686">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1687">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1688">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1689">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1690">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1690">Binary Mode</span></span>  
 <span data-ttu-id="90296-1691">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1692">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1693">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1694">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1695">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1696">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1697">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1698">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1699">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1700">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1701">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1702">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1705">Required.</span>
          </span>
          <span data-ttu-id="90296-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1707">Required.</span>
          </span>
          <span data-ttu-id="90296-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1709">Optional.</span>
          </span>
          <span data-ttu-id="90296-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1714">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1715">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1716">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1717">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1718">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1719">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1720">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1721">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1721">Random Mode</span></span>  
 <span data-ttu-id="90296-1722">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1723">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der`RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1724">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1725">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1726">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1727">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1728">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1729">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1730">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1731">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1732">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1733">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1734">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1735">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1736">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1737">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1738">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1739">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1740">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1741">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1742">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1743">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1744">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1745">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1746">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1747">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1748">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1749">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1749">Binary Mode</span></span>  
 <span data-ttu-id="90296-1750">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1751">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1752">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1753">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1754">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1755">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1756">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1757">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1758">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1759">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1760">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1761">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1764">Required.</span>
          </span>
          <span data-ttu-id="90296-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1766">Required.</span>
          </span>
          <span data-ttu-id="90296-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1768">Optional.</span>
          </span>
          <span data-ttu-id="90296-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1773">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1774">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1775">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1776">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1777">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1778">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1779">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1780">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1780">Random Mode</span></span>  
 <span data-ttu-id="90296-1781">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1782">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1783">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1784">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1785">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1786">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1787">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1788">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1789">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1790">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1791">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1792">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1793">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1794">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1795">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1796">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1797">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1798">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1799">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1800">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1801">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1802">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1803">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1804">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1805">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1806">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1807">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1808">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1808">Binary Mode</span></span>  
 <span data-ttu-id="90296-1809">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1810">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1811">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1812">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1813">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1814">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1815">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1816">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1817">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1818">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1819">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1820">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1823">Required.</span>
          </span>
          <span data-ttu-id="90296-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1825">Required.</span>
          </span>
          <span data-ttu-id="90296-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1827">Optional.</span>
          </span>
          <span data-ttu-id="90296-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="90296-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1829">Optional.</span>
          </span>
          <span data-ttu-id="90296-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="90296-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="90296-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1836">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1837">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1838">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1839">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1840">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1841">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1842">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1843">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1843">Random Mode</span></span>  
 <span data-ttu-id="90296-1844">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1845">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1846">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1847">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1848">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1849">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1850">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1851">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1852">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1853">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1854">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1855">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1856">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1857">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1858">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1859">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1860">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1861">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1862">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1863">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1864">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1865">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1866">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1867">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1868">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1869">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1870">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1871">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1871">Binary Mode</span></span>  
 <span data-ttu-id="90296-1872">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1873">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1874">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1875">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1876">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1877">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1878">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1879">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1880">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1881">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1882">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1883">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1886">Required.</span>
          </span>
          <span data-ttu-id="90296-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1888">Required.</span>
          </span>
          <span data-ttu-id="90296-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1890">Optional.</span>
          </span>
          <span data-ttu-id="90296-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="90296-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1892">Optional.</span>
          </span>
          <span data-ttu-id="90296-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="90296-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="90296-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1895">Optional.</span>
          </span>
          <span data-ttu-id="90296-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="90296-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="90296-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="90296-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1902">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1903">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="90296-1904">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1905">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="90296-1906">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1907">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1908">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1909">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1909">Random Mode</span></span>  
 <span data-ttu-id="90296-1910">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1911">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1912">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1913">Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1914">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="90296-1915">Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="90296-1916">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="90296-1917">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1918">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1919">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1920">Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1921">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1922">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1923">Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="90296-1924">Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="90296-1925">Visual Basic 2005 standardmäßig kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="90296-1926">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="90296-1927">Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="90296-1928">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1929">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="90296-1930">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1931">Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="90296-1932">Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="90296-1933">Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="90296-1934">`FilePut` Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="90296-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="90296-1935">Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="90296-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="90296-1936">String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="90296-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1937">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1937">Binary Mode</span></span>  
 <span data-ttu-id="90296-1938">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="90296-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="90296-1939">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="90296-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="90296-1940">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1941">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="90296-1942">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="90296-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="90296-1943">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="90296-1944">`FilePut` schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind.</span><span class="sxs-lookup"><span data-stu-id="90296-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="90296-1945">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="90296-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="90296-1946">Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:</span><span class="sxs-lookup"><span data-stu-id="90296-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="90296-1947">Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1948">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="90296-1949">Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1952">Required.</span>
          </span>
          <span data-ttu-id="90296-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1954">Required.</span>
          </span>
          <span data-ttu-id="90296-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="90296-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1956">Optional.</span>
          </span>
          <span data-ttu-id="90296-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="90296-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="90296-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-1961">Die `FilePutObject` Funktion dient anstelle von `FilePut` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs übergeben `Integer`, `Long`, `Short`usw.</span><span class="sxs-lookup"><span data-stu-id="90296-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="90296-1962">`FilePutObject` schreibt und liest Deskriptoren, die das Objekt zu beschreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="90296-1963">Wenn Sie beabsichtigen, schreiben die `Variant` Typ `FilePutObject` ist erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90296-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="90296-1964">Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, wird empfohlen, dass Sie immer verwenden `FilePutObject` und `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="90296-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="90296-1965">`FilePutObject` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-1966">Mit `FilePutObject` geschriebene Daten werden in der Regel mit `FileGetObject` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="90296-1967">Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="90296-1968">Wenn Sie weglassen `RecordNumber`, `FilePutObject` schreibt den nächsten Datensatz bzw. Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder den Datensatz bzw. das Byte verweist, zu dem letzten `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="90296-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="90296-1969">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="90296-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="90296-1970">`FilePutObject` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="90296-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="90296-1971">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePutObject`, was identisch mit `FileGetObject`, und Sie müssen auch sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="90296-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="90296-1972">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="90296-1972">Random Mode</span></span>  
 <span data-ttu-id="90296-1973">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="90296-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="90296-1974">Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePutObject` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="90296-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="90296-1975">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="90296-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="90296-1976">Da die Menge der Leerstellen Daten genau ermittelt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="90296-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="90296-1977">Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="90296-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="90296-1978">Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePutObject` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="90296-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="90296-1979">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePutObject` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="90296-1980">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="90296-1981">Ob die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePutObject` schreibt eine 2-Byte-Deskriptor identifizieren die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="90296-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="90296-1982">Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="90296-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="90296-1983">Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="90296-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="90296-1984">Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="90296-1985">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="90296-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="90296-1986">Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="90296-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="90296-1987">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="90296-1987">Binary Mode</span></span>  
 <span data-ttu-id="90296-1988">Für Dateien in geöffnet `Binary` Modus alle der `Random` -Modus-Regeln gelten, außer:</span><span class="sxs-lookup"><span data-stu-id="90296-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="90296-1989">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="90296-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="90296-1990">`FilePutObject` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.</span><span class="sxs-lookup"><span data-stu-id="90296-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-1991">Dieses Beispiel verwendet die `FilePutObject` Funktion, um eine Zeichenfolge in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1992">Required.</span>
          </span>
          <span data-ttu-id="90296-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="90296-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1994">Required.</span>
          </span>
          <span data-ttu-id="90296-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="90296-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="90296-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90296-1999">Dieses Beispiel verwendet die `FileWidth` Funktion, um die Ausgabezeilenbreite für eine Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="90296-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90296-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2003">Verwendung `FreeFile` eine Dateinummer angeben, die nicht bereits verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2004">Dieses Beispiel verwendet die `FreeFile` Funktion, um die nächste verfügbare Zahl zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="90296-2005">Für die Ausgabe innerhalb der Schleife werden fünf Dateien geöffnet, und einige Beispieldaten werden an jede geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="90296-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2007">Required.</span>
          </span>
          <span data-ttu-id="90296-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="90296-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="90296-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="90296-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2014">Verwenden, um zu bestimmen, welche Attribute festgelegt werden, die `And` Operator einen bitweisen Vergleich von den Rückgabewert von Durchführen der `GetAttr` -Funktion und den Wert des Attributs Einzeldatei werden sollen.</span><span class="sxs-lookup"><span data-stu-id="90296-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="90296-2015">Wenn das Ergebnis nicht 0 (null) ist, wird dieses Attribut für die benannte Datei festgelegt.</span><span class="sxs-lookup"><span data-stu-id="90296-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="90296-2016">Beispielsweise ist der Rückgabewert der folgenden `And` Ausdruck ist NULL, wenn die `Archive` -Attribut nicht festgelegt ist:</span><span class="sxs-lookup"><span data-stu-id="90296-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="90296-2017">Ein Wert ungleich NULL wird zurückgegeben, wenn die `Archive` -Attribut festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="90296-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2018">Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und das Verzeichnis oder die Ordner zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="90296-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2022">Required.</span>
          </span>
          <span data-ttu-id="90296-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2024">Required.</span>
          </span>
          <span data-ttu-id="90296-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2027">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2028">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2029">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2030">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2031">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2032">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2033">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2034">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2035">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2036">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2036">Data</span></span>|<span data-ttu-id="90296-2037">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2038">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2039">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2039">Empty</span></span>|  
|<span data-ttu-id="90296-2040">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2041">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2042">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2043">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2045">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2046">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2047">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2048">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2049">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2050">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2051">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2052">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2054">Required.</span>
          </span>
          <span data-ttu-id="90296-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2056">Required.</span>
          </span>
          <span data-ttu-id="90296-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2059">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2060">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2061">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2062">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2063">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2064">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2065">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2066">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2067">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2068">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2068">Data</span></span>|<span data-ttu-id="90296-2069">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2070">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2071">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2071">Empty</span></span>|  
|<span data-ttu-id="90296-2072">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2073">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2074">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2075">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2077">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2078">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2079">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2080">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2081">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2082">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2083">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2084">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2086">Required.</span>
          </span>
          <span data-ttu-id="90296-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2088">Required.</span>
          </span>
          <span data-ttu-id="90296-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2091">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2092">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2093">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2094">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2095">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2096">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2097">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2098">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2099">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2100">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2100">Data</span></span>|<span data-ttu-id="90296-2101">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2102">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2103">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2103">Empty</span></span>|  
|<span data-ttu-id="90296-2104">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2105">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2106">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2107">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2109">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2110">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2111">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2112">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2113">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2114">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2115">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2116">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2118">Required.</span>
          </span>
          <span data-ttu-id="90296-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2120">Required.</span>
          </span>
          <span data-ttu-id="90296-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2123">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2124">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2125">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2126">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2127">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2128">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2129">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2130">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2131">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2132">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2132">Data</span></span>|<span data-ttu-id="90296-2133">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2134">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2135">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2135">Empty</span></span>|  
|<span data-ttu-id="90296-2136">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2137">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2138">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2139">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2141">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2142">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2143">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2144">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2145">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2146">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2147">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2148">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2150">Required.</span>
          </span>
          <span data-ttu-id="90296-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2152">Required.</span>
          </span>
          <span data-ttu-id="90296-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2155">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2156">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2157">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2158">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2159">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2160">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2161">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2162">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2163">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2164">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2164">Data</span></span>|<span data-ttu-id="90296-2165">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2166">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2167">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2167">Empty</span></span>|  
|<span data-ttu-id="90296-2168">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2169">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2170">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2171">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2173">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2174">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2175">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2176">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2177">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2178">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2179">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2180">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2182">Required.</span>
          </span>
          <span data-ttu-id="90296-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2184">Required.</span>
          </span>
          <span data-ttu-id="90296-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2187">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2188">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2189">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2190">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2191">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2192">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2193">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2194">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2195">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2196">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2196">Data</span></span>|<span data-ttu-id="90296-2197">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2198">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2199">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2199">Empty</span></span>|  
|<span data-ttu-id="90296-2200">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2201">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2202">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2203">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2205">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2206">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2207">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2208">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2209">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2210">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2211">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2212">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2214">Required.</span>
          </span>
          <span data-ttu-id="90296-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2216">Required.</span>
          </span>
          <span data-ttu-id="90296-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2219">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2220">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2221">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2222">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2223">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2224">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2225">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2226">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2227">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2228">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2228">Data</span></span>|<span data-ttu-id="90296-2229">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2230">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2231">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2231">Empty</span></span>|  
|<span data-ttu-id="90296-2232">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2233">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2234">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2235">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2237">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2238">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2239">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2240">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2241">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2242">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2243">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2244">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2246">Required.</span>
          </span>
          <span data-ttu-id="90296-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2248">Required.</span>
          </span>
          <span data-ttu-id="90296-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2251">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2252">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2253">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2254">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2255">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2256">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2257">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2258">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2259">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2260">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2260">Data</span></span>|<span data-ttu-id="90296-2261">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2262">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2263">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2263">Empty</span></span>|  
|<span data-ttu-id="90296-2264">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2265">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2266">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2267">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2269">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2270">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2271">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2272">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2273">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2274">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2275">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2276">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2278">Required.</span>
          </span>
          <span data-ttu-id="90296-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2280">Required.</span>
          </span>
          <span data-ttu-id="90296-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2283">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2284">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2285">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2286">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2287">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2288">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2289">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2290">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2291">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2292">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2292">Data</span></span>|<span data-ttu-id="90296-2293">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2294">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2295">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2295">Empty</span></span>|  
|<span data-ttu-id="90296-2296">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2297">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2298">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2299">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2301">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2302">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2303">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2304">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2305">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2306">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2307">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2308">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2310">Required.</span>
          </span>
          <span data-ttu-id="90296-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2312">Required.</span>
          </span>
          <span data-ttu-id="90296-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2315">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2316">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2317">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2318">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2319">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2320">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2321">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2322">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2323">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2324">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2324">Data</span></span>|<span data-ttu-id="90296-2325">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2326">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2327">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2327">Empty</span></span>|  
|<span data-ttu-id="90296-2328">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2329">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2330">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2331">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2333">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2334">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2335">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2336">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2337">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2338">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2339">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2340">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2342">Required.</span>
          </span>
          <span data-ttu-id="90296-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2344">Required.</span>
          </span>
          <span data-ttu-id="90296-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2347">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2348">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2349">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2350">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2351">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2352">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2353">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2354">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2355">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2356">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2356">Data</span></span>|<span data-ttu-id="90296-2357">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2358">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2359">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2359">Empty</span></span>|  
|<span data-ttu-id="90296-2360">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2361">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2362">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2363">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2365">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2366">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2367">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2368">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2369">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2370">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2371">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2372">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2374">Required.</span>
          </span>
          <span data-ttu-id="90296-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="90296-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2376">Required.</span>
          </span>
          <span data-ttu-id="90296-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2379">Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2380">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2381">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2382">Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="90296-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="90296-2383">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2384">Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2385">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="90296-2386">Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="90296-2387">Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="90296-2388">Daten</span><span class="sxs-lookup"><span data-stu-id="90296-2388">Data</span></span>|<span data-ttu-id="90296-2389">Variablen zugewiesenen Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="90296-2390">Komma oder Leerzeile begrenzen</span><span class="sxs-lookup"><span data-stu-id="90296-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="90296-2391">Empty</span><span class="sxs-lookup"><span data-stu-id="90296-2391">Empty</span></span>|  
|<span data-ttu-id="90296-2392">#NULL #</span><span class="sxs-lookup"><span data-stu-id="90296-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="90296-2393">#TRUE # "oder" #FALSE #</span><span class="sxs-lookup"><span data-stu-id="90296-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="90296-2394">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="90296-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="90296-2395">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="90296-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="90296-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="90296-2397">`errornumber` (Variable ist ein Objekt, das als Fehler gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="90296-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="90296-2398">Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2399">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="90296-2400">Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2401">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2402">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2403">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="90296-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="90296-2404">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="90296-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2406">Required.</span>
          </span>
          <span data-ttu-id="90296-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="90296-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2408">Required.</span>
          </span>
          <span data-ttu-id="90296-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="90296-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="90296-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="90296-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2415">Die `InputString` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2416">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2417">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2418">Mit gelesenen Daten der `InputString` Funktion ist in der Regel in eine Datei geschrieben, mit `Print` oder `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="90296-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="90296-2419">Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="90296-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="90296-2420">Im Gegensatz zu den `Input` -Funktion, die `InputString` Funktion gibt alle Zeichen gelesen.</span><span class="sxs-lookup"><span data-stu-id="90296-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="90296-2421">Dies schließt Kommas, Wagenrückläufen, Zeilenvorschüben, Anführungszeichen und führende Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="90296-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="90296-2422">Dateien für geöffnet `Binary` zugreifen, beim Lesen der Datei mithilfe der `InputString` Funktion bis `EOF` gibt `True` wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="90296-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="90296-2423">Verwenden Sie die `LOF` und `Loc` anstelle von Funktionen `EOF` beim Lesen von Binärdateien mit `InputString`, oder verwenden Sie `FileGet` bei Verwendung der `EOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2424">Beim Lesen aus Dateien, nehmen Sie keine sicherheitsrelevanten Aspekten der Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="90296-2425">Eine Datei namens "Form1.vb" möglicherweise z. B. keine Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2426">Dieses Beispiel verwendet die `InputString` Funktion, um Zeichen zu einem Zeitpunkt aus einer Datei gelesen und zum Drucken der `Output` Fenster.</span><span class="sxs-lookup"><span data-stu-id="90296-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="90296-2427">In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere mit Beispieldaten Zeilen.</span><span class="sxs-lookup"><span data-stu-id="90296-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="90296-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2430">Required.</span>
          </span>
          <span data-ttu-id="90296-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="90296-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="90296-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="90296-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2436">`Kill` unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="90296-2437">**Sicherheitshinweis** zum Ausführen der `Kill` -Funktion erfordert `Read` und `PathDiscovery` des flags <xref:System.Security.Permissions.FileIOPermission> , die den Ausführungscode gewährt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="90296-2438">Weitere Informationen finden Sie unter <xref:System.Security.SecurityException> [Codezugriffsberechtigungen](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="90296-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2439">Dieses Beispiel verwendet die `Kill` Funktion, um eine Datei von einem Datenträger zu löschen.</span><span class="sxs-lookup"><span data-stu-id="90296-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="90296-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2443">Required.</span>
          </span>
          <span data-ttu-id="90296-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2447">Die `LineInput` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2448">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2449">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2450">Datenlesevorgänge mit `LineInput` in der Regel in eine Datei geschrieben wird, mithilfe von `Print`.</span><span class="sxs-lookup"><span data-stu-id="90296-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2451">Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="90296-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="90296-2452">Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="90296-2453">Die `LineInput` Funktion liest Zeichen aus einer Datei eine schrittweise, bis er erkennt, dass einen Wagenrücklauf (`Chr(13)`) oder Wagenrücklauf/Zeilenvorschub (`Chr(13) + Chr(10)`) Sequenz.</span><span class="sxs-lookup"><span data-stu-id="90296-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="90296-2454">Carriage Return/Line feed Sequenzen werden übersprungen und nicht auf die Zeichenfolge angefügt.</span><span class="sxs-lookup"><span data-stu-id="90296-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2455">Lesen aus einer Datei mithilfe der `LineInput` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2456">Dieses Beispiel verwendet die `LineInput` Funktion, um eine Zeile aus einer sequenziellen Datei gelesen und einer Variablen zuweisen.</span><span class="sxs-lookup"><span data-stu-id="90296-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="90296-2457">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die mehrere mit Beispieldaten Zeilen.</span><span class="sxs-lookup"><span data-stu-id="90296-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="90296-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2460">Required.</span>
          </span>
          <span data-ttu-id="90296-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2464">Die `Loc` Funktion ist nullbasiert; verwenden, um das erste Byte in einer Datei abrufen, wird 0 zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="90296-2465">Die `Loc` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2466">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2467">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2468">Nachfolgend wird den Rückgabewert für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="90296-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="90296-2469">Modus</span><span class="sxs-lookup"><span data-stu-id="90296-2469">Mode</span></span>|<span data-ttu-id="90296-2470">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="90296-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="90296-2471">Die Nummer des letzten Datensatzes lesen oder in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="90296-2472">Aktuelle Byteposition in der Datei, geteilt durch 128.</span><span class="sxs-lookup"><span data-stu-id="90296-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="90296-2473">Zurückgegebene Informationen werden jedoch von `Loc` für sequenzielle Dateien ist weder verwendet noch benötigt.</span><span class="sxs-lookup"><span data-stu-id="90296-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="90296-2474">Die Position des letzten Bytes gelesen bzw. geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="90296-2475">Dieses Beispiel verwendet die `Loc` Funktion, um die aktuelle Lese-/Schreibposition in einer geöffneten Datei zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="90296-2476">In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere mit Beispieldaten Zeilen.</span><span class="sxs-lookup"><span data-stu-id="90296-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2481">Required.</span>
          </span>
          <span data-ttu-id="90296-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2486">Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="90296-2487">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="90296-2488">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="90296-2489">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="90296-2490">Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="90296-2491">Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="90296-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2492">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="90296-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="90296-2493">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2495">Required.</span>
          </span>
          <span data-ttu-id="90296-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="90296-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2497">Optional.</span>
          </span>
          <span data-ttu-id="90296-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2502">Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="90296-2503">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="90296-2504">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="90296-2505">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="90296-2506">Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="90296-2507">Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="90296-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2508">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="90296-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="90296-2509">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2511">Required.</span>
          </span>
          <span data-ttu-id="90296-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="90296-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2513">Optional.</span>
          </span>
          <span data-ttu-id="90296-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="90296-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2515">Optional.</span>
          </span>
          <span data-ttu-id="90296-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2520">Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="90296-2521">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="90296-2522">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="90296-2523">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="90296-2524">Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="90296-2525">Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="90296-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2526">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="90296-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="90296-2527">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2529">Required.</span>
          </span>
          <span data-ttu-id="90296-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="90296-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2536">Verwenden der `FileLen` Funktion, um die Länge einer Datei zu erhalten, die nicht geöffnet ist.</span><span class="sxs-lookup"><span data-stu-id="90296-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2537">Dieses Beispiel verwendet die `LOF` -Funktion können Sie die Größe einer geöffneten Datei zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="90296-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="90296-2538">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die Beispieldaten enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="90296-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2540">Required.</span>
          </span>
          <span data-ttu-id="90296-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="90296-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="90296-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="90296-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="90296-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2547">Diese Funktion wird ein neues Verzeichnis erstellt.</span><span class="sxs-lookup"><span data-stu-id="90296-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2548">Dieses Beispiel verwendet die `MkDir` Funktion zum Erstellen eines Verzeichnisses.</span><span class="sxs-lookup"><span data-stu-id="90296-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="90296-2549">Wenn das Laufwerk nicht angegeben wird, wird das neue Verzeichnis auf das aktuelle Laufwerk erstellt.</span><span class="sxs-lookup"><span data-stu-id="90296-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="90296-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2553">Required.</span>
          </span>
          <span data-ttu-id="90296-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="90296-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2555">Optional.</span>
          </span>
          <span data-ttu-id="90296-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="90296-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="90296-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2560">Die `Print` und `PrintLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2561">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2562">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2563">`Print` Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings `PrintLine` umfasst einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="90296-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="90296-2564">Mit geschriebenen Daten `Print` in der Regel aus einer Datei lesen, mit `LineInput` oder `Input`.</span><span class="sxs-lookup"><span data-stu-id="90296-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="90296-2565">Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; für `Print`, nichts wird ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="90296-2566">Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden so ausgerichtet, Registerkarte Grenzen, sondern mischen Kommas und `TAB` kann zu inkonsistente Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="90296-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="90296-2567">Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="90296-2568">Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="90296-2569">Datumsdaten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat, die vom System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="90296-2570">Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="90296-2571">Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="90296-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="90296-2572">Jedoch wenn `Output` Listendaten ist `DBNull`, `Null` in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="90296-2573">Für `Error` Daten, die Ausgabe angezeigt wird, als `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="90296-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="90296-2574">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="90296-2575">Alle Daten, die in die Datei geschrieben wird, mit `Print` ist Dezimaltrennzeichen; d. h. die Daten ist richtig formatiert mit entsprechenden Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="90296-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="90296-2576">Wenn der Benutzer möchte Ausgabedaten für die Verwendung in mehreren Gebietsschemas `Write` verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="90296-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="90296-2577">Schreiben in eine Datei mithilfe der `Print` oder `PrintLine` Funktionen erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2578">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2579">Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2580">Required.</span>
          </span>
          <span data-ttu-id="90296-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="90296-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2582">Optional.</span>
          </span>
          <span data-ttu-id="90296-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="90296-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="90296-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2587">Die `Print` und `PrintLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2588">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2589">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2590">`Print` Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings`PrintLine` umfasst einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="90296-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="90296-2591">Mit geschriebenen Daten `Print` in der Regel aus einer Datei lesen, mit `LineInput` oder `Input`.</span><span class="sxs-lookup"><span data-stu-id="90296-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="90296-2592">Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; für `Print`, nichts wird ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="90296-2593">Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden so ausgerichtet, Registerkarte Grenzen, sondern mischen Kommas und `TAB` kann zu inkonsistente Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="90296-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="90296-2594">Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="90296-2595">Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="90296-2596">Datumsdaten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat vom System erkannt.</span><span class="sxs-lookup"><span data-stu-id="90296-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="90296-2597">Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="90296-2598">Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="90296-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="90296-2599">Jedoch wenn `Output` Listendaten ist `DBNull`, `Null` in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="90296-2600">Für `Error` Daten, die Ausgabe angezeigt wird, als `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="90296-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="90296-2601">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="90296-2602">Alle Daten, die in die Datei geschrieben wird, mit `Print` ist Dezimaltrennzeichen; d. h. die Daten ist richtig formatiert mit entsprechenden Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="90296-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="90296-2603">Wenn der Benutzer möchte Ausgabedaten für die Verwendung in mehreren Gebietsschemas `Write` verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="90296-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="90296-2604">Schreiben in eine Datei mithilfe der `Print` oder `PrintLine` Funktionen erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2605">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2606">Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen, um Daten in eine Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="90296-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2607">Required.</span>
          </span>
          <span data-ttu-id="90296-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="90296-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="90296-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2610">Required.</span>
          </span>
          <span data-ttu-id="90296-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="90296-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="90296-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="90296-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="90296-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2617">Die`Rename` Funktion benennt eine Datei und in ein anderes Verzeichnis verschoben, wenn es erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="90296-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="90296-2618">Die `Rename` Funktion kann eine Datei auf Laufwerken verschoben, aber es kann nur ein vorhandenes Verzeichnis umbenennen Wenn beide `NewPath` und `OldPath` auf dem gleichen Laufwerk befinden.</span><span class="sxs-lookup"><span data-stu-id="90296-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="90296-2619">`Rename` eine neue Datei oder ein Verzeichnis kann nicht erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="90296-2620">Mithilfe der `Rename` Funktion in einer geöffneten Datei erzeugt einen Fehler.</span><span class="sxs-lookup"><span data-stu-id="90296-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="90296-2621">Sie müssen eine geöffnete Datei schließen, bevor Sie es umbenennen.</span><span class="sxs-lookup"><span data-stu-id="90296-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="90296-2622">`Rename` Argumente können nicht mehrere Zeichen (\*) und Platzhalter für einzelne Zeichen (?) enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90296-2623">Bei Verwendung `Rename` um eine Datei aus einem ungeschützten Speicherort auf einem geschützten Speicherort zu kopieren, die Datei behält die weniger eingeschränkten Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="90296-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="90296-2624">Stellen Sie sicher, dass Sie nicht über ein mögliches Sicherheitsrisiko entstehen.</span><span class="sxs-lookup"><span data-stu-id="90296-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2625">Dieses Beispiel verwendet die `Rename` Funktion zum Umbenennen einer Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="90296-2626">Für den Rahmen dieses Beispiels wird davon ausgegangen Sie, dass die Verzeichnisse, die bereits vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="90296-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90296-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="90296-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2633">Die `Reset` -Funktion schließt alle aktive Dateien geöffnet, indem die `FileOpen` Funktion, und hat die gleiche Funktion wie `FileClose()` ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="90296-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2634">Dieses Beispiel verwendet die `Reset` Funktion, um alle geöffneten Dateien geschlossen und der Inhalt aller Dateipuffer auf dem Datenträger festgeschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="90296-2635">Beachten Sie die Verwendung der `Object` Variable `FileNumber` als eine Zeichenfolge und eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="90296-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="90296-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2636">Required.</span>
          </span>
          <span data-ttu-id="90296-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="90296-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="90296-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="90296-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="90296-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2643">Ein Fehler auftritt, wenn Sie versuchen, `RmDir` in einem Verzeichnis, das Dateien enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="90296-2644">Verwenden der `Kill` Funktion, um alle Dateien zu löschen, bevor Sie versuchen, ein Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="90296-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2645">Dieses Beispiel verwendet die `RmDir` Funktion, um ein vorhandenes Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="90296-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="90296-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="90296-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2652">Required.</span>
          </span>
          <span data-ttu-id="90296-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="90296-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2658">`Seek` Gibt einen Wert zwischen 1 und 2.147.483.647 (entspricht 2 ^ 31-1), inklusive.</span><span class="sxs-lookup"><span data-stu-id="90296-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="90296-2659">Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="90296-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="90296-2660">Modus</span><span class="sxs-lookup"><span data-stu-id="90296-2660">Mode</span></span>|<span data-ttu-id="90296-2661">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="90296-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="90296-2662">Nummer des nächsten Datensatzes gelesen bzw. geschrieben werden</span><span class="sxs-lookup"><span data-stu-id="90296-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="90296-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="90296-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="90296-2664">Die Byteposition mit der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="90296-2665">Das erste Byte in einer Datei befindet sich an Position 1, das zweite Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="90296-2666">Dieses Beispiel verwendet die `Seek` Funktion, um die aktuelle Dateiposition zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="90296-2667">Das Beispiel setzt voraus `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.</span><span class="sxs-lookup"><span data-stu-id="90296-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="90296-2668">Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.</span><span class="sxs-lookup"><span data-stu-id="90296-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="90296-2669">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt die Byteposition mit der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="90296-2670">Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="90296-2671">Dieses Beispiel verwendet die `Seek` Funktion, positionieren Sie die für den nächsten Lese- oder Schreibvorgang in einer Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="90296-2672">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` legt die Byteposition mit der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="90296-2673">Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2675">Required.</span>
          </span>
          <span data-ttu-id="90296-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="90296-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2677">Required.</span>
          </span>
          <span data-ttu-id="90296-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="90296-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="90296-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2682">`Seek` Gibt einen Wert zwischen 1 und 2.147.483.647 (entspricht 2 ^ 31-1), inklusive.</span><span class="sxs-lookup"><span data-stu-id="90296-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="90296-2683">Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="90296-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="90296-2684">Modus</span><span class="sxs-lookup"><span data-stu-id="90296-2684">Mode</span></span>|<span data-ttu-id="90296-2685">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="90296-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="90296-2686">Nummer des nächsten Datensatzes gelesen bzw. geschrieben werden</span><span class="sxs-lookup"><span data-stu-id="90296-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="90296-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="90296-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="90296-2688">Die Byteposition mit der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="90296-2689">Das erste Byte in einer Datei befindet sich an Position 1, das zweite Byte an Position 2 usw. ist.</span><span class="sxs-lookup"><span data-stu-id="90296-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="90296-2690">Dieses Beispiel verwendet die `Seek` Funktion, um die aktuelle Dateiposition zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="90296-2691">Das Beispiel setzt voraus `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.</span><span class="sxs-lookup"><span data-stu-id="90296-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="90296-2692">Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.</span><span class="sxs-lookup"><span data-stu-id="90296-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="90296-2693">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt die Byteposition mit der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="90296-2694">Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="90296-2695">Dieses Beispiel verwendet die `Seek` Funktion, positionieren Sie die für den nächsten Lese- oder Schreibvorgang in einer Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="90296-2696">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` legt die Byteposition mit der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="90296-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="90296-2697">Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="90296-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="90296-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2699">Required.</span>
          </span>
          <span data-ttu-id="90296-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="90296-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="90296-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2702">Required.</span>
          </span>
          <span data-ttu-id="90296-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="90296-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="90296-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2707">Ein Laufzeitfehler tritt auf, wenn Sie versuchen, die Attribute einer geöffneten Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="90296-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="90296-2708">Die `Attributes` Argument Enumerationswerte sind wie folgt:</span><span class="sxs-lookup"><span data-stu-id="90296-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="90296-2709">Wert</span><span class="sxs-lookup"><span data-stu-id="90296-2709">Value</span></span>|<span data-ttu-id="90296-2710">Konstante</span><span class="sxs-lookup"><span data-stu-id="90296-2710">Constant</span></span>|<span data-ttu-id="90296-2711">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="90296-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="90296-2712">Normal (Standard).</span><span class="sxs-lookup"><span data-stu-id="90296-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="90296-2713">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="90296-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="90296-2714">Ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="90296-2715">Systemdatei.</span><span class="sxs-lookup"><span data-stu-id="90296-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="90296-2716">Volumebezeichnung</span><span class="sxs-lookup"><span data-stu-id="90296-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="90296-2717">Verzeichnissen oder Ordnern.</span><span class="sxs-lookup"><span data-stu-id="90296-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="90296-2718">Datei wurde seit der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="90296-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="90296-2719">Datei weist einen anderen Namen an.</span><span class="sxs-lookup"><span data-stu-id="90296-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="90296-2720">Diese Enumerationen werden von der Visual Basic-Sprache angegeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="90296-2721">Die Namen können überall im Code anstelle der eigentlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2722">Dieses Beispiel verwendet die `SetAttr` Funktion, um Attribute für eine Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="90296-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90296-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="90296-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2724">Required.</span>
          </span>
          <span data-ttu-id="90296-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2728">Wenn `Count` ist kleiner als die Breite der Ausgabezeile, sofort der nächste drucken Position die Anzahl von Leerzeichen gedruckter folgt.</span><span class="sxs-lookup"><span data-stu-id="90296-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="90296-2729">Wenn`Count` ist größer als die Breite einer Ausgabezeile `SPC` wird die nächste drucken Position anhand der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="90296-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="90296-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="90296-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="90296-2731">Beispielsweise ist die aktuelle Position 24, die Breite der Ausgabe beträgt 80, und geben Sie `SPC(90)`, beginnt die nächste Ausgabe an Position 34 (aktuelle drucken Position + die restliche 90/80).</span><span class="sxs-lookup"><span data-stu-id="90296-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="90296-2732">Wenn unterscheiden sich die aktuelle Position und die Breite der Ausgabe ist kleiner als `Count` (oder `Count` `Mod` *Breite*), wird die `SPC` Funktion am Anfang der nächsten Zeile übersprungen und generiert Leerzeichen gleich `Count` – (*Breite* – *aktuelleAusgabeposition*).</span><span class="sxs-lookup"><span data-stu-id="90296-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2733">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="90296-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2734">Dieses Beispiel verwendet die `SPC` Funktion zum Positionieren der Ausgabe in eine Datei und die **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="90296-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90296-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2738">Wenn die aktuelle drucken Position in der aktuellen Zeile überschreitet `Column`, `TAB` springt zu der Spaltenwert gleich `Column` in der nächsten Ausgabezeile.</span><span class="sxs-lookup"><span data-stu-id="90296-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="90296-2739">Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Position in Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="90296-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="90296-2740">Wenn `Column` ist größer als die Breite einer Ausgabezeile `TAB` wird die nächste drucken Position anhand der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="90296-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="90296-2741">Mod Spaltenbreite</span><span class="sxs-lookup"><span data-stu-id="90296-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="90296-2742">Z. B. wenn *Breite* beträgt 80, und geben Sie `TAB(90)`, beginnt die nächste Ausgabe in Spalte 10 (der Rest von 90/80).</span><span class="sxs-lookup"><span data-stu-id="90296-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="90296-2743">Wenn `Column` ist kleiner als die aktuelle Position drucken, beginnt die Ausgabe in der nächsten Zeile an der berechneten.</span><span class="sxs-lookup"><span data-stu-id="90296-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="90296-2744">Wenn die berechnete Position größer als die aktuelle Position ist, Drucken beginnt die Ausgabe an den berechneten Position in der gleichen Zeile.</span><span class="sxs-lookup"><span data-stu-id="90296-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="90296-2745">Die am weitesten links stehende Position in einer Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="90296-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="90296-2746">Bei Verwendung der `Print` oder `PrintLine` Funktionen zum Drucken auf Dateien, die äußersten rechten Position ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="90296-2747">Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="90296-2748">Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90296-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2749">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2750">Dieses Beispiel verwendet die `TAB` Funktion zum Positionieren der Ausgabe in eine Datei und die **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="90296-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="90296-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2751">Optional.</span>
          </span>
          <span data-ttu-id="90296-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="90296-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90296-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2756">Wenn die aktuelle drucken Position in der aktuellen Zeile größer ist `Column`, `TAB` springt zu der Spaltenwert gleich `Column` in der nächsten Ausgabezeile.</span><span class="sxs-lookup"><span data-stu-id="90296-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="90296-2757">Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Position in Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="90296-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="90296-2758">Wenn `Column` ist größer als die Breite einer Ausgabezeile `TAB` wird die nächste drucken Position anhand der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="90296-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="90296-2759">Mod Spaltenbreite</span><span class="sxs-lookup"><span data-stu-id="90296-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="90296-2760">Z. B. wenn *Breite* beträgt 80, und geben Sie `TAB(90)`, beginnt die nächste Ausgabe in Spalte 10 (der Rest von 90/80).</span><span class="sxs-lookup"><span data-stu-id="90296-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="90296-2761">Wenn `Column` ist kleiner als die aktuelle Position drucken, beginnt die Ausgabe in der nächsten Zeile an der berechneten.</span><span class="sxs-lookup"><span data-stu-id="90296-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="90296-2762">Ist die berechnete Position größer als die aktuelle Position, Drucken beginnt die Ausgabe an den berechneten Position in der gleichen Zeile ein.</span><span class="sxs-lookup"><span data-stu-id="90296-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="90296-2763">Die am weitesten links stehende Position in einer Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="90296-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="90296-2764">Bei Verwendung der `Print` oder `PrintLine` Funktionen zum Drucken auf Dateien, die äußersten rechten Position ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="90296-2765">Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion.</span><span class="sxs-lookup"><span data-stu-id="90296-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="90296-2766">Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90296-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90296-2767">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben enthalten.</span><span class="sxs-lookup"><span data-stu-id="90296-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2768">Dieses Beispiel verwendet die `TAB` Funktion zum Positionieren der Ausgabe in eine Datei und die **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="90296-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90296-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2772">Required.</span>
          </span>
          <span data-ttu-id="90296-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2777">Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="90296-2778">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="90296-2779">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="90296-2780">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="90296-2781">Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="90296-2782">Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="90296-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2783">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="90296-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="90296-2784">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2786">Required.</span>
          </span>
          <span data-ttu-id="90296-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="90296-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2788">Optional.</span>
          </span>
          <span data-ttu-id="90296-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2793">Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="90296-2794">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="90296-2795">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="90296-2796">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="90296-2797">Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="90296-2798">Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="90296-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2799">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="90296-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="90296-2800">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2802">Required.</span>
          </span>
          <span data-ttu-id="90296-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="90296-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2804">Optional.</span>
          </span>
          <span data-ttu-id="90296-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="90296-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2806">Optional.</span>
          </span>
          <span data-ttu-id="90296-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="90296-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="90296-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2811">Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="90296-2812">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="90296-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="90296-2813">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="90296-2814">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="90296-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="90296-2815">Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="90296-2816">Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="90296-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2817">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="90296-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="90296-2818">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="90296-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2820">Required.</span>
          </span>
          <span data-ttu-id="90296-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="90296-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2822">Optional.</span>
          </span>
          <span data-ttu-id="90296-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="90296-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2826">Die `Write` und `WriteLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2827">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2828">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2829">Wenn Sie weglassen `Output`, eine leere Zeile in die Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="90296-2830">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="90296-2831">Im Gegensatz zu den `Print` -Funktion, die `Write` -Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen ein, wie sie in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="90296-2832">Sie müssen keinen explizite Trennzeichen in der Liste zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="90296-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="90296-2833">Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Date, Null, und `Error` Datenformate werden unterstützt.</span><span class="sxs-lookup"><span data-stu-id="90296-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="90296-2834">Die folgenden universellen Annahmen werden befolgt werden, damit die Daten immer lesen können, und unter Verwendung ordnungsgemäß interpretiert `Input`unabhängig vom Gebietsschema:</span><span class="sxs-lookup"><span data-stu-id="90296-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="90296-2835">Numerische Daten werden immer geschrieben mithilfe des Punkts als dezimales Trennzeichen.</span><span class="sxs-lookup"><span data-stu-id="90296-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="90296-2836">Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="90296-2837">Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="90296-2838">Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="90296-2839">Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="90296-2840">Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="90296-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="90296-2841">Beachten Sie jedoch bei null-Daten `#NULL#` geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="90296-2842">Für `Error` Daten, die Ausgabe angezeigt wird, als `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="90296-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="90296-2843">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="90296-2844">`WriteLine` Fügt ein neue Zeilenumbruchzeichen (d. h. eine Carriage Return/Line feed, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="90296-2845">Sie können die Anführungszeichen in einer Zeichenfolge einbetten, durch die Verwendung doppelter Anführungszeichen oder "".</span><span class="sxs-lookup"><span data-stu-id="90296-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="90296-2846">Ein auf ein Objekt angewendeter</span><span class="sxs-lookup"><span data-stu-id="90296-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="90296-2847">Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="90296-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="90296-2848">Schreiben in eine Datei mithilfe der `Write` oder `WriteLine` Funktionen erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2849">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2850">Dieses Beispiel verwendet die `Write` Funktion, um Rohdaten in eine sequenzielle Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="90296-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="90296-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2852">Required.</span>
          </span>
          <span data-ttu-id="90296-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="90296-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2854">Optional.</span>
          </span>
          <span data-ttu-id="90296-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90296-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="90296-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90296-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90296-2858">Die `Write` und `WriteLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="90296-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="90296-2859">Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="90296-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="90296-2860">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="90296-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="90296-2861">Wenn Sie weglassen `Output`, eine leere Zeile in die Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="90296-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="90296-2862">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="90296-2863">Im Gegensatz zu den `Print` -Funktion, die `Write` -Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen ein, wie sie in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="90296-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="90296-2864">Sie müssen keinen explizite Trennzeichen in der Liste zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="90296-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="90296-2865">Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Date, Null, und `Error` Datenformate werden unterstützt.</span><span class="sxs-lookup"><span data-stu-id="90296-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="90296-2866">Die folgenden universellen Annahmen werden befolgt werden, damit die Daten immer lesen können, und unter Verwendung ordnungsgemäß interpretiert `Input`unabhängig vom Gebietsschema:</span><span class="sxs-lookup"><span data-stu-id="90296-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="90296-2867">Numerische Daten werden immer geschrieben mithilfe des Punkts als dezimales Trennzeichen.</span><span class="sxs-lookup"><span data-stu-id="90296-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="90296-2868">Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="90296-2869">Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="90296-2870">Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="90296-2871">Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="90296-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="90296-2872">Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="90296-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="90296-2873">Beachten Sie jedoch bei null-Daten `#NULL#` geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="90296-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="90296-2874">Für `Error` Daten, die Ausgabe angezeigt wird, als `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="90296-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="90296-2875">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="90296-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="90296-2876">`WriteLine` Fügt ein neue Zeilenumbruchzeichen (d. h. eine Carriage Return/Line feed, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.</span><span class="sxs-lookup"><span data-stu-id="90296-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="90296-2877">Sie können die Anführungszeichen in einer Zeichenfolge einbetten, durch die Verwendung doppelter Anführungszeichen oder "".</span><span class="sxs-lookup"><span data-stu-id="90296-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="90296-2878">Ein auf ein Objekt angewendeter</span><span class="sxs-lookup"><span data-stu-id="90296-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="90296-2879">Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="90296-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="90296-2880">Schreiben in eine Datei mithilfe der `Write` oder `WriteLine` Funktionen erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="90296-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="90296-2881">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="90296-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90296-2882">Dieses Beispiel verwendet die `Write` Funktion, um Rohdaten in eine sequenzielle Datei schreiben.</span><span class="sxs-lookup"><span data-stu-id="90296-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29afb9500e8c7d4f0da115ef1bbf6b9349ebf296" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78728443" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FileSystem extends System.Object" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87310-101">Das <see langword="FileSystem" />-Modul enthält Prozeduren, mit denen Datei-, Verzeichnis- oder Ordner- und Systemoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="87310-102">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als bei Verwendung des <see langword="FileSystem" />-Moduls.</span><span class="sxs-lookup"><span data-stu-id="87310-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="87310-103">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-104">Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und-Lauf Zeit Bibliothekselemente, die auf Dateien und Ordner zugreifen.</span><span class="sxs-lookup"><span data-stu-id="87310-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-105">In diesem Beispiel wird die `GetAttr`-Funktion verwendet, um die Attribute einer Datei, eines Verzeichnisses oder eines Ordners zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="87310-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="87310-106">Verzeichnisse und Dateien: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="87310-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="87310-107">Eingabe und Ausgabe: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="87310-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="87310-108">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="87310-109">Visual Basic von Lauf Zeit Bibliotheks Membern</span><span class="sxs-lookup"><span data-stu-id="87310-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDir(string Path) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="87310-110">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-110">Required.</span></span> <span data-ttu-id="87310-111">Ein Zeichenfolgenausdruck, der das Verzeichnis oder den Ordner bezeichnet, das bzw. der zum neuen Verzeichnis oder Ordner wird.</span><span class="sxs-lookup"><span data-stu-id="87310-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="87310-112"><paramref name="Path" /> enthält möglicherweise das Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="87310-113">Wenn kein Laufwerk angegeben wird, ändert <see langword="ChDir" /> das Standardverzeichnis oder den Ordner in das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="87310-114">Ändert das aktuelle Verzeichnis oder den aktuellen Ordner.</span><span class="sxs-lookup"><span data-stu-id="87310-114">Changes the current directory or folder.</span></span> <span data-ttu-id="87310-115">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung als die <see langword="ChDir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="87310-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="87310-116">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="87310-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-117">Die `ChDir`-Funktion ändert das Standardverzeichnis, jedoch nicht das Standard Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="87310-118">Wenn das Standard Laufwerk z. b. C ist, wird die folgende Anweisung das Standardverzeichnis auf Laufwerk D ändern, aber C bleibt das Standard Laufwerk:</span><span class="sxs-lookup"><span data-stu-id="87310-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="87310-119">Sie können relative Verzeichnisänderungen vornehmen, indem Sie wie folgt zwei Zeiträume eingeben:</span><span class="sxs-lookup"><span data-stu-id="87310-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-120">Die `ChDir`-Funktion erfordert die Berechtigung "nicht verwalteter Code", die sich möglicherweise auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirkt.</span><span class="sxs-lookup"><span data-stu-id="87310-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="87310-121">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und.</span><span class="sxs-lookup"><span data-stu-id="87310-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-122">In diesem Beispiel wird die `ChDir`-Funktion verwendet, um das aktuelle Verzeichnis oder den Ordner zu ändern.</span><span class="sxs-lookup"><span data-stu-id="87310-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-123"><paramref name="Path" /> ist leer.</span><span class="sxs-lookup"><span data-stu-id="87310-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-124">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="87310-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="87310-125">Gewusst wie: Analysieren von Dateipfaden in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="87310-126">Erstellen, Löschen und Verschieben von Dateien und Verzeichnissen in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-127">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(char Drive) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="87310-128">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-128">Required.</span></span> <span data-ttu-id="87310-129">Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="87310-130">Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="87310-131">Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</span><span class="sxs-lookup"><span data-stu-id="87310-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="87310-132">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-133">Die `ChDrive`-Funktion erfordert die Berechtigung "nicht verwalteter Code", die sich möglicherweise auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirkt.</span><span class="sxs-lookup"><span data-stu-id="87310-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="87310-134">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="87310-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-135">In diesem Beispiel wird die `ChDrive`-Funktion verwendet, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="87310-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="87310-136">Die-Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="87310-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-137">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="87310-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-138">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(string Drive) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="87310-139">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-139">Required.</span></span> <span data-ttu-id="87310-140">Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="87310-141">Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="87310-142">Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</span><span class="sxs-lookup"><span data-stu-id="87310-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="87310-143">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-144">Die `ChDrive`-Funktion erfordert die Berechtigung "nicht verwalteter Code", die sich möglicherweise auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirkt.</span><span class="sxs-lookup"><span data-stu-id="87310-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="87310-145">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission>-und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="87310-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-146">In diesem Beispiel wird die `ChDrive`-Funktion verwendet, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="87310-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="87310-147">Die-Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="87310-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-148">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="87310-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-149">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-150">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-150">Returns a string representing the current path.</span></span> <span data-ttu-id="87310-151">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="87310-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="87310-152">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="87310-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87310-153">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-153">Returns a string representing the current path.</span></span> <span data-ttu-id="87310-154">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="87310-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="87310-155">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="87310-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="87310-156">Eine Zeichenfolge mit dem aktuellen Pfad.</span><span class="sxs-lookup"><span data-stu-id="87310-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87310-157">In diesem Beispiel wird die `CurDir`-Funktion verwendet, um den aktuellen Pfad zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir(char Drive) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="87310-158">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-158">Optional.</span></span> <span data-ttu-id="87310-159">Ein <see langword="Char" />-Ausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="87310-160">Wenn kein Laufwerk angegeben wird oder <paramref name="Drive" /> eine Zeichenfolgen der Länge 0 (null) ("") ist, gibt <see langword="CurDir" /> den Pfad für das aktuelle Laufwerk zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="87310-161">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-161">Returns a string representing the current path.</span></span> <span data-ttu-id="87310-162">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="87310-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="87310-163">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="87310-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="87310-164">Eine Zeichenfolge mit dem aktuellen Pfad.</span><span class="sxs-lookup"><span data-stu-id="87310-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87310-165">In diesem Beispiel wird die `CurDir`-Funktion verwendet, um den aktuellen Pfad zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-166">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="87310-167">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="87310-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="87310-168">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87310-169">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="87310-170">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="87310-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="87310-171">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="87310-172">Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-173">Die `Dir`-Funktion unterstützt die Verwendung von Platzhaltern mit mehreren Zeichen (`*`) und Einzelzeichen (`?`) zum Angeben mehrerer Dateien.</span><span class="sxs-lookup"><span data-stu-id="87310-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="87310-174">`VbVolume` gibt die Volumebezeichnung für das Laufwerk anstelle eines bestimmten Datei namens zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="87310-175">Sie müssen einen `PathName` angeben, wenn Sie die `Dir`-Funktion zum ersten Mal aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="87310-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="87310-176">Zum Abrufen des nächsten Elements können Sie nachfolgende Aufrufe an die `Dir` Funktion ohne Parameter vornehmen.</span><span class="sxs-lookup"><span data-stu-id="87310-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-177">Um ordnungsgemäß auszuführen, muss für die `Dir`-Funktion dem ausführenden Code das <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> Flags <xref:System.Security.Permissions.FileIOPermission> erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="87310-178">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="87310-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="87310-179">Die `Attributes` Argument-Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="87310-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="87310-180">value</span><span class="sxs-lookup"><span data-stu-id="87310-180">Value</span></span>|<span data-ttu-id="87310-181">Dauerhaft</span><span class="sxs-lookup"><span data-stu-id="87310-181">Constant</span></span>|<span data-ttu-id="87310-182">BESCHREIBUNG</span><span class="sxs-lookup"><span data-stu-id="87310-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="87310-183">Standard.</span><span class="sxs-lookup"><span data-stu-id="87310-183">Default.</span></span> <span data-ttu-id="87310-184">Gibt Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="87310-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="87310-185">Gibt schreibgeschützte Dateien und auch Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="87310-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="87310-186">Gibt ausgeblendete Dateien und auch Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="87310-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="87310-187">Gibt Systemdateien und auch Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="87310-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="87310-188">Gibt die Volumebezeichnung an. Wenn ein anderes Attribut angegeben wird, wird `vbVolume` ignoriert.</span><span class="sxs-lookup"><span data-stu-id="87310-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="87310-189">Gibt Verzeichnisse oder Ordner und auch Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="87310-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="87310-190">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="87310-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="87310-191">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="87310-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87310-192">Diese Enumerationen werden von der Visual Basic Sprache angegeben und können an beliebiger Stelle im Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-193">In diesem Beispiel wird die `Dir`-Funktion verwendet, um zu prüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87310-194">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-194">Optional.</span></span> <span data-ttu-id="87310-195">Ein Zeichenfolgenausdruck, der einen Dateinamen, ein Verzeichnis, einen Ordnernamen oder eine Volumebezeichnung des Laufwerks angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="87310-196">Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <paramref name="PathName" /> nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="87310-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="87310-197">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-197">Optional.</span></span> <span data-ttu-id="87310-198">Ein Zeichenfolgenausdruck, der einen Dateinamen, ein Verzeichnis, einen Ordnernamen oder eine Volumebezeichnung des Laufwerks angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="87310-199">Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <paramref name="Pathname" /> nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="87310-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="87310-200">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-200">Optional.</span></span> <span data-ttu-id="87310-201">Enumeration oder numerischer Ausdruck, dessen Wert Dateiattribute angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="87310-202">Wenn der Wert nicht angegeben wird, gibt <see langword="Dir" /> Dateien zurück, die mit <paramref name="Pathname" /> übereinstimmen, aber keine Attribute besitzen.</span><span class="sxs-lookup"><span data-stu-id="87310-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="87310-203">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="87310-204">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="87310-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="87310-205">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="87310-206">Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-207">Die `Dir`-Funktion unterstützt die Verwendung von Platzhaltern mit mehreren Zeichen (`*`) und Einzelzeichen (`?`) zum Angeben mehrerer Dateien.</span><span class="sxs-lookup"><span data-stu-id="87310-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
 <span data-ttu-id="87310-208">`VbVolume` gibt die Volumebezeichnung für das Laufwerk anstelle eines bestimmten Datei namens zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
 <span data-ttu-id="87310-209">Sie müssen einen `PathName` angeben, wenn Sie die `Dir`-Funktion zum ersten Mal aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="87310-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="87310-210">Zum Abrufen des nächsten Elements können Sie nachfolgende Aufrufe an die `Dir` Funktion ohne Parameter vornehmen.</span><span class="sxs-lookup"><span data-stu-id="87310-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
> [!IMPORTANT]
>  <span data-ttu-id="87310-211">Um ordnungsgemäß auszuführen, muss für die `Dir`-Funktion dem ausführenden Code das <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> Flags <xref:System.Security.Permissions.FileIOPermission> erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="87310-212">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="87310-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
 <span data-ttu-id="87310-213">Die `Attributes` Argument-Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="87310-213">The `Attributes` argument enumeration values are as follows:</span></span>  
|<span data-ttu-id="87310-214">value</span><span class="sxs-lookup"><span data-stu-id="87310-214">Value</span></span>|<span data-ttu-id="87310-215">Dauerhaft</span><span class="sxs-lookup"><span data-stu-id="87310-215">Constant</span></span>|<span data-ttu-id="87310-216">BESCHREIBUNG</span><span class="sxs-lookup"><span data-stu-id="87310-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="87310-217">Standard.</span><span class="sxs-lookup"><span data-stu-id="87310-217">Default.</span></span> <span data-ttu-id="87310-218">Gibt Dateien an, die über keine Attribute verfügen.</span><span class="sxs-lookup"><span data-stu-id="87310-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="87310-219">Gibt die schreibgeschützten Dateien an, zusätzlich zu Dateien, die über keine Attribute verfügen.</span><span class="sxs-lookup"><span data-stu-id="87310-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="87310-220">Gibt ausgeblendete Dateien an, zusätzlich zu Dateien, die über keine Attribute verfügen.</span><span class="sxs-lookup"><span data-stu-id="87310-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="87310-221">Gibt Systemdateien an, zusätzlich zu Dateien, die über keine Attribute verfügen.</span><span class="sxs-lookup"><span data-stu-id="87310-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="87310-222">Gibt die Volumebezeichnung an. Wenn ein anderes Attribut angegeben wird, wird `vbVolume` ignoriert.</span><span class="sxs-lookup"><span data-stu-id="87310-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="87310-223">Gibt Verzeichnisse oder Ordner an, zusätzlich zu Dateien, die über keine Attribute verfügen.</span><span class="sxs-lookup"><span data-stu-id="87310-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="87310-224">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="87310-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="87310-225">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="87310-225">File has a different name.</span></span>|  
> [!NOTE]
>  <span data-ttu-id="87310-226">Diese Enumerationen werden von der Visual Basic Sprache angegeben und können an beliebiger Stelle im Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
## Examples  
 <span data-ttu-id="87310-227">In diesem Beispiel wird die `Dir`-Funktion verwendet, um zu prüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-228">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-228">Required.</span></span> <span data-ttu-id="87310-229">Ein <see langword="Integer" /> mit einer beliebigen gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-230">Gibt den booleschen Wert <see langword="True" /> zurück, wenn das Ende einer für <see langword="Random" />- oder sequenziellen <see langword="Input" />-Zugriff geöffneten Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="87310-231">Ein boolescher Wert <see langword="True" />, wenn das Ende einer für <see langword="Random" /> oder sequenzielle <see langword="Input" /> geöffneten Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-232">Verwenden Sie `EOF`, um den Fehler zu vermeiden, der generiert wird, wenn Sie versuchen, Eingaben hinter das Ende einer Datei zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="87310-233">Die `EOF`-Funktion gibt `False` zurück, bis das Ende der Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="87310-234">Wenn Dateien für `Random` oder `Binary` Zugriff geöffnet sind, gibt `EOF` `False` zurück, bis die letzte ausgeführte `FileGet` Funktion einen ganzen Datensatz nicht lesen kann.</span><span class="sxs-lookup"><span data-stu-id="87310-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="87310-235">Wenn Dateien für `Binary` Zugriff geöffnet wurden, wird versucht, die Datei mit der `Input`-Funktion zu lesen, bis `EOF` zurückgibt, `True` einen Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="87310-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="87310-236">Verwenden Sie die Funktionen `LOF` und `Loc` anstelle von `EOF` beim Lesen von Binärdateien mit `Input`, oder verwenden Sie `Get`, wenn Sie die `EOF`-Funktion verwenden.</span><span class="sxs-lookup"><span data-stu-id="87310-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="87310-237">Wenn Dateien für `Output`geöffnet sind, gibt `EOF` immer `True`zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-238">In diesem Beispiel wird die `EOF`-Funktion verwendet, um das Ende einer Datei zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="87310-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="87310-239">In diesem Beispiel wird davon ausgegangen, dass `Testfile` eine Textdatei ist, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-240">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-241">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-241">Required.</span></span> <span data-ttu-id="87310-242">[https://login.microsoftonline.com/consumers/](<see langword="Integer" />).</span><span class="sxs-lookup"><span data-stu-id="87310-242"><see langword="Integer" />.</span></span> <span data-ttu-id="87310-243">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-244">Gibt eine Enumeration zurück, die den Dateimodus für Dateien darstellt, die mit der <see langword="FileOpen" />-Funktion geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-245">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="FileAttr" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="87310-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="87310-246">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="87310-247">Die folgenden Enumerationswerte geben den Dateizugriffsmodus an:</span><span class="sxs-lookup"><span data-stu-id="87310-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="87310-248">value</span><span class="sxs-lookup"><span data-stu-id="87310-248">Value</span></span> 
 </term><description> <span data-ttu-id="87310-249">Mode</span><span class="sxs-lookup"><span data-stu-id="87310-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="87310-250">1</span><span class="sxs-lookup"><span data-stu-id="87310-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="87310-251">2</span><span class="sxs-lookup"><span data-stu-id="87310-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="87310-252">4</span><span class="sxs-lookup"><span data-stu-id="87310-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="87310-253">8</span><span class="sxs-lookup"><span data-stu-id="87310-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="87310-254">32</span><span class="sxs-lookup"><span data-stu-id="87310-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-255">Diese Funktion gibt eine Enumeration zurück, die den Dateimodus für Dateien darstellt, die mit der `FileOpen`-Funktion geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-256">In diesem Beispiel wird die `FileAttr`-Funktion verwendet, um den Dateimodus einer geöffneten Datei zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-257">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="87310-258">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-258">Optional.</span></span> <span data-ttu-id="87310-259">Parameterarray von 0 oder mehr zu schließenden Channels.</span><span class="sxs-lookup"><span data-stu-id="87310-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="87310-260">Schließt die Eingabe/Ausgabe (E/A) für eine Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wird.</span><span class="sxs-lookup"><span data-stu-id="87310-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-261"><see langword="My" /> ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="87310-262">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-263">Die `FileClose` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-264">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-265">Weitere Informationen finden Sie unter Gewusst [wie: Lesen von Text aus Dateien mit einem StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), Gewusst [wie: Schreiben von Text in Dateien mit einem StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)und Exemplarische Vorgehensweise: Bearbeiten von [Dateien und Verzeichnissen in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="87310-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="87310-266">Wenn Sie `FileNumbers`weglassen, werden alle aktiven Dateien, die von der `FileOpen`-Funktion geöffnet werden, geschlossen.</span><span class="sxs-lookup"><span data-stu-id="87310-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="87310-267">Wenn Sie Dateien schließen, die für `Output` oder `Append`geöffnet wurden, wird der endgültige Ausgabepuffer in den Betriebssystem Puffer für diese Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="87310-268">Der gesamte Speicherplatz, der der geschlossenen Datei zugeordnet ist, wird freigegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="87310-269">Wenn die `FileClose`-Funktion ausgeführt wird, endet die Zuordnung einer Datei mit der zugehörigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-270">In diesem Beispiel wird die `FileClose`-Funktion verwendet, um eine für `Input`geöffnete Datei zu schließen.</span><span class="sxs-lookup"><span data-stu-id="87310-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-271"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="87310-272">End Statement</span><span class="sxs-lookup"><span data-stu-id="87310-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="87310-273">Stop-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-274">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="87310-275">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-275">Required.</span></span> <span data-ttu-id="87310-276">Ein Zeichenfolgenausdruck, der den Namen der zu kopierenden Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="87310-277"><paramref name="Source" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Quelldatei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="87310-278">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-278">Required.</span></span> <span data-ttu-id="87310-279">Ein Zeichenfolgenausdruck, der den Zieldateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="87310-280"><paramref name="Destination" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Zieldatei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="87310-281">Kopiert eine Datei</span><span class="sxs-lookup"><span data-stu-id="87310-281">Copies a file.</span></span> <span data-ttu-id="87310-282">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="87310-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="87310-283">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-284">Wenn Sie versuchen, die `FileCopy`-Funktion für eine aktuell geöffnete Datei zu verwenden, tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="87310-285">`FileCopy` erfordert volle Vertrauenswürdigkeit, um auf dem lokalen Laufwerk arbeiten zu können.</span><span class="sxs-lookup"><span data-stu-id="87310-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-286">In diesem Beispiel wird die `FileCopy`-Funktion verwendet, um eine Datei in eine andere zu kopieren.</span><span class="sxs-lookup"><span data-stu-id="87310-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="87310-287">Nehmen Sie für die Zwecke dieses Beispiels an, dass `SrcFile` eine Datei mit Daten ist.</span><span class="sxs-lookup"><span data-stu-id="87310-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-288"><paramref name="Source" /> oder <paramref name="Destination" /> ist ungültig oder nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-289">Datei ist bereits geöffnet.</span><span class="sxs-lookup"><span data-stu-id="87310-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-290">Die Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="87310-291">Gewusst wie: Erstellen einer Kopie einer Datei in einem anderen Verzeichnis in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="87310-292">Gewusst wie: Erstellen einer Kopie einer Datei im gleichen Ordner in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="87310-293">Gewusst wie: Kopieren eines Verzeichnisses in ein anderes Verzeichnis in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87310-294">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-294">Required.</span></span> <span data-ttu-id="87310-295">Ein Zeichenfolgenausdruck, der einen Dateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="87310-296"><paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="87310-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87310-297">Gibt einen <see langword="Date" />-Wert zurück, der Datum und Uhrzeit des Schreibvorgangs in einer Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="87310-298">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="87310-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="87310-299">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="87310-300">Ein <see langword="Date" />-Wert, der Datum und Uhrzeit der Erstellung oder letzten Änderung der Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87310-301">In diesem Beispiel wird die `FileDateTime`-Funktion verwendet, um das Datum und die Uhrzeit der Erstellung oder letzten Änderung einer Datei zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="87310-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="87310-302">Das Format des angezeigten Datums und der Uhrzeit basiert auf den Gebiets Schema Einstellungen des Systems.</span><span class="sxs-lookup"><span data-stu-id="87310-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-303"><paramref name="PathName" /> ist ungültig oder enthält Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="87310-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-304">Zieldatei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-305">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-306">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-307">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-308">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-309">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-309">Required.</span></span> <span data-ttu-id="87310-310">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-311">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-311">Required.</span></span> <span data-ttu-id="87310-312">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-313">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-313">Optional.</span></span> <span data-ttu-id="87310-314">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-315">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-316">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-317">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-318">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-319">Mit `FileGet` gelesene Daten werden in der Regel in eine Datei mit `FilePut`geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-320">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-321">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-322">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-323">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-324">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-324">Random Mode</span></span>  
 <span data-ttu-id="87310-325">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-326">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-327">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-328">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-329">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-330">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-331">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-332">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-333">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-334">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-335">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-336">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-337">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-338">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-339">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-340">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-341">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-342">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-343">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-344">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-345">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-346">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-347">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-348">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-349">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-350">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-351">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-352">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-352">Binary Mode</span></span>  
 <span data-ttu-id="87310-353">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-354">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-355">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-356">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-357">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-358">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-359">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-360">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-361">Zum Lesen aus einer Datei mit der`FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-362"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-363">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-364">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-365">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-366">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-366">Required.</span></span> <span data-ttu-id="87310-367">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-368">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-368">Required.</span></span> <span data-ttu-id="87310-369">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-370">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-370">Optional.</span></span> <span data-ttu-id="87310-371">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-372">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-373">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-374">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-375">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-376">Mit `FileGet` gelesene Daten werden in der Regel in eine Datei mit `FilePut`geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-377">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-378">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-379">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-380">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-381">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-381">Random Mode</span></span>  
 <span data-ttu-id="87310-382">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-383">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-384">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-385">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-386">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-387">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-388">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-389">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-390">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-391">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-392">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-393">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-394">, Wenn der Deskriptor nicht verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="87310-394">If the descriptor is not used.</span></span> <span data-ttu-id="87310-395">Die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, bestimmen, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-396">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-397">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-398">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-399">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-400">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-401">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-402">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-403">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-404">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-405">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-406">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-407">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-408">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-409">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-410">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-410">Binary Mode</span></span>  
 <span data-ttu-id="87310-411">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-412">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-413">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-414">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-415">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-416">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-417">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-418">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-419">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-420"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-421">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-422">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-423">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-424">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-424">Required.</span></span> <span data-ttu-id="87310-425">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-426">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-426">Required.</span></span> <span data-ttu-id="87310-427">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-428">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-428">Optional.</span></span> <span data-ttu-id="87310-429">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-430">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-431">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-432">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-433">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-434">Mit `FileGet` gelesene Daten werden in der Regel in eine Datei mit `FilePut`geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-435">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-436">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-437">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-438">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-439">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-439">Random Mode</span></span>  
 <span data-ttu-id="87310-440">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-441">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-442">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-443">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-444">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-445">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-446">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-447">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-448">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-449">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-450">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-451">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-452">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-453">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-454">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-455">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-456">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-457">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-458">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-459">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-460">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-461">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-462">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-463">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-464">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-465">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-466">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-467">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-467">Binary Mode</span></span>  
 <span data-ttu-id="87310-468">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-469">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-470">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-471">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-472">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-473">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-474">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-475">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-476">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-477"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-478">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-479">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-480">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-481">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-481">Required.</span></span> <span data-ttu-id="87310-482">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-483">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-483">Required.</span></span> <span data-ttu-id="87310-484">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-485">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-485">Optional.</span></span> <span data-ttu-id="87310-486">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-487">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-488">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-489">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-490">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-491">Mit `FileGet` gelesene Daten werden in der Regel in eine Datei mit `FilePut`geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-492">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-493">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-494">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-495">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-496">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-496">Random Mode</span></span>  
 <span data-ttu-id="87310-497">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-498">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest`FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-499">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-500">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-501">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-502">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-503">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-504">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-505">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-506">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-507">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-508">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-509">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-510">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-511">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-512">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-513">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-514">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-515">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-516">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-517">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-518">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-519">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-520">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-521">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-522">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-523">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-524">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-524">Binary Mode</span></span>  
 <span data-ttu-id="87310-525">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-526">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-527">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-528">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-529">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-530">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-531">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-532">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-533">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-534"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-535">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-536">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-537">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-538">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-538">Required.</span></span> <span data-ttu-id="87310-539">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-540">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-540">Required.</span></span> <span data-ttu-id="87310-541">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-542">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-542">Optional.</span></span> <span data-ttu-id="87310-543">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-544">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-545">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-546">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-547">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-548">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-549">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-550">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-551">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-552">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-553">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-553">Random Mode</span></span>  
 <span data-ttu-id="87310-554">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-555">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-556">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-557">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-558">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-559">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-560">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-561">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-562">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-563">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-564">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-565">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-566">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-567">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-568">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-569">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-570">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-571">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-572">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-573">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-574">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-575">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-576">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-577">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-578">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-579">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-580">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-581">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-581">Binary Mode</span></span>  
 <span data-ttu-id="87310-582">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-583">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-584">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-585">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-586">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-587">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-588">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-589">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-590">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-591"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-592">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-593">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-594">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-595">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-595">Required.</span></span> <span data-ttu-id="87310-596">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-597">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-597">Required.</span></span> <span data-ttu-id="87310-598">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-599">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-599">Optional.</span></span> <span data-ttu-id="87310-600">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-601">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-602">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-603">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-604">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-605">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-606">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-607">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-608">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-609">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-610">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-610">Random Mode</span></span>  
 <span data-ttu-id="87310-611">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-612">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-613">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-614">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-615">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-616">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-617">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-618">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-619">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-620">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-621">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-622">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-623">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-624">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-625">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-626">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-627">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-628">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-629">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-630">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-631">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-632">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-633">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-634">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-635">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-636">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-637">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-638">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-638">Binary Mode</span></span>  
 <span data-ttu-id="87310-639">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-640">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-641">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-642">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-643">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-644">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-645">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-646">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-647">Zum Lesen aus einer Datei mit der`FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-648"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-649">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-650">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-651">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-652">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-652">Required.</span></span> <span data-ttu-id="87310-653">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-654">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-654">Required.</span></span> <span data-ttu-id="87310-655">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-656">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-656">Optional.</span></span> <span data-ttu-id="87310-657">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-658">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-659">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-660">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-661">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-662">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-663">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-664">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-665">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-666">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-667">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-667">Random Mode</span></span>  
 <span data-ttu-id="87310-668">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-669">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-670">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-671">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-672">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-673">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-674">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-675">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-676">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-677">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-678">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-679">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-680">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-681">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-682">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-683">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-684">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-685">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-686">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-687">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-688">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-689">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-690">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-691">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-692">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-693">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-694">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-695">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-695">Binary Mode</span></span>  
 <span data-ttu-id="87310-696">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-697">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-698">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-699">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-700">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-701">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-702">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-703">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-704">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-705"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-706">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-707">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-708">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-709">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-709">Required.</span></span> <span data-ttu-id="87310-710">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-711">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-711">Required.</span></span> <span data-ttu-id="87310-712">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-713">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-713">Optional.</span></span> <span data-ttu-id="87310-714">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-715">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-716">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-717">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-718">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-719">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-720">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-721">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-722">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-723">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-724">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-724">Random Mode</span></span>  
 <span data-ttu-id="87310-725">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-726">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-727">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-728">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-729">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-730">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-731">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-732">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-733">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-734">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-735">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-736">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-737">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-738">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-739">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-740">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-741">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-742">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-743">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-744">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-745">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-746">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-747">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-748">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-749">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-750">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-751">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-752">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-752">Binary Mode</span></span>  
 <span data-ttu-id="87310-753">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-754">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-755">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-756">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-757">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-758">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-759">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-760">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-761">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-762"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-763">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-764">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-765">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-766">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-766">Required.</span></span> <span data-ttu-id="87310-767">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-768">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-768">Required.</span></span> <span data-ttu-id="87310-769">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-770">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-770">Optional.</span></span> <span data-ttu-id="87310-771">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-772">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-773">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-774">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-775">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-776">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-777">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-778">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-779">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-780">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-781">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-781">Random Mode</span></span>  
 <span data-ttu-id="87310-782">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-783">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-784">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-785">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-786">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-787">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-788">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-789">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-790">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-791">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-792">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-793">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-794">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-795">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-796">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-797">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-798">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-799">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-800">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-801">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-802">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-803">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-804">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-805">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-806">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-807">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-808">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-809">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-809">Binary Mode</span></span>  
 <span data-ttu-id="87310-810">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-811">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-812">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-813">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-814">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-815">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-816">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-817">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-818">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-819"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-820">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-821">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-822">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-823">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-823">Required.</span></span> <span data-ttu-id="87310-824">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-825">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-825">Required.</span></span> <span data-ttu-id="87310-826">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-827">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-827">Optional.</span></span> <span data-ttu-id="87310-828">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-829">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-830">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-831">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-832">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-833">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-834">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-835">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-836">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-837">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-838">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-838">Random Mode</span></span>  
 <span data-ttu-id="87310-839">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-840">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-841">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-842">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-843">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-844">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-845">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-846">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-847">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-848">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-849">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-850">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-851">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-852">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-853">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-854">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-855">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-856">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-857">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-858">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-859">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-860">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-861">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-862">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-863">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-864">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-865">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-866">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-866">Binary Mode</span></span>  
 <span data-ttu-id="87310-867">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-868">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-869">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-870">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-871">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-872">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-873">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-874">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-875">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-876"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-877">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-878">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-879">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-880">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-880">Required.</span></span> <span data-ttu-id="87310-881">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-882">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-882">Required.</span></span> <span data-ttu-id="87310-883">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-884">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-884">Optional.</span></span> <span data-ttu-id="87310-885">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-886">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-887">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-888">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-889">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-890">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-891">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-892">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-893">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-894">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-895">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-895">Random Mode</span></span>  
 <span data-ttu-id="87310-896">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-897">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-898">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-899">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-900">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-901">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-902">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-903">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-904">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-905">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-906">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-907">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-908">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-909">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-910">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-911">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-912">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-913">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-914">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-915">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-916">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-917">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-918">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-919">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-920">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-921">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-922">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-923">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-923">Binary Mode</span></span>  
 <span data-ttu-id="87310-924">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-925">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-926">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-927">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-928">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-929">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-930">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-931">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-932">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-933"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-934">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-935">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-936">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-937">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-937">Required.</span></span> <span data-ttu-id="87310-938">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-939">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-939">Required.</span></span> <span data-ttu-id="87310-940">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-941">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-941">Optional.</span></span> <span data-ttu-id="87310-942">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87310-943">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-943">Optional.</span></span> <span data-ttu-id="87310-944">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-944">Applies only when writing a string.</span></span> <span data-ttu-id="87310-945">Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="87310-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="87310-946">Der Standardwert lautet <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="87310-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87310-947">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-948">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-949">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-950">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-951">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-952">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-953">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-954">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-955">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-956">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-956">Random Mode</span></span>  
 <span data-ttu-id="87310-957">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-958">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-959">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-960">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-961">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-962">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-963">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-964">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-965">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-966">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-967">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-968">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-969">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-970">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-971">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-972">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-973">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-974">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-975">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-976">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-977">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-978">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-979">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-980">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-981">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-982">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-983">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-984">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-984">Binary Mode</span></span>  
 <span data-ttu-id="87310-985">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-986">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-987">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-988">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-989">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-990">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-991">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-992">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-993">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-994"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-995">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-996">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-997">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-998">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-998">Required.</span></span> <span data-ttu-id="87310-999">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1000">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1000">Required.</span></span> <span data-ttu-id="87310-1001">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1002">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1002">Optional.</span></span> <span data-ttu-id="87310-1003">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="87310-1004">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1004">Optional.</span></span> <span data-ttu-id="87310-1005">Betrifft nur das Schreiben eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="87310-1005">Applies only when writing an array.</span></span> <span data-ttu-id="87310-1006">Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor erforderlich ist, der die Größe und die Begrenzungen des Arrays beschreibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87310-1007">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1007">Optional.</span></span> <span data-ttu-id="87310-1008">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1008">Applies only when writing a string.</span></span> <span data-ttu-id="87310-1009">Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="87310-1010">Der Standardwert lautet <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87310-1011">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87310-1012">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87310-1013">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1014">`FileGet` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1015">Mit `FileGet` gelesene Daten werden in der Regel mithilfe `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87310-1016">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1017">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte, der auf den letzten `FileGet` oder die `FilePut` Funktion folgt (bzw. auf die letzte `Seek` Funktion verwiesen), gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-1018">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-1019">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1020">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1020">Random Mode</span></span>  
 <span data-ttu-id="87310-1021">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1022">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGet` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1023">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1024">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-1025">Wenn die Variable, die in gelesen wird, eine Zeichenfolge ist, liest `FileGet` standardmäßig einen zwei-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-1026">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1027">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Einfügen in eine Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-1028">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1029">Wenn die zu lesende Variable ein Array ist, können Sie auswählen, ob ein Deskriptor für die Größe und Dimension des Arrays gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87310-1030">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1031">Beim Lesen des Arrays müssen Sie der Art und Weise entsprechen, wie das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87310-1032">Wenn Sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87310-1033">Wenn der Deskriptor nicht verwendet wird, bestimmen die Größe und die Begrenzungen des Arrays, das an `FileGet` übermittelt wird, was gelesen werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87310-1034">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1035">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1036">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1037">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87310-1038">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="87310-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87310-1039">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87310-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87310-1040">200 Bytes für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-1041">Wenn die Variable, die in gelesen wird, ein beliebiger anderer Typ von Variable ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), liest `FileGet` nur die Variablen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87310-1042">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der gelesenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-1043">`FileGet` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-1044">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePut`) ein Deskriptor vorangestellt, dessen Länge 2 plus dem 8-fachen der Anzahl von Dimensionen entspricht: (2 + 8 \* anzahlungsdimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1045">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87310-1046">Dies schließt beliebige Arrays und deren Deskriptoren ein.</span><span class="sxs-lookup"><span data-stu-id="87310-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87310-1047">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe einer Zeichenfolge anzugeben, wenn Sie auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1048">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1048">Binary Mode</span></span>  
 <span data-ttu-id="87310-1049">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1050">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1051">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1052">`FileGet` liest alle Variablen von einem Datenträger zusammenhängend. Das heißt, ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1053">Bei einem anderen Array als einem Array in einer Struktur liest `FileGet` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87310-1054">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87310-1055">`FileGet` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1056">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87310-1057">Zum Lesen aus einer Datei mit der `FileGet`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1058"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1059">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-1060">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1061">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1062">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1062">Required.</span></span> <span data-ttu-id="87310-1063">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1064">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1064">Required.</span></span> <span data-ttu-id="87310-1065">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1066">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1066">Optional.</span></span> <span data-ttu-id="87310-1067">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87310-1068">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="87310-1069">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="87310-1070">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1071">Die `FileGetObject`-Funktion wird anstelle von `FileGet` verwendet, um Mehrdeutigkeiten zur Kompilierzeit zu vermeiden, wenn Type `Object` anstelle eines anderen Typs zurückgegeben wird, z. b. `Integer`, `Long`, `Short`usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="87310-1072">Wenn Sie beabsichtigen, den `Variant`-Typ zu schreiben, ist `FileGetObject` erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="87310-1073">Wenn Sie im Zweifelsfall ein Objekt für den zweiten Parameter verwenden, wird immer die Verwendung von `FilePutObject` und `FileGetObject`empfohlen.</span><span class="sxs-lookup"><span data-stu-id="87310-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="87310-1074">`FileGetObject` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1075">Mit `FileGetObject` gelesene Daten werden in der Regel mit `FilePutObject`geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="87310-1076">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1077">Wenn Sie `RecordNumber`weglassen, liest `FileGetObject` den Datensatz oder das Byte nach der letzten `FileGetObject` oder `FilePutObject` Funktion (bzw. auf die letzte `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="87310-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1078">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1078">Random Mode</span></span>  
 <span data-ttu-id="87310-1079">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1080">Wenn die Länge der gelesenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, liest `FileGetObject` nachfolgende Datensätze über Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1081">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1082">Da die Menge der Auffüll Daten nicht genau bestimmt werden kann, empfiehlt es sich, die Daten Satz Länge mit der Länge der gelesenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87310-1083">Wenn die Variable, die gelesen wird, eine Zeichenfolge ist, liest `FileGetObject` standardmäßig einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und liest dann die Daten, die in die Variable fließen.</span><span class="sxs-lookup"><span data-stu-id="87310-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87310-1084">Daher muss die von der `RecordLength`-Klausel der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1085">In Visual Basic 6,0 und früheren Versionen werden Zeichen folgen mit fester Länge unterstützt. beim Lesen einer Datei wird der Längen Deskriptor nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87310-1086">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1087">Wenn die zu lesende Variable ein Array ist, muss die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1088">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1089">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: 2 + 8 \* nummeritätsdimensionen.</span><span class="sxs-lookup"><span data-stu-id="87310-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="87310-1090">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird:</span><span class="sxs-lookup"><span data-stu-id="87310-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="87310-1091">Die 218 Bytes werden wie folgt verteilt: 18 Bytes für den Deskriptor (2 + 8 \* 2) und 100 Byte für die Daten (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87310-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87310-1092">`FileGetObject` liest Elemente von Strukturen so, als ob jede einzeln gelesen würde, mit dem Unterschied, dass es keine Auffüll Zeichen zwischen Elementen gibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87310-1093">Auf einem Datenträger wird einem dynamischen Array in einem benutzerdefinierten Typ (geschrieben mit `FilePutObject`) ein Deskriptor vorangestellt, dessen Länge 2 plus 8 mal der Anzahl der Dimensionen entspricht: 2 + 8 \* anzahlungsdimensionen.</span><span class="sxs-lookup"><span data-stu-id="87310-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="87310-1094">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Lesen der einzelnen Elemente erforderlich sind, einschließlich der Arrays und ihrer Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="87310-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="87310-1095">Die <xref:Microsoft.VisualBasic.VBFixedStringAttribute>-Klasse kann auf Zeichen folgen Felder in den-Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1096">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1096">Binary Mode</span></span>  
 <span data-ttu-id="87310-1097">Für Dateien, die im `Binary` Modus geöffnet wurden, gelten alle `Random` Regeln mit folgenden Ausnahmen:</span><span class="sxs-lookup"><span data-stu-id="87310-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="87310-1098">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1099">`FileGetObject` liest alle Variablen von einem Datenträger zusammenhängend, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1100">Bei einem anderen Array als einem Array in einer Struktur liest `FileGetObject` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="87310-1101">Es wurde kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="87310-1102">`FileGetObject` liest Zeichen folgen variabler Länge, bei denen es sich nicht um Elemente von Strukturen handelt, ohne den zwei Byte langen Längen Deskriptor zu erwarten.</span><span class="sxs-lookup"><span data-stu-id="87310-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1103">Die Anzahl der gelesenen Bytes ist mit der Anzahl von Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-1104">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-1105">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1106">Im folgenden Beispiel wird ein Datensatz in eine Testdatei gelesen und dann abgerufen.</span><span class="sxs-lookup"><span data-stu-id="87310-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-1107">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1108">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FileLen(string PathName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87310-1109">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1109">Required.</span></span> <span data-ttu-id="87310-1110">Ein Zeichenfolgenausdruck, der eine Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="87310-1111"><paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="87310-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87310-1112">Gibt einen Wert zurück, der die Länge einer Datei in Byte angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="87310-1113">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="87310-1114">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="87310-1115">Die Länge einer Datei in Byte.</span><span class="sxs-lookup"><span data-stu-id="87310-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1116">Wenn die angegebene Datei geöffnet ist, wenn die `FileLen`-Funktion aufgerufen wird, stellt der zurückgegebene Wert die Größe der Datei zum Zeitpunkt des Öffnens dar.</span><span class="sxs-lookup"><span data-stu-id="87310-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-1117">Verwenden Sie die `LOF`-Funktion, um die aktuelle Länge einer geöffneten Datei abzurufen.</span><span class="sxs-lookup"><span data-stu-id="87310-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1118">In diesem Beispiel wird die `FileLen`-Funktion verwendet, um die Länge einer Datei in Bytes zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="87310-1119">Nehmen Sie für die Zwecke dieses Beispiels an, dass `TestFile` eine Datei mit einigen Daten ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-1120">Die Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-1121">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1122">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1122">Required.</span></span> <span data-ttu-id="87310-1123">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1123">Any valid file number.</span></span> <span data-ttu-id="87310-1124">Verwenden Sie die <see langword="FreeFile" />-Funktion, um die nächste verfügbare Dateinummer zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="87310-1125">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1125">Required.</span></span> <span data-ttu-id="87310-1126">Ein Zeichenfolgenausdruck, der einen Dateinamen angibt. Kann das Verzeichnis oder den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="87310-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="87310-1127">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1127">Required.</span></span> <span data-ttu-id="87310-1128">Eine Enumeration, die den Dateimodus angibt: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> oder <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="87310-1129">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="87310-1130">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1130">Optional.</span></span> <span data-ttu-id="87310-1131">Eine Enumeration, die die für eine offene Datei erlaubten Operationen angibt: <see langword="Read" />, <see langword="Write" /> oder <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="87310-1132">Der Standardwert lautet <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="87310-1133">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="87310-1134">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1134">Optional.</span></span> <span data-ttu-id="87310-1135">Eine Enumeration, die für eine offene Datei aus anderen Prozessen nicht erlaubten Operationen angibt: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> und <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="87310-1136">Der Standardwert lautet <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="87310-1137">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="87310-1138">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1138">Optional.</span></span> <span data-ttu-id="87310-1139">Eine Zahl kleiner oder gleich 32.767 (Bytes).</span><span class="sxs-lookup"><span data-stu-id="87310-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="87310-1140">Bei Dateien, die mit Random-Zugriff geöffnet wurden, ist dieser Wert die Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="87310-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="87310-1141">Bei sequenziellen Dateien ist dieser Wert die Anzahl von gepufferten Zeichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="87310-1142">Öffnet eine Datei für Eingabe oder Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="87310-1142">Opens a file for input or output.</span></span> <span data-ttu-id="87310-1143">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="87310-1144">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1145">Die `FileOpen` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-1146">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-1147">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-1148">Sie müssen eine Datei öffnen, bevor ein e/a-Vorgang für Sie ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="87310-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="87310-1149">`FileOpen` ordnet der Datei einen Puffer für e/a zu und bestimmt den Zugriffsmodus, der mit dem Puffer verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-1150">Wenn Sie in eine Datei schreiben, muss eine Anwendung möglicherweise eine Datei erstellen, wenn die Datei, zu der Sie schreiben möchten, nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="87310-1151">Zu diesem Zweck benötigt er die Berechtigung für das Verzeichnis, in dem die Datei erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="87310-1152">Wenn jedoch die durch `FileName` angegebene Datei vorhanden ist, benötigt die Anwendung `Write` Berechtigung nur für die Datei selbst.</span><span class="sxs-lookup"><span data-stu-id="87310-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="87310-1153">Wenn möglich, sollten Sie zur Verbesserung der Sicherheit die Datei während der Bereitstellung erstellen und `Write` Berechtigung nur für diese Datei erteilen, anstelle des gesamten Verzeichnisses.</span><span class="sxs-lookup"><span data-stu-id="87310-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="87310-1154">Um die Sicherheit zu verbessern, schreiben Sie Daten in Benutzerverzeichnisse anstatt in das Stammverzeichnis oder das Verzeichnis "Programme".</span><span class="sxs-lookup"><span data-stu-id="87310-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="87310-1155">Der zu öffnende Kanal kann mithilfe der `FreeFile()`-Funktion gefunden werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-1156">Die `FileOpen`-Funktion erfordert `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration, die sich möglicherweise auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirkt.</span><span class="sxs-lookup"><span data-stu-id="87310-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="87310-1157">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="87310-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1158">In diesem Beispiel werden verschiedene Verwendungsmöglichkeiten der `FileOpen`-Funktion veranschaulicht, um die Eingabe und Ausgabe in einer Datei zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="87310-1159">Mit dem folgenden Code wird die Datei `TestFile` im `Input` Modus geöffnet.</span><span class="sxs-lookup"><span data-stu-id="87310-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="87310-1160">In diesem Beispiel wird die Datei nur für Schreibvorgänge im `Binary` Modus geöffnet.</span><span class="sxs-lookup"><span data-stu-id="87310-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="87310-1161">Im folgenden Beispiel wird die Datei im `Random` Modus geöffnet.</span><span class="sxs-lookup"><span data-stu-id="87310-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="87310-1162">Die Datei enthält Datensätze der Struktur `Person`.</span><span class="sxs-lookup"><span data-stu-id="87310-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="87310-1163">In diesem Codebeispiel wird die Datei im `Output` Modus geöffnet. Jeder Prozess kann die Datei lesen oder in diese schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="87310-1164">In diesem Codebeispiel wird die Datei im `Binary` Modus zum Lesen geöffnet. andere Prozesse können die Datei nicht lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1165">Datensatzlänge ist negativ (und nicht gleich -1).</span><span class="sxs-lookup"><span data-stu-id="87310-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1166"><paramref name="FileName" /> ist bereits geöffnet, oder <paramref name="FileName" /> ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-1167">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1168">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-1169">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1170">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1171">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1172">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1172">Required.</span></span> <span data-ttu-id="87310-1173">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1174">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1174">Required.</span></span> <span data-ttu-id="87310-1175">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1176">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1176">Optional.</span></span> <span data-ttu-id="87310-1177">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1178">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1179">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1180">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1181">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1182">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1183">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1184">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1185">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1186">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1187">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1188">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1188">Random Mode</span></span>  
 <span data-ttu-id="87310-1189">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1190">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1191">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1192">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1193">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1194">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1195">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1196">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1197">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1198">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1199">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1200">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1201">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1202">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1203">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1204">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1205">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1206">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1207">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1208">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1209">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1210">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1211">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1212">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1213">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1214">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1215">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1216">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1216">Binary Mode</span></span>  
 <span data-ttu-id="87310-1217">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1218">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1219">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1220">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1221">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1222">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1223">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1224">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1225">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1226">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1227">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1228">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1229"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1230">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1231">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1232">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1232">Required.</span></span> <span data-ttu-id="87310-1233">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1234">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1234">Required.</span></span> <span data-ttu-id="87310-1235">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1236">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1236">Optional.</span></span> <span data-ttu-id="87310-1237">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1238">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1239">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1240">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1241">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1242">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1243">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1244">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1245">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1246">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1247">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1248">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1248">Random Mode</span></span>  
 <span data-ttu-id="87310-1249">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1250">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1251">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1252">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1253">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1254">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1255">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1256">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1257">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1258">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1259">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1260">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1261">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1262">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1263">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1264">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1265">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1266">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1267">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1268">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1269">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1270">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1271">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1272">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1273">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1274">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1275">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1276">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1276">Binary Mode</span></span>  
 <span data-ttu-id="87310-1277">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1278">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1279">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1280">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1281">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1282">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1283">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1284">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1285">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1286">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1287">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1288">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1289"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1290">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1291">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1292">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1292">Required.</span></span> <span data-ttu-id="87310-1293">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1294">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1294">Required.</span></span> <span data-ttu-id="87310-1295">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1296">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1296">Optional.</span></span> <span data-ttu-id="87310-1297">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1298">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1299">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1300">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1301">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1302">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1303">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1304">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1305">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1306">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1307">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1308">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1308">Random Mode</span></span>  
 <span data-ttu-id="87310-1309">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1310">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1311">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1312">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1313">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1314">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1315">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1316">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1317">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1318">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1319">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1320">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1321">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1322">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1323">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1324">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1325">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1326">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1327">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1328">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1329">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1330">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1331">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1332">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1333">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1334">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1335">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1336">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1336">Binary Mode</span></span>  
 <span data-ttu-id="87310-1337">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1338">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1339">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1340">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1341">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1342">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1343">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1344">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1345">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1346">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1347">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1348">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1349"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1350">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1351">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1352">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1352">Required.</span></span> <span data-ttu-id="87310-1353">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1354">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1354">Required.</span></span> <span data-ttu-id="87310-1355">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1356">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1356">Optional.</span></span> <span data-ttu-id="87310-1357">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1358">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1359">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1360">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1361">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1362">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1363">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1364">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1365">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1366">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1367">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1368">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1368">Random Mode</span></span>  
 <span data-ttu-id="87310-1369">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1370">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1371">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1372">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1373">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1374">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1375">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1376">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1377">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1378">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1379">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1380">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1381">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1382">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1383">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1384">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1385">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1386">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1387">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1388">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1389">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1390">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1391">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1392">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1393">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1394">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1395">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1396">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1396">Binary Mode</span></span>  
 <span data-ttu-id="87310-1397">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1398">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1399">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1400">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1401">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1402">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1403">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1404">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1405">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1406">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1407">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1408">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1409"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1410">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1411">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1412">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1412">Required.</span></span> <span data-ttu-id="87310-1413">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1414">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1414">Required.</span></span> <span data-ttu-id="87310-1415">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1416">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1416">Optional.</span></span> <span data-ttu-id="87310-1417">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1418">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1419">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1420">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1421">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1422">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1423">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1424">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1425">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1426">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1427">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1428">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1428">Random Mode</span></span>  
 <span data-ttu-id="87310-1429">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1430">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1431">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1432">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1433">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1434">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1435">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1436">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1437">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1438">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1439">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1440">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1441">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1442">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1443">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1444">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1445">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1446">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1447">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1448">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1449">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1450">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1451">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1452">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1453">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1454">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1455">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1456">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1456">Binary Mode</span></span>  
 <span data-ttu-id="87310-1457">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1458">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1459">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1460">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1461">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1462">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1463">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1464">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1465">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1466">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1467">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1468">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1469"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1470">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1471">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1472">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1472">Required.</span></span> <span data-ttu-id="87310-1473">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1474">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1474">Required.</span></span> <span data-ttu-id="87310-1475">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1476">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1476">Optional.</span></span> <span data-ttu-id="87310-1477">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1478">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1479">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1480">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1481">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1482">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1483">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1484">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1485">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1486">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1487">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1488">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1488">Random Mode</span></span>  
 <span data-ttu-id="87310-1489">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1490">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1491">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1492">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1493">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1494">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1495">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1496">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1497">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1498">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1499">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1500">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1501">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1502">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1503">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1504">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1505">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1506">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1507">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1508">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1509">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1510">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1511">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1512">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1513">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1514">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1515">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1516">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1516">Binary Mode</span></span>  
 <span data-ttu-id="87310-1517">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1518">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1519">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1520">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1521">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1522">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1523">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1524">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1525">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1526">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1527">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1528">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1529"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1530">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1531">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1532">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1532">Required.</span></span> <span data-ttu-id="87310-1533">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1534">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1534">Required.</span></span> <span data-ttu-id="87310-1535">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1536">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1536">Optional.</span></span> <span data-ttu-id="87310-1537">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1538">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1539">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1540">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1541">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1542">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1543">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1544">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1545">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1546">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1547">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1548">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1548">Random Mode</span></span>  
 <span data-ttu-id="87310-1549">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1550">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1551">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1552">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1553">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1554">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1555">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1556">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1557">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1558">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1559">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die`VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1560">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1561">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1562">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1563">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1564">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1565">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1566">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1567">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1568">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1569">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1570">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1571">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1572">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1573">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1574">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1575">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1576">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1576">Binary Mode</span></span>  
 <span data-ttu-id="87310-1577">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1578">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1579">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1580">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1581">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1582">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1583">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1584">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1585">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1586">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1587">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1588">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1589"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1590">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1591">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1592">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1592">Required.</span></span> <span data-ttu-id="87310-1593">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1594">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1594">Required.</span></span> <span data-ttu-id="87310-1595">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1596">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1596">Optional.</span></span> <span data-ttu-id="87310-1597">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1598">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1599">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1600">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1601">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1602">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1603">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1604">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1605">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1606">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1607">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1608">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1608">Random Mode</span></span>  
 <span data-ttu-id="87310-1609">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1610">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1611">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1612">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1613">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1614">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1615">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1616">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1617">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1618">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1619">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1620">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1621">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1622">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1623">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1624">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1625">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1626">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1627">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1628">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1629">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1630">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1631">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1632">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1633">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1634">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1635">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1636">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1636">Binary Mode</span></span>  
 <span data-ttu-id="87310-1637">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1638">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1639">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1640">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1641">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1642">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1643">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1644">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1645">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1646">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1647">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1648">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1649"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1650">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1651">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1652">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1652">Required.</span></span> <span data-ttu-id="87310-1653">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1654">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1654">Required.</span></span> <span data-ttu-id="87310-1655">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1656">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1656">Optional.</span></span> <span data-ttu-id="87310-1657">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1658">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1659">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1660">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1661">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1662">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1663">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1664">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1665">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1666">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1667">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1668">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1668">Random Mode</span></span>  
 <span data-ttu-id="87310-1669">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1670">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1671">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1672">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1673">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1674">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1675">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1676">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1677">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1678">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1679">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1680">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1681">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1682">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1683">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1684">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1685">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1686">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1687">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1688">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1689">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1690">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1691">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1692">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1693">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1694">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1695">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1696">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1696">Binary Mode</span></span>  
 <span data-ttu-id="87310-1697">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1698">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1699">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1700">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1701">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1702">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1703">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1704">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1705">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1706">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1707">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1708">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1709"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1710">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1711">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1712">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1712">Required.</span></span> <span data-ttu-id="87310-1713">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1714">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1714">Required.</span></span> <span data-ttu-id="87310-1715">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1716">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1716">Optional.</span></span> <span data-ttu-id="87310-1717">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1718">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1719">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1720">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1721">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1722">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1723">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1724">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1725">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1726">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1727">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1728">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1728">Random Mode</span></span>  
 <span data-ttu-id="87310-1729">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1730">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1731">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1732">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1733">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1734">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1735">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1736">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1737">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1738">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1739">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1740">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1741">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1742">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1743">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1744">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1745">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1746">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1747">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1748">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1749">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1750">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1751">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1752">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1753">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1754">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1755">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1756">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1756">Binary Mode</span></span>  
 <span data-ttu-id="87310-1757">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1758">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1759">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1760">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1761">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1762">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1763">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1764">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1765">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1766">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1767">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1768">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1769"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1770">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1771">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1772">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1772">Required.</span></span> <span data-ttu-id="87310-1773">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1774">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1774">Required.</span></span> <span data-ttu-id="87310-1775">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1776">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1776">Optional.</span></span> <span data-ttu-id="87310-1777">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1778">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1779">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1780">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1781">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1782">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1783">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1784">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1785">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1786">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1787">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1788">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1788">Random Mode</span></span>  
 <span data-ttu-id="87310-1789">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1790">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der`RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1791">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1792">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1793">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1794">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1795">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1796">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1797">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1798">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1799">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1800">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1801">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1802">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1803">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1804">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1805">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1806">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1807">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1808">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1809">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1810">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1811">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1812">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1813">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1814">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1815">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1816">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1816">Binary Mode</span></span>  
 <span data-ttu-id="87310-1817">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1818">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1819">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1820">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1821">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1822">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1823">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1824">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1825">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1826">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1827">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1828">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1829"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1830">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1831">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, RecordNumber As Object)" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FilePut(System::Object ^ FileNumber, System::Object ^ Value, System::Object ^ RecordNumber);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1832">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1832">Required.</span></span> <span data-ttu-id="87310-1833">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1834">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1834">Required.</span></span> <span data-ttu-id="87310-1835">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1836">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1836">Optional.</span></span> <span data-ttu-id="87310-1837">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-1838">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1839">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1840">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1841">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1842">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1843">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1844">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1845">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1846">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1847">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1848">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1848">Random Mode</span></span>  
 <span data-ttu-id="87310-1849">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1850">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1851">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1852">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1853">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1854">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1855">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1856">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1857">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1858">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1859">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1860">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1861">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1862">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1863">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1864">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1865">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1866">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1867">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1868">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1869">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1870">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1871">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1872">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1873">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1874">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1875">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1876">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1876">Binary Mode</span></span>  
 <span data-ttu-id="87310-1877">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1878">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1879">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1880">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1881">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1882">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1883">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1884">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1885">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1886">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1887">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1888">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1889"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1890">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1891">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1892">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1892">Required.</span></span> <span data-ttu-id="87310-1893">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1894">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1894">Required.</span></span> <span data-ttu-id="87310-1895">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1896">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1896">Optional.</span></span> <span data-ttu-id="87310-1897">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87310-1898">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1898">Optional.</span></span> <span data-ttu-id="87310-1899">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1899">Applies only when writing a string.</span></span> <span data-ttu-id="87310-1900">Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="87310-1901">Der Standardwert lautet <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87310-1902">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1903">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1904">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1905">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1906">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1907">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1908">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1909">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1910">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1911">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1912">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1912">Random Mode</span></span>  
 <span data-ttu-id="87310-1913">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1914">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1915">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1916">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1917">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1918">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1919">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1920">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1921">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1922">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1923">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1924">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1925">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1926">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1927">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1928">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1929">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1930">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1931">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1932">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-1933">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-1934">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-1935">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-1936">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-1937">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-1938">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-1939">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-1940">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-1940">Binary Mode</span></span>  
 <span data-ttu-id="87310-1941">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-1942">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-1943">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-1944">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-1945">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-1946">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-1947">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-1948">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-1949">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-1950">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-1951">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-1952">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-1953"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-1954">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-1955">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-1956">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1956">Required.</span></span> <span data-ttu-id="87310-1957">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-1958">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-1958">Required.</span></span> <span data-ttu-id="87310-1959">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-1960">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1960">Optional.</span></span> <span data-ttu-id="87310-1961">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="87310-1962">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1962">Optional.</span></span> <span data-ttu-id="87310-1963">Betrifft nur das Schreiben eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="87310-1963">Applies only when writing an array.</span></span> <span data-ttu-id="87310-1964">Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor für die Zeichenfolge erforderlich ist, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="87310-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87310-1965">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-1965">Optional.</span></span> <span data-ttu-id="87310-1966">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-1966">Applies only when writing a string.</span></span> <span data-ttu-id="87310-1967">Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="87310-1968">Der Standardwert lautet <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87310-1969">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87310-1970">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87310-1971">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-1972">`FilePut` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-1973">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87310-1974">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-1975">Wenn Sie `RecordNumber`weglassen, wird der nächste Datensatz oder das nächste Byte nach dem letzten `FileGet` oder der `FilePut` Funktion geschrieben, oder es wird auf die letzte `Seek` Funktion verwiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87310-1976">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-1977">`FilePut` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-1978">Wenn Sie `StringIsFixedLength` = `True` mit `FilePut`verwenden, müssen Sie mit `FileGet`identisch Vorgehen, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-1979">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-1979">Random Mode</span></span>  
 <span data-ttu-id="87310-1980">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-1981">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePut` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-1982">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-1983">Da die Menge der Auffüll Daten nicht mit Sicherheit bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-1984">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87310-1985">Wenn die Variable, die geschrieben wird, eine Zeichenfolge ist, schreibt `FilePut` einen 2-Byte-Deskriptor, der die Zeichen folgen Länge enthält, und schreibt dann die Daten, die in die Variable aufgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="87310-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87310-1986">Daher muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge mindestens zwei Bytes aufweisen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87310-1987">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-1988">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePut` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-1989">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-1990">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePut` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-1991">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-1992">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-1993">Wenn die Variable, die geschrieben wird, ein Array ist, können Sie entscheiden, ob ein Deskriptor für die Größe und die Dimensionen des Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="87310-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87310-1994">In Visual Basic 6,0 und früheren Versionen wird der Dateideskriptor für ein dynamisches Array geschrieben, jedoch nicht für ein Array mit fester Größe.</span><span class="sxs-lookup"><span data-stu-id="87310-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87310-1995">Visual Basic 2005 wird der Deskriptor standardmäßig nicht geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87310-1996">Legen Sie zum Schreiben des Deskriptors den `ArrayIsDynamic`-Parameter auf `True`fest.</span><span class="sxs-lookup"><span data-stu-id="87310-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87310-1997">Beim Schreiben des Arrays müssen Sie der Art und Weise entsprechen, in der das Array gelesen wird. Wenn Sie mit dem Deskriptor gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87310-1998">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-1999">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87310-2000">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-2001">Die folgende Array Deklaration benötigt z. b. 218 bytes, wenn das Array auf den Datenträger geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87310-2002">Wenn die Variable, die geschrieben wird, ein beliebiger anderer Typ der Variablen ist (keine Zeichenfolge mit variabler Länge oder ein Objekt), werden `FilePut` nur die Variablen Daten schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87310-2003">Die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge muss größer oder gleich der Länge der geschriebenen Daten sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87310-2004">`FilePut` schreibt Elemente von Strukturen so, als wären Sie einzeln geschrieben worden, mit dem Unterschied, dass keine Auffüll Zeichen zwischen Elementen vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87310-2005">Das `VBFixedString`-Attribut kann auf Zeichen folgen Felder in den Strukturen angewendet werden, um die Größe der Zeichenfolge beim Schreiben auf den Datenträger anzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87310-2006">Zeichen folgen Felder, die mehr Bytes aufweisen, als durch das `VBFixedString`-Attribut angegeben werden, werden beim Schreiben auf den Datenträger abgeschnitten.</span><span class="sxs-lookup"><span data-stu-id="87310-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-2007">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-2007">Binary Mode</span></span>  
 <span data-ttu-id="87310-2008">Bei Dateien, die im `Binary` Modus geöffnet wurden, gelten die meisten `Random` Modusregeln mit einigen Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="87310-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87310-2009">Die folgenden Regeln für Dateien, die im `Binary` Modus geöffnet werden, unterscheiden sich von den Regeln für `Random`-Modus:</span><span class="sxs-lookup"><span data-stu-id="87310-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87310-2010">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-2011">`FilePut` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87310-2012">Für ein beliebiges Array, das kein Array in einer Struktur ist, schreibt `FilePut` nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87310-2013">Es wurde kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87310-2014">`FilePut` schreibt Zeichen folgen variabler Länge, die keine Elemente von Strukturen sind, ohne den zwei Byte langen Längen Deskriptor.</span><span class="sxs-lookup"><span data-stu-id="87310-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87310-2015">Die Anzahl der geschriebenen Bytes ist mit der Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="87310-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87310-2016">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes in die Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="87310-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87310-2017">Zum Schreiben in eine Datei mit der `FilePut`-Funktion ist `Write` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2018">In diesem Beispiel wird die `FilePut`-Funktion verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87310-2019">Fünf Datensätze der Struktur `Person` werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-2020"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="87310-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2021">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-2022">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2023">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2023">Required.</span></span> <span data-ttu-id="87310-2024">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2025">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2025">Required.</span></span> <span data-ttu-id="87310-2026">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87310-2027">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2027">Optional.</span></span> <span data-ttu-id="87310-2028">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87310-2029">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="87310-2030">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="87310-2031">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2032">Die `FilePutObject` Funktion dient anstelle von `FilePut` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs übergeben `Integer`, `Long`, `Short`usw.</span><span class="sxs-lookup"><span data-stu-id="87310-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="87310-2033">`FilePutObject` schreiben und liest Deskriptoren, die das-Objekt beschreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="87310-2034">Wenn Sie beabsichtigen, den `Variant`-Typ zu schreiben, ist `FilePutObject` erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="87310-2035">Wenn Sie im Zweifelsfall ein Objekt für den zweiten Parameter verwenden, empfiehlt es sich, immer `FilePutObject` und `FileGetObject`zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="87310-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="87310-2036">`FilePutObject` ist nur im `Random`-und `Binary` Modus gültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-2037">Mit `FilePutObject` geschriebene Daten werden in der Regel mit `FileGetObject` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="87310-2038">Der erste Datensatz oder das Byte in einer Datei befindet sich an Position 1, der zweite Datensatz bzw. das zweite Byte befindet sich an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87310-2039">Wenn Sie `RecordNumber`weglassen, schreibt `FilePutObject` den nächsten Datensatz oder das nächste Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder dem Datensatz oder Byte, auf den die letzte `Seek` Funktion zeigt).</span><span class="sxs-lookup"><span data-stu-id="87310-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="87310-2040">Das `StringIsFixedLength`-Argument steuert, ob die Funktion Zeichen folgen als Variable oder eine Länge mit fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87310-2041">`FilePutObject` schreibt den Längen Deskriptor nicht, wenn das Argument `True`ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87310-2042">Wenn Sie `StringIsFixedLength` = `True` mit `FilePutObject`verwenden, müssen Sie mit `FileGetObject`identisch Vorgehen. Außerdem müssen Sie sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87310-2043">Zufälliger Modus</span><span class="sxs-lookup"><span data-stu-id="87310-2043">Random Mode</span></span>  
 <span data-ttu-id="87310-2044">Für Dateien, die im `Random` Modus geöffnet werden, gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="87310-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87310-2045">Wenn die Länge der geschriebenen Daten kleiner ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, schreibt `FilePutObject` nachfolgende Datensätze an Grenzen der Daten Satz Länge.</span><span class="sxs-lookup"><span data-stu-id="87310-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87310-2046">Der Leerraum zwischen dem Ende eines Datensatzes und dem Anfang des nächsten Datensatzes wird mit dem vorhandenen Inhalt des Datei Puffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="87310-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87310-2047">Da die Menge der Auffüll Daten nicht genau bestimmt werden kann, empfiehlt es sich im Allgemeinen, die Daten Satz Länge mit der Länge der geschriebenen Daten zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="87310-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87310-2048">Wenn die Länge der geschriebenen Daten größer ist als die Länge, die in der `RecordLength`-Klausel der `FileOpen`-Funktion angegeben ist, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="87310-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="87310-2049">Wenn die Variable, die geschrieben wird, ein Objekt ist, das einen numerischen Typ enthält, `FilePutObject` schreibt zwei Bytes, die die `VarType` des Objekts identifizieren, und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="87310-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87310-2050">Wenn Sie z. b. ein Objekt schreiben, das eine ganze Zahl enthält, werden `FilePutObject` sechs Bytes schreiben: zwei Bytes, die das Objekt als `VarType(3)` (`Integer`) und vier Bytes, die die Daten enthalten, identifizieren.</span><span class="sxs-lookup"><span data-stu-id="87310-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87310-2051">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens zwei Byte betragen, die größer ist als die tatsächliche Anzahl von Bytes, die zum Speichern der Variablen erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87310-2052">Wenn die Variable, die geschrieben wird, ein Objekt ist, das eine Zeichenfolge enthält, schreibt `FilePutObject` einen zwei-Byte-Deskriptor, der die `VarType(8)` des Objekts identifiziert, einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge angibt, und schreibt dann die Zeichen folgen Daten.</span><span class="sxs-lookup"><span data-stu-id="87310-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87310-2053">Die vom `RecordLength`-Parameter in der `FileOpen`-Funktion angegebene Daten Satz Länge muss mindestens vier Byte betragen, die größer als die tatsächliche Länge der Zeichenfolge ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87310-2054">Wenn Sie eine Zeichenfolge ohne den Deskriptor platzieren möchten, sollten Sie `True` an den `StringIsFixedLength`-Parameter übergeben, und die Zeichenfolge, in die Sie eingelesen haben, sollte die richtige Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87310-2055">Wenn die Variable, die geschrieben wird, ein Array ist, muss die von der `RecordLength`-Klausel in der `FileOpen`-Funktion angegebene Daten Satz Länge größer oder gleich der Summe aller Bytes sein, die zum Schreiben der Array Daten und des Array Deskriptors erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="87310-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87310-2056">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang an.</span><span class="sxs-lookup"><span data-stu-id="87310-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87310-2057">Die Länge ist 2 plus das 8-fache der Anzahl der Dimensionen: (2 + 8 \* anzahldimensionen).</span><span class="sxs-lookup"><span data-stu-id="87310-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87310-2058">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="87310-2058">Binary Mode</span></span>  
 <span data-ttu-id="87310-2059">Für Dateien, die im `Binary` Modus geöffnet wurden, gelten alle Regeln im `Random` Modus, ausgenommen:</span><span class="sxs-lookup"><span data-stu-id="87310-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="87310-2060">Die `RecordLength`-Klausel in der `FileOpen`-Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="87310-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87310-2061">`FilePutObject` alle Variablen zusammenhängend auf den Datenträger schreibt, d. h. ohne Auffüll Zeichen zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="87310-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2062">In diesem Beispiel wird die `FilePutObject`-Funktion verwendet, um eine Zeichenfolge in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-2063">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2064">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2064">Required.</span></span> <span data-ttu-id="87310-2065">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="87310-2066">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2066">Required.</span></span> <span data-ttu-id="87310-2067">Ein numerischer Ausdruck im Bereich 0–255 einschließlich, der angibt, wie viele Zeichen auf einer Zeile stehen, bevor eine neue Zeile beginnt.</span><span class="sxs-lookup"><span data-stu-id="87310-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="87310-2068">Wenn <paramref name="RecordWidth" /> gleich 0 ist, ist die Länge einer Zeile unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="87310-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="87310-2069">Der Standardwert für <paramref name="RecordWidth" /> ist 0.</span><span class="sxs-lookup"><span data-stu-id="87310-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="87310-2070">Weist einer Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wurde, eine Ausgabezeilenbreite zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87310-2071">In diesem Beispiel wird die `FileWidth`-Funktion verwendet, um die Ausgabe Linienbreite für eine Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="87310-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2072">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2073">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FreeFile() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87310-2074">Gibt einen <see langword="Integer" />-Wert zurück, der die nächste zur Verwendung durch die <see langword="FileOpen" />-Funktion verfügbare Dateinummer darstellt.</span><span class="sxs-lookup"><span data-stu-id="87310-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="87310-2075">Ein ganzzahliger Wert, der die nächste für die Funktion <see langword="FileOpen" /> verfügbare Dateinummer angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2076">Verwenden Sie `FreeFile`, um eine Dateinummer anzugeben, die nicht bereits verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2077">In diesem Beispiel wird die `FreeFile`-Funktion verwendet, um die nächste verfügbare Dateinummer zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="87310-2078">Fünf Dateien werden für die Ausgabe innerhalb der Schleife geöffnet, und es werden einige Beispiel Daten in jede Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2079">Mehr als 255 Dateien verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-2080">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87310-2081">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2081">Required.</span></span> <span data-ttu-id="87310-2082">Ein Zeichenfolgenausdruck, der einen Datei-, Verzeichnis- oder Ordnernamen angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="87310-2083"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87310-2084">Gibt einen <see langword="FileAttribute" />-Wert zurück, der die Attribute einer Datei, eines Verzeichnisses oder eines Ordners darstellt.</span><span class="sxs-lookup"><span data-stu-id="87310-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="87310-2085">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="87310-2086">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87310-2087">Eine bitweise Kombination der Enumerationswerte.</span><span class="sxs-lookup"><span data-stu-id="87310-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2088">Um zu ermitteln, welche Attribute festgelegt sind, verwenden Sie den `And`-Operator, um einen bitweisen Vergleich des Werts auszuführen, der von der `GetAttr`-Funktion zurückgegeben wird, und dem Wert des gewünschten individuellen Datei Attributs.</span><span class="sxs-lookup"><span data-stu-id="87310-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="87310-2089">Wenn das Ergebnis nicht 0 (null) ist, wird dieses Attribut für die benannte Datei festgelegt.</span><span class="sxs-lookup"><span data-stu-id="87310-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="87310-2090">Der Rückgabewert des folgenden `And` Ausdrucks lautet z. b. 0 (null), wenn das `Archive`-Attribut nicht festgelegt ist:</span><span class="sxs-lookup"><span data-stu-id="87310-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="87310-2091">Ein Wert ungleich NULL wird zurückgegeben, wenn das `Archive`-Attribut festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2092">In diesem Beispiel wird die `GetAttr`-Funktion verwendet, um die Attribute einer Datei, eines Verzeichnisses oder eines Ordners zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="87310-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2093"><paramref name="Pathname" /> ist ungültig oder enthält Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="87310-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-2094">Zieldatei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="87310-2095">And-Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2096">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-2097">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2098">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2098">Required.</span></span> <span data-ttu-id="87310-2099">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2100">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2100">Required.</span></span> <span data-ttu-id="87310-2101">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2102">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2103">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2104">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2105">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2105">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2106">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2107">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2108">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2109">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2110">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2111">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2112">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2112">Data</span></span>|<span data-ttu-id="87310-2113">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2114">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2115">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2115">Empty</span></span>|  
|<span data-ttu-id="87310-2116">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2117">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2118">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2119">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2120">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2121">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2122">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2123">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2124">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2125">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2126">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2127">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2128">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der einige Daten Zeilen mithilfe der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2129">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2130">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2131">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2132">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * byte -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2133">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2133">Required.</span></span> <span data-ttu-id="87310-2134">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2135">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2135">Required.</span></span> <span data-ttu-id="87310-2136">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2137">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2138">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2139">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2140">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2140">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2141">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2142">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2143">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2144">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2145">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2146">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2147">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2147">Data</span></span>|<span data-ttu-id="87310-2148">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2149">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2150">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2150">Empty</span></span>|  
|<span data-ttu-id="87310-2151">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2152">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2153">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2154">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2155">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2156">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2157">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2158">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2159">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2160">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2161">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2162">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2163">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der einige Daten Zeilen mithilfe der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2164">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2165">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2166">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2167">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2168">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2168">Required.</span></span> <span data-ttu-id="87310-2169">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2170">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2170">Required.</span></span> <span data-ttu-id="87310-2171">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2172">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2173">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2174">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2175">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2175">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2176">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2177">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2178">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2179">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2180">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2181">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2182">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2182">Data</span></span>|<span data-ttu-id="87310-2183">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2184">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2185">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2185">Empty</span></span>|  
|<span data-ttu-id="87310-2186">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2187">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2188">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2189">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2190">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2191">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2192">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2193">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2194">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2195">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2196">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2197">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2198">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2199">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2200">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2201">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2202">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * DateTime -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2203">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2203">Required.</span></span> <span data-ttu-id="87310-2204">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2205">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2205">Required.</span></span> <span data-ttu-id="87310-2206">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2207">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2208">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2209">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2210">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2210">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2211">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2212">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2213">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2214">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2215">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2216">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2217">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2217">Data</span></span>|<span data-ttu-id="87310-2218">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2219">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2220">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2220">Empty</span></span>|  
|<span data-ttu-id="87310-2221">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2222">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2223">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2224">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2225">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2226">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2227">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2228">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2229">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2230">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2231">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2232">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2233">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2234">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2235">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2236">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2237">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * decimal -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2238">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2238">Required.</span></span> <span data-ttu-id="87310-2239">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2240">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2240">Required.</span></span> <span data-ttu-id="87310-2241">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2242">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2243">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2244">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2245">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2245">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2246">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2247">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2248">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2249">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2250">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2251">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2252">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2252">Data</span></span>|<span data-ttu-id="87310-2253">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2254">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2255">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2255">Empty</span></span>|  
|<span data-ttu-id="87310-2256">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2257">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2258">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2259">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2260">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2261">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2262">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2263">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2264">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2265">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2266">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2267">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2268">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2269">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2270">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2271">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2272">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * double -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2273">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2273">Required.</span></span> <span data-ttu-id="87310-2274">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2275">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2275">Required.</span></span> <span data-ttu-id="87310-2276">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2277">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2278">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2279">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2280">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2280">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2281">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2282">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2283">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2284">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2285">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2286">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2287">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2287">Data</span></span>|<span data-ttu-id="87310-2288">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2289">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2290">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2290">Empty</span></span>|  
|<span data-ttu-id="87310-2291">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2292">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2293">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2294">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2295">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2296">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2297">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2298">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2299">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2300">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2301">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2302">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2303">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2304">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2305">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2306">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2307">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int16 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2308">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2308">Required.</span></span> <span data-ttu-id="87310-2309">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2310">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2310">Required.</span></span> <span data-ttu-id="87310-2311">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2312">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2313">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2314">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2315">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2315">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2316">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2317">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2318">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2319">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2320">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2321">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2322">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2322">Data</span></span>|<span data-ttu-id="87310-2323">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2324">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2325">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2325">Empty</span></span>|  
|<span data-ttu-id="87310-2326">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2327">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2328">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2329">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2330">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2331">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2332">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2333">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2334">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2335">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2336">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2337">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2338">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2339">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2340">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2341">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2342">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2343">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2343">Required.</span></span> <span data-ttu-id="87310-2344">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2345">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2345">Required.</span></span> <span data-ttu-id="87310-2346">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2347">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2348">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2349">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2350">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2350">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2351">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2352">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2353">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2354">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2355">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2356">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2357">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2357">Data</span></span>|<span data-ttu-id="87310-2358">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2359">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2360">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2360">Empty</span></span>|  
|<span data-ttu-id="87310-2361">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2362">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2363">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2364">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2365">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2366">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2367">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2368">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2369">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2370">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2371">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2372">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2373">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2374">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2375">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2376">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2377">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2378">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2378">Required.</span></span> <span data-ttu-id="87310-2379">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2380">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2380">Required.</span></span> <span data-ttu-id="87310-2381">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2382">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2383">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2384">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2385">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2385">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2386">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2387">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2388">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2389">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2390">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2391">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2392">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2392">Data</span></span>|<span data-ttu-id="87310-2393">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2394">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2395">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2395">Empty</span></span>|  
|<span data-ttu-id="87310-2396">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2397">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2398">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2399">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2400">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2401">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2402">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2403">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2404">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2405">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2406">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2407">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2408">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2409">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2410">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2411">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2412">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2413">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2413">Required.</span></span> <span data-ttu-id="87310-2414">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2415">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2415">Required.</span></span> <span data-ttu-id="87310-2416">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2417">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2418">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2419">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2420">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2420">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2421">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2422">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2423">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2424">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2425">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2426">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2427">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2427">Data</span></span>|<span data-ttu-id="87310-2428">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2429">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2430">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2430">Empty</span></span>|  
|<span data-ttu-id="87310-2431">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2432">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2433">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2434">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2435">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2436">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2437">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2438">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2439">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2440">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2441">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2442">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2443">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2444">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2445">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2446">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2447">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * single -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2448">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2448">Required.</span></span> <span data-ttu-id="87310-2449">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2450">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2450">Required.</span></span> <span data-ttu-id="87310-2451">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2452">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2453">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2454">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2455">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2455">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2456">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2457">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2458">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2459">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2460">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2461">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2462">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2462">Data</span></span>|<span data-ttu-id="87310-2463">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2464">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2465">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2465">Empty</span></span>|  
|<span data-ttu-id="87310-2466">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2467">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2468">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2469">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2470">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2471">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2472">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2473">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2474">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2475">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2476">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2477">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2478">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2479">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2480">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2481">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2482">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2483">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2483">Required.</span></span> <span data-ttu-id="87310-2484">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87310-2485">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2485">Required.</span></span> <span data-ttu-id="87310-2486">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87310-2487">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2488">Die `Input` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2489">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2490">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2490">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2491">Mit `Input` gelesene Daten werden in der Regel mithilfe `Write`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87310-2492">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2493">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2494">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic 2005-Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87310-2495">Beim Lesen werden Standard Zeichen folgen-oder numerische Daten Variablen ohne Änderungen zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87310-2496">In der folgenden Tabelle wird veranschaulicht, wie andere Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87310-2497">Data</span><span class="sxs-lookup"><span data-stu-id="87310-2497">Data</span></span>|<span data-ttu-id="87310-2498">Der Variablen zugewiesener Wert</span><span class="sxs-lookup"><span data-stu-id="87310-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87310-2499">Trennzeichen für Komma oder Leerzeile</span><span class="sxs-lookup"><span data-stu-id="87310-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="87310-2500">Leer</span><span class="sxs-lookup"><span data-stu-id="87310-2500">Empty</span></span>|  
|<span data-ttu-id="87310-2501">#NULL #</span><span class="sxs-lookup"><span data-stu-id="87310-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87310-2502">#TRUE # oder #false #</span><span class="sxs-lookup"><span data-stu-id="87310-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87310-2503">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="87310-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87310-2504">Das Datum und/oder die Uhrzeit, die durch den Ausdruck dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87310-2505">#Error `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87310-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87310-2506">`errornumber` (Variable ist ein Objekt, das als Fehler markiert ist)</span><span class="sxs-lookup"><span data-stu-id="87310-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87310-2507">Wenn Sie das Ende der Datei erreichen, während Sie ein Datenelement einfügen, wird die Eingabe angehalten, und es tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2508">Die `Input`-Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="87310-2509">Wenn Sie z. b. in der deutschen Version 3, 14159 eingeben, wird nur der Wert 3 zurückgegeben, da das Komma als Variablen Trennzeichen und nicht als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2510">Zum Lesen aus einer Datei mit der `Input`-Funktion ist `Read` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2511">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2512">In diesem Beispiel wird die `Input`-Funktion verwendet, um Daten aus einer Datei in zwei Variablen zu lesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87310-2513">In diesem Beispiel wird davon ausgegangen, dass es sich bei `TestFile` um eine Datei handelt, bei der mehrere Daten Zeilen mit der `Write`-Funktion geschrieben werden, wobei jede Zeile eine Zeichenfolge in Anführungszeichen und eine durch Kommas getrennte Zahl enthält, z. b. ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="87310-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2514">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2515">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2516">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2517">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2518">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2518">Required.</span></span> <span data-ttu-id="87310-2519">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="87310-2520">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2520">Required.</span></span> <span data-ttu-id="87310-2521">Ein beliebiger gültiger numerischer Ausdruck, der die Anzahl der zu lesenden Zeichen angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="87310-2522">Gibt einen <see langword="String" />-Wert zurück, der Zeichen aus einer im Modus <see langword="Input" /> oder <see langword="Binary" /> geöffneten Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="87310-2523">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="87310-2524">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87310-2525">Eine Zeichenfolge, die Zeichen aus einer im <see langword="Input" />- oder <see langword="Binary" />-Modus geöffneten Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="87310-2526">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2527">Die `InputString` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2528">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2529">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2529">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2530">Mit der `InputString`-Funktion gelesene Daten werden in der Regel mithilfe von `Print` oder `FilePut`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="87310-2531">Verwenden Sie diese Funktion nur mit Dateien, die im `Input` oder `Binary` Modus geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="87310-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="87310-2532">Anders als die `Input`-Funktion gibt die `InputString`-Funktion alle gelesenen Zeichen zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="87310-2533">Dies schließt Kommas, Wagen Rückläufe, Zeilen Feeds, Anführungszeichen und führende Leerzeichen ein.</span><span class="sxs-lookup"><span data-stu-id="87310-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="87310-2534">Wenn Dateien für `Binary` Zugriff geöffnet wurden, wird versucht, die Datei mit der `InputString`-Funktion zu lesen, bis `EOF` zurückgibt, `True` einen Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="87310-2535">Verwenden Sie die Funktionen `LOF` und `Loc` anstelle von `EOF`, wenn Sie Binärdateien mit `InputString`lesen, oder verwenden Sie `FileGet`, wenn Sie die `EOF`-Funktion verwenden.</span><span class="sxs-lookup"><span data-stu-id="87310-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2536">Treffen Sie beim Lesen aus Dateien keine Sicherheitsentscheidungen zum Inhalt der Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87310-2537">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2538">In diesem Beispiel wird die `InputString`-Funktion verwendet, um ein Zeichen gleichzeitig aus einer Datei zu lesen und in das `Output` Fenster zu drucken.</span><span class="sxs-lookup"><span data-stu-id="87310-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="87310-2539">In diesem Beispiel wird davon ausgegangen, dass `MyFile` eine Textdatei mit mehreren Zeilen von Beispiel Daten ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2540"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-2541"><paramref name="CharCount" /> &lt; 0 oder &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="87310-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2542">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2543">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2544">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Kill(string PathName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87310-2545">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2545">Required.</span></span> <span data-ttu-id="87310-2546">Ein Zeichenfolgenausdruck, der einen oder mehrere Namen von zu löschenden Dateien angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="87310-2547"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87310-2548">Löscht Dateien von einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="87310-2548">Deletes files from a disk.</span></span> <span data-ttu-id="87310-2549">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="87310-2550">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2551">`Kill` unterstützt die Verwendung von Platzhaltern mit mehreren Zeichen (`*`) und Einzelzeichen (`?`) zum Angeben mehrerer Dateien.</span><span class="sxs-lookup"><span data-stu-id="87310-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="87310-2552">**Sicherheitshinweis** Zum Ausführen von muss für die `Kill`-Funktion dem ausführenden Code `Read` und `PathDiscovery` Flags <xref:System.Security.Permissions.FileIOPermission> erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="87310-2553">Weitere Informationen finden Sie unter <xref:System.Security.SecurityException>[Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675) .</span><span class="sxs-lookup"><span data-stu-id="87310-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2554">In diesem Beispiel wird die `Kill`-Funktion verwendet, um eine Datei von einem Datenträger zu löschen.</span><span class="sxs-lookup"><span data-stu-id="87310-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2555">Zieldatei(en) geöffnet.</span><span class="sxs-lookup"><span data-stu-id="87310-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-2556">Zieldatei(en) nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="87310-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="87310-2557">Berechtigung verweigert.</span><span class="sxs-lookup"><span data-stu-id="87310-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2558">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2558">Required.</span></span> <span data-ttu-id="87310-2559">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-2560">Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="87310-2561">Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="87310-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2562">Die `LineInput` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2563">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2564">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2564">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2565">Mit `LineInput` gelesene Daten werden in der Regel mithilfe `Print`in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2566">Treffen Sie beim Lesen aus Dateien keine Entscheidungen zum Inhalt einer Datei, die auf der Dateinamenerweiterung basiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87310-2567">Beispielsweise ist eine Datei mit dem Namen Form1. vb möglicherweise keine Visual Basic Quelldatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="87310-2568">Die `LineInput`-Funktion liest ein Zeichen gleichzeitig aus einer Datei, bis ein Wagen Rücklauf Zeichen (`Chr(13)`) oder ein Wagen Rücklauf/Zeilenvorschub (`Chr(13) + Chr(10)`) auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="87310-2569">Wagen Rücklauf/Zeilenvorschub Sequenzen werden übersprungen, anstatt an die Zeichenfolge angefügt zu werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2570">Zum Lesen aus einer Datei mit der `LineInput`-Funktion ist `Read` Zugriff von der <xref:System.Security.Permissions.FileIOPermissionAccess>-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2571">In diesem Beispiel wird die `LineInput`-Funktion verwendet, um eine Zeile aus einer sequenziellen Datei zu lesen und Sie einer Variablen zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="87310-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="87310-2572">In diesem Beispiel wird davon ausgegangen, dass `TestFile` eine Textdatei mit mehreren Zeilen von Beispiel Daten ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="87310-2573">Dateiende erreicht.</span><span class="sxs-lookup"><span data-stu-id="87310-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2574"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2575">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2576">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2577">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2578">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2578">Required.</span></span> <span data-ttu-id="87310-2579">Eine beliebige gültige <see langword="Integer" />-Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="87310-2580">Gibt einen Wert zurück, der die aktuelle Lese-/Schreibposition in einer geöffneten Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="87310-2581">Die aktuelle Lese- oder Schreibposition in einer geöffneten Datei.</span><span class="sxs-lookup"><span data-stu-id="87310-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2582">Die `Loc` Funktion ist NULL basiert. Wenn Sie das erste Byte in einer Datei verwenden, wird 0 zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="87310-2583">Die `Loc` Funktion wird aus Gründen der Abwärtskompatibilität bereitgestellt und kann sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2584">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2585">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2585">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2586">Im folgenden wird der Rückgabewert für jeden Datei Zugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="87310-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="87310-2587">Mode</span><span class="sxs-lookup"><span data-stu-id="87310-2587">Mode</span></span>|<span data-ttu-id="87310-2588">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="87310-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="87310-2589">Nummer des letzten aus der Datei gelesenen oder geschriebenen Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="87310-2590">Aktuelle Byte Position in der Datei dividiert durch 128.</span><span class="sxs-lookup"><span data-stu-id="87310-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="87310-2591">Informationen, die von `Loc` für sequenzielle Dateien zurückgegeben werden, werden jedoch weder verwendet noch benötigt.</span><span class="sxs-lookup"><span data-stu-id="87310-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="87310-2592">Position des letzten gelesenen oder geschriebenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="87310-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87310-2593">In diesem Beispiel wird die `Loc`-Funktion verwendet, um die aktuelle Lese-/Schreibposition in einer geöffneten Datei zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="87310-2594">In diesem Beispiel wird davon ausgegangen, dass `MyFile` eine Textdatei mit mehreren Zeilen von Beispiel Daten ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2595">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-2596">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2597">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2598">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2599">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2599">Required.</span></span> <span data-ttu-id="87310-2600">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-2601">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2602">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2603">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2604">Die Funktionen `Lock` und `Unlock` werden in Umgebungen verwendet, in denen mehrere Prozesse möglicherweise auf dieselbe Datei zugreifen müssen.</span><span class="sxs-lookup"><span data-stu-id="87310-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87310-2605">die Funktionen `Lock` und `Unlock` werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87310-2606">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87310-2607">Wenn `Record`oder `FromRecord` und `ToRecord` nicht bereitgestellt werden, wird die Sperre für die gesamte Datei verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87310-2608">Wenn `Record` allein angegeben ist, wird der einzelne Datensatz gesperrt/entsperrt.</span><span class="sxs-lookup"><span data-stu-id="87310-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87310-2609">Wenn die Datei für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` sich auf die gesamte Datei auswirken, unabhängig von dem durch `FromRecord` und`ToRecord`angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="87310-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2610">Dieses Beispiel veranschaulicht die Verwendung der Funktionen `Lock` und `Unlock`.</span><span class="sxs-lookup"><span data-stu-id="87310-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87310-2611">In diesem Beispiel wird davon ausgegangen, dass `People.txt` eine Datei ist, die Datensätze der Struktur `Person`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2612">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2613">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2614">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2614">Required.</span></span> <span data-ttu-id="87310-2615">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="87310-2616">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2616">Optional.</span></span> <span data-ttu-id="87310-2617">Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="87310-2618">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2619">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2620">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2621">Die Funktionen `Lock` und `Unlock` werden in Umgebungen verwendet, in denen mehrere Prozesse möglicherweise auf dieselbe Datei zugreifen müssen.</span><span class="sxs-lookup"><span data-stu-id="87310-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87310-2622">die Funktionen `Lock` und `Unlock` werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87310-2623">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87310-2624">Wenn `Record`oder `FromRecord` und `ToRecord` nicht bereitgestellt werden, wird die Sperre für die gesamte Datei verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87310-2625">Wenn `Record` allein angegeben ist, wird der einzelne Datensatz gesperrt/entsperrt.</span><span class="sxs-lookup"><span data-stu-id="87310-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87310-2626">Wenn die Datei für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` sich auf die gesamte Datei auswirken, unabhängig von dem durch `FromRecord` und`ToRecord`angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="87310-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2627">Dieses Beispiel veranschaulicht die Verwendung der Funktionen `Lock` und `Unlock`.</span><span class="sxs-lookup"><span data-stu-id="87310-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87310-2628">In diesem Beispiel wird davon ausgegangen, dass `People.txt` eine Datei ist, die Datensätze der Struktur `Person`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2629">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2630">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2631">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2631">Required.</span></span> <span data-ttu-id="87310-2632">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="87310-2633">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2633">Optional.</span></span> <span data-ttu-id="87310-2634">Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="87310-2635">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2635">Optional.</span></span> <span data-ttu-id="87310-2636">Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="87310-2637">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2638">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2639">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2640">Die Funktionen `Lock` und `Unlock` werden in Umgebungen verwendet, in denen mehrere Prozesse möglicherweise auf dieselbe Datei zugreifen müssen.</span><span class="sxs-lookup"><span data-stu-id="87310-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87310-2641">die Funktionen `Lock` und `Unlock` werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87310-2642">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87310-2643">Wenn `Record`oder `FromRecord` und `ToRecord` nicht bereitgestellt werden, wird die Sperre für die gesamte Datei verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87310-2644">Wenn `Record` allein angegeben ist, wird der einzelne Datensatz gesperrt/entsperrt.</span><span class="sxs-lookup"><span data-stu-id="87310-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87310-2645">Wenn die Datei für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` sich auf die gesamte Datei auswirken, unabhängig von dem durch `FromRecord` und`ToRecord`angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="87310-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2646">Dieses Beispiel veranschaulicht die Verwendung der Funktionen `Lock` und `Unlock`.</span><span class="sxs-lookup"><span data-stu-id="87310-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87310-2647">In diesem Beispiel wird davon ausgegangen, dass `People.txt` eine Datei ist, die Datensätze der Struktur `Person`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2648">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2649">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2650">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2650">Required.</span></span> <span data-ttu-id="87310-2651">Ein ganzzahliger Wert, der eine gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-2652">Gibt die Größe in Byte einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-2653">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="87310-2654">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87310-2655">Gibt die Größe in Byte einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-2656">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2657">Verwenden Sie die `FileLen`-Funktion, um die Länge einer Datei abzurufen, die nicht geöffnet ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2658">In diesem Beispiel wird die `LOF`-Funktion verwendet, um die Größe einer geöffneten Datei zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="87310-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="87310-2659">In diesem Beispiel wird davon ausgegangen, dass `TestFile` eine Textdatei ist, die Beispiel Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2660">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-2661">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-2662">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MkDir(string Path) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="87310-2663">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2663">Required.</span></span> <span data-ttu-id="87310-2664">Ein Zeichenfolgenausdruck, der das zu erstellende Verzeichnis angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="87310-2665"><paramref name="Path" /> enthält möglicherweise das Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="87310-2666">Wenn kein Laufwerk angegeben wird, erstellt <see langword="MkDir" /> das neue Verzeichnis auf dem aktuellen Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="87310-2667">Erstellt ein neues Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="87310-2667">Creates a new directory.</span></span> <span data-ttu-id="87310-2668">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="87310-2669">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2670">Diese Funktion erstellt ein neues Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="87310-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2671">In diesem Beispiel wird die `MkDir`-Funktion verwendet, um ein Verzeichnis zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="87310-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="87310-2672">Wenn das Laufwerk nicht angegeben ist, wird das neue Verzeichnis auf dem aktuellen Laufwerk erstellt.</span><span class="sxs-lookup"><span data-stu-id="87310-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-2673"><paramref name="Path" /> ist nicht angegeben oder leer.</span><span class="sxs-lookup"><span data-stu-id="87310-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="87310-2674">Berechtigung verweigert.</span><span class="sxs-lookup"><span data-stu-id="87310-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2675">Verzeichnis ist bereits vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="87310-2676">Gewusst wie: Erstellen eines Verzeichnisses in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2677">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2677">Required.</span></span> <span data-ttu-id="87310-2678">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87310-2679">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2679">Optional.</span></span> <span data-ttu-id="87310-2680">0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="87310-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="87310-2681">Die <paramref name="Output" />-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="87310-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="87310-2682"><see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="87310-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="87310-2684">Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="87310-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2685">Die Funktionen `Print` und `PrintLine` werden aus Gründen der Abwärtskompatibilität bereitgestellt und können sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2686">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2687">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2687">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2688">`Print` enthält keinen Zeilenvorschub am Ende einer Zeile. `PrintLine` enthält jedoch einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="87310-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="87310-2689">Mit `Print` geschriebene Daten werden in der Regel mithilfe von `LineInput` oder `Input`aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="87310-2690">Wenn Sie `Output` für `PrintLine`weglassen, wird eine leere Zeile in die Datei ausgegeben. für `Print`wird nichts ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="87310-2691">Mehrere durch ein Komma getrennte Ausdrücke werden an den Registerkarten Grenzen ausgerichtet, aber das Mischen von Kommas und `TAB` kann zu inkonsistenten Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="87310-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="87310-2692">Bei `Boolean` Daten werden entweder `True` oder `False` gedruckt.</span><span class="sxs-lookup"><span data-stu-id="87310-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="87310-2693">Die Schlüsselwörter "`True`" und "`False`" werden nicht übersetzt, unabhängig vom Gebiets Schema.</span><span class="sxs-lookup"><span data-stu-id="87310-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="87310-2694">Datumsdaten werden in die Datei geschrieben, indem das standardmäßige kurze Datumsformat verwendet wird, das von Ihrem System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="87310-2695">Wenn entweder das Datum oder die Uhrzeit Komponente fehlt oder 0 (null) ist, wird nur der angegebene Teil in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="87310-2696">Wenn `Output` Daten leer sind, werden keine Daten in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87310-2697">Wenn `Output` Listen Daten jedoch `DBNull`werden, wird `Null` in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="87310-2698">Bei `Error` Daten wird die Ausgabe als `Error errorcode`angezeigt.</span><span class="sxs-lookup"><span data-stu-id="87310-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="87310-2699">Das `Error`-Schlüsselwort wird unabhängig vom Gebiets Schema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="87310-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="87310-2700">Alle Daten, die mit `Print` in die Datei geschrieben werden, sind International. Das heißt, die Daten werden ordnungsgemäß mit dem entsprechenden Dezimaltrennzeichen formatiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="87310-2701">Wenn der Benutzerdaten für die Verwendung durch mehrere Gebiets Schemas ausgeben möchte, sollten `Write` verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="87310-2702">Zum Schreiben in eine Datei mithilfe der Funktionen `Print` oder `PrintLine` ist `Write` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2703">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2704">In diesem Beispiel werden die Funktionen `Print` und `PrintLine` verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2705">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2706">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2707">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2708">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2708">Required.</span></span> <span data-ttu-id="87310-2709">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87310-2710">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2710">Optional.</span></span> <span data-ttu-id="87310-2711">0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="87310-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="87310-2712">Die <paramref name="Output" />-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="87310-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="87310-2713"><see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="87310-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="87310-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="87310-2715">Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="87310-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2716">Die Funktionen `Print` und `PrintLine` werden aus Gründen der Abwärtskompatibilität bereitgestellt und können sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2717">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2718">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2718">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2719">`Print` enthält keinen Zeilenvorschub am Ende einer Zeile.`PrintLine` enthält jedoch einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="87310-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="87310-2720">Mit `Print` geschriebene Daten werden in der Regel mithilfe von `LineInput` oder `Input`aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="87310-2721">Wenn Sie `Output` für `PrintLine`weglassen, wird eine leere Zeile in die Datei ausgegeben. für `Print`wird nichts ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="87310-2722">Mehrere durch ein Komma getrennte Ausdrücke werden an den Registerkarten Grenzen ausgerichtet, aber das Mischen von Kommas und `TAB` kann zu inkonsistenten Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="87310-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="87310-2723">Bei `Boolean` Daten werden entweder `True` oder `False` gedruckt.</span><span class="sxs-lookup"><span data-stu-id="87310-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="87310-2724">Die Schlüsselwörter "`True`" und "`False`" werden nicht übersetzt, unabhängig vom Gebiets Schema.</span><span class="sxs-lookup"><span data-stu-id="87310-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="87310-2725">Datumsdaten werden in die Datei geschrieben, indem das standardmäßige kurze Datumsformat verwendet wird, das vom System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="87310-2726">Wenn entweder das Datum oder die Uhrzeit Komponente fehlt oder 0 (null) ist, wird nur der angegebene Teil in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="87310-2727">Wenn `Output` Daten leer sind, werden keine Daten in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87310-2728">Wenn `Output` Listen Daten jedoch `DBNull`werden, wird `Null` in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="87310-2729">Bei `Error` Daten wird die Ausgabe als `Error errorcode`angezeigt.</span><span class="sxs-lookup"><span data-stu-id="87310-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="87310-2730">Das `Error`-Schlüsselwort wird unabhängig vom Gebiets Schema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="87310-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="87310-2731">Alle Daten, die mit `Print` in die Datei geschrieben werden, sind International. Das heißt, die Daten werden ordnungsgemäß mit dem entsprechenden Dezimaltrennzeichen formatiert.</span><span class="sxs-lookup"><span data-stu-id="87310-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="87310-2732">Wenn der Benutzerdaten für die Verwendung durch mehrere Gebiets Schemas ausgeben möchte, sollten `Write` verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="87310-2733">Zum Schreiben in eine Datei mithilfe der Funktionen `Print` oder `PrintLine` ist `Write` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2734">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2735">In diesem Beispiel werden die Funktionen `Print` und `PrintLine` verwendet, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2736">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2737">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2738">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="87310-2739">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2739">Required.</span></span> <span data-ttu-id="87310-2740">Ein Zeichenfolgenausdruck, der den Namen und den Speicherort der vorhandenen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="87310-2741"><paramref name="OldPath" /> kann das Verzeichnis und das Laufwerk der Datei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="87310-2742">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2742">Required.</span></span> <span data-ttu-id="87310-2743">Ein Zeichenfolgenausdruck, der den Namen und den Speicherort der neuen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="87310-2744"><paramref name="NewPath" /> kann das Verzeichnis und das Laufwerk des Zielspeicherorts beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="87310-2745">Der durch <paramref name="NewPath" /> angegebene Dateiname darf noch nicht vorhanden sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="87310-2746">Benennt eine Datenträgerdatei oder ein Verzeichnis um.</span><span class="sxs-lookup"><span data-stu-id="87310-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="87310-2747">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="87310-2748">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2749">Die`Rename`-Funktion benennt eine Datei um und verschiebt Sie in ein anderes Verzeichnis, falls dies erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="87310-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="87310-2750">Die `Rename`-Funktion kann eine Datei über Laufwerke hinweg verschieben, aber Sie kann nur ein vorhandenes Verzeichnis umbenennen, wenn sich sowohl `NewPath` als auch `OldPath` auf demselben Laufwerk befinden.</span><span class="sxs-lookup"><span data-stu-id="87310-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="87310-2751">`Rename` kann keine neue Datei oder ein neues Verzeichnis erstellen.</span><span class="sxs-lookup"><span data-stu-id="87310-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="87310-2752">Wenn die `Rename`-Funktion für eine geöffnete Datei verwendet wird, tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="87310-2753">Sie müssen eine geöffnete Datei schließen, bevor Sie Sie umbenennen.</span><span class="sxs-lookup"><span data-stu-id="87310-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="87310-2754">`Rename` Argumente dürfen nicht mehr als Platzhalter (\*) und Einzelzeichen (?) enthalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87310-2755">Wenn Sie `Rename` verwenden, um eine Datei von einem ungeschützten Speicherort an einen geschützten Speicherort zu kopieren, behält die Datei die weniger eingeschränkten Rechte bei.</span><span class="sxs-lookup"><span data-stu-id="87310-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="87310-2756">Stellen Sie sicher, dass Sie kein mögliches Sicherheitsrisiko einführen.</span><span class="sxs-lookup"><span data-stu-id="87310-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2757">In diesem Beispiel wird die `Rename`-Funktion verwendet, um eine Datei umzubenennen.</span><span class="sxs-lookup"><span data-stu-id="87310-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="87310-2758">Nehmen Sie für die Zwecke dieses Beispiels an, dass die angegebenen Verzeichnisse bereits vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="87310-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-2759">Der Pfad ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-2760">Die <paramref name="OldPath" />-Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2761">Kann nicht auf anderes Gerät umbenannt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="87310-2762">Gewusst wie: Umbenennen einer Datei in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reset() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87310-2763">Schließt alle mit der <see langword="FileOpen" />-Funktion geöffneten Datenträgerdateien.</span><span class="sxs-lookup"><span data-stu-id="87310-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-2764">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="87310-2765">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2766">Die `Reset`-Funktion schließt alle aktiven Dateien, die von der `FileOpen`-Funktion geöffnet wurden, und hat dieselbe Funktion wie `FileClose()` ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="87310-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2767">In diesem Beispiel werden die `Reset`-Funktion verwendet, um alle geöffneten Dateien zu schließen und den Inhalt aller Datei Puffer auf den Datenträger zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="87310-2768">Beachten Sie die Verwendung der `Object` Variablen `FileNumber` sowohl als Zeichenfolge als auch als Zahl.</span><span class="sxs-lookup"><span data-stu-id="87310-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="87310-2769">End Statement</span><span class="sxs-lookup"><span data-stu-id="87310-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RmDir(string Path) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="87310-2770">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2770">Required.</span></span> <span data-ttu-id="87310-2771">Ein Zeichenfolgenausdruck, der das zu entfernende Verzeichnis oder den zu entfernenden Ordner angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="87310-2772"><paramref name="Path" /> kann das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="87310-2773">Wenn kein Laufwerk angegeben wird, entfernt <see langword="RmDir" /> das Verzeichnis vom aktuellen Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="87310-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="87310-2774">Entfernt ein vorhandenes Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="87310-2774">Removes an existing directory.</span></span> <span data-ttu-id="87310-2775">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="87310-2776">Weitere Informationen finden Sie unter <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2777">Wenn Sie versuchen, `RmDir` in einem Verzeichnis zu verwenden, das Dateien enthält, tritt ein Fehler auf.</span><span class="sxs-lookup"><span data-stu-id="87310-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="87310-2778">Verwenden Sie die `Kill`-Funktion, um alle Dateien zu löschen, bevor Sie versuchen, ein Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="87310-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2779">In diesem Beispiel wird die `RmDir`-Funktion verwendet, um ein vorhandenes Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="87310-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-2780"><paramref name="Path" /> ist nicht angegeben oder leer.</span><span class="sxs-lookup"><span data-stu-id="87310-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2781">Zielverzeichnis enthält Dateien.</span><span class="sxs-lookup"><span data-stu-id="87310-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87310-2782">Verzeichnis ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="87310-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-2783">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="87310-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-2784">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="87310-2785">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2786">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2786">Required.</span></span> <span data-ttu-id="87310-2787">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-2788">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="87310-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-2789">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="87310-2790">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87310-2791">Ein <see langword="Long" />-Wert, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt oder die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei festlegt.</span><span class="sxs-lookup"><span data-stu-id="87310-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2792">`Seek` gibt einen Wert zwischen 1 und 2.147.483.647 (äquivalent zu 2 ^ 31-1) (einschließlich) zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="87310-2793">Im folgenden werden die Rückgabewerte für die einzelnen Datei Zugriffs Modi beschrieben:</span><span class="sxs-lookup"><span data-stu-id="87310-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="87310-2794">Mode</span><span class="sxs-lookup"><span data-stu-id="87310-2794">Mode</span></span>|<span data-ttu-id="87310-2795">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="87310-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="87310-2796">Nummer des nächsten gelesenen oder geschriebenen Datensatzes</span><span class="sxs-lookup"><span data-stu-id="87310-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="87310-2797">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="87310-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="87310-2798">Die Byte Position, an der der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="87310-2799">Das erste Byte in einer Datei befindet sich an Position 1, das zweite Byte an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87310-2800">In diesem Beispiel wird die `Seek`-Funktion verwendet, um die aktuelle Dateiposition zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="87310-2801">Im Beispiel wird davon ausgegangen, `TestFile` eine Datei ist, die Datensätze der Struktur `Record`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="87310-2802">Bei Dateien, die im `Random` Modus geöffnet werden, gibt `Seek` die Anzahl der nächsten Datensätze zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="87310-2803">Bei Dateien, die in anderen Modi als `Random` Modus geöffnet sind, gibt `Seek` die Byte Position zurück, an der der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87310-2804">Angenommen, `TestFile` eine Datei ist, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="87310-2805">In diesem Beispiel wird die-`Seek` Funktion verwendet, um die Position für den nächsten Lese-oder Schreibvorgang in einer Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="87310-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="87310-2806">Bei Dateien, die in anderen Modi als `Random` Modus geöffnet sind, legt `Seek` die Byte Position fest, an der der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87310-2807">Angenommen, `TestFile` eine Datei ist, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2808">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-2809">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-2810">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2811">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2811">Required.</span></span> <span data-ttu-id="87310-2812">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="87310-2813">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2813">Required.</span></span> <span data-ttu-id="87310-2814">Eine Zahl im Bereich 1–2.147.483.647 einschließlich, die angibt, wo die nächste Lese-/Schreiboperation erfolgen soll.</span><span class="sxs-lookup"><span data-stu-id="87310-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="87310-2815">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="87310-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87310-2816">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="87310-2817">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2818">`Seek` gibt einen Wert zwischen 1 und 2.147.483.647 (äquivalent zu 2 ^ 31-1) (einschließlich) zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="87310-2819">Im folgenden werden die Rückgabewerte für die einzelnen Datei Zugriffs Modi beschrieben:</span><span class="sxs-lookup"><span data-stu-id="87310-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="87310-2820">Mode</span><span class="sxs-lookup"><span data-stu-id="87310-2820">Mode</span></span>|<span data-ttu-id="87310-2821">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="87310-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="87310-2822">Nummer des nächsten gelesenen oder geschriebenen Datensatzes</span><span class="sxs-lookup"><span data-stu-id="87310-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="87310-2823">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="87310-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="87310-2824">Die Byte Position, an der der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="87310-2825">Das erste Byte in einer Datei befindet sich an Position 1, das zweite Byte an Position 2 usw.</span><span class="sxs-lookup"><span data-stu-id="87310-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87310-2826">In diesem Beispiel wird die `Seek`-Funktion verwendet, um die aktuelle Dateiposition zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="87310-2827">Im Beispiel wird davon ausgegangen, `TestFile` eine Datei ist, die Datensätze der Struktur `Record`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="87310-2828">Bei Dateien, die im `Random` Modus geöffnet werden, gibt `Seek` die Anzahl der nächsten Datensätze zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="87310-2829">Bei Dateien, die in anderen Modi als `Random` Modus geöffnet sind, gibt `Seek` die Byte Position zurück, an der der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87310-2830">Angenommen, `TestFile` eine Datei ist, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="87310-2831">In diesem Beispiel wird die-`Seek` Funktion verwendet, um die Position für den nächsten Lese-oder Schreibvorgang in einer Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="87310-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="87310-2832">Bei Dateien, die in anderen Modi als `Random` Modus geöffnet sind, legt `Seek` die Byte Position fest, an der der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="87310-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87310-2833">Angenommen, `TestFile` eine Datei ist, die mehrere Textzeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2834">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87310-2835">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87310-2836">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87310-2837">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2837">Required.</span></span> <span data-ttu-id="87310-2838">Ein Zeichenfolgenausdruck, der einen Dateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="87310-2839"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="87310-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="87310-2840">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2840">Required.</span></span> <span data-ttu-id="87310-2841">Konstanter oder numerischer Ausdruck, dessen Summe Dateiattribute angibt.</span><span class="sxs-lookup"><span data-stu-id="87310-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="87310-2842">Legt Attributinformationen für eine Datei fest.</span><span class="sxs-lookup"><span data-stu-id="87310-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="87310-2843">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="87310-2844">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2845">Ein Laufzeitfehler tritt auf, wenn Sie versuchen, die Attribute einer geöffneten Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="87310-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="87310-2846">Die `Attributes` Argument-Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="87310-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="87310-2847">value</span><span class="sxs-lookup"><span data-stu-id="87310-2847">Value</span></span>|<span data-ttu-id="87310-2848">Dauerhaft</span><span class="sxs-lookup"><span data-stu-id="87310-2848">Constant</span></span>|<span data-ttu-id="87310-2849">BESCHREIBUNG</span><span class="sxs-lookup"><span data-stu-id="87310-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="87310-2850">Normal (Standard).</span><span class="sxs-lookup"><span data-stu-id="87310-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="87310-2851">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="87310-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="87310-2852">Hidden.</span><span class="sxs-lookup"><span data-stu-id="87310-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="87310-2853">Systemdatei.</span><span class="sxs-lookup"><span data-stu-id="87310-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="87310-2854">Volumebezeichnung</span><span class="sxs-lookup"><span data-stu-id="87310-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="87310-2855">Verzeichnis oder Ordner.</span><span class="sxs-lookup"><span data-stu-id="87310-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="87310-2856">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="87310-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="87310-2857">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="87310-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87310-2858">Diese Enumerationen werden von der Programmiersprache Visual Basic angegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="87310-2859">Die Namen können an beliebiger Stelle im Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2860">In diesem Beispiel wird die `SetAttr`-Funktion verwendet, um Attribute für eine Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="87310-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87310-2861"><paramref name="Attribute" />-Typ ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="87310-2862">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2862">Required.</span></span> <span data-ttu-id="87310-2863">Die Anzahl von Leerzeichen, die vor dem Anzeigen oder Ausgeben des nächsten Ausdrucks in einer Liste eingefügt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="87310-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="87310-2864">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="87310-2865">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2866">Wenn `Count` kleiner als die Ausgabe Linienbreite ist, folgt die nächste Druckposition direkt der Anzahl der gedruckten Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="87310-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="87310-2867">Wenn`Count` größer als die Ausgabe Linienbreite ist, berechnet `SPC` die nächste Druckposition mithilfe der Formel:</span><span class="sxs-lookup"><span data-stu-id="87310-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="87310-2868">`currentprintposition`(+ (`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="87310-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="87310-2869">Wenn die aktuelle Druckposition z. b. 24 ist, wird die Ausgabe Linienbreite 80, und Sie geben `SPC(90)`an, der nächste Druck beginnt an der Position 34 (aktuelle Druckposition + Restwert 90/80).</span><span class="sxs-lookup"><span data-stu-id="87310-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="87310-2870">Wenn der Unterschied zwischen der aktuellen Druckposition und der Ausgabe Linienbreite kleiner als `Count` (oder `Count` `Mod` *Width*) ist, springt die `SPC` Funktion bis zum Anfang der nächsten Zeile und generiert Leerzeichen, die `Count`-(*Width* - *currentprintposition*) liegen.</span><span class="sxs-lookup"><span data-stu-id="87310-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2871">Stellen Sie sicher, dass die tabellarischen Spalten breit genug sind, um große Buchstaben zuzulassen.</span><span class="sxs-lookup"><span data-stu-id="87310-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2872">In diesem Beispiel wird die `SPC`-Funktion verwendet, um die Ausgabe in einer Datei und im **Ausgabe** Fenster zu positionieren.</span><span class="sxs-lookup"><span data-stu-id="87310-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="87310-2873">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-2874">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87310-2875">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="87310-2876">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2877">Wenn die aktuelle Druckposition in der aktuellen Zeile größer als `Column`ist, überspringt `TAB` den Spaltenwert, der `Column` in der nächsten Ausgabezeile entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="87310-2878">Wenn `Column` kleiner als 1 ist, verschiebt `TAB` die Druckposition in die Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="87310-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="87310-2879">Wenn `Column` größer als die Ausgabe Linienbreite ist, berechnet `TAB` die nächste Druckposition mithilfe der Formel:</span><span class="sxs-lookup"><span data-stu-id="87310-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="87310-2880">Breite der Spalten-mod</span><span class="sxs-lookup"><span data-stu-id="87310-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="87310-2881">Wenn die *Breite* beispielsweise 80 lautet und Sie `TAB(90)`angeben, beginnt der nächste Druck bei der Spalte 10 (der Rest 90/80).</span><span class="sxs-lookup"><span data-stu-id="87310-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="87310-2882">Wenn `Column` kleiner als die aktuelle Druckposition ist, wird der Druckvorgang in der nächsten Zeile an der berechneten Druckposition gestartet.</span><span class="sxs-lookup"><span data-stu-id="87310-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="87310-2883">Wenn die berechnete Druckposition größer als die aktuelle Druckposition ist, beginnt der Druckvorgang an der berechneten Druckposition in derselben Zeile.</span><span class="sxs-lookup"><span data-stu-id="87310-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="87310-2884">Die linke Druckposition in einer Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="87310-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="87310-2885">Wenn Sie die `Print`-oder `PrintLine`-Funktionen zum Drucken in Dateien verwenden, ist die äußteste Druckposition die aktuelle Breite der Ausgabedatei, die Sie mit der `FileWidth`-Funktion festlegen können.</span><span class="sxs-lookup"><span data-stu-id="87310-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="87310-2886">Die `TAB`-Funktion kann auch mit der `WriteLine`-Funktion verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="87310-2887">Sie kann nicht mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2888">Stellen Sie sicher, dass die tabellarischen Spalten breit genug sind, um große Buchstaben aufzunehmen.</span><span class="sxs-lookup"><span data-stu-id="87310-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2889">In diesem Beispiel wird die `TAB`-Funktion verwendet, um die Ausgabe in einer Datei und im **Ausgabe** Fenster zu positionieren.</span><span class="sxs-lookup"><span data-stu-id="87310-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="87310-2890">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="87310-2891">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2891">Optional.</span></span> <span data-ttu-id="87310-2892">Die Spaltennummer, zu der vor dem Anzeigen oder Drucken des nächsten Ausdrucks in einer Liste gewechselt wird.</span><span class="sxs-lookup"><span data-stu-id="87310-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="87310-2893">Wenn der Wert nicht angegeben wird, verschiebt <see langword="TAB" /> die Einfügemarke an den Anfang der nächsten Ausgabezone.</span><span class="sxs-lookup"><span data-stu-id="87310-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="87310-2894">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="87310-2895">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2896">Wenn die aktuelle Druckposition in der aktuellen Zeile größer als `Column`ist, überspringt `TAB` den Spaltenwert, der `Column` in der nächsten Ausgabezeile entspricht.</span><span class="sxs-lookup"><span data-stu-id="87310-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="87310-2897">Wenn `Column` kleiner als 1 ist, verschiebt `TAB` die Druckposition in die Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="87310-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="87310-2898">Wenn `Column` größer als die Ausgabe Linienbreite ist, berechnet `TAB` die nächste Druckposition mithilfe der Formel:</span><span class="sxs-lookup"><span data-stu-id="87310-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="87310-2899">Breite der Spalten-mod</span><span class="sxs-lookup"><span data-stu-id="87310-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="87310-2900">Wenn die *Breite* beispielsweise 80 lautet und Sie `TAB(90)`angeben, beginnt der nächste Druck bei der Spalte 10 (der Rest 90/80).</span><span class="sxs-lookup"><span data-stu-id="87310-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="87310-2901">Wenn `Column` kleiner als die aktuelle Druckposition ist, wird der Druckvorgang in der nächsten Zeile an der berechneten Druckposition gestartet.</span><span class="sxs-lookup"><span data-stu-id="87310-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="87310-2902">Wenn die berechnete Druckposition größer als die aktuelle Druckposition ist, beginnt der Druckvorgang an der berechneten Druckposition in derselben Zeile.</span><span class="sxs-lookup"><span data-stu-id="87310-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="87310-2903">Die linke Druckposition in einer Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="87310-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="87310-2904">Wenn Sie die `Print`-oder `PrintLine`-Funktionen zum Drucken in Dateien verwenden, ist die äußteste Druckposition die aktuelle Breite der Ausgabedatei, die Sie mit der `FileWidth`-Funktion festlegen können.</span><span class="sxs-lookup"><span data-stu-id="87310-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="87310-2905">Die `TAB`-Funktion kann auch mit der `WriteLine`-Funktion verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="87310-2906">Sie kann nicht mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87310-2907">Stellen Sie sicher, dass die tabellarischen Spalten breit genug sind, um große Buchstaben aufzunehmen.</span><span class="sxs-lookup"><span data-stu-id="87310-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2908">In diesem Beispiel wird die `TAB`-Funktion verwendet, um die Ausgabe in einer Datei und im **Ausgabe** Fenster zu positionieren.</span><span class="sxs-lookup"><span data-stu-id="87310-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="87310-2909">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87310-2910">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2911">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2912">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2913">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2913">Required.</span></span> <span data-ttu-id="87310-2914">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87310-2915">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2916">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2917">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2918">Die Funktionen `Lock` und `Unlock` werden in Umgebungen verwendet, in denen mehrere Prozesse möglicherweise auf dieselbe Datei zugreifen müssen.</span><span class="sxs-lookup"><span data-stu-id="87310-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87310-2919">die Funktionen `Lock` und `Unlock` werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87310-2920">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87310-2921">Wenn `Record`oder `FromRecord` und `ToRecord` nicht bereitgestellt werden, wird die Sperre für die gesamte Datei verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87310-2922">Wenn `Record` allein angegeben ist, wird der einzelne Datensatz gesperrt/entsperrt.</span><span class="sxs-lookup"><span data-stu-id="87310-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87310-2923">Wenn die Datei für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` sich auf die gesamte Datei auswirken, unabhängig von dem durch `FromRecord` und`ToRecord`angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="87310-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2924">Dieses Beispiel veranschaulicht die Verwendung der Funktionen `Lock` und `Unlock`.</span><span class="sxs-lookup"><span data-stu-id="87310-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87310-2925">In diesem Beispiel wird davon ausgegangen, dass `People.txt` eine Datei ist, die Datensätze der Struktur `Person`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2926">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2927">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2928">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2928">Required.</span></span> <span data-ttu-id="87310-2929">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="87310-2930">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2930">Optional.</span></span> <span data-ttu-id="87310-2931">Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="87310-2932">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2933">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2934">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2935">Die Funktionen `Lock` und `Unlock` werden in Umgebungen verwendet, in denen mehrere Prozesse möglicherweise auf dieselbe Datei zugreifen müssen.</span><span class="sxs-lookup"><span data-stu-id="87310-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87310-2936">die Funktionen `Lock` und `Unlock` werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87310-2937">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87310-2938">Wenn `Record`oder `FromRecord` und `ToRecord` nicht bereitgestellt werden, wird die Sperre für die gesamte Datei verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87310-2939">Wenn `Record` allein angegeben ist, wird der einzelne Datensatz gesperrt/entsperrt.</span><span class="sxs-lookup"><span data-stu-id="87310-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87310-2940">Wenn die Datei für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` sich auf die gesamte Datei auswirken, unabhängig von dem durch `FromRecord` und`ToRecord`angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="87310-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2941">Dieses Beispiel veranschaulicht die Verwendung der Funktionen `Lock` und `Unlock`.</span><span class="sxs-lookup"><span data-stu-id="87310-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87310-2942">In diesem Beispiel wird davon ausgegangen, dass `People.txt` eine Datei ist, die Datensätze der Struktur `Person`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2943">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2944">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2945">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2945">Required.</span></span> <span data-ttu-id="87310-2946">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="87310-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="87310-2947">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2947">Optional.</span></span> <span data-ttu-id="87310-2948">Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="87310-2949">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2949">Optional.</span></span> <span data-ttu-id="87310-2950">Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="87310-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="87310-2951">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="87310-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87310-2952">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87310-2953">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="87310-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2954">Die Funktionen `Lock` und `Unlock` werden in Umgebungen verwendet, in denen mehrere Prozesse möglicherweise auf dieselbe Datei zugreifen müssen.</span><span class="sxs-lookup"><span data-stu-id="87310-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87310-2955">die Funktionen `Lock` und `Unlock` werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87310-2956">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="87310-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87310-2957">Wenn `Record`oder `FromRecord` und `ToRecord` nicht bereitgestellt werden, wird die Sperre für die gesamte Datei verwendet.</span><span class="sxs-lookup"><span data-stu-id="87310-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87310-2958">Wenn `Record` allein angegeben ist, wird der einzelne Datensatz gesperrt/entsperrt.</span><span class="sxs-lookup"><span data-stu-id="87310-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87310-2959">Wenn die Datei für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` sich auf die gesamte Datei auswirken, unabhängig von dem durch `FromRecord` und`ToRecord`angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="87310-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2960">Dieses Beispiel veranschaulicht die Verwendung der Funktionen `Lock` und `Unlock`.</span><span class="sxs-lookup"><span data-stu-id="87310-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87310-2961">In diesem Beispiel wird davon ausgegangen, dass `People.txt` eine Datei ist, die Datensätze der Struktur `Person`enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2962">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2963">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2964">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2964">Required.</span></span> <span data-ttu-id="87310-2965">Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87310-2966">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-2966">Optional.</span></span> <span data-ttu-id="87310-2967">Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="87310-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="87310-2968">Schreibt Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="87310-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="87310-2969">Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-2970">Die Funktionen `Write` und `WriteLine` werden aus Gründen der Abwärtskompatibilität bereitgestellt und können sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-2971">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-2972">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-2972">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-2973">Wenn Sie `Output`weglassen, wird eine leere Zeile in die Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="87310-2974">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="87310-2975">Anders als die `Print`-Funktion fügt die `Write`-Funktion Kommas zwischen Elementen und Anführungszeichen ein, wenn Sie in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="87310-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="87310-2976">Sie müssen keine expliziten Trennzeichen in der Liste platzieren.</span><span class="sxs-lookup"><span data-stu-id="87310-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="87310-2977">Wenn `Write` zum Schreiben von Daten in eine Datei verwendet wird, werden nur die Datenformate numeric, `Boolean`, Date, NULL und `Error` unterstützt.</span><span class="sxs-lookup"><span data-stu-id="87310-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="87310-2978">Die folgenden universellen Annahmen sind befolgt, damit die Daten unabhängig vom Gebiets Schema stets mithilfe von `Input`gelesen und ordnungsgemäß interpretiert werden können:</span><span class="sxs-lookup"><span data-stu-id="87310-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="87310-2979">Numerische Daten werden immer mit dem Punkt als Dezimaltrennzeichen geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="87310-2980">Bei `Boolean` Daten werden entweder `#TRUE#` oder `#FALSE#` gedruckt.</span><span class="sxs-lookup"><span data-stu-id="87310-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="87310-2981">Die Schlüsselwörter "`True`" und "`False`" werden nicht übersetzt, unabhängig vom Gebiets Schema.</span><span class="sxs-lookup"><span data-stu-id="87310-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="87310-2982">Datumsdaten werden mithilfe des universellen Datums Formats in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="87310-2983">Wenn entweder das Datum oder die Uhrzeit Komponente fehlt oder 0 (null) ist, wird nur der angegebene Teil in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="87310-2984">Wenn `Output` Daten leer sind, werden keine Daten in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87310-2985">Bei NULL-Daten werden jedoch `#NULL#` geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="87310-2986">Bei `Error` Daten wird die Ausgabe als `#ERROR errorcode#`angezeigt.</span><span class="sxs-lookup"><span data-stu-id="87310-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="87310-2987">Das `Error`-Schlüsselwort wird unabhängig vom Gebiets Schema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="87310-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="87310-2988">`WriteLine` fügt ein Zeilenumbruch Zeichen (d. h. einen Wagen Rücklauf/Zeilenvorschub oder `Chr(13) + Chr(10)`) ein, nachdem das endgültige Zeichen in `Output` in die Datei geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="87310-2989">Sie können Anführungszeichen in eine Zeichenfolge einbetten, indem Sie doppelte Anführungszeichen (oder "") verwenden.</span><span class="sxs-lookup"><span data-stu-id="87310-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="87310-2990">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="87310-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="87310-2991">gibt eine Zeichenfolge mit dem Wert `Double quotation marks aren't "difficult" to handle`zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="87310-2992">Zum Schreiben in eine Datei mithilfe der Funktionen `Write` oder `WriteLine` ist `Append` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-2993">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-2994">In diesem Beispiel wird die `Write`-Funktion verwendet, um Rohdaten in eine sequenzielle Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87310-2995">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="87310-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-2996">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-2997">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-2998">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87310-2999">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-2999">Required.</span></span> <span data-ttu-id="87310-3000">Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="87310-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87310-3001">Optional.</span><span class="sxs-lookup"><span data-stu-id="87310-3001">Optional.</span></span> <span data-ttu-id="87310-3002">Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="87310-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="87310-3003">Schreibt Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="87310-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="87310-3004">Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="87310-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87310-3005">Die Funktionen `Write` und `WriteLine` werden aus Gründen der Abwärtskompatibilität bereitgestellt und können sich auf die Leistung auswirken.</span><span class="sxs-lookup"><span data-stu-id="87310-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87310-3006">Bei nicht Legacy Anwendungen bietet das `My.Computer.FileSystem`-Objekt eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="87310-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87310-3007">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="87310-3007">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87310-3008">Wenn Sie `Output`weglassen, wird eine leere Zeile in die Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="87310-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="87310-3009">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="87310-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="87310-3010">Anders als die `Print`-Funktion fügt die `Write`-Funktion Kommas zwischen Elementen und Anführungszeichen ein, wenn Sie in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="87310-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="87310-3011">Sie müssen keine expliziten Trennzeichen in der Liste platzieren.</span><span class="sxs-lookup"><span data-stu-id="87310-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="87310-3012">Wenn `Write` zum Schreiben von Daten in eine Datei verwendet wird, werden nur die Datenformate numeric, `Boolean`, Date, NULL und `Error` unterstützt.</span><span class="sxs-lookup"><span data-stu-id="87310-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="87310-3013">Die folgenden universellen Annahmen sind befolgt, damit die Daten unabhängig vom Gebiets Schema stets mithilfe von `Input`gelesen und ordnungsgemäß interpretiert werden können:</span><span class="sxs-lookup"><span data-stu-id="87310-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="87310-3014">Numerische Daten werden immer mit dem Punkt als Dezimaltrennzeichen geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="87310-3015">Bei `Boolean` Daten werden entweder `#TRUE#` oder `#FALSE#` gedruckt.</span><span class="sxs-lookup"><span data-stu-id="87310-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="87310-3016">Die Schlüsselwörter "`True`" und "`False`" werden nicht übersetzt, unabhängig vom Gebiets Schema.</span><span class="sxs-lookup"><span data-stu-id="87310-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="87310-3017">Datumsdaten werden mithilfe des universellen Datums Formats in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="87310-3018">Wenn entweder das Datum oder die Uhrzeit Komponente fehlt oder 0 (null) ist, wird nur der angegebene Teil in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="87310-3019">Wenn `Output` Daten leer sind, werden keine Daten in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87310-3020">Bei NULL-Daten werden jedoch `#NULL#` geschrieben.</span><span class="sxs-lookup"><span data-stu-id="87310-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="87310-3021">Bei `Error` Daten wird die Ausgabe als `#ERROR errorcode#`angezeigt.</span><span class="sxs-lookup"><span data-stu-id="87310-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="87310-3022">Das `Error`-Schlüsselwort wird unabhängig vom Gebiets Schema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="87310-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="87310-3023">`WriteLine` fügt ein Zeilenumbruch Zeichen (d. h. einen Wagen Rücklauf/Zeilenvorschub oder `Chr(13) + Chr(10)`) ein, nachdem das endgültige Zeichen in `Output` in die Datei geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="87310-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="87310-3024">Sie können Anführungszeichen in eine Zeichenfolge einbetten, indem Sie doppelte Anführungszeichen (oder "") verwenden.</span><span class="sxs-lookup"><span data-stu-id="87310-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="87310-3025">Beispiel:</span><span class="sxs-lookup"><span data-stu-id="87310-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="87310-3026">gibt eine Zeichenfolge mit dem Wert `Double quotation marks aren't "difficult" to handle`zurück.</span><span class="sxs-lookup"><span data-stu-id="87310-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="87310-3027">Zum Schreiben in eine Datei mithilfe der Funktionen `Write` oder `WriteLine` ist `Append` Zugriff von der `FileIOPermissionAccess`-Enumeration erforderlich.</span><span class="sxs-lookup"><span data-stu-id="87310-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87310-3028">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="87310-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87310-3029">In diesem Beispiel wird die `Write`-Funktion verwendet, um Rohdaten in eine sequenzielle Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="87310-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87310-3030">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87310-3031">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="87310-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87310-3032">Gewusst wie: Schreiben von Text in eine Datei mit einem StreamWriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87310-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

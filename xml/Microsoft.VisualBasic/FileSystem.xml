<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b74ab185192813edbcc5e8bc304637ff8ea97867" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67239179" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cce49-101">Das <see langword="FileSystem" />-Modul enthält Prozeduren, mit denen Datei-, Verzeichnis- oder Ordner- und Systemoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="cce49-102">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als bei Verwendung des <see langword="FileSystem" />-Moduls.</span><span class="sxs-lookup"><span data-stu-id="cce49-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="cce49-103">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-104">Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die auf Dateien und Ordner zugreifen.</span><span class="sxs-lookup"><span data-stu-id="cce49-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-105">Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und Verzeichnis oder Ordner zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="cce49-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="cce49-106">Verzeichnisse und Dateien: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="cce49-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="cce49-107">Eingabe und Ausgabe: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="cce49-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="cce49-108">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="cce49-109">Member der Visual Basic-Laufzeitbibliothek</span><span class="sxs-lookup"><span data-stu-id="cce49-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="cce49-110">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-110">Required.</span></span> <span data-ttu-id="cce49-111">Ein Zeichenfolgenausdruck, der das Verzeichnis oder den Ordner bezeichnet, das bzw. der zum neuen Verzeichnis oder Ordner wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="cce49-112"><paramref name="Path" /> enthält möglicherweise das Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="cce49-113">Wenn kein Laufwerk angegeben wird, ändert <see langword="ChDir" /> das Standardverzeichnis oder den Ordner in das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="cce49-114">Ändert das aktuelle Verzeichnis oder den aktuellen Ordner.</span><span class="sxs-lookup"><span data-stu-id="cce49-114">Changes the current directory or folder.</span></span> <span data-ttu-id="cce49-115">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung als die <see langword="ChDir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="cce49-116">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-117">Die `ChDir` -Funktion ändert das Standardverzeichnis, aber nicht das Standardlaufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="cce49-118">Z. B. wenn das Standard-Laufwerk C ist, die folgende Anweisung ändert sich das Standardverzeichnis auf Laufwerk D, C, bleibt das Standardlaufwerk jedoch:</span><span class="sxs-lookup"><span data-stu-id="cce49-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="cce49-119">Sie können relative machen verzeichnisänderungen wird durch zwei Punkte wie folgt eingeben:</span><span class="sxs-lookup"><span data-stu-id="cce49-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-120">Die `ChDir` -Funktion erfordert eine Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="cce49-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="cce49-121">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und.</span><span class="sxs-lookup"><span data-stu-id="cce49-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-122">Dieses Beispiel verwendet die `ChDir` Funktion, um das aktuelle Verzeichnis oder Ordner zu ändern.</span><span class="sxs-lookup"><span data-stu-id="cce49-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-123"><paramref name="Path" /> ist leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-124">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="cce49-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="cce49-125">Gewusst wie: Analysieren von Dateipfaden in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="cce49-126">Erstellen, Löschen und Verschieben von Dateien und Verzeichnissen in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-127">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="cce49-128">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-128">Required.</span></span> <span data-ttu-id="cce49-129">Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="cce49-130">Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="cce49-131">Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</span><span class="sxs-lookup"><span data-stu-id="cce49-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="cce49-132">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-133">Die `ChDrive` -Funktion erfordert eine Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="cce49-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="cce49-134">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="cce49-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-135">Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="cce49-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="cce49-136">Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-137">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="cce49-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-138">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="cce49-139">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-139">Required.</span></span> <span data-ttu-id="cce49-140">Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="cce49-141">Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="cce49-142">Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</span><span class="sxs-lookup"><span data-stu-id="cce49-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="cce49-143">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-144">Die `ChDrive` -Funktion erfordert eine Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="cce49-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="cce49-145">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="cce49-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-146">Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="cce49-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="cce49-147">Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-148">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="cce49-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-149">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-150">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-150">Returns a string representing the current path.</span></span> <span data-ttu-id="cce49-151">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="cce49-152">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce49-153">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-153">Returns a string representing the current path.</span></span> <span data-ttu-id="cce49-154">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="cce49-155">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-156">Eine Zeichenfolge mit dem aktuellen Pfad.</span><span class="sxs-lookup"><span data-stu-id="cce49-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cce49-157">Dieses Beispiel verwendet die `CurDir` Funktion den aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="cce49-158">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-158">Optional.</span></span> <span data-ttu-id="cce49-159">Ein <see langword="Char" />-Ausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="cce49-160">Wenn kein Laufwerk angegeben wird oder <paramref name="Drive" /> eine Zeichenfolgen der Länge 0 (null) ("") ist, gibt <see langword="CurDir" /> den Pfad für das aktuelle Laufwerk zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="cce49-161">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-161">Returns a string representing the current path.</span></span> <span data-ttu-id="cce49-162">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="cce49-163">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-164">Eine Zeichenfolge mit dem aktuellen Pfad.</span><span class="sxs-lookup"><span data-stu-id="cce49-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cce49-165">Dieses Beispiel verwendet die `CurDir` Funktion den aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-166">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="cce49-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="cce49-167">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="cce49-168">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce49-169">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="cce49-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="cce49-170">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="cce49-171">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="cce49-172">Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="cce49-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-173">Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="cce49-174">`VbVolume` Gibt die Volumebezeichnung des Laufwerks anstelle von einem bestimmten Dateinamen zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="cce49-175">Geben Sie an einer `PathName` beim ersten, die Sie Aufrufen der `Dir` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="cce49-176">Um das nächste Element abzurufen, können Sie, aufeinander folgende Aufrufe der `Dir` Funktion ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="cce49-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-177">Zur fehlerfreien Ausführung der `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags der <xref:System.Security.Permissions.FileIOPermission> der ausgeführte Code erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="cce49-178">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="cce49-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="cce49-179">Die `Attributes` Argument Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="cce49-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="cce49-180">Wert</span><span class="sxs-lookup"><span data-stu-id="cce49-180">Value</span></span>|<span data-ttu-id="cce49-181">Konstante</span><span class="sxs-lookup"><span data-stu-id="cce49-181">Constant</span></span>|<span data-ttu-id="cce49-182">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="cce49-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="cce49-183">Standard.</span><span class="sxs-lookup"><span data-stu-id="cce49-183">Default.</span></span> <span data-ttu-id="cce49-184">Gibt die Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="cce49-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="cce49-185">Gibt an, schreibgeschützte Dateien sowie Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="cce49-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="cce49-186">Gibt an, alle Dateien, und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="cce49-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="cce49-187">Gibt an, das Systemdateien und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="cce49-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="cce49-188">Gibt die Volumebezeichnung an. Wenn alle anderen Attribute angegeben wird, `vbVolume` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="cce49-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="cce49-189">Gibt an, Verzeichnissen oder Ordnern und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="cce49-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="cce49-190">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="cce49-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="cce49-191">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="cce49-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="cce49-192">Diese Enumerationen werden von Visual Basic-Sprache angegeben und können überall in Ihrem Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-193">Dieses Beispiel verwendet die `Dir` Funktion zu überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="cce49-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="cce49-194">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-194">Optional.</span></span> <span data-ttu-id="cce49-195">Ein Zeichenfolgenausdruck, der einen Dateinamen, ein Verzeichnis, einen Ordnernamen oder eine Volumebezeichnung des Laufwerks angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="cce49-196">Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <paramref name="PathName" /> nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="cce49-197">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-197">Optional.</span></span> <span data-ttu-id="cce49-198">Ein Zeichenfolgenausdruck, der einen Dateinamen, ein Verzeichnis, einen Ordnernamen oder eine Volumebezeichnung des Laufwerks angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="cce49-199">Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <paramref name="Pathname" /> nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="cce49-200">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-200">Optional.</span></span> <span data-ttu-id="cce49-201">Enumeration oder numerischer Ausdruck, dessen Wert Dateiattribute angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="cce49-202">Wenn der Wert nicht angegeben wird, gibt <see langword="Dir" /> Dateien zurück, die mit <paramref name="Pathname" /> übereinstimmen, aber keine Attribute besitzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="cce49-203">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="cce49-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="cce49-204">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="cce49-205">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="cce49-206">Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="cce49-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-207">Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
 <span data-ttu-id="cce49-208">`VbVolume` Gibt die Volumebezeichnung des Laufwerks anstelle von einem bestimmten Dateinamen zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
 <span data-ttu-id="cce49-209">Geben Sie an einer `PathName` beim ersten, die Sie Aufrufen der `Dir` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="cce49-210">Um das nächste Element abzurufen, können Sie, aufeinander folgende Aufrufe der `Dir` Funktion ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="cce49-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-211">Zur fehlerfreien Ausführung der `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags der <xref:System.Security.Permissions.FileIOPermission> der ausgeführte Code erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="cce49-212">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="cce49-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
 <span data-ttu-id="cce49-213">Die `Attributes` Argument Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="cce49-213">The `Attributes` argument enumeration values are as follows:</span></span>  
|<span data-ttu-id="cce49-214">Wert</span><span class="sxs-lookup"><span data-stu-id="cce49-214">Value</span></span>|<span data-ttu-id="cce49-215">Konstante</span><span class="sxs-lookup"><span data-stu-id="cce49-215">Constant</span></span>|<span data-ttu-id="cce49-216">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="cce49-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="cce49-217">Standard.</span><span class="sxs-lookup"><span data-stu-id="cce49-217">Default.</span></span> <span data-ttu-id="cce49-218">Gibt Dateien an, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="cce49-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="cce49-219">Gibt an, nur-Lese Dateien zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="cce49-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="cce49-220">Gibt die versteckte Dateien zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="cce49-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="cce49-221">Gibt an, der Systemdateien, zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="cce49-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="cce49-222">Gibt die Volumebezeichnung an. Wenn alle anderen Attribute angegeben wird, `vbVolume` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="cce49-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="cce49-223">Gibt an, Verzeichnissen oder Ordnern, zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="cce49-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="cce49-224">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="cce49-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="cce49-225">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="cce49-225">File has a different name.</span></span>|  
> [!NOTE]
>  <span data-ttu-id="cce49-226">Diese Enumerationen werden von Visual Basic-Sprache angegeben und können überall in Ihrem Code anstelle von tatsächlichen Werten verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
## Examples  
 <span data-ttu-id="cce49-227">Dieses Beispiel verwendet die `Dir` Funktion zu überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="cce49-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-228">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-228">Required.</span></span> <span data-ttu-id="cce49-229">Ein <see langword="Integer" /> mit einer beliebigen gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-230">Gibt den booleschen Wert <see langword="True" /> zurück, wenn das Ende einer für <see langword="Random" />- oder sequenziellen <see langword="Input" />-Zugriff geöffneten Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="cce49-231">Ein boolescher Wert <see langword="True" />, wenn das Ende einer für <see langword="Random" /> oder sequenzielle <see langword="Input" /> geöffneten Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-232">Verwendung `EOF` zur Vermeidung des Fehlers, bei dem Versuch, nach dem Ende einer Datei abrufen von Eingabe-generiert werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="cce49-233">Die `EOF` -Funktion zurückgegeben `False` bis Ende der Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="cce49-234">Dateien für geöffnet `Random` oder `Binary` Zugriff `EOF` gibt `False` bis zur letzten Ausführung `FileGet` Funktion kann nicht zum Lesen der vollständigen Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="cce49-235">Dateien für geöffnet `Binary` für den Zugriff auf einen Versuch, lesen Sie die Datei mit der `Input` Funktion bis `EOF` gibt `True` wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="cce49-236">Verwenden Sie die `LOF` und `Loc` Funktionen anstelle von `EOF` beim Lesen von Binärdateien mit `Input`, oder verwenden Sie `Get` bei Verwendung der `EOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="cce49-237">Dateien für geöffnet `Output`, `EOF` gibt immer `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-238">Dieses Beispiel verwendet die `EOF` Funktion, um das Ende einer Datei zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="cce49-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="cce49-239">In diesem Beispiel wird vorausgesetzt, dass `Testfile` ist eine Textdatei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-240">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-241">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-241">Required.</span></span> <span data-ttu-id="cce49-242"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-242"><see langword="Integer" />.</span></span> <span data-ttu-id="cce49-243">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-244">Gibt eine Enumeration zurück, die den Dateimodus für Dateien darstellt, die mit der <see langword="FileOpen" />-Funktion geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="cce49-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-245">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="FileAttr" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="cce49-246">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="cce49-247">Die folgenden Enumerationswerte geben den Dateizugriffsmodus an:</span><span class="sxs-lookup"><span data-stu-id="cce49-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="cce49-248">Wert</span><span class="sxs-lookup"><span data-stu-id="cce49-248">Value</span></span> 
 </term><description> <span data-ttu-id="cce49-249">Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="cce49-250">1</span><span class="sxs-lookup"><span data-stu-id="cce49-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="cce49-251">2</span><span class="sxs-lookup"><span data-stu-id="cce49-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="cce49-252">4</span><span class="sxs-lookup"><span data-stu-id="cce49-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="cce49-253">8</span><span class="sxs-lookup"><span data-stu-id="cce49-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="cce49-254">32</span><span class="sxs-lookup"><span data-stu-id="cce49-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-255">Diese Funktion gibt eine Enumeration, die den Dateimodus mit geöffneten Dateien darstellt. die `FileOpen` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-256">Dieses Beispiel verwendet die `FileAttr` Funktion, die den Dateimodus, einer geöffneten Datei zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-257">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="cce49-258">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-258">Optional.</span></span> <span data-ttu-id="cce49-259">Parameterarray von 0 oder mehr zu schließenden Channels.</span><span class="sxs-lookup"><span data-stu-id="cce49-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="cce49-260">Schließt die Eingabe/Ausgabe (E/A) für eine Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-261"><see langword="My" /> ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="cce49-262">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-263">Die `FileClose` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-264">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-265">Weitere Informationen finden Sie unter [Vorgehensweise: Lesen von Text aus Dateien mit einem StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [Vorgehensweise: Schreiben von Text in Dateien mit einem StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), und [Exemplarische Vorgehensweise: Bearbeiten von Dateien und Verzeichnissen in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="cce49-266">Wenn Sie weglassen `FileNumbers`, alle aktive Dateien geöffnet werden, indem die `FileOpen` Funktion geschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="cce49-267">Beim Schließen von Dateien, die für geöffnet wurden `Output` oder `Append`, wird der endgültige Puffer der Ausgabe in die Betriebssystempuffer für diese Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="cce49-268">Alle geschlossenen zugeordnete Pufferspeicher Datei wird veröffentlicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="cce49-269">Wenn die `FileClose` Funktion ausgeführt wird, wird die Zuordnung einer Datei mit der Datei Zahl enden.</span><span class="sxs-lookup"><span data-stu-id="cce49-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-270">Dieses Beispiel verwendet die `FileClose` Funktion, um eine Datei zu schließen, die für geöffnet `Input`.</span><span class="sxs-lookup"><span data-stu-id="cce49-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-271"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="cce49-272">End Statement</span><span class="sxs-lookup"><span data-stu-id="cce49-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="cce49-273">Stop-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-274">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="cce49-275">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-275">Required.</span></span> <span data-ttu-id="cce49-276">Ein Zeichenfolgenausdruck, der den Namen der zu kopierenden Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="cce49-277"><paramref name="Source" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Quelldatei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="cce49-278">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-278">Required.</span></span> <span data-ttu-id="cce49-279">Ein Zeichenfolgenausdruck, der den Zieldateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="cce49-280"><paramref name="Destination" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Zieldatei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="cce49-281">Kopiert eine Datei</span><span class="sxs-lookup"><span data-stu-id="cce49-281">Copies a file.</span></span> <span data-ttu-id="cce49-282">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="cce49-283">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-284">Wenn Sie versuchen, Sie verwenden die `FileCopy` funktionieren für eine aktuell geöffneten Datei ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="cce49-285">`FileCopy` erfordert volle Vertrauenswürdigkeit auf dem lokalen Laufwerk funktioniert.</span><span class="sxs-lookup"><span data-stu-id="cce49-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-286">Dieses Beispiel verwendet die `FileCopy` Funktion, um eine Datei in ein anderes kopieren.</span><span class="sxs-lookup"><span data-stu-id="cce49-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="cce49-287">Für dieses Beispiel wird angenommen, dass `SrcFile` ist eine Datei, die Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-288"><paramref name="Source" /> oder <paramref name="Destination" /> ist ungültig oder nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-289">Datei ist bereits geöffnet.</span><span class="sxs-lookup"><span data-stu-id="cce49-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-290">Die Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="cce49-291">Gewusst wie: Erstellen einer Kopie einer Datei in einem anderen Verzeichnis in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="cce49-292">Gewusst wie: Erstellen einer Kopie einer Datei im gleichen Ordner in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="cce49-293">Gewusst wie: Kopieren eines Verzeichnisses in ein anderes Verzeichnis in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="cce49-294">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-294">Required.</span></span> <span data-ttu-id="cce49-295">Ein Zeichenfolgenausdruck, der einen Dateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="cce49-296"><paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="cce49-297">Gibt einen <see langword="Date" />-Wert zurück, der Datum und Uhrzeit des Schreibvorgangs in einer Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="cce49-298">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="cce49-299">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span><span class="sxs-lookup"><span data-stu-id="cce49-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="cce49-300">Ein <see langword="Date" />-Wert, der Datum und Uhrzeit der Erstellung oder letzten Änderung der Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cce49-301">Dieses Beispiel verwendet die `FileDateTime` Funktion, um das Datum zu bestimmen und die Uhrzeit einer Datei erstellt oder zuletzt geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="cce49-302">Das Format des Datums und der angezeigte Uhrzeit basiert auf den gebietsschemaeinstellungen des Systems.</span><span class="sxs-lookup"><span data-stu-id="cce49-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-303"><paramref name="PathName" /> ist ungültig oder enthält Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-304">Zieldatei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-305">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-306">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-307">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-308">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-309">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-309">Required.</span></span> <span data-ttu-id="cce49-310">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-311">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-311">Required.</span></span> <span data-ttu-id="cce49-312">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-313">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-313">Optional.</span></span> <span data-ttu-id="cce49-314">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-315">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-316">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-317">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="cce49-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-318">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-319">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-320">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-321">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-322">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-323">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-324">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-324">Random Mode</span></span>  
 <span data-ttu-id="cce49-325">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-326">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-327">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-328">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-329">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-330">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-331">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-332">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-333">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-334">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-335">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-336">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-337">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-338">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-339">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-340">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-341">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-342">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-343">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-344">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-345">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-346">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-347">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-348">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-349">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-350">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-351">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-352">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-352">Binary Mode</span></span>  
 <span data-ttu-id="cce49-353">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-354">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-355">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-356">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-357">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-358">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-359">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-360">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-361">Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-362"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-363">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-364">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-365">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-366">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-366">Required.</span></span> <span data-ttu-id="cce49-367">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-368">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-368">Required.</span></span> <span data-ttu-id="cce49-369">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-370">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-370">Optional.</span></span> <span data-ttu-id="cce49-371">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-372">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-373">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-374">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-375">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-376">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-377">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-378">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-379">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-380">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-381">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-381">Random Mode</span></span>  
 <span data-ttu-id="cce49-382">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-383">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-384">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-385">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-386">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-387">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-388">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-389">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-390">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-391">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-392">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-393">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-394">Wenn der Deskriptor nicht verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-394">If the descriptor is not used.</span></span> <span data-ttu-id="cce49-395">Übergeben Sie die Größe und die Grenzen des Arrays in `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-396">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-397">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-398">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-399">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-400">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-401">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-402">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-403">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-404">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-405">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-406">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-407">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-408">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-409">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-410">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-410">Binary Mode</span></span>  
 <span data-ttu-id="cce49-411">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-412">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-413">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-414">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-415">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-416">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-417">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-418">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-419">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-420"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-421">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-422">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-423">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-424">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-424">Required.</span></span> <span data-ttu-id="cce49-425">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-426">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-426">Required.</span></span> <span data-ttu-id="cce49-427">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-428">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-428">Optional.</span></span> <span data-ttu-id="cce49-429">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-430">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-431">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-432">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-433">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-434">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-435">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-436">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-437">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-438">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-439">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-439">Random Mode</span></span>  
 <span data-ttu-id="cce49-440">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-441">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-442">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-443">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-444">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-445">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-446">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-447">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-448">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-449">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-450">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-451">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-452">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-453">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-454">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-455">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-456">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-457">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-458">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-459">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-460">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-461">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-462">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-463">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-464">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-465">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-466">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-467">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-467">Binary Mode</span></span>  
 <span data-ttu-id="cce49-468">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-469">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-470">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-471">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-472">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-473">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-474">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-475">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-476">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-477"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-478">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-479">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-480">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-481">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-481">Required.</span></span> <span data-ttu-id="cce49-482">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-483">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-483">Required.</span></span> <span data-ttu-id="cce49-484">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-485">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-485">Optional.</span></span> <span data-ttu-id="cce49-486">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-487">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-488">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-489">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-490">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-491">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-492">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-493">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-494">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-495">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-496">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-496">Random Mode</span></span>  
 <span data-ttu-id="cce49-497">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-498">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion`FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-499">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-500">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-501">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-502">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-503">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-504">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-505">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-506">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-507">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-508">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-509">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-510">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-511">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-512">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-513">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-514">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-515">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-516">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-517">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-518">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-519">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-520">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-521">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-522">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-523">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-524">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-524">Binary Mode</span></span>  
 <span data-ttu-id="cce49-525">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-526">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-527">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-528">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-529">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-530">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-531">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-532">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-533">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-534"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-535">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-536">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-537">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-538">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-538">Required.</span></span> <span data-ttu-id="cce49-539">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-540">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-540">Required.</span></span> <span data-ttu-id="cce49-541">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-542">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-542">Optional.</span></span> <span data-ttu-id="cce49-543">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-544">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-545">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-546">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-547">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-548">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-549">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-550">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-551">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-552">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-553">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-553">Random Mode</span></span>  
 <span data-ttu-id="cce49-554">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-555">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-556">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-557">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-558">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-559">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-560">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-561">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-562">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-563">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-564">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-565">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-566">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-567">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-568">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-569">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-570">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-571">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-572">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-573">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-574">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-575">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-576">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-577">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-578">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-579">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-580">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-581">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-581">Binary Mode</span></span>  
 <span data-ttu-id="cce49-582">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-583">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-584">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-585">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-586">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-587">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-588">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-589">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-590">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-591"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-592">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-593">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-594">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-595">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-595">Required.</span></span> <span data-ttu-id="cce49-596">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-597">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-597">Required.</span></span> <span data-ttu-id="cce49-598">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-599">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-599">Optional.</span></span> <span data-ttu-id="cce49-600">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-601">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-602">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-603">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-604">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-605">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-606">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-607">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-608">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-609">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-610">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-610">Random Mode</span></span>  
 <span data-ttu-id="cce49-611">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-612">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-613">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-614">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-615">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-616">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-617">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-618">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-619">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-620">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-621">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-622">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-623">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-624">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-625">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-626">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-627">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-628">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-629">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-630">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-631">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-632">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-633">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-634">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-635">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-636">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-637">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-638">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-638">Binary Mode</span></span>  
 <span data-ttu-id="cce49-639">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-640">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-641">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-642">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-643">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-644">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-645">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-646">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-647">Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-648"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-649">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-650">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-651">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-652">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-652">Required.</span></span> <span data-ttu-id="cce49-653">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-654">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-654">Required.</span></span> <span data-ttu-id="cce49-655">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-656">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-656">Optional.</span></span> <span data-ttu-id="cce49-657">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-658">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-659">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-660">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-661">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-662">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-663">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-664">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-665">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-666">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-667">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-667">Random Mode</span></span>  
 <span data-ttu-id="cce49-668">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-669">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-670">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-671">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-672">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-673">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-674">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-675">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-676">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-677">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-678">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-679">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-680">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-681">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-682">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-683">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-684">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-685">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-686">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-687">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-688">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-689">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-690">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-691">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-692">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-693">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-694">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-695">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-695">Binary Mode</span></span>  
 <span data-ttu-id="cce49-696">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-697">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-698">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-699">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-700">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-701">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-702">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-703">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-704">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-705"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-706">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-707">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-708">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-709">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-709">Required.</span></span> <span data-ttu-id="cce49-710">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-711">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-711">Required.</span></span> <span data-ttu-id="cce49-712">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-713">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-713">Optional.</span></span> <span data-ttu-id="cce49-714">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-715">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-716">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-717">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-718">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-719">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-720">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-721">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-722">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-723">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-724">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-724">Random Mode</span></span>  
 <span data-ttu-id="cce49-725">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-726">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-727">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-728">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-729">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-730">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-731">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-732">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-733">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-734">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-735">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-736">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-737">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-738">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-739">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-740">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-741">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-742">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-743">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-744">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-745">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-746">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-747">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-748">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-749">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-750">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-751">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-752">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-752">Binary Mode</span></span>  
 <span data-ttu-id="cce49-753">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-754">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-755">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-756">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-757">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-758">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-759">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-760">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-761">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-762"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-763">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-764">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-765">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-766">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-766">Required.</span></span> <span data-ttu-id="cce49-767">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-768">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-768">Required.</span></span> <span data-ttu-id="cce49-769">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-770">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-770">Optional.</span></span> <span data-ttu-id="cce49-771">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-772">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-773">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-774">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-775">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-776">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-777">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-778">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-779">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-780">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-781">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-781">Random Mode</span></span>  
 <span data-ttu-id="cce49-782">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-783">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-784">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-785">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-786">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-787">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-788">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-789">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-790">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-791">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-792">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-793">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-794">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-795">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-796">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-797">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-798">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-799">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-800">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-801">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-802">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-803">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-804">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-805">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-806">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-807">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-808">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-809">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-809">Binary Mode</span></span>  
 <span data-ttu-id="cce49-810">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-811">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-812">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-813">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-814">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-815">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-816">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-817">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-818">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-819"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-820">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-821">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-822">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-823">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-823">Required.</span></span> <span data-ttu-id="cce49-824">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-825">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-825">Required.</span></span> <span data-ttu-id="cce49-826">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-827">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-827">Optional.</span></span> <span data-ttu-id="cce49-828">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-829">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-830">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-831">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-832">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-833">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-834">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-835">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-836">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-837">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-838">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-838">Random Mode</span></span>  
 <span data-ttu-id="cce49-839">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-840">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-841">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-842">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-843">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-844">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-845">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-846">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-847">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-848">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-849">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-850">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-851">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-852">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-853">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-854">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-855">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-856">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-857">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-858">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-859">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-860">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-861">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-862">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-863">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-864">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-865">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-866">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-866">Binary Mode</span></span>  
 <span data-ttu-id="cce49-867">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-868">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-869">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-870">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-871">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-872">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-873">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-874">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-875">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-876"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-877">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-878">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-879">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-880">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-880">Required.</span></span> <span data-ttu-id="cce49-881">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-882">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-882">Required.</span></span> <span data-ttu-id="cce49-883">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-884">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-884">Optional.</span></span> <span data-ttu-id="cce49-885">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-886">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-887">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-888">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-889">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-890">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-891">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-892">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-893">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-894">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-895">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-895">Random Mode</span></span>  
 <span data-ttu-id="cce49-896">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-897">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-898">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-899">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-900">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-901">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-902">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-903">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-904">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-905">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-906">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-907">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-908">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-909">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-910">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-911">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-912">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-913">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-914">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-915">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-916">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-917">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-918">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-919">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-920">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-921">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-922">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-923">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-923">Binary Mode</span></span>  
 <span data-ttu-id="cce49-924">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-925">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-926">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-927">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-928">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-929">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-930">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-931">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-932">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-933"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-934">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-935">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-936">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-937">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-937">Required.</span></span> <span data-ttu-id="cce49-938">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-939">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-939">Required.</span></span> <span data-ttu-id="cce49-940">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-941">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-941">Optional.</span></span> <span data-ttu-id="cce49-942">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="cce49-943">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-943">Optional.</span></span> <span data-ttu-id="cce49-944">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-944">Applies only when writing a string.</span></span> <span data-ttu-id="cce49-945">Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="cce49-946">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="cce49-947">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-948">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-949">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-950">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-951">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-952">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-953">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-954">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-955">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-956">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-956">Random Mode</span></span>  
 <span data-ttu-id="cce49-957">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-958">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-959">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-960">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-961">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-962">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-963">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-964">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-965">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-966">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-967">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-968">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-969">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-970">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-971">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-972">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-973">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-974">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-975">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-976">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-977">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-978">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-979">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-980">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-981">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-982">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-983">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-984">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-984">Binary Mode</span></span>  
 <span data-ttu-id="cce49-985">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-986">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-987">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-988">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-989">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-990">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-991">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-992">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-993">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-994"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-995">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-996">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-997">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-998">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-998">Required.</span></span> <span data-ttu-id="cce49-999">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1000">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1000">Required.</span></span> <span data-ttu-id="cce49-1001">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1002">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1002">Optional.</span></span> <span data-ttu-id="cce49-1003">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="cce49-1004">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1004">Optional.</span></span> <span data-ttu-id="cce49-1005">Betrifft nur das Schreiben eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="cce49-1005">Applies only when writing an array.</span></span> <span data-ttu-id="cce49-1006">Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor erforderlich ist, der die Größe und die Begrenzungen des Arrays beschreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="cce49-1007">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1007">Optional.</span></span> <span data-ttu-id="cce49-1008">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1008">Applies only when writing a string.</span></span> <span data-ttu-id="cce49-1009">Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="cce49-1010">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="cce49-1011">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="cce49-1012">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="cce49-1013">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1014">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1015">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="cce49-1016">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1017">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-1018">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-1019">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1020">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1020">Random Mode</span></span>  
 <span data-ttu-id="cce49-1021">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1022">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1023">Der Abstand zwischen dem Ende eines Datensatzes und das Starten des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1024">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-1025">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1026">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1027">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-1028">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1029">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="cce49-1030">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1031">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="cce49-1032">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="cce49-1033">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="cce49-1034">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1035">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1036">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1037">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="cce49-1038">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="cce49-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="cce49-1039">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="cce49-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="cce49-1040">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-1041">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="cce49-1042">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="cce49-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-1043">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-1044">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1045">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="cce49-1046">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="cce49-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-1047">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1048">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1048">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1049">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1050">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1051">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1052">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1053">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="cce49-1054">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="cce49-1055">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1056">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="cce49-1057">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1058"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1059">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-1060">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1061">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1062">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1062">Required.</span></span> <span data-ttu-id="cce49-1063">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1064">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1064">Required.</span></span> <span data-ttu-id="cce49-1065">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1066">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1066">Optional.</span></span> <span data-ttu-id="cce49-1067">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1068">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="cce49-1069">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="cce49-1070">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1071">Die `FileGetObject` Funktion dient anstelle von `FileGet` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird zurückgegeben, anstelle eines anderen Typs, z. B. `Integer`, `Long`, `Short`und so weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="cce49-1072">Wenn Sie beabsichtigen, schreibt die `Variant` Typ `FileGetObject` ist erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="cce49-1073">Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, ist immer empfehlenswert, die Sie verwenden `FilePutObject` und `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="cce49-1074">`FileGetObject` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1075">Mit gelesene Daten `FileGetObject` richtet sich in der Regel mit `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="cce49-1076">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1077">Wenn Sie weglassen `RecordNumber`, `FileGetObject` liest den Datensatz bzw. das Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="cce49-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1078">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1078">Random Mode</span></span>  
 <span data-ttu-id="cce49-1079">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1080">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGetObject` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1081">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1082">Da die Menge der Daten der Auffüllung nicht genau bestimmt werden kann, ist es eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="cce49-1083">Wenn die Zielvariable eine Zeichenfolge, in der Standardeinstellung ist `FileGetObject` liest einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1084">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1085">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge und in eine Datei beim Lesen der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="cce49-1086">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1087">Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1088">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1089">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="cce49-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="cce49-1090">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf den Datenträger:</span><span class="sxs-lookup"><span data-stu-id="cce49-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="cce49-1091">Die 218 Bytes werden wie folgt verteilt: 18 Bytes für den Deskriptor (2 + 8 \* 2), und 100 Bytes für die Daten (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="cce49-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="cce49-1092">`FileGetObject` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="cce49-1093">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePutObject`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="cce49-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="cce49-1094">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente, einschließlich aller Arrays und ihren Deskriptoren erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="cce49-1095">Die <xref:Microsoft.VisualBasic.VBFixedStringAttribute> Klasse angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1096">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1096">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1097">Für Dateien in geöffnet `Binary` aller-Modus die `Random` Regeln anwenden, mit den folgenden Ausnahmen:</span><span class="sxs-lookup"><span data-stu-id="cce49-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="cce49-1098">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1099">`FileGetObject` Liest alle Variablen aus dem Datenträger zusammenhängend, also ohne Abstand zwischen den Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1100">Für ein beliebiges Array als ein Array in einer Struktur `FileGetObject` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="cce49-1101">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="cce49-1102">`FileGetObject` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1103">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-1104">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-1105">Z. B. möglicherweise eine Datei namens "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1106">Das folgende Beispiel liest einen Datensatz in eine Datei, und klicken Sie dann abgerufen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-1107">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1108">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="cce49-1109">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1109">Required.</span></span> <span data-ttu-id="cce49-1110">Ein Zeichenfolgenausdruck, der eine Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="cce49-1111"><paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="cce49-1112">Gibt einen Wert zurück, der die Länge einer Datei in Byte angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="cce49-1113">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="cce49-1114">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-1115">Die Länge einer Datei in Byte.</span><span class="sxs-lookup"><span data-stu-id="cce49-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1116">Wenn die angegebene Datei geöffnet, wenn ist die `FileLen` Funktion aufgerufen wird, wird der zurückgegebene Wert stellt die Größe der Datei, die zum Zeitpunkt der sie geöffnet wurde.</span><span class="sxs-lookup"><span data-stu-id="cce49-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-1117">Um die aktuelle Länge einer geöffneten Datei zu erhalten, verwenden die `LOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1118">Dieses Beispiel verwendet die `FileLen` Funktion, um die Länge einer Datei in Byte zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="cce49-1119">Für dieses Beispiel wird angenommen, dass `TestFile` ist eine Datei, die Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-1120">Die Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-1121">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1122">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1122">Required.</span></span> <span data-ttu-id="cce49-1123">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1123">Any valid file number.</span></span> <span data-ttu-id="cce49-1124">Verwenden Sie die <see langword="FreeFile" />-Funktion, um die nächste verfügbare Dateinummer zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="cce49-1125">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1125">Required.</span></span> <span data-ttu-id="cce49-1126">Ein Zeichenfolgenausdruck, der einen Dateinamen angibt. Kann das Verzeichnis oder den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="cce49-1127">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1127">Required.</span></span> <span data-ttu-id="cce49-1128">Eine Enumeration, die den Dateimodus angibt: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> oder <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="cce49-1129">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="cce49-1130">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1130">Optional.</span></span> <span data-ttu-id="cce49-1131">Eine Enumeration, die die für eine offene Datei erlaubten Operationen angibt: <see langword="Read" />, <see langword="Write" /> oder <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="cce49-1132">Wird standardmäßig auf <see langword="ReadWrite" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="cce49-1133">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="cce49-1134">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1134">Optional.</span></span> <span data-ttu-id="cce49-1135">Eine Enumeration, die für eine offene Datei aus anderen Prozessen nicht erlaubten Operationen angibt: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> und <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="cce49-1136">Wird standardmäßig auf <see langword="Lock Read Write" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="cce49-1137">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="cce49-1138">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1138">Optional.</span></span> <span data-ttu-id="cce49-1139">Eine Zahl kleiner oder gleich 32.767 (Bytes).</span><span class="sxs-lookup"><span data-stu-id="cce49-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="cce49-1140">Bei Dateien, die mit Random-Zugriff geöffnet wurden, ist dieser Wert die Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="cce49-1141">Bei sequenziellen Dateien ist dieser Wert die Anzahl von gepufferten Zeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="cce49-1142">Öffnet eine Datei für Eingabe oder Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="cce49-1142">Opens a file for input or output.</span></span> <span data-ttu-id="cce49-1143">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="cce49-1144">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1145">Die `FileOpen` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-1146">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-1147">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-1148">Sie müssen eine Datei öffnen, bevor alle e/a-Vorgänge ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="cce49-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="cce49-1149">`FileOpen` weist einen Puffer für e/a in die Datei, und bestimmt den Zugriffsmodus für die Verwendung mit dem Puffer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-1150">Beim Schreiben in eine Datei eine Anwendung möglicherweise eine Datei erstellen, wenn die Datei, auf die sie schreiben nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="cce49-1151">Zu diesem Zweck benötigt diese Berechtigung für das Verzeichnis, in dem die Datei ist, erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="cce49-1152">Aber wenn die Datei durch angegeben `FileName` vorhanden ist, muss die Anwendung `Write` Berechtigung nur für die Datei selbst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="cce49-1153">Ganz egal, wo möglich, zur Verbesserung der Sicherheit, erstellen Sie die Datei während der Bereitstellung und Grant `Write` Berechtigung für diese Datei nur, statt das gesamte Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="cce49-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="cce49-1154">Schreiben Sie Daten in Verzeichnissen nach Benutzer statt auf das Root-Verzeichnis oder das Verzeichnis Programme, um Sicherheit zu verbessern.</span><span class="sxs-lookup"><span data-stu-id="cce49-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="cce49-1155">Der Kanal zum Öffnen finden Sie unter Verwendung der `FreeFile()` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-1156">Die `FileOpen` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` -Enumeration, die die Ausführung in teilweise vertrauenswürdigen Umgebungen auswirkt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="cce49-1157">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1158">Dieses Beispiel veranschaulicht verschiedene Verwendungen der der `FileOpen` Funktion, um die Eingabe und Ausgabe in eine Datei zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="cce49-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="cce49-1159">Der folgende Code öffnet die Datei `TestFile` in `Input` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="cce49-1160">In diesem Beispiel öffnet die Datei im `Binary` Modus ausschließlich für Schreibvorgänge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="cce49-1161">Das folgende Beispiel öffnet die Datei im `Random` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="cce49-1162">Die Datei enthält die Datensätze der Struktur `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="cce49-1163">Dieses Codebeispiel öffnet die Datei im `Output` Modus: jeder Prozess kann lesen oder Schreiben in die Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="cce49-1164">Dieses Codebeispiel öffnet die Datei im `Binary` Modus zum Lesen; andere Prozesse die Datei können nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1165">Datensatzlänge ist negativ (und nicht gleich -1).</span><span class="sxs-lookup"><span data-stu-id="cce49-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1166"><paramref name="FileName" /> ist bereits geöffnet, oder <paramref name="FileName" /> ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-1167">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1168">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-1169">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1170">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1171">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1172">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1172">Required.</span></span> <span data-ttu-id="cce49-1173">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1174">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1174">Required.</span></span> <span data-ttu-id="cce49-1175">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1176">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1176">Optional.</span></span> <span data-ttu-id="cce49-1177">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1178">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1179">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1180">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1181">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1182">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1183">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1184">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1185">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1186">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1187">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1188">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1188">Random Mode</span></span>  
 <span data-ttu-id="cce49-1189">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1190">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1191">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1192">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1193">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1194">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1195">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1196">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1197">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1198">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1199">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1200">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1201">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1202">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1203">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1204">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1205">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1206">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1207">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1208">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1209">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1210">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1211">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1212">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1213">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1214">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1215">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1216">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1216">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1217">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1218">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1219">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1220">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1221">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1222">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1223">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1224">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1225">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1226">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1227">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1228">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1229"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1230">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1231">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1232">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1232">Required.</span></span> <span data-ttu-id="cce49-1233">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1234">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1234">Required.</span></span> <span data-ttu-id="cce49-1235">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1236">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1236">Optional.</span></span> <span data-ttu-id="cce49-1237">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1238">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1239">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1240">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1241">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1242">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1243">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1244">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1245">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1246">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1247">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1248">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1248">Random Mode</span></span>  
 <span data-ttu-id="cce49-1249">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1250">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1251">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1252">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1253">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1254">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1255">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1256">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1257">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1258">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1259">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1260">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1261">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1262">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1263">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1264">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1265">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1266">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1267">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1268">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1269">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1270">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1271">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1272">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1273">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1274">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1275">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1276">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1276">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1277">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1278">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1279">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1280">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1281">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1282">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1283">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1284">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1285">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1286">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1287">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1288">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1289"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1290">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1291">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1292">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1292">Required.</span></span> <span data-ttu-id="cce49-1293">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1294">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1294">Required.</span></span> <span data-ttu-id="cce49-1295">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1296">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1296">Optional.</span></span> <span data-ttu-id="cce49-1297">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1298">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1299">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1300">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1301">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1302">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1303">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1304">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1305">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1306">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1307">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1308">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1308">Random Mode</span></span>  
 <span data-ttu-id="cce49-1309">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1310">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1311">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1312">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1313">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1314">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1315">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1316">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1317">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1318">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1319">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1320">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1321">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1322">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1323">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1324">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1325">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1326">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1327">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1328">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1329">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1330">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1331">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1332">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1333">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1334">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1335">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1336">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1336">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1337">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1338">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1339">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1340">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1341">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1342">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1343">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1344">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1345">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1346">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1347">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1348">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1349"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1350">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1351">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1352">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1352">Required.</span></span> <span data-ttu-id="cce49-1353">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1354">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1354">Required.</span></span> <span data-ttu-id="cce49-1355">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1356">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1356">Optional.</span></span> <span data-ttu-id="cce49-1357">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1358">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1359">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1360">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1361">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1362">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1363">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1364">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1365">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1366">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1367">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1368">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1368">Random Mode</span></span>  
 <span data-ttu-id="cce49-1369">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1370">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1371">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1372">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1373">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1374">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1375">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1376">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1377">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1378">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1379">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1380">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1381">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1382">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1383">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1384">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1385">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1386">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1387">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1388">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1389">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1390">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1391">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1392">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1393">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1394">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1395">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1396">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1396">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1397">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1398">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1399">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1400">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1401">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1402">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1403">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1404">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1405">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1406">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1407">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1408">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1409"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1410">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1411">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1412">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1412">Required.</span></span> <span data-ttu-id="cce49-1413">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1414">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1414">Required.</span></span> <span data-ttu-id="cce49-1415">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1416">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1416">Optional.</span></span> <span data-ttu-id="cce49-1417">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1418">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1419">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1420">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1421">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1422">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1423">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1424">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1425">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1426">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1427">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1428">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1428">Random Mode</span></span>  
 <span data-ttu-id="cce49-1429">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1430">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1431">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1432">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1433">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1434">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1435">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1436">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1437">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1438">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1439">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1440">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1441">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1442">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1443">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1444">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1445">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1446">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1447">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1448">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1449">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1450">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1451">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1452">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1453">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1454">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1455">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1456">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1456">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1457">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1458">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1459">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1460">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1461">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1462">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1463">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1464">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1465">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1466">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1467">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1468">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1469"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1470">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1471">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1472">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1472">Required.</span></span> <span data-ttu-id="cce49-1473">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1474">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1474">Required.</span></span> <span data-ttu-id="cce49-1475">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1476">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1476">Optional.</span></span> <span data-ttu-id="cce49-1477">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1478">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1479">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1480">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1481">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1482">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1483">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1484">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1485">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1486">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1487">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1488">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1488">Random Mode</span></span>  
 <span data-ttu-id="cce49-1489">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1490">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1491">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1492">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1493">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1494">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1495">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1496">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1497">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1498">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1499">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1500">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1501">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1502">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1503">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1504">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1505">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1506">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1507">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1508">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1509">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1510">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1511">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1512">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1513">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1514">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1515">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1516">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1516">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1517">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1518">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1519">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1520">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1521">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1522">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1523">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1524">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1525">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1526">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1527">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1528">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1529"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1530">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1531">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1532">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1532">Required.</span></span> <span data-ttu-id="cce49-1533">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1534">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1534">Required.</span></span> <span data-ttu-id="cce49-1535">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1536">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1536">Optional.</span></span> <span data-ttu-id="cce49-1537">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1538">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1539">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1540">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1541">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1542">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1543">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1544">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1545">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1546">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1547">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1548">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1548">Random Mode</span></span>  
 <span data-ttu-id="cce49-1549">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1550">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1551">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1552">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1553">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1554">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1555">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1556">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1557">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1558">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1559">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die`VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1560">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1561">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1562">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1563">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1564">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1565">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1566">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1567">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1568">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1569">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1570">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1571">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1572">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1573">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1574">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1575">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1576">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1576">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1577">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1578">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1579">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1580">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1581">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1582">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1583">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1584">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1585">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1586">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1587">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1588">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1589"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1590">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1591">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1592">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1592">Required.</span></span> <span data-ttu-id="cce49-1593">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1594">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1594">Required.</span></span> <span data-ttu-id="cce49-1595">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1596">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1596">Optional.</span></span> <span data-ttu-id="cce49-1597">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1598">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1599">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1600">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1601">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1602">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1603">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1604">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1605">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1606">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1607">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1608">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1608">Random Mode</span></span>  
 <span data-ttu-id="cce49-1609">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1610">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1611">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1612">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1613">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1614">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1615">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1616">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1617">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1618">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1619">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1620">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1621">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1622">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1623">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1624">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1625">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1626">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1627">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1628">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1629">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1630">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1631">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1632">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1633">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1634">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1635">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1636">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1636">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1637">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1638">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1639">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1640">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1641">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1642">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1643">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1644">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1645">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1646">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1647">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1648">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1649"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1650">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1651">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1652">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1652">Required.</span></span> <span data-ttu-id="cce49-1653">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1654">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1654">Required.</span></span> <span data-ttu-id="cce49-1655">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1656">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1656">Optional.</span></span> <span data-ttu-id="cce49-1657">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1658">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1659">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1660">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1661">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1662">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1663">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1664">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1665">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1666">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1667">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1668">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1668">Random Mode</span></span>  
 <span data-ttu-id="cce49-1669">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1670">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1671">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1672">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1673">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1674">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1675">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1676">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1677">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1678">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1679">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1680">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1681">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1682">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1683">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1684">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1685">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1686">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1687">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1688">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1689">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1690">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1691">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1692">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1693">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1694">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1695">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1696">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1696">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1697">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1698">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1699">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1700">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1701">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1702">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1703">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1704">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1705">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1706">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1707">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1708">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1709"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1710">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1711">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1712">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1712">Required.</span></span> <span data-ttu-id="cce49-1713">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1714">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1714">Required.</span></span> <span data-ttu-id="cce49-1715">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1716">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1716">Optional.</span></span> <span data-ttu-id="cce49-1717">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1718">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1719">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1720">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1721">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1722">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1723">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1724">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1725">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1726">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1727">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1728">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1728">Random Mode</span></span>  
 <span data-ttu-id="cce49-1729">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1730">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1731">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1732">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1733">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1734">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1735">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1736">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1737">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1738">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1739">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1740">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1741">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1742">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1743">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1744">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1745">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1746">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1747">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1748">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1749">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1750">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1751">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1752">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1753">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1754">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1755">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1756">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1756">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1757">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1758">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1759">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1760">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1761">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1762">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1763">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1764">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1765">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1766">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1767">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1768">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1769"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1770">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1771">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1772">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1772">Required.</span></span> <span data-ttu-id="cce49-1773">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1774">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1774">Required.</span></span> <span data-ttu-id="cce49-1775">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1776">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1776">Optional.</span></span> <span data-ttu-id="cce49-1777">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1778">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1779">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1780">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1781">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1782">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1783">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1784">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1785">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1786">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1787">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1788">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1788">Random Mode</span></span>  
 <span data-ttu-id="cce49-1789">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1790">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die`RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1791">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1792">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1793">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1794">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1795">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1796">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1797">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1798">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1799">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1800">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1801">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1802">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1803">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1804">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1805">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1806">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1807">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1808">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1809">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1810">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1811">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1812">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1813">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1814">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1815">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1816">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1816">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1817">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1818">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1819">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1820">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1821">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1822">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1823">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1824">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1825">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1826">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1827">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1828">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1829"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1830">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1831">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FilePut(System::Object ^ FileNumber, System::Object ^ Value, System::Object ^ RecordNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1832">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1832">Required.</span></span> <span data-ttu-id="cce49-1833">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1834">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1834">Required.</span></span> <span data-ttu-id="cce49-1835">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1836">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1836">Optional.</span></span> <span data-ttu-id="cce49-1837">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-1838">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1839">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1840">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1841">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1842">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1843">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1844">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1845">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1846">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1847">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1848">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1848">Random Mode</span></span>  
 <span data-ttu-id="cce49-1849">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1850">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1851">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1852">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1853">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1854">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1855">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1856">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1857">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1858">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1859">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1860">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1861">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1862">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1863">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1864">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1865">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1866">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1867">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1868">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1869">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1870">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1871">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1872">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1873">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1874">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1875">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1876">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1876">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1877">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1878">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1879">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1880">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1881">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1882">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1883">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1884">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1885">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1886">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1887">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1888">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1889"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1890">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1891">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1892">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1892">Required.</span></span> <span data-ttu-id="cce49-1893">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1894">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1894">Required.</span></span> <span data-ttu-id="cce49-1895">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1896">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1896">Optional.</span></span> <span data-ttu-id="cce49-1897">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="cce49-1898">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1898">Optional.</span></span> <span data-ttu-id="cce49-1899">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1899">Applies only when writing a string.</span></span> <span data-ttu-id="cce49-1900">Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="cce49-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="cce49-1901">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="cce49-1902">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1903">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1904">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1905">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1906">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1907">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1908">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1909">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1910">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1911">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1912">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1912">Random Mode</span></span>  
 <span data-ttu-id="cce49-1913">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1914">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1915">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1916">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1917">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1918">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1919">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1920">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1921">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1922">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1923">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1924">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1925">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1926">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1927">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1928">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1929">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1930">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1931">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1932">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-1933">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-1934">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-1935">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-1936">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-1937">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-1938">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-1939">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-1940">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-1940">Binary Mode</span></span>  
 <span data-ttu-id="cce49-1941">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-1942">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-1943">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-1944">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-1945">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-1946">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-1947">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-1948">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-1949">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-1950">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-1951">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-1952">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-1953"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-1954">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-1955">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-1956">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1956">Required.</span></span> <span data-ttu-id="cce49-1957">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-1958">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-1958">Required.</span></span> <span data-ttu-id="cce49-1959">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-1960">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1960">Optional.</span></span> <span data-ttu-id="cce49-1961">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="cce49-1962">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1962">Optional.</span></span> <span data-ttu-id="cce49-1963">Betrifft nur das Schreiben eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="cce49-1963">Applies only when writing an array.</span></span> <span data-ttu-id="cce49-1964">Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor für die Zeichenfolge erforderlich ist, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="cce49-1965">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-1965">Optional.</span></span> <span data-ttu-id="cce49-1966">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1966">Applies only when writing a string.</span></span> <span data-ttu-id="cce49-1967">Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="cce49-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="cce49-1968">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="cce49-1969">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="cce49-1970">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="cce49-1971">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-1972">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-1973">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="cce49-1974">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-1975">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="cce49-1976">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-1977">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-1978">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-1979">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-1979">Random Mode</span></span>  
 <span data-ttu-id="cce49-1980">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-1981">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-1982">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-1983">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-1984">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="cce49-1985">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="cce49-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="cce49-1986">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="cce49-1987">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-1988">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-1989">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-1990">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-1991">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-1992">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-1993">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="cce49-1994">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="cce49-1995">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="cce49-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="cce49-1996">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="cce49-1997">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="cce49-1998">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-1999">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="cce49-2000">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-2001">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="cce49-2002">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="cce49-2003">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="cce49-2004">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="cce49-2005">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="cce49-2006">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="cce49-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-2007">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-2007">Binary Mode</span></span>  
 <span data-ttu-id="cce49-2008">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="cce49-2009">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="cce49-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="cce49-2010">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-2011">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="cce49-2012">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="cce49-2013">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="cce49-2014">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="cce49-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="cce49-2015">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="cce49-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="cce49-2016">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="cce49-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="cce49-2017">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2018">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="cce49-2019">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-2020"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="cce49-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2021">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-2022">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2023">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2023">Required.</span></span> <span data-ttu-id="cce49-2024">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2025">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2025">Required.</span></span> <span data-ttu-id="cce49-2026">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="cce49-2027">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2027">Optional.</span></span> <span data-ttu-id="cce49-2028">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="cce49-2029">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="cce49-2030">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="cce49-2031">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2032">Die `FilePutObject` Funktion dient anstelle von `FilePut` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs übergeben `Integer`, `Long`, `Short`usw.</span><span class="sxs-lookup"><span data-stu-id="cce49-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="cce49-2033">`FilePutObject` schreibt, und liest Deskriptoren, die das Objekt zu beschreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="cce49-2034">Wenn Sie beabsichtigen, schreibt die `Variant` Typ `FilePutObject` ist erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="cce49-2035">Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, wird empfohlen, dass Sie immer verwenden `FilePutObject` und `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="cce49-2036">`FilePutObject` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-2037">Mit `FilePutObject` geschriebene Daten werden in der Regel mit `FileGetObject` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="cce49-2038">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="cce49-2039">Wenn Sie weglassen `RecordNumber`, `FilePutObject` schreibt den Datensatz bzw. das Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder den Datensatz bzw. das Byte zeigt den letzten `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="cce49-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="cce49-2040">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="cce49-2041">`FilePutObject` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="cce49-2042">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePutObject`, müssen Sie das gleiche mit `FileGetObject`, und Sie müssen auch sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="cce49-2043">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-2043">Random Mode</span></span>  
 <span data-ttu-id="cce49-2044">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="cce49-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="cce49-2045">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePutObject` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="cce49-2046">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="cce49-2047">Da die Menge der Daten der Auffüllung nicht genau bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="cce49-2048">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="cce49-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="cce49-2049">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePutObject` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="cce49-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="cce49-2050">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePutObject` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="cce49-2051">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="cce49-2052">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePutObject` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="cce49-2053">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="cce49-2054">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="cce49-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="cce49-2055">Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="cce49-2056">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="cce49-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="cce49-2057">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="cce49-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="cce49-2058">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="cce49-2058">Binary Mode</span></span>  
 <span data-ttu-id="cce49-2059">Für Dateien in geöffnet `Binary` Modus alle die `Random` Modus Regeln anwenden, mit Ausnahme von:</span><span class="sxs-lookup"><span data-stu-id="cce49-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="cce49-2060">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="cce49-2061">`FilePutObject` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2062">Dieses Beispiel verwendet die `FilePutObject` Funktion, um eine Zeichenfolge in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-2063">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2064">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2064">Required.</span></span> <span data-ttu-id="cce49-2065">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="cce49-2066">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2066">Required.</span></span> <span data-ttu-id="cce49-2067">Ein numerischer Ausdruck im Bereich 0–255 einschließlich, der angibt, wie viele Zeichen auf einer Zeile stehen, bevor eine neue Zeile beginnt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="cce49-2068">Wenn <paramref name="RecordWidth" /> gleich 0 ist, ist die Länge einer Zeile unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="cce49-2069">Der Standardwert von <paramref name="RecordWidth" /> ist 0.</span><span class="sxs-lookup"><span data-stu-id="cce49-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="cce49-2070">Weist einer Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wurde, eine Ausgabezeilenbreite zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cce49-2071">Dieses Beispiel verwendet die `FileWidth` Funktion, um die Breite einer Zeile für eine Datei festgelegt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2072">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2073">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce49-2074">Gibt einen <see langword="Integer" />-Wert zurück, der die nächste zur Verwendung durch die <see langword="FileOpen" />-Funktion verfügbare Dateinummer darstellt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="cce49-2075">Ein ganzzahliger Wert, der die nächste für die Funktion <see langword="FileOpen" /> verfügbare Dateinummer angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2076">Verwendung `FreeFile` zahlreiche Datei angeben, die nicht bereits verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2077">Dieses Beispiel verwendet die `FreeFile` Funktion, um die nächste verfügbare Dateinummer zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="cce49-2078">Für die Ausgabe innerhalb der Schleife werden fünf Dateien geöffnet, und einige Beispieldaten in jeder geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2079">Mehr als 255 Dateien verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-2080">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="cce49-2081">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2081">Required.</span></span> <span data-ttu-id="cce49-2082">Ein Zeichenfolgenausdruck, der einen Datei-, Verzeichnis- oder Ordnernamen angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="cce49-2083"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="cce49-2084">Gibt einen <see langword="FileAttribute" />-Wert zurück, der die Attribute einer Datei, eines Verzeichnisses oder eines Ordners darstellt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="cce49-2085">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="cce49-2086">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-2087">Eine bitweise Kombination der Enumerationswerte.</span><span class="sxs-lookup"><span data-stu-id="cce49-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2088">Verwenden, um zu bestimmen, welche Attribute festgelegt sind, die `And` Operator, um einen bitweisen Vergleich, der den Rückgabewert von führen die `GetAttr` -Funktion und der Wert des Dateiattributs werden sollen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="cce49-2089">Wenn das Ergebnis nicht 0 (null) ist, wird dieses Attribut für die angegebene Datei festgelegt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="cce49-2090">Beispielsweise ist der Rückgabewert der folgenden `And` Ausdruck ist NULL, wenn die `Archive` Attribut nicht festgelegt ist:</span><span class="sxs-lookup"><span data-stu-id="cce49-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="cce49-2091">Ein Wert ungleich NULL wird zurückgegeben, wenn die `Archive` -Attribut festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2092">Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und Verzeichnis oder Ordner zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="cce49-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2093"><paramref name="Pathname" /> ist ungültig oder enthält Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-2094">Zieldatei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="cce49-2095">And-Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2096">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-2097">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2098">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2098">Required.</span></span> <span data-ttu-id="cce49-2099">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2100">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2100">Required.</span></span> <span data-ttu-id="cce49-2101">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2102">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2103">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2104">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2105">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2105">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2106">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2107">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2108">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2109">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2110">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2111">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2112">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2112">Data</span></span>|<span data-ttu-id="cce49-2113">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2114">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2115">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2115">Empty</span></span>|  
|<span data-ttu-id="cce49-2116">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2117">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2118">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2119">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2120">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2121">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2122">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2123">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2124">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2125">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2126">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2127">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2128">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2129">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2130">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2131">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2132">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2133">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2133">Required.</span></span> <span data-ttu-id="cce49-2134">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2135">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2135">Required.</span></span> <span data-ttu-id="cce49-2136">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2137">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2138">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2139">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2140">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2140">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2141">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2142">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2143">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2144">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2145">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2146">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2147">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2147">Data</span></span>|<span data-ttu-id="cce49-2148">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2149">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2150">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2150">Empty</span></span>|  
|<span data-ttu-id="cce49-2151">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2152">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2153">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2154">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2155">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2156">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2157">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2158">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2159">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2160">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2161">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2162">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2163">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2164">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2165">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2166">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2167">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2168">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2168">Required.</span></span> <span data-ttu-id="cce49-2169">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2170">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2170">Required.</span></span> <span data-ttu-id="cce49-2171">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2172">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2173">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2174">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2175">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2175">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2176">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2177">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2178">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2179">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2180">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2181">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2182">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2182">Data</span></span>|<span data-ttu-id="cce49-2183">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2184">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2185">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2185">Empty</span></span>|  
|<span data-ttu-id="cce49-2186">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2187">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2188">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2189">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2190">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2191">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2192">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2193">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2194">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2195">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2196">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2197">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2198">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2199">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2200">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2201">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2202">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2203">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2203">Required.</span></span> <span data-ttu-id="cce49-2204">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2205">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2205">Required.</span></span> <span data-ttu-id="cce49-2206">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2207">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2208">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2209">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2210">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2210">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2211">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2212">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2213">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2214">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2215">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2216">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2217">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2217">Data</span></span>|<span data-ttu-id="cce49-2218">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2219">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2220">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2220">Empty</span></span>|  
|<span data-ttu-id="cce49-2221">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2222">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2223">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2224">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2225">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2226">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2227">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2228">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2229">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2230">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2231">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2232">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2233">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2234">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2235">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2236">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2237">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2238">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2238">Required.</span></span> <span data-ttu-id="cce49-2239">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2240">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2240">Required.</span></span> <span data-ttu-id="cce49-2241">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2242">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2243">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2244">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2245">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2245">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2246">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2247">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2248">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2249">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2250">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2251">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2252">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2252">Data</span></span>|<span data-ttu-id="cce49-2253">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2254">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2255">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2255">Empty</span></span>|  
|<span data-ttu-id="cce49-2256">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2257">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2258">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2259">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2260">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2261">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2262">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2263">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2264">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2265">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2266">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2267">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2268">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2269">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2270">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2271">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2272">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2273">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2273">Required.</span></span> <span data-ttu-id="cce49-2274">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2275">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2275">Required.</span></span> <span data-ttu-id="cce49-2276">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2277">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2278">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2279">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2280">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2280">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2281">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2282">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2283">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2284">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2285">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2286">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2287">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2287">Data</span></span>|<span data-ttu-id="cce49-2288">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2289">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2290">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2290">Empty</span></span>|  
|<span data-ttu-id="cce49-2291">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2292">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2293">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2294">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2295">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2296">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2297">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2298">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2299">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2300">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2301">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2302">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2303">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2304">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2305">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2306">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2307">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2308">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2308">Required.</span></span> <span data-ttu-id="cce49-2309">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2310">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2310">Required.</span></span> <span data-ttu-id="cce49-2311">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2312">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2313">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2314">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2315">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2315">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2316">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2317">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2318">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2319">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2320">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2321">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2322">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2322">Data</span></span>|<span data-ttu-id="cce49-2323">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2324">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2325">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2325">Empty</span></span>|  
|<span data-ttu-id="cce49-2326">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2327">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2328">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2329">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2330">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2331">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2332">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2333">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2334">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2335">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2336">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2337">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2338">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2339">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2340">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2341">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2342">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2343">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2343">Required.</span></span> <span data-ttu-id="cce49-2344">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2345">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2345">Required.</span></span> <span data-ttu-id="cce49-2346">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2347">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2348">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2349">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2350">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2350">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2351">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2352">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2353">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2354">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2355">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2356">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2357">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2357">Data</span></span>|<span data-ttu-id="cce49-2358">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2359">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2360">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2360">Empty</span></span>|  
|<span data-ttu-id="cce49-2361">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2362">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2363">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2364">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2365">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2366">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2367">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2368">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2369">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2370">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2371">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2372">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2373">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2374">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2375">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2376">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2377">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2378">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2378">Required.</span></span> <span data-ttu-id="cce49-2379">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2380">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2380">Required.</span></span> <span data-ttu-id="cce49-2381">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2382">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2383">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2384">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2385">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2385">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2386">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2387">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2388">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2389">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2390">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2391">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2392">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2392">Data</span></span>|<span data-ttu-id="cce49-2393">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2394">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2395">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2395">Empty</span></span>|  
|<span data-ttu-id="cce49-2396">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2397">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2398">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2399">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2400">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2401">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2402">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2403">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2404">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2405">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2406">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2407">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2408">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2409">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2410">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2411">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2412">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2413">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2413">Required.</span></span> <span data-ttu-id="cce49-2414">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2415">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2415">Required.</span></span> <span data-ttu-id="cce49-2416">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2417">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2418">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2419">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2420">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2420">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2421">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2422">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2423">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2424">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2425">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2426">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2427">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2427">Data</span></span>|<span data-ttu-id="cce49-2428">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2429">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2430">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2430">Empty</span></span>|  
|<span data-ttu-id="cce49-2431">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2432">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2433">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2434">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2435">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2436">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2437">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2438">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2439">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2440">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2441">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2442">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2443">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2444">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2445">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2446">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2447">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2448">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2448">Required.</span></span> <span data-ttu-id="cce49-2449">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2450">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2450">Required.</span></span> <span data-ttu-id="cce49-2451">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2452">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2453">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2454">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2455">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2455">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2456">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2457">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2458">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2459">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2460">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2461">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2462">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2462">Data</span></span>|<span data-ttu-id="cce49-2463">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2464">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2465">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2465">Empty</span></span>|  
|<span data-ttu-id="cce49-2466">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2467">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2468">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2469">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2470">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2471">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2472">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2473">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2474">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2475">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2476">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2477">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2478">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2479">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2480">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2481">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2482">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2483">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2483">Required.</span></span> <span data-ttu-id="cce49-2484">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="cce49-2485">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2485">Required.</span></span> <span data-ttu-id="cce49-2486">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="cce49-2487">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2488">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2489">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2490">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2490">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2491">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="cce49-2492">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2493">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2494">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="cce49-2495">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="cce49-2496">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="cce49-2497">Daten</span><span class="sxs-lookup"><span data-stu-id="cce49-2497">Data</span></span>|<span data-ttu-id="cce49-2498">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="cce49-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="cce49-2499">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="cce49-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="cce49-2500">Empty</span><span class="sxs-lookup"><span data-stu-id="cce49-2500">Empty</span></span>|  
|<span data-ttu-id="cce49-2501">#NULL#</span><span class="sxs-lookup"><span data-stu-id="cce49-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="cce49-2502">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="cce49-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="cce49-2503">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="cce49-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="cce49-2504">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="cce49-2505">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="cce49-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="cce49-2506">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="cce49-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="cce49-2507">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2508">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="cce49-2509">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2510">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2511">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2512">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="cce49-2513">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="cce49-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2514">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2515">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2516">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2517">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2518">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2518">Required.</span></span> <span data-ttu-id="cce49-2519">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="cce49-2520">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2520">Required.</span></span> <span data-ttu-id="cce49-2521">Ein beliebiger gültiger numerischer Ausdruck, der die Anzahl der zu lesenden Zeichen angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="cce49-2522">Gibt einen <see langword="String" />-Wert zurück, der Zeichen aus einer im Modus <see langword="Input" /> oder <see langword="Binary" /> geöffneten Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="cce49-2523">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="cce49-2524">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-2525">Eine Zeichenfolge, die Zeichen aus einer im <see langword="Input" />- oder <see langword="Binary" />-Modus geöffneten Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="cce49-2526">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2527">Die `InputString` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2528">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2529">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2529">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2530">Mit gelesene Daten der `InputString` Funktion ist in der Regel in eine Datei geschrieben, mit `Print` oder `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="cce49-2531">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="cce49-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="cce49-2532">Im Gegensatz zu den `Input` -Funktion, die `InputString` Funktionsergebnis ist die gelesenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="cce49-2533">Dies schließt Kommas, Wagenrücklaufzeichen, Zeilenvorschübe, Anführungszeichen und Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="cce49-2534">Dateien für geöffnet `Binary` für den Zugriff auf einem Versuch, lesen in der Datei mit der `InputString` Funktion bis `EOF` gibt `True` wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="cce49-2535">Verwenden Sie die `LOF` und `Loc` anstelle von Funktionen `EOF` beim Lesen von Binärdateien mit `InputString`, oder verwenden Sie `FileGet` bei Verwendung der `EOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2536">Beim Lesen aus Dateien, nehmen Sie keine Sicherheitsfragen die richtigen Entscheidungen über den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="cce49-2537">Z. B. möglicherweise eine Datei namens "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2538">Dieses Beispiel verwendet die `InputString` Funktion, um Zeichen aus einer Datei gelesen und zum Drucken der `Output` Fenster.</span><span class="sxs-lookup"><span data-stu-id="cce49-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="cce49-2539">In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere Zeilen mit Beispieldaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2540"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-2541"><paramref name="CharCount" /> &lt; 0 oder &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="cce49-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2542">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2543">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2544">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="cce49-2545">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2545">Required.</span></span> <span data-ttu-id="cce49-2546">Ein Zeichenfolgenausdruck, der einen oder mehrere Namen von zu löschenden Dateien angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="cce49-2547"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="cce49-2548">Löscht Dateien von einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="cce49-2548">Deletes files from a disk.</span></span> <span data-ttu-id="cce49-2549">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="cce49-2550">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2551">`Kill` unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="cce49-2552">**Sicherheitshinweis** zum Ausführen der `Kill` -Funktion erfordert `Read` und `PathDiscovery` flags der <xref:System.Security.Permissions.FileIOPermission> der ausgeführte Code erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="cce49-2553">Weitere Informationen finden Sie unter <xref:System.Security.SecurityException> [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="cce49-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2554">Dieses Beispiel verwendet die `Kill` Funktion, um eine Datei von einem Datenträger zu löschen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2555">Zieldatei(en) geöffnet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-2556">Zieldatei(en) nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="cce49-2557">Berechtigung verweigert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2558">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2558">Required.</span></span> <span data-ttu-id="cce49-2559">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-2560">Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="cce49-2561">Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="cce49-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2562">Die `LineInput` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2563">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2564">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2564">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2565">Mit gelesene Daten `LineInput` in der Regel in eine Datei geschrieben wird, mithilfe von `Print`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2566">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="cce49-2567">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="cce49-2568">Die `LineInput` Funktion liest Zeichen aus einer Datei ein, zu einem Zeitpunkt, bis er feststellt, dass einen Wagenrücklauf (`Chr(13)`) oder Wagenrücklauf/Zeilenvorschub (`Chr(13) + Chr(10)`) Sequenz.</span><span class="sxs-lookup"><span data-stu-id="cce49-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="cce49-2569">Carriage Return/Line feed Sequenzen werden übersprungen und nicht auf die Zeichenfolge angefügt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2570">Lesen aus einer Datei mithilfe der `LineInput` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2571">Dieses Beispiel verwendet die `LineInput` -Funktion zum Lesen einer Zeile aus einer sequenziellen Datei und einer Variablen zuweisen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="cce49-2572">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die mehrere Zeilen mit Beispieldaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="cce49-2573">Dateiende erreicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2574"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2575">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2576">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2577">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2578">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2578">Required.</span></span> <span data-ttu-id="cce49-2579">Eine beliebige gültige <see langword="Integer" />-Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="cce49-2580">Gibt einen Wert zurück, der die aktuelle Lese-/Schreibposition in einer geöffneten Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="cce49-2581">Die aktuelle Lese- oder Schreibposition in einer geöffneten Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2582">Die `Loc` Funktion ist nullbasiert, verwenden, um das erste Byte in einer Datei abrufen gibt 0 zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="cce49-2583">Die `Loc` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2584">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2585">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2585">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2586">Im folgenden wird den Rückgabewert für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="cce49-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="cce49-2587">Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-2587">Mode</span></span>|<span data-ttu-id="cce49-2588">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="cce49-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="cce49-2589">Anzahl der dem letzten Datensatz gelesen oder geschrieben werden, auf die Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="cce49-2590">Aktuelle Byte-Position in der Datei geteilt durch 128.</span><span class="sxs-lookup"><span data-stu-id="cce49-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="cce49-2591">Zurückgegebene Informationen werden jedoch von `Loc` für sequenzielle Dateien ist weder verwendet noch benötigt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="cce49-2592">Die Position des letzten Bytes gelesen bzw. geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2593">Dieses Beispiel verwendet die `Loc` Funktion, um die aktuelle Lese-/Schreibposition in einer offenen Datei zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="cce49-2594">In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere Zeilen mit Beispieldaten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2595">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-2596">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2597">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2598">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2599">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2599">Required.</span></span> <span data-ttu-id="cce49-2600">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-2601">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2602">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2603">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2604">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="cce49-2605">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="cce49-2606">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="cce49-2607">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="cce49-2608">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="cce49-2609">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2610">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="cce49-2611">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2612">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2613">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2614">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2614">Required.</span></span> <span data-ttu-id="cce49-2615">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="cce49-2616">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2616">Optional.</span></span> <span data-ttu-id="cce49-2617">Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="cce49-2618">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2619">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2620">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2621">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="cce49-2622">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="cce49-2623">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="cce49-2624">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="cce49-2625">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="cce49-2626">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2627">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="cce49-2628">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2629">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2630">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2631">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2631">Required.</span></span> <span data-ttu-id="cce49-2632">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="cce49-2633">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2633">Optional.</span></span> <span data-ttu-id="cce49-2634">Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="cce49-2635">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2635">Optional.</span></span> <span data-ttu-id="cce49-2636">Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="cce49-2637">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2638">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2639">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2640">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="cce49-2641">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="cce49-2642">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="cce49-2643">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="cce49-2644">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="cce49-2645">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2646">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="cce49-2647">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2648">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2649">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2650">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2650">Required.</span></span> <span data-ttu-id="cce49-2651">Ein ganzzahliger Wert, der eine gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-2652">Gibt die Größe in Byte einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-2653">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="cce49-2654">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-2655">Gibt die Größe in Byte einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-2656">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2657">Verwenden der `FileLen` Funktion, um die Länge einer Datei zu erhalten, die nicht geöffnet ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2658">Dieses Beispiel verwendet die `LOF` Funktion, um die Größe einer geöffneten Datei zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="cce49-2659">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die Beispieldaten enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2660">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-2661">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-2662">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="cce49-2663">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2663">Required.</span></span> <span data-ttu-id="cce49-2664">Ein Zeichenfolgenausdruck, der das zu erstellende Verzeichnis angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="cce49-2665"><paramref name="Path" /> enthält möglicherweise das Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="cce49-2666">Wenn kein Laufwerk angegeben wird, erstellt <see langword="MkDir" /> das neue Verzeichnis auf dem aktuellen Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="cce49-2667">Erstellt ein neues Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="cce49-2667">Creates a new directory.</span></span> <span data-ttu-id="cce49-2668">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="cce49-2669">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2670">Diese Funktion erstellt ein neues Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="cce49-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2671">Dieses Beispiel verwendet die `MkDir` Funktion, um ein Verzeichnis zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="cce49-2672">Wenn das Laufwerk nicht angegeben ist, wird das neue Verzeichnis auf dem aktuellen Laufwerk erstellt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-2673"><paramref name="Path" /> ist nicht angegeben oder leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="cce49-2674">Berechtigung verweigert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2675">Verzeichnis ist bereits vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="cce49-2676">Gewusst wie: Erstellen eines Verzeichnisses in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2677">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2677">Required.</span></span> <span data-ttu-id="cce49-2678">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="cce49-2679">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2679">Optional.</span></span> <span data-ttu-id="cce49-2680">0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="cce49-2681">Die <paramref name="Output" />-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="cce49-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="cce49-2682"><see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="cce49-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="cce49-2684">Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2685">Die `Print` und `PrintLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="cce49-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2686">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2687">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2687">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2688">`Print` Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings `PrintLine` umfasst einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="cce49-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="cce49-2689">Mit geschriebene Daten `Print` wird in der Regel aus einer Datei gelesen, mithilfe von `LineInput` oder `Input`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="cce49-2690">Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; `Print`, nichts wird ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="cce49-2691">Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden an den Begrenzungen der Registerkarte ", aber Mischen von Kommas ausgerichtet und `TAB` kann zu inkonsistente Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="cce49-2692">Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="cce49-2693">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="cce49-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="cce49-2694">Daten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat, die vom System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="cce49-2695">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="cce49-2696">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="cce49-2697">Aber wenn `Output` Daten aus der Liste ist `DBNull`, `Null` in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="cce49-2698">Für `Error` Daten, die Ausgabe angezeigt, als `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="cce49-2699">Die `Error` Schlüsselwort wird nicht unabhängig vom Gebietsschema übersetzt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="cce49-2700">Alle Daten, die in die Datei geschrieben werden, mithilfe von `Print` Dezimaltrennzeichen; ist, also die Daten ordnungsgemäß formatiert mit entsprechenden Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="cce49-2701">Wenn der Benutzer zur Ausgabe von Daten für die Verwendung durch mehrere Sprachversionen möchte `Write` verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="cce49-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="cce49-2702">Schreiben in eine Datei mit den `Print` oder `PrintLine` Functions erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2703">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2704">Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen zum Schreiben von Daten in eine Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2705">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2706">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2707">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2708">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2708">Required.</span></span> <span data-ttu-id="cce49-2709">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="cce49-2710">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2710">Optional.</span></span> <span data-ttu-id="cce49-2711">0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="cce49-2712">Die <paramref name="Output" />-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="cce49-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="cce49-2713"><see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="cce49-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="cce49-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="cce49-2715">Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2716">Die `Print` und `PrintLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="cce49-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2717">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2718">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2718">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2719">`Print` Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings`PrintLine` umfasst einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="cce49-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="cce49-2720">Mit geschriebene Daten `Print` wird in der Regel aus einer Datei gelesen, mithilfe von `LineInput` oder `Input`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="cce49-2721">Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; `Print`, nichts wird ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="cce49-2722">Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden an den Begrenzungen der Registerkarte ", aber Mischen von Kommas ausgerichtet und `TAB` kann zu inkonsistente Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="cce49-2723">Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="cce49-2724">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="cce49-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="cce49-2725">Daten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat, die vom System erkannt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="cce49-2726">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="cce49-2727">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="cce49-2728">Aber wenn `Output` Daten aus der Liste ist `DBNull`, `Null` in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="cce49-2729">Für `Error` Daten, die Ausgabe angezeigt, als `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="cce49-2730">Die `Error` Schlüsselwort wird nicht unabhängig vom Gebietsschema übersetzt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="cce49-2731">Alle Daten, die in die Datei geschrieben werden, mithilfe von `Print` Dezimaltrennzeichen; ist, also die Daten ordnungsgemäß formatiert mit entsprechenden Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="cce49-2732">Wenn der Benutzer zur Ausgabe von Daten für die Verwendung durch mehrere Sprachversionen möchte `Write` verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="cce49-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="cce49-2733">Schreiben in eine Datei mit den `Print` oder `PrintLine` Functions erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2734">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2735">Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen zum Schreiben von Daten in eine Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2736">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2737">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2738">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="cce49-2739">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2739">Required.</span></span> <span data-ttu-id="cce49-2740">Ein Zeichenfolgenausdruck, der den Namen und den Speicherort der vorhandenen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="cce49-2741"><paramref name="OldPath" /> kann das Verzeichnis und das Laufwerk der Datei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="cce49-2742">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2742">Required.</span></span> <span data-ttu-id="cce49-2743">Ein Zeichenfolgenausdruck, der den Namen und den Speicherort der neuen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="cce49-2744"><paramref name="NewPath" /> kann das Verzeichnis und das Laufwerk des Zielspeicherorts beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="cce49-2745">Der durch <paramref name="NewPath" /> angegebene Dateiname darf noch nicht vorhanden sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="cce49-2746">Benennt eine Datenträgerdatei oder ein Verzeichnis um.</span><span class="sxs-lookup"><span data-stu-id="cce49-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="cce49-2747">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="cce49-2748">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2749">Die`Rename` Funktion benennt eine Datei und verschiebt ihn in ein anderes Verzeichnis aus, wenn dies erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="cce49-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="cce49-2750">Die `Rename` Funktion kann eine Datei auf Laufwerken verschoben, aber es kann nur ein vorhandenes Verzeichnis umbenennen Wenn beide `NewPath` und `OldPath` auf dem gleichen Laufwerk befinden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="cce49-2751">`Rename` eine neue Datei oder ein Verzeichnis kann nicht erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="cce49-2752">Mithilfe der `Rename` erzeugt einen Fehler, Funktion, die auf eine geöffnete Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="cce49-2753">Sie müssen eine geöffnete Datei schließen, bevor Sie es umbenennen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="cce49-2754">`Rename` Argumente können nicht mehrere Zeichen (\*) und Platzhalter für einzelne Zeichen (?) enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce49-2755">Bei Verwendung `Rename` um eine Datei von einem nicht geschützten Speicherort auf einem geschützten Speicherort zu kopieren, behält die Datei weniger eingeschränkte Rechte.</span><span class="sxs-lookup"><span data-stu-id="cce49-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="cce49-2756">Stellen Sie sicher, dass kein potenzielles Sicherheitsrisiko entstehen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2757">Dieses Beispiel verwendet die `Rename` Funktion, um eine Datei umzubenennen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="cce49-2758">Für die Zwecke dieses Beispiels wird davon ausgegangen Sie, dass die Verzeichnisse, die bereits angegeben sind vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-2759">Der Pfad ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-2760">Die <paramref name="OldPath" />-Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2761">Kann nicht auf anderes Gerät umbenannt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="cce49-2762">Gewusst wie: Umbenennen einer Datei in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce49-2763">Schließt alle mit der <see langword="FileOpen" />-Funktion geöffneten Datenträgerdateien.</span><span class="sxs-lookup"><span data-stu-id="cce49-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-2764">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="cce49-2765">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2766">Die `Reset` -Funktion schließt alle aktive Dateien geöffnet, indem die `FileOpen` Funktion, und hat die gleiche Funktion wie `FileClose()` ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="cce49-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2767">Dieses Beispiel verwendet die `Reset` Funktion, um alle geöffneten Dateien geschlossen und der Inhalt der alle Puffer auf Datenträger geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="cce49-2768">Beachten Sie die Verwendung der `Object` Variable `FileNumber` als eine Zeichenfolge und eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="cce49-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="cce49-2769">End Statement</span><span class="sxs-lookup"><span data-stu-id="cce49-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="cce49-2770">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2770">Required.</span></span> <span data-ttu-id="cce49-2771">Ein Zeichenfolgenausdruck, der das zu entfernende Verzeichnis oder den zu entfernenden Ordner angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="cce49-2772"><paramref name="Path" /> kann das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="cce49-2773">Wenn kein Laufwerk angegeben wird, entfernt <see langword="RmDir" /> das Verzeichnis vom aktuellen Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="cce49-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="cce49-2774">Entfernt ein vorhandenes Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="cce49-2774">Removes an existing directory.</span></span> <span data-ttu-id="cce49-2775">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="cce49-2776">Weitere Informationen finden Sie unter <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2777">Ein Fehler auftritt, wenn Sie versuchen, `RmDir` in einem Verzeichnis, das Dateien enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="cce49-2778">Verwenden der `Kill` Funktion, um alle Dateien zu löschen, bevor Sie versuchen, ein Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2779">Dieses Beispiel verwendet die `RmDir` Funktion, um ein vorhandenes Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-2780"><paramref name="Path" /> ist nicht angegeben oder leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2781">Zielverzeichnis enthält Dateien.</span><span class="sxs-lookup"><span data-stu-id="cce49-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cce49-2782">Verzeichnis ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-2783">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="cce49-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-2784">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="cce49-2785">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2786">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2786">Required.</span></span> <span data-ttu-id="cce49-2787">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-2788">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="cce49-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-2789">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="cce49-2790">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="cce49-2791">Ein <see langword="Long" />-Wert, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt oder die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei festlegt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2792">`Seek` Gibt einen Wert zwischen 1 und 2.147.483.647 zurück (entspricht 2 ^ 31 - 1), inklusive.</span><span class="sxs-lookup"><span data-stu-id="cce49-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="cce49-2793">Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="cce49-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="cce49-2794">Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-2794">Mode</span></span>|<span data-ttu-id="cce49-2795">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="cce49-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="cce49-2796">Anzahl des nächsten Datensatzes gelesen bzw. geschrieben werden</span><span class="sxs-lookup"><span data-stu-id="cce49-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="cce49-2797">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="cce49-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="cce49-2798">Byte-Position, an dem der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="cce49-2799">Das erste Byte in einer Datei ist an Position 1, das zweite Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2800">Dieses Beispiel verwendet die `Seek` Funktion die aktuelle Dateiposition zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="cce49-2801">Im Beispiel wird vorausgesetzt `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="cce49-2802">Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="cce49-2803">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt zurück, die mit der der nächste Vorgang stattfindet, Byte-Position.</span><span class="sxs-lookup"><span data-stu-id="cce49-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="cce49-2804">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="cce49-2805">Dieses Beispiel verwendet die `Seek` Funktion zum Festlegen der Position für den nächsten Lesevorgang oder in einer Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="cce49-2806">Anders als in den Modi geöffneten Dateien `Random` Modus `Seek` die Byte-Position, an dem der nächste Vorgang tritt auf, legt sie fest.</span><span class="sxs-lookup"><span data-stu-id="cce49-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="cce49-2807">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2808">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-2809">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-2810">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2811">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2811">Required.</span></span> <span data-ttu-id="cce49-2812">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="cce49-2813">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2813">Required.</span></span> <span data-ttu-id="cce49-2814">Eine Zahl im Bereich 1–2.147.483.647 einschließlich, die angibt, wo die nächste Lese-/Schreiboperation erfolgen soll.</span><span class="sxs-lookup"><span data-stu-id="cce49-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="cce49-2815">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="cce49-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="cce49-2816">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="cce49-2817">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2818">`Seek` Gibt einen Wert zwischen 1 und 2.147.483.647 zurück (entspricht 2 ^ 31 - 1), inklusive.</span><span class="sxs-lookup"><span data-stu-id="cce49-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="cce49-2819">Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="cce49-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="cce49-2820">Modus</span><span class="sxs-lookup"><span data-stu-id="cce49-2820">Mode</span></span>|<span data-ttu-id="cce49-2821">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="cce49-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="cce49-2822">Anzahl des nächsten Datensatzes gelesen bzw. geschrieben werden</span><span class="sxs-lookup"><span data-stu-id="cce49-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="cce49-2823">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="cce49-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="cce49-2824">Byte-Position, an dem der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="cce49-2825">Das erste Byte in einer Datei ist an Position 1, das zweite Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="cce49-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2826">Dieses Beispiel verwendet die `Seek` Funktion die aktuelle Dateiposition zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="cce49-2827">Im Beispiel wird vorausgesetzt `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="cce49-2828">Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.</span><span class="sxs-lookup"><span data-stu-id="cce49-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="cce49-2829">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt zurück, die mit der der nächste Vorgang stattfindet, Byte-Position.</span><span class="sxs-lookup"><span data-stu-id="cce49-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="cce49-2830">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="cce49-2831">Dieses Beispiel verwendet die `Seek` Funktion zum Festlegen der Position für den nächsten Lesevorgang oder in einer Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="cce49-2832">Anders als in den Modi geöffneten Dateien `Random` Modus `Seek` die Byte-Position, an dem der nächste Vorgang tritt auf, legt sie fest.</span><span class="sxs-lookup"><span data-stu-id="cce49-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="cce49-2833">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2834">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="cce49-2835">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="cce49-2836">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="cce49-2837">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2837">Required.</span></span> <span data-ttu-id="cce49-2838">Ein Zeichenfolgenausdruck, der einen Dateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="cce49-2839"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="cce49-2840">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2840">Required.</span></span> <span data-ttu-id="cce49-2841">Konstanter oder numerischer Ausdruck, dessen Summe Dateiattribute angibt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="cce49-2842">Legt Attributinformationen für eine Datei fest.</span><span class="sxs-lookup"><span data-stu-id="cce49-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="cce49-2843">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="cce49-2844">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2845">Ein Laufzeitfehler tritt auf, wenn Sie versuchen, die die Attribute einer geöffneten Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="cce49-2846">Die `Attributes` Argument Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="cce49-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="cce49-2847">Wert</span><span class="sxs-lookup"><span data-stu-id="cce49-2847">Value</span></span>|<span data-ttu-id="cce49-2848">Konstante</span><span class="sxs-lookup"><span data-stu-id="cce49-2848">Constant</span></span>|<span data-ttu-id="cce49-2849">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="cce49-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="cce49-2850">Normal (Standard).</span><span class="sxs-lookup"><span data-stu-id="cce49-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="cce49-2851">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="cce49-2852">Ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="cce49-2853">Systemdatei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="cce49-2854">Volumebezeichnung</span><span class="sxs-lookup"><span data-stu-id="cce49-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="cce49-2855">Verzeichnis oder Ordner.</span><span class="sxs-lookup"><span data-stu-id="cce49-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="cce49-2856">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="cce49-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="cce49-2857">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2858">Diese Enumerationen werden von der Programmiersprache Visual Basic angegeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="cce49-2859">Die Namen können eine beliebige Stelle im Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2860">Dieses Beispiel verwendet die `SetAttr` -Funktion zum Festlegen der Attribute einer Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce49-2861"><paramref name="Attribute" />-Typ ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="cce49-2862">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2862">Required.</span></span> <span data-ttu-id="cce49-2863">Die Anzahl von Leerzeichen, die vor dem Anzeigen oder Ausgeben des nächsten Ausdrucks in einer Liste eingefügt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="cce49-2864">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="cce49-2865">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2866">Wenn `Count` ist kleiner als die Zeilenbreite der Ausgabe, die nächste Ausgabeposition sofort die Anzahl der ausgegebenen Leerzeichen folgt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="cce49-2867">Wenn`Count` ist größer als die Breite der Ausgabe, `SPC` die nächste Ausgabeposition unter Verwendung der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="cce49-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="cce49-2868">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="cce49-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="cce49-2869">Beispielsweise ist die aktuelle Ausgabeposition 24, Breite der Ausgabe ist 80, und geben Sie `SPC(90)`, die nächste Ausgabe beginnt an Position 34 (aktuelle Ausgabeposition + die restlichen 90/80).</span><span class="sxs-lookup"><span data-stu-id="cce49-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="cce49-2870">Ist der Unterschied zwischen der aktuellen Ausgabeposition und der Breite der Ausgabe weniger als `Count` (oder `Count` `Mod` *Breite*), wird die `SPC` Funktion springt an den Anfang der nächsten Zeile und generiert Leerzeichen gleich `Count` -(*Breite* - *aktuelleAusgabeposition*).</span><span class="sxs-lookup"><span data-stu-id="cce49-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2871">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2872">Dieses Beispiel verwendet die `SPC` -Funktion zum Positionieren der Ausgabe in einer Datei und in der **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="cce49-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="cce49-2873">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-2874">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce49-2875">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="cce49-2876">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2877">Wenn die aktuelle Ausgabeposition in der aktuellen Zeile größer als `Column`, `TAB` der Spaltenwert gleich ans `Column` in der nächsten Ausgabezeile.</span><span class="sxs-lookup"><span data-stu-id="cce49-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="cce49-2878">Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Ausgabeposition in Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="cce49-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="cce49-2879">Wenn `Column` ist größer als die Breite der Ausgabe, `TAB` die nächste Ausgabeposition unter Verwendung der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="cce49-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="cce49-2880">Mod Spaltenbreite</span><span class="sxs-lookup"><span data-stu-id="cce49-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="cce49-2881">Z. B. wenn *Breite* ist 80, und geben Sie Sie `TAB(90)`, beginnt die nächste Ausgabe in der Spalte 10 (der Rest von 90/80).</span><span class="sxs-lookup"><span data-stu-id="cce49-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="cce49-2882">Wenn `Column` ist kleiner als die aktuelle Ausgabeposition, beginnt die Ausgabe in der nächsten Zeile an die berechneten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="cce49-2883">Wenn die berechnete Position größer als die aktuelle Position ist, Drucken beginnt die Ausgabe an die berechnete Position in der gleichen Zeile an.</span><span class="sxs-lookup"><span data-stu-id="cce49-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="cce49-2884">Die am weitesten links stehende Ausgabeposition in eine Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="cce49-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="cce49-2885">Bei Verwendung der `Print` oder `PrintLine` Funktionen in Dateien, die Ausgabeposition ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="cce49-2886">Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="cce49-2887">Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2888">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite der Buchstaben enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2889">Dieses Beispiel verwendet die `TAB` -Funktion zum Positionieren der Ausgabe in einer Datei und in der **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="cce49-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="cce49-2890">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="cce49-2891">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2891">Optional.</span></span> <span data-ttu-id="cce49-2892">Die Spaltennummer, zu der vor dem Anzeigen oder Drucken des nächsten Ausdrucks in einer Liste gewechselt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="cce49-2893">Wenn der Wert nicht angegeben wird, verschiebt <see langword="TAB" /> die Einfügemarke an den Anfang der nächsten Ausgabezone.</span><span class="sxs-lookup"><span data-stu-id="cce49-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="cce49-2894">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="cce49-2895">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2896">Wenn die aktuelle Ausgabeposition in der aktuellen Zeile überschreitet `Column`, `TAB` der Spaltenwert gleich ans `Column` in der nächsten Ausgabezeile.</span><span class="sxs-lookup"><span data-stu-id="cce49-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="cce49-2897">Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Ausgabeposition in Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="cce49-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="cce49-2898">Wenn `Column` ist größer als die Breite der Ausgabe, `TAB` die nächste Ausgabeposition unter Verwendung der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="cce49-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="cce49-2899">Mod Spaltenbreite</span><span class="sxs-lookup"><span data-stu-id="cce49-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="cce49-2900">Z. B. wenn *Breite* ist 80, und geben Sie Sie `TAB(90)`, beginnt die nächste Ausgabe in der Spalte 10 (der Rest von 90/80).</span><span class="sxs-lookup"><span data-stu-id="cce49-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="cce49-2901">Wenn `Column` ist kleiner als die aktuelle Ausgabeposition, beginnt die Ausgabe in der nächsten Zeile an die berechneten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="cce49-2902">Wenn die berechnete Position größer als die aktuelle Position ist, Drucken beginnt die Ausgabe an die berechnete Position in der gleichen Zeile.</span><span class="sxs-lookup"><span data-stu-id="cce49-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="cce49-2903">Die am weitesten links stehende Ausgabeposition in eine Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="cce49-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="cce49-2904">Bei Verwendung der `Print` oder `PrintLine` Funktionen in Dateien, die Ausgabeposition ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="cce49-2905">Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion.</span><span class="sxs-lookup"><span data-stu-id="cce49-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="cce49-2906">Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce49-2907">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite der Buchstaben enthalten.</span><span class="sxs-lookup"><span data-stu-id="cce49-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2908">Dieses Beispiel verwendet die `TAB` -Funktion zum Positionieren der Ausgabe in einer Datei und in der **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="cce49-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="cce49-2909">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce49-2910">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2911">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2912">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2913">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2913">Required.</span></span> <span data-ttu-id="cce49-2914">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="cce49-2915">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2916">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2917">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2918">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="cce49-2919">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="cce49-2920">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="cce49-2921">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="cce49-2922">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="cce49-2923">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2924">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="cce49-2925">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2926">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2927">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2928">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2928">Required.</span></span> <span data-ttu-id="cce49-2929">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="cce49-2930">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2930">Optional.</span></span> <span data-ttu-id="cce49-2931">Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="cce49-2932">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2933">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2934">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2935">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="cce49-2936">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="cce49-2937">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="cce49-2938">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="cce49-2939">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="cce49-2940">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2941">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="cce49-2942">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2943">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2944">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2945">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2945">Required.</span></span> <span data-ttu-id="cce49-2946">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="cce49-2947">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2947">Optional.</span></span> <span data-ttu-id="cce49-2948">Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="cce49-2949">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2949">Optional.</span></span> <span data-ttu-id="cce49-2950">Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="cce49-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="cce49-2951">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="cce49-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="cce49-2952">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="cce49-2953">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="cce49-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2954">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="cce49-2955">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="cce49-2956">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="cce49-2957">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="cce49-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="cce49-2958">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="cce49-2959">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2960">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="cce49-2961">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2962">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2963">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2964">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2964">Required.</span></span> <span data-ttu-id="cce49-2965">Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="cce49-2966">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-2966">Optional.</span></span> <span data-ttu-id="cce49-2967">Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="cce49-2968">Schreibt Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="cce49-2969">Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-2970">Die `Write` und `WriteLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="cce49-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-2971">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-2972">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-2972">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-2973">Wenn Sie weglassen `Output`, eine leere Zeile wird in der Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="cce49-2974">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="cce49-2975">Im Gegensatz zu den `Print` -Funktion, die `Write` Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen an, wie sie in der Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="cce49-2976">Sie müssen keinen explizite Trennzeichen in der Liste anzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="cce49-2977">Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Datum, Null, und `Error` Datenformate unterstützt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="cce49-2978">Die folgenden Annahmen für die universelle gefolgt sind, damit die Daten immer gelesen werden können und unter Verwendung ordnungsgemäß interpretiert `Input`, unabhängig vom Gebietsschema:</span><span class="sxs-lookup"><span data-stu-id="cce49-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="cce49-2979">Numerische Daten werden immer geschrieben mit einem Punkt als Dezimaltrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="cce49-2980">Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="cce49-2981">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="cce49-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="cce49-2982">Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="cce49-2983">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="cce49-2984">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="cce49-2985">Allerdings für null-Daten `#NULL#` geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="cce49-2986">Für `Error` Daten, die Ausgabe angezeigt, als `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="cce49-2987">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="cce49-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="cce49-2988">`WriteLine` Fügt ein Zeilenumbruchzeichen (d. h. ein Wagenrücklauf-/Zeilenvorschubzeichen, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="cce49-2989">Sie können Anführungszeichen in einer Zeichenfolge mit doppelten Anführungszeichen einbetten oder "".</span><span class="sxs-lookup"><span data-stu-id="cce49-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="cce49-2990">Ein auf ein Objekt angewendeter</span><span class="sxs-lookup"><span data-stu-id="cce49-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="cce49-2991">Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="cce49-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="cce49-2992">Schreiben in eine Datei mit den `Write` oder `WriteLine` Functions erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-2993">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-2994">Dieses Beispiel verwendet die `Write` Funktion zum Schreiben von Rohdaten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce49-2995">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="cce49-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-2996">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-2997">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-2998">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="cce49-2999">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="cce49-2999">Required.</span></span> <span data-ttu-id="cce49-3000">Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="cce49-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="cce49-3001">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="cce49-3001">Optional.</span></span> <span data-ttu-id="cce49-3002">Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="cce49-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="cce49-3003">Schreibt Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="cce49-3004">Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="cce49-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce49-3005">Die `Write` und `WriteLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="cce49-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="cce49-3006">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="cce49-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="cce49-3007">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="cce49-3007">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="cce49-3008">Wenn Sie weglassen `Output`, eine leere Zeile wird in der Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="cce49-3009">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="cce49-3010">Im Gegensatz zu den `Print` -Funktion, die `Write` Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen an, wie sie in der Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="cce49-3011">Sie müssen keinen explizite Trennzeichen in der Liste anzugeben.</span><span class="sxs-lookup"><span data-stu-id="cce49-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="cce49-3012">Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Datum, Null, und `Error` Datenformate unterstützt werden.</span><span class="sxs-lookup"><span data-stu-id="cce49-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="cce49-3013">Die folgenden Annahmen für die universelle gefolgt sind, damit die Daten immer gelesen werden können und unter Verwendung ordnungsgemäß interpretiert `Input`, unabhängig vom Gebietsschema:</span><span class="sxs-lookup"><span data-stu-id="cce49-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="cce49-3014">Numerische Daten werden immer geschrieben mit einem Punkt als Dezimaltrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="cce49-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="cce49-3015">Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="cce49-3016">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="cce49-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="cce49-3017">Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="cce49-3018">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="cce49-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="cce49-3019">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="cce49-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="cce49-3020">Allerdings für null-Daten `#NULL#` geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="cce49-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="cce49-3021">Für `Error` Daten, die Ausgabe angezeigt, als `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="cce49-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="cce49-3022">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="cce49-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="cce49-3023">`WriteLine` Fügt ein Zeilenumbruchzeichen (d. h. ein Wagenrücklauf-/Zeilenvorschubzeichen, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="cce49-3024">Sie können Anführungszeichen in einer Zeichenfolge mit doppelten Anführungszeichen einbetten oder "".</span><span class="sxs-lookup"><span data-stu-id="cce49-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="cce49-3025">Ein auf ein Objekt angewendeter</span><span class="sxs-lookup"><span data-stu-id="cce49-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="cce49-3026">Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="cce49-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="cce49-3027">Schreiben in eine Datei mit den `Write` oder `WriteLine` Functions erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="cce49-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="cce49-3028">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="cce49-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce49-3029">Dieses Beispiel verwendet die `Write` Funktion zum Schreiben von Rohdaten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="cce49-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="cce49-3030">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="cce49-3031">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cce49-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="cce49-3032">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="cce49-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
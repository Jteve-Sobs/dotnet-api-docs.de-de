<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd89b74bd43a5c00e05fb30d35af877c58d51705" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53227867" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0bd66-101">Das <see langword="FileSystem" />-Modul enthält Prozeduren, mit denen Datei-, Verzeichnis- oder Ordner- und Systemoperationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="0bd66-102">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als bei Verwendung des <see langword="FileSystem" />-Moduls.</span><span class="sxs-lookup"><span data-stu-id="0bd66-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="0bd66-103">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-104">Dieses Modul unterstützt die Schlüsselwörter von Visual Basic und die Laufzeitbibliothek-Member, die auf Dateien und Ordner zugreifen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-105">Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und Verzeichnis oder Ordner zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="0bd66-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="0bd66-106">Verzeichnisse und Dateien: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="0bd66-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="0bd66-107">Eingabe und Ausgabe: Zusammenfassung</span><span class="sxs-lookup"><span data-stu-id="0bd66-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="0bd66-108">Schlüsselwörter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="0bd66-109">Member der Visual Basic-Laufzeitbibliothek</span><span class="sxs-lookup"><span data-stu-id="0bd66-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="0bd66-110">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-110">Required.</span></span> <span data-ttu-id="0bd66-111">Ein <see langword="String" />-Ausdruck, der das Verzeichnis oder den Ordner bezeichnet, der zum neuen Verzeichnis oder Ordner wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="0bd66-112"><paramref name="Path" /> enthält möglicherweise das Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="0bd66-113">Wenn kein Laufwerk angegeben wird, ändert <see langword="ChDir" /> das Standardverzeichnis oder den Ordner in das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-114">Ändert das aktuelle Verzeichnis oder den aktuellen Ordner.</span><span class="sxs-lookup"><span data-stu-id="0bd66-114">Changes the current directory or folder.</span></span> <span data-ttu-id="0bd66-115">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung als die <see langword="ChDir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="0bd66-116">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-117">Die `ChDir` -Funktion ändert das Standardverzeichnis, aber nicht das Standardlaufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="0bd66-118">Z. B. wenn das Standard-Laufwerk C ist, die folgende Anweisung ändert sich das Standardverzeichnis auf Laufwerk D, C, bleibt das Standardlaufwerk jedoch:</span><span class="sxs-lookup"><span data-stu-id="0bd66-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="0bd66-119">Sie können relative machen verzeichnisänderungen wird durch zwei Punkte wie folgt eingeben:</span><span class="sxs-lookup"><span data-stu-id="0bd66-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-120">Die `ChDir` -Funktion erfordert eine Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="0bd66-121">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und.</span><span class="sxs-lookup"><span data-stu-id="0bd66-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-122">Dieses Beispiel verwendet die `ChDir` Funktion, um das aktuelle Verzeichnis oder Ordner zu ändern.</span><span class="sxs-lookup"><span data-stu-id="0bd66-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-123"><paramref name="Path" /> ist leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-124">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="0bd66-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="0bd66-125">Gewusst wie: Analysieren von Dateipfaden in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="0bd66-126">Erstellen, Löschen und Verschieben von Dateien und Verzeichnissen in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-127">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="0bd66-128">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-128">Required.</span></span> <span data-ttu-id="0bd66-129">Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="0bd66-130">Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="0bd66-131">Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="0bd66-132">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-133">Die `ChDrive` -Funktion erfordert eine Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="0bd66-134">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="0bd66-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-135">Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="0bd66-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="0bd66-136">Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-137">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="0bd66-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-138">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="0bd66-139">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-139">Required.</span></span> <span data-ttu-id="0bd66-140">Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="0bd66-141">Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="0bd66-142">Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="0bd66-143">Ändert das aktuelle Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-144">Die `ChDrive` -Funktion erfordert eine Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="0bd66-145">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="0bd66-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-146">Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern.</span><span class="sxs-lookup"><span data-stu-id="0bd66-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="0bd66-147">Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-148">Angegebenes Laufwerk ungültig oder nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="0bd66-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-149">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-150">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-150">Returns a string representing the current path.</span></span> <span data-ttu-id="0bd66-151">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="0bd66-152">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bd66-153">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-153">Returns a string representing the current path.</span></span> <span data-ttu-id="0bd66-154">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="0bd66-155">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-156">Eine Zeichenfolge mit dem aktuellen Pfad.</span><span class="sxs-lookup"><span data-stu-id="0bd66-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0bd66-157">Dieses Beispiel verwendet die `CurDir` Funktion den aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="0bd66-158">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-158">Optional.</span></span> <span data-ttu-id="0bd66-159">Ein <see langword="Char" />-Ausdruck, der ein vorhandenes Laufwerk angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="0bd66-160">Wenn kein Laufwerk angegeben wird oder <paramref name="Drive" /> eine Zeichenfolgen der Länge 0 (null) ("") ist, gibt <see langword="CurDir" /> den Pfad für das aktuelle Laufwerk zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-161">Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-161">Returns a string representing the current path.</span></span> <span data-ttu-id="0bd66-162">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="0bd66-163">Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-164">Eine Zeichenfolge mit dem aktuellen Pfad.</span><span class="sxs-lookup"><span data-stu-id="0bd66-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0bd66-165">Dieses Beispiel verwendet die `CurDir` Funktion den aktuellen Pfad zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-166">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="0bd66-167">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="0bd66-168">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bd66-169">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="0bd66-170">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="0bd66-171">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="0bd66-172">Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-173">Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="0bd66-174">`VbVolume` Gibt die Volumebezeichnung des Laufwerks anstelle von einem bestimmten Dateinamen zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="0bd66-175">Geben Sie an einer `PathName` beim ersten, die Sie Aufrufen der `Dir` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="0bd66-176">Um das nächste Element abzurufen, können Sie, aufeinander folgende Aufrufe der `Dir` Funktion ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-177">Zur fehlerfreien Ausführung der `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags der <xref:System.Security.Permissions.FileIOPermission> der ausgeführte Code erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="0bd66-178">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="0bd66-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="0bd66-179">Die `Attributes` Argument Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="0bd66-180">Wert</span><span class="sxs-lookup"><span data-stu-id="0bd66-180">Value</span></span>|<span data-ttu-id="0bd66-181">Konstante</span><span class="sxs-lookup"><span data-stu-id="0bd66-181">Constant</span></span>|<span data-ttu-id="0bd66-182">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="0bd66-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="0bd66-183">Standard.</span><span class="sxs-lookup"><span data-stu-id="0bd66-183">Default.</span></span> <span data-ttu-id="0bd66-184">Gibt die Dateien ohne Attribute an.</span><span class="sxs-lookup"><span data-stu-id="0bd66-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="0bd66-185">Gibt an, schreibgeschützte Dateien sowie Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="0bd66-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="0bd66-186">Gibt an, alle Dateien, und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="0bd66-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="0bd66-187">Gibt an, das Systemdateien und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="0bd66-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="0bd66-188">Gibt die Volumebezeichnung an. Wenn alle anderen Attribute angegeben wird, `vbVolume` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="0bd66-189">Gibt an, Verzeichnissen oder Ordnern und auch Dateien ohne Attribute.</span><span class="sxs-lookup"><span data-stu-id="0bd66-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="0bd66-190">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="0bd66-191">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-192">Diese Enumerationen werden von Visual Basic-Sprache angegeben und können überall in Ihrem Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-193">Dieses Beispiel verwendet die `Dir` Funktion zu überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="0bd66-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="0bd66-194">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-194">Optional.</span></span> <span data-ttu-id="0bd66-195"><see langword="String" />-Ausdruck, der einen Dateinamen, ein Verzeichnis, einen Ordnernamen oder eine Volumebezeichnung des Laufwerks angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-195"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="0bd66-196">Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <paramref name="PathName" /> nicht gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes"><span data-ttu-id="0bd66-197">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-197">Optional.</span></span> <span data-ttu-id="0bd66-198">Enumeration oder numerischer Ausdruck, dessen Wert Dateiattribute angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-198">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="0bd66-199">Wenn der Wert nicht angegeben wird, gibt <see langword="Dir" /> Dateien zurück, die mit <paramref name="PathName" /> übereinstimmen, aber keine Attribute besitzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-199">If omitted, <see langword="Dir" /> returns files that match <paramref name="PathName" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="0bd66-200">Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="0bd66-201">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="0bd66-202">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="0bd66-203">Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-204">Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="0bd66-205">`VbVolume` Gibt die Volumebezeichnung des Laufwerks anstelle von einem bestimmten Dateinamen zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="0bd66-206">Geben Sie an einer `PathName` beim ersten, die Sie Aufrufen der `Dir` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="0bd66-207">Um das nächste Element abzurufen, können Sie, aufeinander folgende Aufrufe der `Dir` Funktion ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-208">Zur fehlerfreien Ausführung der `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags der <xref:System.Security.Permissions.FileIOPermission> der ausgeführte Code erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="0bd66-209">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="0bd66-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="0bd66-210">Die `Attributes` Argument Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="0bd66-211">Wert</span><span class="sxs-lookup"><span data-stu-id="0bd66-211">Value</span></span>|<span data-ttu-id="0bd66-212">Konstante</span><span class="sxs-lookup"><span data-stu-id="0bd66-212">Constant</span></span>|<span data-ttu-id="0bd66-213">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="0bd66-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="0bd66-214">Standard.</span><span class="sxs-lookup"><span data-stu-id="0bd66-214">Default.</span></span> <span data-ttu-id="0bd66-215">Gibt Dateien an, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="0bd66-216">Gibt an, nur-Lese Dateien zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="0bd66-217">Gibt die versteckte Dateien zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="0bd66-218">Gibt an, der Systemdateien, zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="0bd66-219">Gibt die Volumebezeichnung an. Wenn alle anderen Attribute angegeben wird, `vbVolume` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="0bd66-220">Gibt an, Verzeichnissen oder Ordnern, zusätzlich zu den Dateien, die keine Attribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="0bd66-221">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="0bd66-222">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-223">Diese Enumerationen werden von Visual Basic-Sprache angegeben und können überall in Ihrem Code anstelle von tatsächlichen Werten verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-224">Dieses Beispiel verwendet die `Dir` Funktion zu überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="0bd66-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-225">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-225">Required.</span></span> <span data-ttu-id="0bd66-226">Ein <see langword="Integer" /> mit einer beliebigen gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-226">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-227">Gibt den booleschen Wert <see langword="True" /> zurück, wenn das Ende einer für <see langword="Random" />- oder sequenziellen <see langword="Input" />-Zugriff geöffneten Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="0bd66-228">Gibt den booleschen Wert <see langword="True" /> zurück, wenn das Ende einer für <see langword="Random" />- oder sequenziellen <see langword="Input" />-Zugriff geöffneten Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-229">Verwendung `EOF` zur Vermeidung des Fehlers, bei dem Versuch, nach dem Ende einer Datei abrufen von Eingabe-generiert werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="0bd66-230">Die `EOF` -Funktion zurückgegeben `False` bis Ende der Datei erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="0bd66-231">Dateien für geöffnet `Random` oder `Binary` Zugriff `EOF` gibt `False` bis zur letzten Ausführung `FileGet` Funktion kann nicht zum Lesen der vollständigen Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="0bd66-232">Dateien für geöffnet `Binary` für den Zugriff auf einen Versuch, lesen Sie die Datei mit der `Input` Funktion bis `EOF` gibt `True` wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="0bd66-233">Verwenden Sie die `LOF` und `Loc` Funktionen anstelle von `EOF` beim Lesen von Binärdateien mit `Input`, oder verwenden Sie `Get` bei Verwendung der `EOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="0bd66-234">Dateien für geöffnet `Output`, `EOF` gibt immer `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-235">Dieses Beispiel verwendet die `EOF` Funktion, um das Ende einer Datei zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="0bd66-236">In diesem Beispiel wird vorausgesetzt, dass `Testfile` ist eine Textdatei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-237">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-237">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-238">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-238">Required.</span></span> <span data-ttu-id="0bd66-239"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-239"><see langword="Integer" />.</span></span> <span data-ttu-id="0bd66-240">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-240">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-241">Gibt eine Enumeration zurück, die den Dateimodus für Dateien darstellt, die mit der <see langword="FileOpen" />-Funktion geöffnet wurden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-242">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="FileAttr" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="0bd66-243">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="0bd66-244">Die folgenden Enumerationswerte geben den Dateizugriffsmodus an:</span><span class="sxs-lookup"><span data-stu-id="0bd66-244">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="0bd66-245">Wert</span><span class="sxs-lookup"><span data-stu-id="0bd66-245">Value</span></span> 
 </term><description> <span data-ttu-id="0bd66-246">Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-246">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="0bd66-247">1</span><span class="sxs-lookup"><span data-stu-id="0bd66-247">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="0bd66-248">2</span><span class="sxs-lookup"><span data-stu-id="0bd66-248">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="0bd66-249">4</span><span class="sxs-lookup"><span data-stu-id="0bd66-249">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="0bd66-250">8</span><span class="sxs-lookup"><span data-stu-id="0bd66-250">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="0bd66-251">32</span><span class="sxs-lookup"><span data-stu-id="0bd66-251">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-252">Diese Funktion gibt eine Enumeration, die den Dateimodus mit geöffneten Dateien darstellt. die `FileOpen` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-253">Dieses Beispiel verwendet die `FileAttr` Funktion, die den Dateimodus, einer geöffneten Datei zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-254">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-254">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="0bd66-255">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-255">Optional.</span></span> <span data-ttu-id="0bd66-256">Parameterarray von 0 oder mehr zu schließenden Channels.</span><span class="sxs-lookup"><span data-stu-id="0bd66-256">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="0bd66-257">Schließt die Eingabe/Ausgabe (E/A) für eine Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-258"><see langword="My" /> ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-258"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="0bd66-259">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-260">Die `FileClose` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-261">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-262">Weitere Informationen finden Sie unter [Vorgehensweise: Lesen von Text aus Dateien mit einem StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [Vorgehensweise: Schreiben von Text in Dateien mit einem StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), und [Exemplarische Vorgehensweise: Bearbeiten von Dateien und Verzeichnissen in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="0bd66-263">Wenn Sie weglassen `FileNumbers`, alle aktive Dateien geöffnet werden, indem die `FileOpen` Funktion geschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="0bd66-264">Beim Schließen von Dateien, die für geöffnet wurden `Output` oder `Append`, wird der endgültige Puffer der Ausgabe in die Betriebssystempuffer für diese Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="0bd66-265">Alle geschlossenen zugeordnete Pufferspeicher Datei wird veröffentlicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="0bd66-266">Wenn die `FileClose` Funktion ausgeführt wird, wird die Zuordnung einer Datei mit der Datei Zahl enden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-267">Dieses Beispiel verwendet die `FileClose` Funktion, um eine Datei zu schließen, die für geöffnet `Input`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-268"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-268"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="0bd66-269">End Statement</span><span class="sxs-lookup"><span data-stu-id="0bd66-269">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="0bd66-270">Stop-Anweisung (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-270">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-271">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-271">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="0bd66-272">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-272">Required.</span></span> <span data-ttu-id="0bd66-273">Ein <see langword="String" />-Ausdruck, der den Namen der zu kopierenden Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-273"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="0bd66-274"><paramref name="Source" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Quelldatei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-274"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="0bd66-275">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-275">Required.</span></span> <span data-ttu-id="0bd66-276">Ein <see langword="String" />-Ausdruck, der den Zieldateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-276"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="0bd66-277"><paramref name="Destination" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Zieldatei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-277"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="0bd66-278">Kopiert eine Datei</span><span class="sxs-lookup"><span data-stu-id="0bd66-278">Copies a file.</span></span> <span data-ttu-id="0bd66-279">Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="0bd66-280">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-281">Wenn Sie versuchen, Sie verwenden die `FileCopy` funktionieren für eine aktuell geöffneten Datei ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="0bd66-282">`FileCopy` erfordert volle Vertrauenswürdigkeit auf dem lokalen Laufwerk funktioniert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-283">Dieses Beispiel verwendet die `FileCopy` Funktion, um eine Datei in ein anderes kopieren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="0bd66-284">Für dieses Beispiel wird angenommen, dass `SrcFile` ist eine Datei, die Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-285"><paramref name="Source" /> oder <paramref name="Destination" /> ist ungültig oder nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-285"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-286">Datei ist bereits geöffnet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-286">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-287">Die Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-287">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="0bd66-288">Gewusst wie: Erstellen einer Kopie einer Datei in einem anderen Verzeichnis in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="0bd66-289">Gewusst wie: Erstellen einer Kopie einer Datei im gleichen Ordner in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="0bd66-290">Gewusst wie: Kopieren eines Verzeichnisses in ein anderes Verzeichnis in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-290">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="0bd66-291">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-291">Required.</span></span> <span data-ttu-id="0bd66-292">Ein <see langword="String" />-Ausdruck, der einen Dateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-292"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="0bd66-293"><paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-293"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-294">Gibt einen <see langword="Date" />-Wert zurück, der Datum und Uhrzeit des Schreibvorgangs in einer Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="0bd66-295">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="0bd66-296">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span><span class="sxs-lookup"><span data-stu-id="0bd66-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="0bd66-297">Ein <see langword="Date" />-Wert, der Datum und Uhrzeit der Erstellung oder letzten Änderung der Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-297"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0bd66-298">Dieses Beispiel verwendet die `FileDateTime` Funktion, um das Datum zu bestimmen und die Uhrzeit einer Datei erstellt oder zuletzt geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="0bd66-299">Das Format des Datums und der angezeigte Uhrzeit basiert auf den gebietsschemaeinstellungen des Systems.</span><span class="sxs-lookup"><span data-stu-id="0bd66-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-300"><paramref name="PathName" /> ist ungültig oder enthält Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-300"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-301">Zieldatei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-301">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-302">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-302">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-303">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-303">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-304">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-305">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-306">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-306">Required.</span></span> <span data-ttu-id="0bd66-307">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-307">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-308">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-308">Required.</span></span> <span data-ttu-id="0bd66-309">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-309">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-310">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-310">Optional.</span></span> <span data-ttu-id="0bd66-311">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-312">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-312">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-313">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-314">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="0bd66-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-315">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-316">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-317">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-318">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-319">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-320">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-321">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-321">Random Mode</span></span>  
 <span data-ttu-id="0bd66-322">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-323">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-324">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-325">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-326">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-327">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-328">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-329">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-330">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-331">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-332">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-333">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-334">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-335">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-336">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-337">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-338">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-339">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-340">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-341">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-342">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-343">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-344">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-345">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-346">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-347">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-348">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-349">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-349">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-350">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-351">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-352">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-353">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-354">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-355">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-356">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-357">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-358">Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-359"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-359"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-360">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-361">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-361">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-362">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-362">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-363">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-363">Required.</span></span> <span data-ttu-id="0bd66-364">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-364">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-365">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-365">Required.</span></span> <span data-ttu-id="0bd66-366">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-366">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-367">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-367">Optional.</span></span> <span data-ttu-id="0bd66-368">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-369">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-369">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-370">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-371">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-372">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-373">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-374">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-375">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-376">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-377">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-378">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-378">Random Mode</span></span>  
 <span data-ttu-id="0bd66-379">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-380">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-381">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-382">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-383">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-384">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-385">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-386">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-387">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-388">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-389">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-390">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-391">Wenn der Deskriptor nicht verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-391">If the descriptor is not used.</span></span> <span data-ttu-id="0bd66-392">Übergeben Sie die Größe und die Grenzen des Arrays in `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-393">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-394">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-395">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-396">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-397">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-398">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-399">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-400">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-401">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-402">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-403">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-404">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-405">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-406">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-407">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-407">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-408">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-409">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-410">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-411">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-412">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-413">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-414">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-415">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-416">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-417"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-417"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-418">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-418">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-419">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-419">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-420">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-420">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-421">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-421">Required.</span></span> <span data-ttu-id="0bd66-422">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-422">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-423">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-423">Required.</span></span> <span data-ttu-id="0bd66-424">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-424">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-425">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-425">Optional.</span></span> <span data-ttu-id="0bd66-426">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-427">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-427">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-428">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-429">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-430">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-431">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-432">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-433">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-434">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-435">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-436">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-436">Random Mode</span></span>  
 <span data-ttu-id="0bd66-437">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-438">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-439">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-440">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-441">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-442">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-443">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-444">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-445">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-446">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-447">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-448">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-449">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-450">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-451">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-452">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-453">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-454">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-455">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-456">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-457">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-458">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-459">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-460">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-461">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-462">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-463">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-464">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-464">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-465">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-466">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-467">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-468">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-469">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-470">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-471">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-472">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-473">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-474"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-475">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-475">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-476">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-476">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-477">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-477">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-478">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-478">Required.</span></span> <span data-ttu-id="0bd66-479">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-479">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-480">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-480">Required.</span></span> <span data-ttu-id="0bd66-481">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-481">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-482">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-482">Optional.</span></span> <span data-ttu-id="0bd66-483">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-484">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-484">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-485">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-486">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-487">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-488">Mit gelesene Daten `FileGet` richtet sich in der Regel in einer Datei mit `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-489">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-490">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-491">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-492">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-493">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-493">Random Mode</span></span>  
 <span data-ttu-id="0bd66-494">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-495">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion`FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-496">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-497">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-498">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-499">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-500">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-501">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-502">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-503">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-504">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-505">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-506">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-507">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-508">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-509">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-510">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-511">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-512">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-513">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-514">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-515">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-516">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-517">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-518">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-519">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-520">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-521">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-521">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-522">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-523">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-524">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-525">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-526">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-527">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-528">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-529">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-530">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-531"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-531"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-532">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-532">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-533">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-533">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-534">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-534">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-535">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-535">Required.</span></span> <span data-ttu-id="0bd66-536">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-537">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-537">Required.</span></span> <span data-ttu-id="0bd66-538">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-538">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-539">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-539">Optional.</span></span> <span data-ttu-id="0bd66-540">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-541">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-541">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-542">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-543">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-544">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-545">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-546">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-547">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-548">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-549">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-550">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-550">Random Mode</span></span>  
 <span data-ttu-id="0bd66-551">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-552">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-553">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-554">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-555">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-556">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-557">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-558">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-559">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-560">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-561">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-562">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-563">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-564">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-565">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-566">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-567">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-568">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-569">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-570">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-571">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-572">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-573">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-574">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-575">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-576">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-577">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-578">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-578">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-579">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-580">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-581">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-582">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-583">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-584">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-585">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-586">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-587">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-588"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-588"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-589">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-589">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-590">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-590">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-591">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-592">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-592">Required.</span></span> <span data-ttu-id="0bd66-593">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-594">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-594">Required.</span></span> <span data-ttu-id="0bd66-595">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-595">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-596">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-596">Optional.</span></span> <span data-ttu-id="0bd66-597">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-598">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-598">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-599">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-600">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-601">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-602">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-603">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-604">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-605">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-606">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-607">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-607">Random Mode</span></span>  
 <span data-ttu-id="0bd66-608">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-609">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-610">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-611">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-612">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-613">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-614">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-615">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-616">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-617">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-618">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-619">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-620">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-621">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-622">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-623">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-624">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-625">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-626">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-627">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-628">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-629">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-630">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-631">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-632">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-633">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-634">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-635">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-635">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-636">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-637">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-638">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-639">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-640">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-641">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-642">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-643">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-644">Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-645"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-645"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-646">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-646">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-647">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-647">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-648">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-648">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-649">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-649">Required.</span></span> <span data-ttu-id="0bd66-650">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-650">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-651">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-651">Required.</span></span> <span data-ttu-id="0bd66-652">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-652">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-653">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-653">Optional.</span></span> <span data-ttu-id="0bd66-654">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-655">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-655">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-656">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-657">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-658">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-659">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-660">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-661">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-662">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-663">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-664">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-664">Random Mode</span></span>  
 <span data-ttu-id="0bd66-665">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-666">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-667">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-668">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-669">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-670">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-671">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-672">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-673">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-674">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-675">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-676">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-677">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-678">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-679">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-680">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-681">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-682">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-683">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-684">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-685">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-686">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-687">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-688">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-689">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-690">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-691">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-692">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-692">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-693">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-694">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-695">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-696">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-697">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-698">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-699">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-700">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-701">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-702"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-702"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-703">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-703">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-704">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-704">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-705">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-705">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-706">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-706">Required.</span></span> <span data-ttu-id="0bd66-707">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-707">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-708">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-708">Required.</span></span> <span data-ttu-id="0bd66-709">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-709">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-710">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-710">Optional.</span></span> <span data-ttu-id="0bd66-711">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-712">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-712">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-713">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-714">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-715">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-716">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-717">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-718">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-719">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-720">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-721">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-721">Random Mode</span></span>  
 <span data-ttu-id="0bd66-722">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-723">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-724">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-725">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-726">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-727">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-728">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-729">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-730">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-731">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-732">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-733">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-734">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-735">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-736">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-737">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-738">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-739">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-740">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-741">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-742">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-743">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-744">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-745">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-746">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-747">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-748">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-749">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-749">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-750">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-751">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-752">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-753">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-754">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-755">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-756">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-757">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-758">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-759"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-759"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-760">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-760">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-761">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-761">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-762">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-762">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-763">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-763">Required.</span></span> <span data-ttu-id="0bd66-764">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-764">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-765">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-765">Required.</span></span> <span data-ttu-id="0bd66-766">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-766">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-767">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-767">Optional.</span></span> <span data-ttu-id="0bd66-768">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-769">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-769">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-770">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-771">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-772">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-773">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-774">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-775">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-776">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-777">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-778">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-778">Random Mode</span></span>  
 <span data-ttu-id="0bd66-779">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-780">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-781">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-782">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-783">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-784">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-785">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-786">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-787">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-788">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-789">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-790">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-791">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-792">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-793">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-794">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-795">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-796">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-797">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-798">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-799">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-800">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-801">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-802">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-803">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-804">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-805">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-806">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-806">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-807">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-808">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-809">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-810">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-811">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-812">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-813">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-814">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-815">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-816"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-816"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-817">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-817">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-818">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-818">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-819">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-819">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-820">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-820">Required.</span></span> <span data-ttu-id="0bd66-821">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-821">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-822">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-822">Required.</span></span> <span data-ttu-id="0bd66-823">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-823">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-824">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-824">Optional.</span></span> <span data-ttu-id="0bd66-825">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-826">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-826">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-827">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-828">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-829">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-830">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-831">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-832">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-833">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-834">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-835">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-835">Random Mode</span></span>  
 <span data-ttu-id="0bd66-836">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-837">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-838">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-839">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-840">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-841">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-842">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-843">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-844">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-845">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-846">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-847">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-848">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-849">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-850">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-851">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-852">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-853">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-854">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-855">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-856">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-857">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-858">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-859">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-860">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-861">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-862">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-863">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-863">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-864">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-865">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-866">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-867">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-868">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-869">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-870">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-871">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-872">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-873"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-873"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-874">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-874">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-875">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-875">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-876">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-876">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-877">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-877">Required.</span></span> <span data-ttu-id="0bd66-878">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-878">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-879">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-879">Required.</span></span> <span data-ttu-id="0bd66-880">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-880">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-881">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-881">Optional.</span></span> <span data-ttu-id="0bd66-882">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-883">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-883">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-884">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-885">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-886">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-887">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-888">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-889">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-890">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-891">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-892">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-892">Random Mode</span></span>  
 <span data-ttu-id="0bd66-893">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-894">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-895">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-896">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-897">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-898">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-899">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-900">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-901">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-902">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-903">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-904">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-905">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-906">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-907">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-908">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-909">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-910">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-911">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-912">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-913">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-914">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-915">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-916">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-917">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-918">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-919">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-920">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-920">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-921">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-922">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-923">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-924">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-925">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-926">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-927">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-928">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-929">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-930"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-930"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-931">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-931">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-932">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-932">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-933">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-933">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-934">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-934">Required.</span></span> <span data-ttu-id="0bd66-935">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-935">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-936">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-936">Required.</span></span> <span data-ttu-id="0bd66-937">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-937">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-938">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-938">Optional.</span></span> <span data-ttu-id="0bd66-939">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="0bd66-940">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-940">Optional.</span></span> <span data-ttu-id="0bd66-941">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-941">Applies only when writing a string.</span></span> <span data-ttu-id="0bd66-942">Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="0bd66-943">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-943">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="0bd66-944">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-944">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-945">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-946">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-947">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-948">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-949">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-950">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-951">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-952">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-953">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-953">Random Mode</span></span>  
 <span data-ttu-id="0bd66-954">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-955">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-956">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-957">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-958">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-959">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-960">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-961">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-962">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-963">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-964">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-965">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-966">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-967">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-968">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-969">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-970">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-971">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-972">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-973">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-974">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-975">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-976">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-977">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-978">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-979">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-980">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-981">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-981">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-982">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-983">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-984">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-985">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-986">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-987">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-988">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-989">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-990">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-991"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-991"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-992">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-992">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-993">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-993">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-994">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-994">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-995">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-995">Required.</span></span> <span data-ttu-id="0bd66-996">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-996">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-997">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-997">Required.</span></span> <span data-ttu-id="0bd66-998">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-998">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-999">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-999">Optional.</span></span> <span data-ttu-id="0bd66-1000">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="0bd66-1001">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1001">Optional.</span></span> <span data-ttu-id="0bd66-1002">Betrifft nur das Schreiben eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1002">Applies only when writing an array.</span></span> <span data-ttu-id="0bd66-1003">Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor erforderlich ist, der die Größe und die Begrenzungen des Arrays beschreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="0bd66-1004">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1004">Optional.</span></span> <span data-ttu-id="0bd66-1005">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1005">Applies only when writing a string.</span></span> <span data-ttu-id="0bd66-1006">Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="0bd66-1007">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1007">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="0bd66-1008">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1008">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="0bd66-1009">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="0bd66-1010">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1011">`FileGet` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1012">Mit gelesene Daten `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="0bd66-1013">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1014">Wenn Sie weglassen `RecordNumber`, den Datensatz bzw. das Byte, die nach der letzten `FileGet` oder `FilePut` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion) gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-1015">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-1016">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1017">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1017">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1018">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1019">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGet` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1020">Der Abstand zwischen dem Ende eines Datensatzes und das Starten des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1021">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-1022">Standardmäßig ist die Zielvariable eine Zeichenfolge, `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1023">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1024">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu versetzen, wird der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-1025">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1026">Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und Dimension des Arrays zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="0bd66-1027">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1028">Wenn Sie das Array zu lesen, müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="0bd66-1029">Wenn es mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="0bd66-1030">Wenn der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` bestimmen, was zu lesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="0bd66-1031">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1032">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1033">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1034">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="0bd66-1035">Die 218 Bytes werden wie folgt verteilt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="0bd66-1036">18 Bytes für den Deskriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="0bd66-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="0bd66-1037">200 Byte für die Daten: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-1038">Wenn die Variable Einlesen in einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="0bd66-1039">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-1040">`FileGet` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1041">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1042">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="0bd66-1043">Dies schließt alle Arrays und ihren Deskriptoren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-1044">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der eine Zeichenfolge, die beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1045">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1045">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1046">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1047">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1048">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1049">`FileGet` liest Sie alle Variablen aus dem Datenträger zusammenhängend. d. h. ohne Auffüllung zwischen Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1050">Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="0bd66-1051">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="0bd66-1052">`FileGet` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1053">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="0bd66-1054">Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1055"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1055"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1056">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1056">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-1057">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1057">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1058">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1058">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1059">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1059">Required.</span></span> <span data-ttu-id="0bd66-1060">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1060">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1061">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1061">Required.</span></span> <span data-ttu-id="0bd66-1062">Der gültige Name einer Variablen, in die Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1062">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1063">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1063">Optional.</span></span> <span data-ttu-id="0bd66-1064">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1065">Liest Daten aus einer offenen Datenträgerdatei in eine Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1065">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="0bd66-1066">Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="0bd66-1067">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1068">Die `FileGetObject` Funktion dient anstelle von `FileGet` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird zurückgegeben, anstelle eines anderen Typs, z. B. `Integer`, `Long`, `Short`und so weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="0bd66-1069">Wenn Sie beabsichtigen, schreibt die `Variant` Typ `FileGetObject` ist erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="0bd66-1070">Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, ist immer empfehlenswert, die Sie verwenden `FilePutObject` und `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="0bd66-1071">`FileGetObject` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1072">Mit gelesene Daten `FileGetObject` richtet sich in der Regel mit `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="0bd66-1073">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1074">Wenn Sie weglassen `RecordNumber`, `FileGetObject` liest den Datensatz bzw. das Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder auf die von der letzten gezeigt `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1075">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1075">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1076">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1077">Wenn die Länge des zu lesenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FileGetObject` liest nachfolgende Datensätze Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1078">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1079">Da die Menge der Daten der Auffüllung nicht genau bestimmt werden kann, ist es eine gute Idee, die Datensatzlänge die Länge des zu lesenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="0bd66-1080">Wenn die Zielvariable eine Zeichenfolge, in der Standardeinstellung ist `FileGetObject` liest einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und liest dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1081">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1082">Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge und in eine Datei beim Lesen der Längendeskriptor nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="0bd66-1083">Wenn Sie eine Zeichenfolge ohne den Deskriptor lesen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1084">Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1085">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1086">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="0bd66-1087">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf den Datenträger:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="0bd66-1088">Die 218 Bytes werden wie folgt verteilt: 18 Bytes für den Deskriptor (2 + 8 \* 2), und 100 Bytes für die Daten (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="0bd66-1089">`FileGetObject` liest die Elemente von Strukturen, als ob jedes einzeln gelesen wurden, jedoch keinen Leerraum zwischen den Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1090">Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePutObject`) ein Deskriptor, deren Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="0bd66-1091">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente, einschließlich aller Arrays und ihren Deskriptoren erforderlich sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="0bd66-1092">Die <xref:Microsoft.VisualBasic.VBFixedStringAttribute> Klasse angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1093">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1093">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1094">Für Dateien in geöffnet `Binary` aller-Modus die `Random` Regeln anwenden, mit den folgenden Ausnahmen:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="0bd66-1095">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1096">`FileGetObject` Liest alle Variablen aus dem Datenträger zusammenhängend, also ohne Abstand zwischen den Datensätzen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1097">Für ein beliebiges Array als ein Array in einer Struktur `FileGetObject` liest nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="0bd66-1098">Es wird kein Deskriptor gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="0bd66-1099">`FileGetObject` liest die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1100">Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-1101">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-1102">Z. B. möglicherweise eine Datei namens "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1103">Das folgende Beispiel liest einen Datensatz in eine Datei, und klicken Sie dann abgerufen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-1104">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1104">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1105">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1105">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="0bd66-1106">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1106">Required.</span></span> <span data-ttu-id="0bd66-1107"><see langword="String" />-Ausdruck, der eine Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1107"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="0bd66-1108"><paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1108"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-1109">Gibt einen <see langword="Long" />-Wert zurück, der die Länge einer Datei in Bytes angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="0bd66-1110">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="0bd66-1111">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-1112"><see langword="Long" />-Wert, der die Länge einer Datei in Bytes angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1112"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1113">Wenn die angegebene Datei geöffnet, wenn ist die `FileLen` Funktion aufgerufen wird, wird der zurückgegebene Wert stellt die Größe der Datei, die zum Zeitpunkt der sie geöffnet wurde.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-1114">Um die aktuelle Länge einer geöffneten Datei zu erhalten, verwenden die `LOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1115">Dieses Beispiel verwendet die `FileLen` Funktion, um die Länge einer Datei in Byte zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="0bd66-1116">Für dieses Beispiel wird angenommen, dass `TestFile` ist eine Datei, die Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-1117">Die Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1117">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-1118">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1118">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1119">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1119">Required.</span></span> <span data-ttu-id="0bd66-1120">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1120">Any valid file number.</span></span> <span data-ttu-id="0bd66-1121">Verwenden Sie die <see langword="FreeFile" />-Funktion, um die nächste verfügbare Dateinummer zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="0bd66-1122">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1122">Required.</span></span> <span data-ttu-id="0bd66-1123"><see langword="String" />-Ausdruck, der einen Dateinamen angibt. Kann das Verzeichnis oder den Ordner und das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1123"><see langword="String" /> expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="0bd66-1124">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1124">Required.</span></span> <span data-ttu-id="0bd66-1125">Eine Enumeration, die den Dateimodus angibt: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> oder <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="0bd66-1126">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="0bd66-1127">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1127">Optional.</span></span> <span data-ttu-id="0bd66-1128">Eine Enumeration, die die für eine offene Datei erlaubten Operationen angibt: <see langword="Read" />, <see langword="Write" /> oder <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="0bd66-1129">Wird standardmäßig auf <see langword="ReadWrite" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1129">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="0bd66-1130">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="0bd66-1131">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1131">Optional.</span></span> <span data-ttu-id="0bd66-1132">Eine Enumeration, die für eine offene Datei aus anderen Prozessen nicht erlaubten Operationen angibt: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> und <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="0bd66-1133">Wird standardmäßig auf <see langword="Lock Read Write" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1133">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="0bd66-1134">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="0bd66-1135">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1135">Optional.</span></span> <span data-ttu-id="0bd66-1136">Eine Zahl kleiner oder gleich 32.767 (Bytes).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1136">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="0bd66-1137">Bei Dateien, die mit Random-Zugriff geöffnet wurden, ist dieser Wert die Datensatzlänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1137">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="0bd66-1138">Bei sequenziellen Dateien ist dieser Wert die Anzahl von gepufferten Zeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1138">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="0bd66-1139">Öffnet eine Datei für Eingabe oder Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1139">Opens a file for input or output.</span></span> <span data-ttu-id="0bd66-1140">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="0bd66-1141">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1142">Die `FileOpen` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-1143">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-1144">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-1145">Sie müssen eine Datei öffnen, bevor alle e/a-Vorgänge ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="0bd66-1146">`FileOpen` weist einen Puffer für e/a in die Datei, und bestimmt den Zugriffsmodus für die Verwendung mit dem Puffer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-1147">Beim Schreiben in eine Datei eine Anwendung möglicherweise eine Datei erstellen, wenn die Datei, auf die sie schreiben nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="0bd66-1148">Zu diesem Zweck benötigt diese Berechtigung für das Verzeichnis, in dem die Datei ist, erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="0bd66-1149">Aber wenn die Datei durch angegeben `FileName` vorhanden ist, muss die Anwendung `Write` Berechtigung nur für die Datei selbst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="0bd66-1150">Ganz egal, wo möglich, zur Verbesserung der Sicherheit, erstellen Sie die Datei während der Bereitstellung und Grant `Write` Berechtigung für diese Datei nur, statt das gesamte Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="0bd66-1151">Schreiben Sie Daten in Verzeichnissen nach Benutzer statt auf das Root-Verzeichnis oder das Verzeichnis Programme, um Sicherheit zu verbessern.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="0bd66-1152">Der Kanal zum Öffnen finden Sie unter Verwendung der `FreeFile()` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-1153">Die `FileOpen` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` -Enumeration, die die Ausführung in teilweise vertrauenswürdigen Umgebungen auswirkt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="0bd66-1154">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1155">Dieses Beispiel veranschaulicht verschiedene Verwendungen der der `FileOpen` Funktion, um die Eingabe und Ausgabe in eine Datei zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="0bd66-1156">Der folgende Code öffnet die Datei `TestFile` in `Input` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0bd66-1157">In diesem Beispiel öffnet die Datei im `Binary` Modus ausschließlich für Schreibvorgänge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0bd66-1158">Das folgende Beispiel öffnet die Datei im `Random` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="0bd66-1159">Die Datei enthält die Datensätze der Struktur `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="0bd66-1160">Dieses Codebeispiel öffnet die Datei im `Output` Modus: jeder Prozess kann lesen oder Schreiben in die Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="0bd66-1161">Dieses Codebeispiel öffnet die Datei im `Binary` Modus zum Lesen; andere Prozesse die Datei können nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1162">Datensatzlänge ist negativ (und nicht gleich -1).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1162">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1163"><paramref name="FileName" /> ist bereits geöffnet, oder <paramref name="FileName" /> ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1163"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-1164">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1164">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1165">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1165">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-1166">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1166">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1167">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1168">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1169">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1169">Required.</span></span> <span data-ttu-id="0bd66-1170">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1171">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1171">Required.</span></span> <span data-ttu-id="0bd66-1172">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1172">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1173">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1173">Optional.</span></span> <span data-ttu-id="0bd66-1174">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1175">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1175">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1176">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1177">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1178">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1179">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1180">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1181">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1182">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1183">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1184">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1185">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1185">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1186">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1187">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1188">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1189">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1190">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1191">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1192">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1193">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1194">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1195">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1196">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1197">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1198">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1199">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1200">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1201">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1202">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1203">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1204">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1205">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1206">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1207">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1208">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1209">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1210">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1211">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1212">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1213">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1213">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1214">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1215">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1216">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1217">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1218">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1219">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1220">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1221">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1222">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1223">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1224">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1225">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1226"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1226"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1227">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1227">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1228">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1228">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1229">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1229">Required.</span></span> <span data-ttu-id="0bd66-1230">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1230">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1231">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1231">Required.</span></span> <span data-ttu-id="0bd66-1232">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1232">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1233">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1233">Optional.</span></span> <span data-ttu-id="0bd66-1234">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1235">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1235">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1236">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1237">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1238">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1239">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1240">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1241">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1242">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1243">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1244">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1245">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1245">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1246">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1247">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1248">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1249">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1250">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1251">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1252">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1253">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1254">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1255">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1256">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1257">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1258">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1259">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1260">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1261">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1262">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1263">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1264">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1265">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1266">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1267">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1268">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1269">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1270">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1271">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1272">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1273">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1273">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1274">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1275">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1276">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1277">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1278">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1279">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1280">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1281">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1282">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1283">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1284">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1285">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1286"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1286"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1287">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1287">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1288">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1288">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1289">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1289">Required.</span></span> <span data-ttu-id="0bd66-1290">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1290">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1291">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1291">Required.</span></span> <span data-ttu-id="0bd66-1292">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1292">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1293">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1293">Optional.</span></span> <span data-ttu-id="0bd66-1294">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1295">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1295">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1296">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1297">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1298">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1299">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1300">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1301">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1302">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1303">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1304">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1305">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1305">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1306">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1307">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1308">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1309">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1310">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1311">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1312">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1313">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1314">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1315">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1316">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1317">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1318">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1319">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1320">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1321">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1322">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1323">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1324">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1325">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1326">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1327">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1328">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1329">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1330">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1331">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1332">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1333">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1333">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1334">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1335">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1336">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1337">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1338">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1339">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1340">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1341">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1342">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1343">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1344">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1345">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1346"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1346"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1347">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1347">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1348">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1348">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1349">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1349">Required.</span></span> <span data-ttu-id="0bd66-1350">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1350">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1351">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1351">Required.</span></span> <span data-ttu-id="0bd66-1352">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1352">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1353">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1353">Optional.</span></span> <span data-ttu-id="0bd66-1354">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1355">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1355">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1356">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1357">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1358">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1359">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1360">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1361">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1362">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1363">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1364">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1365">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1365">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1366">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1367">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1368">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1369">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1370">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1371">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1372">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1373">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1374">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1375">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1376">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1377">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1378">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1379">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1380">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1381">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1382">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1383">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1384">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1385">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1386">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1387">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1388">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1389">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1390">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1391">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1392">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1393">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1393">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1394">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1395">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1396">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1397">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1398">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1399">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1400">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1401">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1402">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1403">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1404">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1405">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1406"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1406"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1407">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1407">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1408">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1408">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1409">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1409">Required.</span></span> <span data-ttu-id="0bd66-1410">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1410">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1411">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1411">Required.</span></span> <span data-ttu-id="0bd66-1412">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1412">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1413">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1413">Optional.</span></span> <span data-ttu-id="0bd66-1414">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1415">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1415">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1416">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1417">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1418">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1419">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1420">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1421">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1422">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1423">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1424">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1425">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1425">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1426">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1427">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1428">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1429">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1430">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1431">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1432">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1433">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1434">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1435">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1436">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1437">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1438">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1439">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1440">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1441">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1442">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1443">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1444">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1445">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1446">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1447">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1448">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1449">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1450">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1451">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1452">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1453">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1453">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1454">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1455">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1456">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1457">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1458">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1459">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1460">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1461">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1462">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1463">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1464">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1465">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1466"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1466"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1467">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1467">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1468">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1468">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1469">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1469">Required.</span></span> <span data-ttu-id="0bd66-1470">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1470">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1471">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1471">Required.</span></span> <span data-ttu-id="0bd66-1472">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1472">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1473">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1473">Optional.</span></span> <span data-ttu-id="0bd66-1474">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1475">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1475">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1476">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1477">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1478">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1479">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1480">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1481">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1482">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1483">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1484">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1485">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1485">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1486">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1487">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1488">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1489">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1490">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1491">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1492">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1493">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1494">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1495">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1496">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1497">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1498">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1499">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1500">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1501">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1502">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1503">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1504">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1505">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1506">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1507">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1508">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1509">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1510">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1511">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1512">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1513">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1513">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1514">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1515">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1516">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1517">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1518">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1519">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1520">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1521">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1522">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1523">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1524">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1525">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1526"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1526"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1527">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1527">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1528">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1528">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1529">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1529">Required.</span></span> <span data-ttu-id="0bd66-1530">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1530">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1531">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1531">Required.</span></span> <span data-ttu-id="0bd66-1532">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1532">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1533">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1533">Optional.</span></span> <span data-ttu-id="0bd66-1534">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1535">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1535">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1536">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1537">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1538">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1539">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1540">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1541">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1542">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1543">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1544">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1545">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1545">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1546">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1547">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1548">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1549">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1550">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1551">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1552">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1553">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1554">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1555">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1556">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die`VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1557">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1558">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1559">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1560">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1561">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1562">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1563">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1564">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1565">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1566">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1567">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1568">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1569">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1570">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1571">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1572">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1573">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1573">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1574">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1575">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1576">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1577">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1578">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1579">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1580">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1581">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1582">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1583">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1584">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1585">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1586"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1586"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1587">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1587">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1588">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1588">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1589">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1589">Required.</span></span> <span data-ttu-id="0bd66-1590">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1590">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1591">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1591">Required.</span></span> <span data-ttu-id="0bd66-1592">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1592">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1593">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1593">Optional.</span></span> <span data-ttu-id="0bd66-1594">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1595">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1595">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1596">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1597">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1598">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1599">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1600">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1601">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1602">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1603">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1604">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1605">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1605">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1606">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1607">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1608">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1609">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1610">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1611">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1612">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1613">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1614">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1615">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1616">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1617">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1618">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1619">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1620">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1621">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1622">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1623">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1624">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1625">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1626">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1627">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1628">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1629">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1630">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1631">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1632">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1633">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1633">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1634">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1635">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1636">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1637">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1638">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1639">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1640">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1641">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1642">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1643">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1644">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1645">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1646"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1646"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1647">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1647">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1648">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1648">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1649">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1649">Required.</span></span> <span data-ttu-id="0bd66-1650">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1650">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1651">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1651">Required.</span></span> <span data-ttu-id="0bd66-1652">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1652">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1653">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1653">Optional.</span></span> <span data-ttu-id="0bd66-1654">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1655">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1655">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1656">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1657">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1658">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1659">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1660">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1661">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1662">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1663">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1664">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1665">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1665">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1666">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1667">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1668">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1669">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1670">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1671">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1672">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1673">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1674">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1675">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1676">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1677">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1678">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1679">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1680">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1681">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1682">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1683">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1684">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1685">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1686">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1687">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1688">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1689">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1690">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1691">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1692">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1693">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1693">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1694">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1695">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1696">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1697">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1698">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1699">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1700">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1701">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1702">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1703">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1704">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1705">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1706"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1706"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1707">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1707">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1708">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1709">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1709">Required.</span></span> <span data-ttu-id="0bd66-1710">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1711">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1711">Required.</span></span> <span data-ttu-id="0bd66-1712">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1712">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1713">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1713">Optional.</span></span> <span data-ttu-id="0bd66-1714">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1715">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1715">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1716">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1717">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1718">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1719">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1720">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1721">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1722">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1723">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1724">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1725">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1725">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1726">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1727">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1728">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1729">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1730">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1731">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1732">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1733">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1734">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1735">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1736">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1737">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1738">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1739">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1740">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1741">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1742">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1743">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1744">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1745">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1746">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1747">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1748">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1749">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1750">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1751">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1752">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1753">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1753">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1754">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1755">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1756">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1757">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1758">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1759">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1760">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1761">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1762">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1763">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1764">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1765">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1766"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1766"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1767">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1767">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1768">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1768">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1769">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1769">Required.</span></span> <span data-ttu-id="0bd66-1770">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1770">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1771">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1771">Required.</span></span> <span data-ttu-id="0bd66-1772">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1772">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1773">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1773">Optional.</span></span> <span data-ttu-id="0bd66-1774">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1775">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1775">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1776">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1777">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1778">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1779">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1780">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1781">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1782">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1783">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1784">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1785">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1785">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1786">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1787">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die`RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1788">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1789">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1790">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1791">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1792">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1793">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1794">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1795">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1796">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1797">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1798">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1799">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1800">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1801">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1802">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1803">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1804">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1805">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1806">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1807">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1808">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1809">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1810">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1811">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1812">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1813">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1813">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1814">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1815">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1816">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1817">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1818">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1819">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1820">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1821">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1822">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1823">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1824">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1825">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1826"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1826"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1827">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1827">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1828">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1828">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1829">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1829">Required.</span></span> <span data-ttu-id="0bd66-1830">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1830">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1831">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1831">Required.</span></span> <span data-ttu-id="0bd66-1832">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1832">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1833">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1833">Optional.</span></span> <span data-ttu-id="0bd66-1834">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-1835">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1835">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1836">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1837">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1838">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1839">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1840">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1841">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1842">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1843">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1844">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1845">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1845">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1846">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1847">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1848">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1849">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1850">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1851">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1852">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1853">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1854">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1855">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1856">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1857">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1858">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1859">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1860">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1861">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1862">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1863">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1864">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1865">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1866">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1867">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1868">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1869">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1870">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1871">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1872">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1873">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1873">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1874">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1875">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1876">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1877">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1878">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1879">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1880">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1881">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1882">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1883">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1884">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1885">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1886"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1886"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1887">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1887">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1888">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1888">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1889">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1889">Required.</span></span> <span data-ttu-id="0bd66-1890">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1890">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1891">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1891">Required.</span></span> <span data-ttu-id="0bd66-1892">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1892">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1893">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1893">Optional.</span></span> <span data-ttu-id="0bd66-1894">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="0bd66-1895">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1895">Optional.</span></span> <span data-ttu-id="0bd66-1896">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1896">Applies only when writing a string.</span></span> <span data-ttu-id="0bd66-1897">Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="0bd66-1898">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1898">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="0bd66-1899">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1899">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1900">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1901">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1902">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1903">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1904">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1905">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1906">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1907">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1908">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1909">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1909">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1910">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1911">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1912">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1913">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1914">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1915">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1916">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1917">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1918">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1919">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1920">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1921">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1922">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1923">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1924">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1925">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1926">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1927">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1928">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1929">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1930">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1931">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1932">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-1933">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-1934">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-1935">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-1936">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-1937">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1937">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-1938">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-1939">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-1940">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-1941">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-1942">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-1943">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-1944">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-1945">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-1946">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-1947">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-1948">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-1949">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-1950"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1950"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-1951">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1951">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-1952">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-1952">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-1953">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1953">Required.</span></span> <span data-ttu-id="0bd66-1954">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1954">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-1955">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1955">Required.</span></span> <span data-ttu-id="0bd66-1956">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1956">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-1957">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1957">Optional.</span></span> <span data-ttu-id="0bd66-1958">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="0bd66-1959">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1959">Optional.</span></span> <span data-ttu-id="0bd66-1960">Betrifft nur das Schreiben eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1960">Applies only when writing an array.</span></span> <span data-ttu-id="0bd66-1961">Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor für die Zeichenfolge erforderlich ist, der die Länge beschreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="0bd66-1962">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1962">Optional.</span></span> <span data-ttu-id="0bd66-1963">Betrifft nur das Schreiben einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1963">Applies only when writing a string.</span></span> <span data-ttu-id="0bd66-1964">Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="0bd66-1965">Die Standardeinstellung ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1965">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="0bd66-1966">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1966">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="0bd66-1967">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="0bd66-1968">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-1969">`FilePut` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-1970">Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="0bd66-1971">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-1972">Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder auf die von der letzten gezeigt `Seek` Funktion geschrieben ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="0bd66-1973">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-1974">`FilePut` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-1975">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, müssen Sie das gleiche mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-1976">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-1976">Random Mode</span></span>  
 <span data-ttu-id="0bd66-1977">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-1978">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-1979">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-1980">Da die Menge der Daten der Auffüllung nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-1981">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-1982">Wenn die Variable geschrieben wird eine Zeichenfolge, `FilePut` schreibt einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in der Variablen wechselt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="0bd66-1983">Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="0bd66-1984">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePut` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-1985">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePut` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-1986">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-1987">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-1988">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-1989">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-1990">Wenn die Zielvariable ein Array ist, müssen Sie entscheiden, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="0bd66-1991">Schreiben den Dateideskriptor für ein dynamisches Array aber nicht für Arrays mit fester Größe, Visual Basic 6.0 und früheren Versionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="0bd66-1992">Visual Basic 2005 standardmäßig nicht das Schreiben des Deskriptors.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="0bd66-1993">Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="0bd66-1994">Wenn Sie das Array zu schreiben, müssen Sie die Möglichkeit zu entsprechen, die das Array gelesen werden; Wenn sie mit der gelesen wird, müssen Sie den Deskriptor schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="0bd66-1995">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-1996">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="0bd66-1997">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-1998">Beispielsweise erfordert die folgende Arraydeklaration 218 Bytes, wenn das Array geschrieben wird auf dem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="0bd66-1999">Wenn die Variable geschrieben wird einen anderen Typ von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FilePut` schreibt nur die Daten der Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="0bd66-2000">Die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge des zu schreibenden Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="0bd66-2001">`FilePut` Schreibt die Elemente von Strukturen als ob jedes einzeln geschrieben wäre jedoch ohne Abstand zwischen Elementen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="0bd66-2002">Die `VBFixedString` Attribut angewendet werden kann, Zeichenfolgenfelder in den Strukturen, das die Größe der Zeichenfolge beim Schreiben auf den Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0bd66-2003">Felder, die mehr als Bytes angegeben Zeichenfolge die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger</span><span class="sxs-lookup"><span data-stu-id="0bd66-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-2004">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-2004">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-2005">Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` Modus Regeln anzuwenden, bis auf einige Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="0bd66-2006">Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="0bd66-2007">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-2008">`FilePut` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="0bd66-2009">Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="0bd66-2010">Es wird kein Deskriptor geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="0bd66-2011">`FilePut` Schreibt die Zeichenfolgen mit variabler Länge, die nicht Elemente der Strukturen sind, ohne die von 2-Byte-Längendeskriptor.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="0bd66-2012">Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="0bd66-2013">Beispielsweise schreiben die folgenden Anweisungen 11 Bytes beträgt, Dateinummer 1:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="0bd66-2014">Schreiben in eine Datei mit den `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2015">Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="0bd66-2016">Fünf Datensätze in der Struktur `Person` in die Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-2017"><paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2017"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2018">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2018">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-2019">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2019">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2020">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2020">Required.</span></span> <span data-ttu-id="0bd66-2021">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2021">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2022">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2022">Required.</span></span> <span data-ttu-id="0bd66-2023">Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2023">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="0bd66-2024">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2024">Optional.</span></span> <span data-ttu-id="0bd66-2025">Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="0bd66-2026">Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2026">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="0bd66-2027">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="0bd66-2028">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2029">Die `FilePutObject` Funktion dient anstelle von `FilePut` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs übergeben `Integer`, `Long`, `Short`usw.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="0bd66-2030">`FilePutObject` schreibt, und liest Deskriptoren, die das Objekt zu beschreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="0bd66-2031">Wenn Sie beabsichtigen, schreibt die `Variant` Typ `FilePutObject` ist erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="0bd66-2032">Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, wird empfohlen, dass Sie immer verwenden `FilePutObject` und `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="0bd66-2033">`FilePutObject` gilt nur in `Random` und `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-2034">Mit `FilePutObject` geschriebene Daten werden in der Regel mit `FileGetObject` aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="0bd66-2035">Der erste Datensatz oder Bytes in eine Datei ist an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="0bd66-2036">Wenn Sie weglassen `RecordNumber`, `FilePutObject` schreibt den Datensatz bzw. das Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder den Datensatz bzw. das Byte zeigt den letzten `Seek` Funktion).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="0bd66-2037">Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen variabler oder fester Länge interpretiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="0bd66-2038">`FilePutObject` den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="0bd66-2039">Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePutObject`, müssen Sie das gleiche mit `FileGetObject`, und Sie müssen auch sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="0bd66-2040">Zufällige Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-2040">Random Mode</span></span>  
 <span data-ttu-id="0bd66-2041">Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="0bd66-2042">Wenn die Länge des zu schreibenden Daten kleiner als die Länge, die im angegebenen die `RecordLength` -Klausel der `FileOpen` -Funktion `FilePutObject` nachfolgende Datensätze auf Datensatzlänge schreibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="0bd66-2043">Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="0bd66-2044">Da die Menge der Daten der Auffüllung nicht genau bestimmt werden kann, ist es im Allgemeinen eine gute Idee, die Datensatzlänge die Länge des zu schreibenden Daten überein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="0bd66-2045">Ist die Länge des zu schreibenden Daten größer als die Länge angegeben wird, der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="0bd66-2046">Wenn die Variable geschrieben wird ein Objekt, das einen numerischen Typ enthält, `FilePutObject` schreibt zwei Bytes zur Identifizierung der `VarType` des Objekts und schreibt dann die Variable.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="0bd66-2047">Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl, `FilePutObject` schreibt sechs Bytes: 2 Bytes, die das Objekt als identifizieren `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="0bd66-2048">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als die tatsächliche Anzahl von Bytes zum Speichern der Variablen benötigt mindestens zwei Bytes sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="0bd66-2049">Wenn die Variable geschrieben wird ein Objekt, das eine Zeichenfolge, enthält `FilePutObject` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge ein, und klicken Sie dann die Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="0bd66-2050">Die Datensatzlänge gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss über mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="0bd66-2051">Wenn Sie eine Zeichenfolge ohne den Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` -Parameter, und die Zeichenfolge, die Sie lesen in muss die richtige Länge.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="0bd66-2052">Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Deskriptor des Arrays zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="0bd66-2053">Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="0bd66-2054">Die Länge entspricht 2 plus 8 Mal der Anzahl der Dimensionen: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="0bd66-2055">Binärmodus</span><span class="sxs-lookup"><span data-stu-id="0bd66-2055">Binary Mode</span></span>  
 <span data-ttu-id="0bd66-2056">Für Dateien in geöffnet `Binary` Modus alle die `Random` Modus Regeln anwenden, mit Ausnahme von:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="0bd66-2057">Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="0bd66-2058">`FilePutObject` Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2059">Dieses Beispiel verwendet die `FilePutObject` Funktion, um eine Zeichenfolge in eine Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-2060">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2060">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2061">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2061">Required.</span></span> <span data-ttu-id="0bd66-2062">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2062">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="0bd66-2063">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2063">Required.</span></span> <span data-ttu-id="0bd66-2064">Ein numerischer Ausdruck im Bereich 0–255 einschließlich, der angibt, wie viele Zeichen auf einer Zeile stehen, bevor eine neue Zeile beginnt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2064">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="0bd66-2065">Wenn <paramref name="RecordWidth" /> gleich 0 ist, ist die Länge einer Zeile unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2065">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="0bd66-2066">Der Standardwert von <paramref name="RecordWidth" /> ist 0.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2066">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="0bd66-2067">Weist einer Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wurde, eine Ausgabezeilenbreite zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0bd66-2068">Dieses Beispiel verwendet die `FileWidth` Funktion, um die Breite einer Zeile für eine Datei festgelegt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2069">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2069">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2070">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2070">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bd66-2071">Gibt einen <see langword="Integer" />-Wert zurück, der die nächste zur Verwendung durch die <see langword="FileOpen" />-Funktion verfügbare Dateinummer darstellt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2072">Gibt einen <see langword="Integer" />-Wert zurück, der die nächste zur Verwendung durch die <see langword="FileOpen" />-Funktion verfügbare Dateinummer darstellt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2073">Verwendung `FreeFile` zahlreiche Datei angeben, die nicht bereits verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2074">Dieses Beispiel verwendet die `FreeFile` Funktion, um die nächste verfügbare Dateinummer zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="0bd66-2075">Für die Ausgabe innerhalb der Schleife werden fünf Dateien geöffnet, und einige Beispieldaten in jeder geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2076">Mehr als 255 Dateien verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2076">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-2077">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2077">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="0bd66-2078">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2078">Required.</span></span> <span data-ttu-id="0bd66-2079">Ein <see langword="String" />-Ausdruck, der einen Datei-, Verzeichnis- oder Ordnernamen angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2079"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="0bd66-2080"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2080"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-2081">Gibt einen <see langword="FileAttribute" />-Wert zurück, der die Attribute einer Datei, eines Verzeichnisses oder eines Ordners darstellt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="0bd66-2082">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="0bd66-2083">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2084">Der von <see langword="GetAttr" /> zurückgegebene Wert ist die Summe aus folgenden Enumerationswerten:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="0bd66-2085">Wert</span><span class="sxs-lookup"><span data-stu-id="0bd66-2085">Value</span></span> 
 </term><description> <span data-ttu-id="0bd66-2086">Konstante</span><span class="sxs-lookup"><span data-stu-id="0bd66-2086">Constant</span></span> 
 </description><description> <span data-ttu-id="0bd66-2087">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="0bd66-2087">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="0bd66-2088">Normal.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2088">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="0bd66-2089">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2089">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="0bd66-2090">Ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2090">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="0bd66-2091">Systemdatei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2091">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="0bd66-2092">Verzeichnis oder Ordner.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2092">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="0bd66-2093">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2093">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="0bd66-2094">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2094">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="0bd66-2095">Diese Enumerationen werden von der Programmiersprache Visual Basic angegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2095">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="0bd66-2096">Die Namen können überall im Code anstelle von tatsächlichen Werten verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2096">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2097">Verwenden, um zu bestimmen, welche Attribute festgelegt sind, die `And` Operator, um einen bitweisen Vergleich, der den Rückgabewert von führen die `GetAttr` -Funktion und der Wert des Dateiattributs werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="0bd66-2098">Wenn das Ergebnis nicht 0 (null) ist, wird dieses Attribut für die angegebene Datei festgelegt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="0bd66-2099">Beispielsweise ist der Rückgabewert der folgenden `And` Ausdruck ist NULL, wenn die `Archive` Attribut nicht festgelegt ist:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="0bd66-2100">Ein Wert ungleich NULL wird zurückgegeben, wenn die `Archive` -Attribut festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2101">Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und Verzeichnis oder Ordner zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2102"><paramref name="Pathname" /> ist ungültig oder enthält Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2102"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-2103">Zieldatei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2103">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="0bd66-2104">And-Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2104">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2105">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2105">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-2106">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2106">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2107">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2107">Required.</span></span> <span data-ttu-id="0bd66-2108">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2108">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2109">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2109">Required.</span></span> <span data-ttu-id="0bd66-2110">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2110">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2111">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2111">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2112">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2113">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2114">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2115">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2116">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2117">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2118">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2119">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2120">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2121">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2121">Data</span></span>|<span data-ttu-id="0bd66-2122">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2123">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2124">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2124">Empty</span></span>|  
|<span data-ttu-id="0bd66-2125">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2126">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2127">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2128">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2130">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2131">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2132">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2133">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2134">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2135">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2136">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2137">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2138">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2138">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2139">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2139">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2140">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2140">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2141">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2142">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2142">Required.</span></span> <span data-ttu-id="0bd66-2143">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2143">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2144">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2144">Required.</span></span> <span data-ttu-id="0bd66-2145">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2145">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2146">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2146">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2147">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2148">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2149">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2150">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2151">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2152">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2153">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2154">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2155">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2156">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2156">Data</span></span>|<span data-ttu-id="0bd66-2157">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2158">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2159">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2159">Empty</span></span>|  
|<span data-ttu-id="0bd66-2160">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2161">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2162">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2163">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2165">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2166">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2167">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2168">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2169">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2170">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2171">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2172">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2173">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2173">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2174">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2174">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2175">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2175">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2176">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2177">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2177">Required.</span></span> <span data-ttu-id="0bd66-2178">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2178">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2179">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2179">Required.</span></span> <span data-ttu-id="0bd66-2180">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2180">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2181">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2181">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2182">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2183">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2184">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2185">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2186">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2187">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2188">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2189">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2190">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2191">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2191">Data</span></span>|<span data-ttu-id="0bd66-2192">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2193">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2194">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2194">Empty</span></span>|  
|<span data-ttu-id="0bd66-2195">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2196">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2197">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2198">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2200">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2201">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2202">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2203">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2204">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2205">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2206">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2207">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2208">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2208">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2209">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2209">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2210">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2210">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2211">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2212">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2212">Required.</span></span> <span data-ttu-id="0bd66-2213">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2213">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2214">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2214">Required.</span></span> <span data-ttu-id="0bd66-2215">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2215">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2216">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2216">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2217">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2218">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2219">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2220">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2221">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2222">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2223">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2224">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2225">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2226">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2226">Data</span></span>|<span data-ttu-id="0bd66-2227">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2228">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2229">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2229">Empty</span></span>|  
|<span data-ttu-id="0bd66-2230">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2231">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2232">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2233">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2235">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2236">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2237">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2238">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2239">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2240">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2241">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2242">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2243">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2243">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2244">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2244">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2245">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2245">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2246">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2247">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2247">Required.</span></span> <span data-ttu-id="0bd66-2248">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2248">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2249">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2249">Required.</span></span> <span data-ttu-id="0bd66-2250">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2250">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2251">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2251">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2252">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2253">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2254">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2255">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2256">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2257">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2258">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2259">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2260">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2261">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2261">Data</span></span>|<span data-ttu-id="0bd66-2262">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2263">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2264">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2264">Empty</span></span>|  
|<span data-ttu-id="0bd66-2265">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2266">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2267">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2268">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2270">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2271">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2272">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2273">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2274">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2275">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2276">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2277">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2278">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2278">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2279">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2279">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2280">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2280">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2281">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2282">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2282">Required.</span></span> <span data-ttu-id="0bd66-2283">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2283">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2284">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2284">Required.</span></span> <span data-ttu-id="0bd66-2285">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2285">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2286">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2286">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2287">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2288">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2289">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2290">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2291">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2292">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2293">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2294">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2295">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2296">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2296">Data</span></span>|<span data-ttu-id="0bd66-2297">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2298">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2299">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2299">Empty</span></span>|  
|<span data-ttu-id="0bd66-2300">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2301">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2302">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2303">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2305">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2306">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2307">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2308">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2309">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2310">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2311">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2312">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2313">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2313">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2314">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2314">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2315">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2315">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2316">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2317">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2317">Required.</span></span> <span data-ttu-id="0bd66-2318">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2318">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2319">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2319">Required.</span></span> <span data-ttu-id="0bd66-2320">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2320">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2321">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2321">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2322">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2323">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2324">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2325">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2326">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2327">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2328">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2329">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2330">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2331">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2331">Data</span></span>|<span data-ttu-id="0bd66-2332">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2333">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2334">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2334">Empty</span></span>|  
|<span data-ttu-id="0bd66-2335">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2336">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2337">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2338">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2340">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2341">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2342">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2343">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2344">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2345">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2346">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2347">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2348">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2348">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2349">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2349">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2350">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2350">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2351">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2352">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2352">Required.</span></span> <span data-ttu-id="0bd66-2353">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2354">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2354">Required.</span></span> <span data-ttu-id="0bd66-2355">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2355">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2356">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2356">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2357">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2358">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2359">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2360">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2361">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2362">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2363">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2364">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2365">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2366">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2366">Data</span></span>|<span data-ttu-id="0bd66-2367">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2368">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2369">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2369">Empty</span></span>|  
|<span data-ttu-id="0bd66-2370">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2371">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2372">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2373">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2375">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2376">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2377">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2378">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2379">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2380">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2381">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2382">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2383">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2383">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2384">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2384">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2385">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2385">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2386">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2387">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2387">Required.</span></span> <span data-ttu-id="0bd66-2388">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2388">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2389">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2389">Required.</span></span> <span data-ttu-id="0bd66-2390">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2390">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2391">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2391">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2392">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2393">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2394">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2395">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2396">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2397">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2398">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2399">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2400">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2401">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2401">Data</span></span>|<span data-ttu-id="0bd66-2402">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2403">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2404">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2404">Empty</span></span>|  
|<span data-ttu-id="0bd66-2405">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2406">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2407">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2408">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2410">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2411">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2412">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2413">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2414">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2415">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2416">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2417">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2418">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2418">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2419">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2419">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2420">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2420">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2421">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2422">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2422">Required.</span></span> <span data-ttu-id="0bd66-2423">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2423">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2424">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2424">Required.</span></span> <span data-ttu-id="0bd66-2425">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2425">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2426">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2426">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2427">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2428">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2429">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2430">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2431">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2432">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2433">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2434">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2435">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2436">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2436">Data</span></span>|<span data-ttu-id="0bd66-2437">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2438">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2439">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2439">Empty</span></span>|  
|<span data-ttu-id="0bd66-2440">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2441">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2442">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2443">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2445">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2446">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2447">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2448">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2449">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2450">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2451">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2452">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2453">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2453">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2454">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2454">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2455">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2455">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2456">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2457">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2457">Required.</span></span> <span data-ttu-id="0bd66-2458">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2458">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2459">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2459">Required.</span></span> <span data-ttu-id="0bd66-2460">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2460">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2461">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2461">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2462">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2463">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2464">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2465">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2466">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2467">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2468">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2469">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2470">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2471">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2471">Data</span></span>|<span data-ttu-id="0bd66-2472">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2473">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2474">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2474">Empty</span></span>|  
|<span data-ttu-id="0bd66-2475">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2476">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2477">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2478">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2480">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2481">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2482">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2483">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2484">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2485">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2486">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2487">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2488">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2488">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2489">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2489">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2490">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2490">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2491">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2492">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2492">Required.</span></span> <span data-ttu-id="0bd66-2493">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2493">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="0bd66-2494">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2494">Required.</span></span> <span data-ttu-id="0bd66-2495">Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2495">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="0bd66-2496">Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2496">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2497">Die `Input` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2498">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2499">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2500">Mit gelesene Daten `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="0bd66-2501">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2502">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2503">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic 2005-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="0bd66-2504">Beim Lesen standard Zeichenfolgen- oder numerische Daten Variablen ohne Änderung zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="0bd66-2505">Die folgende Tabelle zeigt, wie die Eingabedaten behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="0bd66-2506">Daten</span><span class="sxs-lookup"><span data-stu-id="0bd66-2506">Data</span></span>|<span data-ttu-id="0bd66-2507">Wert, der Variablen zugewiesen</span><span class="sxs-lookup"><span data-stu-id="0bd66-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="0bd66-2508">Als Trennzeichen Komma oder die leere Zeile</span><span class="sxs-lookup"><span data-stu-id="0bd66-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="0bd66-2509">Empty</span><span class="sxs-lookup"><span data-stu-id="0bd66-2509">Empty</span></span>|  
|<span data-ttu-id="0bd66-2510">#NULL #</span><span class="sxs-lookup"><span data-stu-id="0bd66-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="0bd66-2511">#TRUE # oder #FALSE</span><span class="sxs-lookup"><span data-stu-id="0bd66-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="0bd66-2512">`True` oder `False`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="0bd66-2513">Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="0bd66-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="0bd66-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="0bd66-2515">`errornumber` (die Variable ist ein Objekt, das als "Fehler" gekennzeichnet)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="0bd66-2516">Wenn Sie das Ende der Datei, erreichen während Sie eines Datenelements, wird die Eingabe wird beendet, und ein Fehler auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2517">Die `Input` Funktion ist nicht lokalisiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="0bd66-2518">Z. B. Wenn Sie 3,14159, geben Sie in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2519">Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2520">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2521">Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="0bd66-2522">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten geschrieben werden, mithilfe der `Write` Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch ein Komma getrennt, z. B.: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2523">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2523">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2524">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2524">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2525">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2525">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2526">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2527">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2527">Required.</span></span> <span data-ttu-id="0bd66-2528">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2528">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="0bd66-2529">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2529">Required.</span></span> <span data-ttu-id="0bd66-2530">Ein beliebiger gültiger numerischer Ausdruck, der die Anzahl der zu lesenden Zeichen angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2530">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="0bd66-2531">Gibt einen <see langword="String" />-Wert zurück, der Zeichen aus einer im Modus <see langword="Input" /> oder <see langword="Binary" /> geöffneten Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="0bd66-2532">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="0bd66-2533">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2534">Gibt einen <see langword="String" />-Wert zurück, der Zeichen aus einer im Modus <see langword="Input" /> oder <see langword="Binary" /> geöffneten Datei enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="0bd66-2535">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2536">Die `InputString` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2537">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2538">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2539">Mit gelesene Daten der `InputString` Funktion ist in der Regel in eine Datei geschrieben, mit `Print` oder `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="0bd66-2540">Verwenden Sie diese Funktion nur für Dateien, die im geöffneten `Input` oder `Binary` Modus.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="0bd66-2541">Im Gegensatz zu den `Input` -Funktion, die `InputString` Funktionsergebnis ist die gelesenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="0bd66-2542">Dies schließt Kommas, Wagenrücklaufzeichen, Zeilenvorschübe, Anführungszeichen und Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="0bd66-2543">Dateien für geöffnet `Binary` für den Zugriff auf einem Versuch, lesen in der Datei mit der `InputString` Funktion bis `EOF` gibt `True` wird ein Fehler generiert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="0bd66-2544">Verwenden Sie die `LOF` und `Loc` anstelle von Funktionen `EOF` beim Lesen von Binärdateien mit `InputString`, oder verwenden Sie `FileGet` bei Verwendung der `EOF` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2545">Beim Lesen aus Dateien, nehmen Sie keine Sicherheitsfragen die richtigen Entscheidungen über den Inhalt der Datei anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2546">Z. B. möglicherweise eine Datei namens "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2547">Dieses Beispiel verwendet die `InputString` Funktion, um Zeichen aus einer Datei gelesen und zum Drucken der `Output` Fenster.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="0bd66-2548">In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere Zeilen mit Beispieldaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2549"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2549"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-2550"><paramref name="CharCount" /> &lt; 0 oder &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2550"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2551">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2551">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2552">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2553">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2553">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="0bd66-2554">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2554">Required.</span></span> <span data-ttu-id="0bd66-2555">Ein <see langword="String" />-Ausdruck, der einen oder mehrere Namen von zu löschenden Dateien angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2555"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="0bd66-2556"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2556"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-2557">Löscht Dateien von einem Datenträger.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2557">Deletes files from a disk.</span></span> <span data-ttu-id="0bd66-2558">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="0bd66-2559">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2560">`Kill` unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="0bd66-2561">**Sicherheitshinweis** zum Ausführen der `Kill` -Funktion erfordert `Read` und `PathDiscovery` flags der <xref:System.Security.Permissions.FileIOPermission> der ausgeführte Code erteilt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="0bd66-2562">Weitere Informationen finden Sie unter <xref:System.Security.SecurityException> [Codezugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2563">Dieses Beispiel verwendet die `Kill` Funktion, um eine Datei von einem Datenträger zu löschen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2564">Zieldatei(en) geöffnet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2564">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-2565">Zieldatei(en) nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2565">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="0bd66-2566">Berechtigung verweigert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2566">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2567">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2567">Required.</span></span> <span data-ttu-id="0bd66-2568">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2568">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-2569">Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2570">Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2571">Die `LineInput` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2572">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2573">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2574">Mit gelesene Daten `LineInput` in der Regel in eine Datei geschrieben wird, mithilfe von `Print`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2575">Beim Lesen aus Dateien, nehmen Sie keine Entscheidungen für den Inhalt einer Datei, die anhand der Dateinamenerweiterung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="0bd66-2576">Z. B. möglicherweise eine Datei mit dem Namen "Form1.vb" in einer Visual Basic-Quelldatei nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="0bd66-2577">Die `LineInput` Funktion liest Zeichen aus einer Datei ein, zu einem Zeitpunkt, bis er feststellt, dass einen Wagenrücklauf (`Chr(13)`) oder Wagenrücklauf/Zeilenvorschub (`Chr(13) + Chr(10)`) Sequenz.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="0bd66-2578">Carriage Return/Line feed Sequenzen werden übersprungen und nicht auf die Zeichenfolge angefügt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2579">Lesen aus einer Datei mithilfe der `LineInput` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2580">Dieses Beispiel verwendet die `LineInput` -Funktion zum Lesen einer Zeile aus einer sequenziellen Datei und einer Variablen zuweisen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="0bd66-2581">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die mehrere Zeilen mit Beispieldaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="0bd66-2582">Dateiende erreicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2582">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2583"><paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2583"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2584">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2584">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2585">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2586">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2586">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2587">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2587">Required.</span></span> <span data-ttu-id="0bd66-2588">Eine beliebige gültige <see langword="Integer" />-Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2588">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-2589">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition in einer offenen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2590">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition in einer offenen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2591">Die `Loc` Funktion ist nullbasiert, verwenden, um das erste Byte in einer Datei abrufen gibt 0 zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="0bd66-2592">Die `Loc` -Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2593">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2594">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2595">Im folgenden wird den Rückgabewert für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="0bd66-2596">Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-2596">Mode</span></span>|<span data-ttu-id="0bd66-2597">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="0bd66-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="0bd66-2598">Anzahl der dem letzten Datensatz gelesen oder geschrieben werden, auf die Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="0bd66-2599">Aktuelle Byte-Position in der Datei geteilt durch 128.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="0bd66-2600">Zurückgegebene Informationen werden jedoch von `Loc` für sequenzielle Dateien ist weder verwendet noch benötigt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="0bd66-2601">Die Position des letzten Bytes gelesen bzw. geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2602">Dieses Beispiel verwendet die `Loc` Funktion, um die aktuelle Lese-/Schreibposition in einer offenen Datei zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="0bd66-2603">In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere Zeilen mit Beispieldaten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2604">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2604">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-2605">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2606">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2607">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2608">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2608">Required.</span></span> <span data-ttu-id="0bd66-2609">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2609">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-2610">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2611">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2612">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2613">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="0bd66-2614">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="0bd66-2615">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="0bd66-2616">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="0bd66-2617">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="0bd66-2618">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2619">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="0bd66-2620">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2621">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2621">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2622">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2622">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2623">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2623">Required.</span></span> <span data-ttu-id="0bd66-2624">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2624">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="0bd66-2625">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2625">Optional.</span></span> <span data-ttu-id="0bd66-2626">Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2626">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="0bd66-2627">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2628">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2629">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2630">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="0bd66-2631">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="0bd66-2632">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="0bd66-2633">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="0bd66-2634">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="0bd66-2635">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2636">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="0bd66-2637">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2638">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2638">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2639">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2639">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2640">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2640">Required.</span></span> <span data-ttu-id="0bd66-2641">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2641">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="0bd66-2642">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2642">Optional.</span></span> <span data-ttu-id="0bd66-2643">Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2643">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="0bd66-2644">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2644">Optional.</span></span> <span data-ttu-id="0bd66-2645">Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2645">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="0bd66-2646">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2647">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2648">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2649">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="0bd66-2650">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="0bd66-2651">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="0bd66-2652">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="0bd66-2653">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="0bd66-2654">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2655">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="0bd66-2656">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2657">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2657">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2658">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2658">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2659">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2659">Required.</span></span> <span data-ttu-id="0bd66-2660">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2660">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-2661">Gibt einen <see langword="Long" /> zurück, der die Größe einer mit der <see langword="FileOpen" />-Funktion geöffneten Datei in Bytes darstellt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-2662">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="0bd66-2663">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2664">Gibt einen <see langword="Long" /> zurück, der die Größe einer mit der <see langword="FileOpen" />-Funktion geöffneten Datei in Bytes darstellt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-2665">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2666">Verwenden der `FileLen` Funktion, um die Länge einer Datei zu erhalten, die nicht geöffnet ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2667">Dieses Beispiel verwendet die `LOF` Funktion, um die Größe einer geöffneten Datei zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="0bd66-2668">In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die Beispieldaten enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2669">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2669">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-2670">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2670">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-2671">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2671">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="0bd66-2672">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2672">Required.</span></span> <span data-ttu-id="0bd66-2673"><see langword="String" />-Ausdruck, der das zu erstellende Verzeichnis identifiziert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2673"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="0bd66-2674"><paramref name="Path" /> enthält möglicherweise das Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2674">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="0bd66-2675">Wenn kein Laufwerk angegeben wird, erstellt <see langword="MkDir" /> das neue Verzeichnis auf dem aktuellen Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-2676">Erstellt ein neues Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2676">Creates a new directory.</span></span> <span data-ttu-id="0bd66-2677">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="0bd66-2678">Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2679">Diese Funktion erstellt ein neues Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2680">Dieses Beispiel verwendet die `MkDir` Funktion, um ein Verzeichnis zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="0bd66-2681">Wenn das Laufwerk nicht angegeben ist, wird das neue Verzeichnis auf dem aktuellen Laufwerk erstellt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-2682"><paramref name="Path" /> ist nicht angegeben oder leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2682"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="0bd66-2683">Berechtigung verweigert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2683">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2684">Verzeichnis ist bereits vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2684">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="0bd66-2685">Gewusst wie: Erstellen eines Verzeichnisses in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2685">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2686">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2686">Required.</span></span> <span data-ttu-id="0bd66-2687">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2687">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="0bd66-2688">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2688">Optional.</span></span> <span data-ttu-id="0bd66-2689">0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2689">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="0bd66-2690">Die <paramref name="Output" />-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2690">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="0bd66-2691"><see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2691"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="0bd66-2692"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2692"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="0bd66-2693">Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2693">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2694">Die `Print` und `PrintLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2695">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2696">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2697">`Print` Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings `PrintLine` umfasst einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="0bd66-2698">Mit geschriebene Daten `Print` wird in der Regel aus einer Datei gelesen, mithilfe von `LineInput` oder `Input`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="0bd66-2699">Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; `Print`, nichts wird ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="0bd66-2700">Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden an den Begrenzungen der Registerkarte ", aber Mischen von Kommas ausgerichtet und `TAB` kann zu inkonsistente Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="0bd66-2701">Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="0bd66-2702">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="0bd66-2703">Daten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat, die vom System erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="0bd66-2704">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="0bd66-2705">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="0bd66-2706">Aber wenn `Output` Daten aus der Liste ist `DBNull`, `Null` in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="0bd66-2707">Für `Error` Daten, die Ausgabe angezeigt, als `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="0bd66-2708">Die `Error` Schlüsselwort wird nicht unabhängig vom Gebietsschema übersetzt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="0bd66-2709">Alle Daten, die in die Datei geschrieben werden, mithilfe von `Print` Dezimaltrennzeichen; ist, also die Daten ordnungsgemäß formatiert mit entsprechenden Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="0bd66-2710">Wenn der Benutzer zur Ausgabe von Daten für die Verwendung durch mehrere Sprachversionen möchte `Write` verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="0bd66-2711">Schreiben in eine Datei mit den `Print` oder `PrintLine` Functions erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2712">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2713">Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen zum Schreiben von Daten in eine Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2714">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2714">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2715">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2715">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2716">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2717">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2717">Required.</span></span> <span data-ttu-id="0bd66-2718">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2718">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="0bd66-2719">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2719">Optional.</span></span> <span data-ttu-id="0bd66-2720">0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2720">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="0bd66-2721">Die <paramref name="Output" />-Argumenteinstellungen lauten:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2721">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="0bd66-2722"><see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2722"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="0bd66-2723"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2723"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="0bd66-2724">Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2724">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2725">Die `Print` und `PrintLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2726">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2727">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2728">`Print` Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings`PrintLine` umfasst einen Zeilenvorschub.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="0bd66-2729">Mit geschriebene Daten `Print` wird in der Regel aus einer Datei gelesen, mithilfe von `LineInput` oder `Input`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="0bd66-2730">Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; `Print`, nichts wird ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="0bd66-2731">Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden an den Begrenzungen der Registerkarte ", aber Mischen von Kommas ausgerichtet und `TAB` kann zu inkonsistente Ergebnissen führen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="0bd66-2732">Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="0bd66-2733">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="0bd66-2734">Daten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat, die vom System erkannt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="0bd66-2735">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="0bd66-2736">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="0bd66-2737">Aber wenn `Output` Daten aus der Liste ist `DBNull`, `Null` in die Datei geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="0bd66-2738">Für `Error` Daten, die Ausgabe angezeigt, als `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="0bd66-2739">Die `Error` Schlüsselwort wird nicht unabhängig vom Gebietsschema übersetzt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="0bd66-2740">Alle Daten, die in die Datei geschrieben werden, mithilfe von `Print` Dezimaltrennzeichen; ist, also die Daten ordnungsgemäß formatiert mit entsprechenden Dezimaltrennzeichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="0bd66-2741">Wenn der Benutzer zur Ausgabe von Daten für die Verwendung durch mehrere Sprachversionen möchte `Write` verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="0bd66-2742">Schreiben in eine Datei mit den `Print` oder `PrintLine` Functions erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-2743">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2744">Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen zum Schreiben von Daten in eine Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2745">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2745">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-2746">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2746">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-2747">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="0bd66-2748">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2748">Required.</span></span> <span data-ttu-id="0bd66-2749">Ein <see langword="String" />-Ausdruck, der den Namen und den Speicherort der vorhandenen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2749"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="0bd66-2750"><paramref name="OldPath" /> kann das Verzeichnis und das Laufwerk der Datei beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2750"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="0bd66-2751">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2751">Required.</span></span> <span data-ttu-id="0bd66-2752">Ein <see langword="String" />-Ausdruck, der den Namen und den Speicherort der neuen Datei angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2752"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="0bd66-2753"><paramref name="NewPath" /> kann das Verzeichnis und das Laufwerk des Zielspeicherorts beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2753"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="0bd66-2754">Der durch <paramref name="NewPath" /> angegebene Dateiname darf noch nicht vorhanden sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2754">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="0bd66-2755">Benennt eine Datenträgerdatei oder ein Verzeichnis um.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2755">Renames a disk file or directory.</span></span> <span data-ttu-id="0bd66-2756">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="0bd66-2757">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2758">Die`Rename` Funktion benennt eine Datei und verschiebt ihn in ein anderes Verzeichnis aus, wenn dies erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="0bd66-2759">Die `Rename` Funktion kann eine Datei auf Laufwerken verschoben, aber es kann nur ein vorhandenes Verzeichnis umbenennen Wenn beide `NewPath` und `OldPath` auf dem gleichen Laufwerk befinden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="0bd66-2760">`Rename` eine neue Datei oder ein Verzeichnis kann nicht erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="0bd66-2761">Mithilfe der `Rename` erzeugt einen Fehler, Funktion, die auf eine geöffnete Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="0bd66-2762">Sie müssen eine geöffnete Datei schließen, bevor Sie es umbenennen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="0bd66-2763">`Rename` Argumente können nicht mehrere Zeichen (\*) und Platzhalter für einzelne Zeichen (?) enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0bd66-2764">Bei Verwendung `Rename` um eine Datei von einem nicht geschützten Speicherort auf einem geschützten Speicherort zu kopieren, behält die Datei weniger eingeschränkte Rechte.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="0bd66-2765">Stellen Sie sicher, dass kein potenzielles Sicherheitsrisiko entstehen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2766">Dieses Beispiel verwendet die `Rename` Funktion, um eine Datei umzubenennen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="0bd66-2767">Für die Zwecke dieses Beispiels wird davon ausgegangen Sie, dass die Verzeichnisse, die bereits angegeben sind vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-2768">Der Pfad ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2768">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-2769">Die <paramref name="OldPath" />-Datei ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2769"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2770">Kann nicht auf anderes Gerät umbenannt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2770">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="0bd66-2771">Gewusst wie: Umbenennen einer Datei in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2771">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bd66-2772">Schließt alle mit der <see langword="FileOpen" />-Funktion geöffneten Datenträgerdateien.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-2773">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="0bd66-2774">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2775">Die `Reset` -Funktion schließt alle aktive Dateien geöffnet, indem die `FileOpen` Funktion, und hat die gleiche Funktion wie `FileClose()` ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2776">Dieses Beispiel verwendet die `Reset` Funktion, um alle geöffneten Dateien geschlossen und der Inhalt der alle Puffer auf Datenträger geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="0bd66-2777">Beachten Sie die Verwendung der `Object` Variable `FileNumber` als eine Zeichenfolge und eine Zahl.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="0bd66-2778">End Statement</span><span class="sxs-lookup"><span data-stu-id="0bd66-2778">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="0bd66-2779">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2779">Required.</span></span> <span data-ttu-id="0bd66-2780"><see langword="String" />-Ausdruck, der das zu entfernende Verzeichnis oder den zu entfernenden Ordner identifiziert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2780"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="0bd66-2781"><paramref name="Path" /> kann das Laufwerk enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2781"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="0bd66-2782">Wenn kein Laufwerk angegeben wird, entfernt <see langword="RmDir" /> das Verzeichnis vom aktuellen Laufwerk.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="0bd66-2783">Entfernt ein vorhandenes Verzeichnis.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2783">Removes an existing directory.</span></span> <span data-ttu-id="0bd66-2784">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="0bd66-2785">Weitere Informationen finden Sie unter <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2786">Ein Fehler auftritt, wenn Sie versuchen, `RmDir` in einem Verzeichnis, das Dateien enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="0bd66-2787">Verwenden der `Kill` Funktion, um alle Dateien zu löschen, bevor Sie versuchen, ein Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2788">Dieses Beispiel verwendet die `RmDir` Funktion, um ein vorhandenes Verzeichnis zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-2789"><paramref name="Path" /> ist nicht angegeben oder leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2789"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2790">Zielverzeichnis enthält Dateien.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2790">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0bd66-2791">Verzeichnis ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2791">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-2792">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-2793">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="0bd66-2794">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2795">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2795">Required.</span></span> <span data-ttu-id="0bd66-2796">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2796">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-2797">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-2798">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="0bd66-2799">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2800">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2801">`Seek` Gibt einen Wert zwischen 1 und 2.147.483.647 zurück (entspricht 2 ^ 31 - 1), inklusive.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="0bd66-2802">Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="0bd66-2803">Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-2803">Mode</span></span>|<span data-ttu-id="0bd66-2804">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="0bd66-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="0bd66-2805">Anzahl des nächsten Datensatzes gelesen bzw. geschrieben werden</span><span class="sxs-lookup"><span data-stu-id="0bd66-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="0bd66-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="0bd66-2807">Byte-Position, an dem der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="0bd66-2808">Das erste Byte in einer Datei ist an Position 1, das zweite Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2809">Dieses Beispiel verwendet die `Seek` Funktion die aktuelle Dateiposition zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="0bd66-2810">Im Beispiel wird vorausgesetzt `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="0bd66-2811">Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="0bd66-2812">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt zurück, die mit der der nächste Vorgang stattfindet, Byte-Position.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="0bd66-2813">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="0bd66-2814">Dieses Beispiel verwendet die `Seek` Funktion zum Festlegen der Position für den nächsten Lesevorgang oder in einer Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="0bd66-2815">Anders als in den Modi geöffneten Dateien `Random` Modus `Seek` die Byte-Position, an dem der nächste Vorgang tritt auf, legt sie fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="0bd66-2816">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2817">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2817">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-2818">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2818">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-2819">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2819">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2820">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2820">Required.</span></span> <span data-ttu-id="0bd66-2821">Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2821">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="0bd66-2822">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2822">Required.</span></span> <span data-ttu-id="0bd66-2823">Eine Zahl im Bereich 1–2.147.483.647 einschließlich, die angibt, wo die nächste Lese-/Schreiboperation erfolgen soll.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2823">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="0bd66-2824">Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="0bd66-2825">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="0bd66-2826">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2827">`Seek` Gibt einen Wert zwischen 1 und 2.147.483.647 zurück (entspricht 2 ^ 31 - 1), inklusive.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="0bd66-2828">Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="0bd66-2829">Modus</span><span class="sxs-lookup"><span data-stu-id="0bd66-2829">Mode</span></span>|<span data-ttu-id="0bd66-2830">Rückgabewert</span><span class="sxs-lookup"><span data-stu-id="0bd66-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="0bd66-2831">Anzahl des nächsten Datensatzes gelesen bzw. geschrieben werden</span><span class="sxs-lookup"><span data-stu-id="0bd66-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="0bd66-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="0bd66-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="0bd66-2833">Byte-Position, an dem der nächste Vorgang auftritt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="0bd66-2834">Das erste Byte in einer Datei ist an Position 1, das zweite Byte an Position 2 und So weiter.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2835">Dieses Beispiel verwendet die `Seek` Funktion die aktuelle Dateiposition zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="0bd66-2836">Im Beispiel wird vorausgesetzt `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="0bd66-2837">Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="0bd66-2838">Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt zurück, die mit der der nächste Vorgang stattfindet, Byte-Position.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="0bd66-2839">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="0bd66-2840">Dieses Beispiel verwendet die `Seek` Funktion zum Festlegen der Position für den nächsten Lesevorgang oder in einer Datei zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="0bd66-2841">Anders als in den Modi geöffneten Dateien `Random` Modus `Seek` die Byte-Position, an dem der nächste Vorgang tritt auf, legt sie fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="0bd66-2842">Angenommen `TestFile` ist eine Datei, die mehrere Zeilen Text enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2843">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2843">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0bd66-2844">Lesen aus Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2844">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="0bd66-2845">Schreiben in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2845">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="0bd66-2846">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2846">Required.</span></span> <span data-ttu-id="0bd66-2847">Ein <see langword="String" />-Ausdruck, der einen Dateinamen angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2847"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="0bd66-2848"><paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2848"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="0bd66-2849">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2849">Required.</span></span> <span data-ttu-id="0bd66-2850">Konstanter oder numerischer Ausdruck, dessen Summe Dateiattribute angibt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2850">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="0bd66-2851">Legt Attributinformationen für eine Datei fest.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2851">Sets attribute information for a file.</span></span> <span data-ttu-id="0bd66-2852">Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="0bd66-2853">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2854">Ein Laufzeitfehler tritt auf, wenn Sie versuchen, die die Attribute einer geöffneten Datei festzulegen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="0bd66-2855">Die `Attributes` Argument Enumerationswerte lauten wie folgt:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="0bd66-2856">Wert</span><span class="sxs-lookup"><span data-stu-id="0bd66-2856">Value</span></span>|<span data-ttu-id="0bd66-2857">Konstante</span><span class="sxs-lookup"><span data-stu-id="0bd66-2857">Constant</span></span>|<span data-ttu-id="0bd66-2858">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="0bd66-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="0bd66-2859">Normal (Standard).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="0bd66-2860">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="0bd66-2861">Ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="0bd66-2862">Systemdatei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="0bd66-2863">Volumebezeichnung</span><span class="sxs-lookup"><span data-stu-id="0bd66-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="0bd66-2864">Verzeichnis oder Ordner.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="0bd66-2865">Die Datei wurde nach der letzten Sicherung geändert.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="0bd66-2866">Die Datei hat einen anderen Namen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2867">Diese Enumerationen werden von der Programmiersprache Visual Basic angegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="0bd66-2868">Die Namen können eine beliebige Stelle im Code anstelle der tatsächlichen Werte verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2869">Dieses Beispiel verwendet die `SetAttr` -Funktion zum Festlegen der Attribute einer Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0bd66-2870"><paramref name="Attribute" />-Typ ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2870"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="0bd66-2871">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2871">Required.</span></span> <span data-ttu-id="0bd66-2872">Die Anzahl von Leerzeichen, die vor dem Anzeigen oder Ausgeben des nächsten Ausdrucks in einer Liste eingefügt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="0bd66-2873">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2874">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2875">Wenn `Count` ist kleiner als die Zeilenbreite der Ausgabe, die nächste Ausgabeposition sofort die Anzahl der ausgegebenen Leerzeichen folgt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="0bd66-2876">Wenn`Count` ist größer als die Breite der Ausgabe, `SPC` die nächste Ausgabeposition unter Verwendung der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="0bd66-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="0bd66-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="0bd66-2878">Beispielsweise ist die aktuelle Ausgabeposition 24, Breite der Ausgabe ist 80, und geben Sie `SPC(90)`, die nächste Ausgabe beginnt an Position 34 (aktuelle Ausgabeposition + die restlichen 90/80).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="0bd66-2879">Ist der Unterschied zwischen der aktuellen Ausgabeposition und der Breite der Ausgabe weniger als `Count` (oder `Count` `Mod` *Breite*), wird die `SPC` Funktion springt an den Anfang der nächsten Zeile und generiert Leerzeichen gleich `Count` -(*Breite* - *aktuelleAusgabeposition*).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2880">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2881">Dieses Beispiel verwendet die `SPC` -Funktion zum Positionieren der Ausgabe in einer Datei und in der **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="0bd66-2882">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2882">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-2883">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bd66-2884">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2885">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2886">Wenn die aktuelle Ausgabeposition in der aktuellen Zeile größer als `Column`, `TAB` der Spaltenwert gleich ans `Column` in der nächsten Ausgabezeile.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="0bd66-2887">Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Ausgabeposition in Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="0bd66-2888">Wenn `Column` ist größer als die Breite der Ausgabe, `TAB` die nächste Ausgabeposition unter Verwendung der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="0bd66-2889">Mod Spaltenbreite</span><span class="sxs-lookup"><span data-stu-id="0bd66-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="0bd66-2890">Z. B. wenn *Breite* ist 80, und geben Sie Sie `TAB(90)`, beginnt die nächste Ausgabe in der Spalte 10 (der Rest von 90/80).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="0bd66-2891">Wenn `Column` ist kleiner als die aktuelle Ausgabeposition, beginnt die Ausgabe in der nächsten Zeile an die berechneten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="0bd66-2892">Wenn die berechnete Position größer als die aktuelle Position ist, Drucken beginnt die Ausgabe an die berechnete Position in der gleichen Zeile an.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="0bd66-2893">Die am weitesten links stehende Ausgabeposition in eine Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="0bd66-2894">Bei Verwendung der `Print` oder `PrintLine` Funktionen in Dateien, die Ausgabeposition ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="0bd66-2895">Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="0bd66-2896">Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2897">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite der Buchstaben enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2898">Dieses Beispiel verwendet die `TAB` -Funktion zum Positionieren der Ausgabe in einer Datei und in der **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="0bd66-2899">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2899">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="0bd66-2900">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2900">Optional.</span></span> <span data-ttu-id="0bd66-2901">Die Spaltennummer, zu der vor dem Anzeigen oder Drucken des nächsten Ausdrucks in einer Liste gewechselt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2901">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="0bd66-2902">Wenn der Wert nicht angegeben wird, verschiebt <see langword="TAB" /> die Einfügemarke an den Anfang der nächsten Ausgabezone.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="0bd66-2903">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="0bd66-2904">Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2905">Wenn die aktuelle Ausgabeposition in der aktuellen Zeile überschreitet `Column`, `TAB` der Spaltenwert gleich ans `Column` in der nächsten Ausgabezeile.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="0bd66-2906">Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Ausgabeposition in Spalte 1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="0bd66-2907">Wenn `Column` ist größer als die Breite der Ausgabe, `TAB` die nächste Ausgabeposition unter Verwendung der Formel berechnet:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="0bd66-2908">Mod Spaltenbreite</span><span class="sxs-lookup"><span data-stu-id="0bd66-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="0bd66-2909">Z. B. wenn *Breite* ist 80, und geben Sie Sie `TAB(90)`, beginnt die nächste Ausgabe in der Spalte 10 (der Rest von 90/80).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="0bd66-2910">Wenn `Column` ist kleiner als die aktuelle Ausgabeposition, beginnt die Ausgabe in der nächsten Zeile an die berechneten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="0bd66-2911">Wenn die berechnete Position größer als die aktuelle Position ist, Drucken beginnt die Ausgabe an die berechnete Position in der gleichen Zeile.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="0bd66-2912">Die am weitesten links stehende Ausgabeposition in eine Ausgabezeile ist immer 1.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="0bd66-2913">Bei Verwendung der `Print` oder `PrintLine` Funktionen in Dateien, die Ausgabeposition ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="0bd66-2914">Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="0bd66-2915">Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bd66-2916">Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite der Buchstaben enthalten.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2917">Dieses Beispiel verwendet die `TAB` -Funktion zum Positionieren der Ausgabe in einer Datei und in der **Ausgabe** Fenster.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="0bd66-2918">Operator Mod(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-2918">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0bd66-2919">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2920">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2921">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2922">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2922">Required.</span></span> <span data-ttu-id="0bd66-2923">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2923">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="0bd66-2924">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2925">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2926">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2927">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="0bd66-2928">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="0bd66-2929">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="0bd66-2930">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="0bd66-2931">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="0bd66-2932">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2933">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="0bd66-2934">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2935">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2935">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2936">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2936">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2937">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2937">Required.</span></span> <span data-ttu-id="0bd66-2938">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2938">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="0bd66-2939">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2939">Optional.</span></span> <span data-ttu-id="0bd66-2940">Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2940">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="0bd66-2941">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2942">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2943">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2944">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="0bd66-2945">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="0bd66-2946">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="0bd66-2947">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="0bd66-2948">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="0bd66-2949">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2950">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="0bd66-2951">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2952">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2952">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2953">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2953">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2954">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2954">Required.</span></span> <span data-ttu-id="0bd66-2955">Eine beliebige gültige Dateinummer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2955">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="0bd66-2956">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2956">Optional.</span></span> <span data-ttu-id="0bd66-2957">Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2957">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="0bd66-2958">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2958">Optional.</span></span> <span data-ttu-id="0bd66-2959">Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2959">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="0bd66-2960">Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="0bd66-2961">Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="0bd66-2962">Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2963">Die `Lock` und `Unlock` Funktionen werden, in denen mehrere Prozesse den Zugriff auf die gleiche Datei möglicherweise in Umgebungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="0bd66-2964">`Lock` und `Unlock` Funktionen werden immer paarweise verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="0bd66-2965">Die Argumente für `Lock` und `Unlock` müssen identisch sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="0bd66-2966">Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="0bd66-2967">Wenn `Record` allein angegeben ist der einzelne Datensatz wird gesperrt/freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="0bd66-2968">Wenn die Datei für sequenzielle ein- oder Ausgabe geöffnet wurde `Lock` und `Unlock` Auswirkungen auf die gesamte Datei, unabhängig von dem vom angegebenen Bereich `FromRecord` und`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-2969">Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="0bd66-2970">In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-2971">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2971">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-2972">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-2972">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-2973">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2973">Required.</span></span> <span data-ttu-id="0bd66-2974">Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2974">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="0bd66-2975">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2975">Optional.</span></span> <span data-ttu-id="0bd66-2976">Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2976">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="0bd66-2977">Schreibt Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2977">Writes data to a sequential file.</span></span> <span data-ttu-id="0bd66-2978">Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-2979">Die `Write` und `WriteLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-2980">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-2981">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-2982">Wenn Sie weglassen `Output`, eine leere Zeile wird in der Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="0bd66-2983">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="0bd66-2984">Im Gegensatz zu den `Print` -Funktion, die `Write` Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen an, wie sie in der Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="0bd66-2985">Sie müssen keinen explizite Trennzeichen in der Liste anzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="0bd66-2986">Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Datum, Null, und `Error` Datenformate unterstützt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="0bd66-2987">Die folgenden Annahmen für die universelle gefolgt sind, damit die Daten immer gelesen werden können und unter Verwendung ordnungsgemäß interpretiert `Input`, unabhängig vom Gebietsschema:</span><span class="sxs-lookup"><span data-stu-id="0bd66-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="0bd66-2988">Numerische Daten werden immer geschrieben mit einem Punkt als Dezimaltrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="0bd66-2989">Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="0bd66-2990">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="0bd66-2991">Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="0bd66-2992">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="0bd66-2993">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="0bd66-2994">Allerdings für null-Daten `#NULL#` geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="0bd66-2995">Für `Error` Daten, die Ausgabe angezeigt, als `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="0bd66-2996">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="0bd66-2997">`WriteLine` Fügt ein Zeilenumbruchzeichen (d. h. ein Wagenrücklauf-/Zeilenvorschubzeichen, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="0bd66-2998">Sie können Anführungszeichen in einer Zeichenfolge mit doppelten Anführungszeichen einbetten oder "".</span><span class="sxs-lookup"><span data-stu-id="0bd66-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="0bd66-2999">Ein auf ein Objekt angewendeter</span><span class="sxs-lookup"><span data-stu-id="0bd66-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="0bd66-3000">Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="0bd66-3001">Schreiben in eine Datei mit den `Write` oder `WriteLine` Functions erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-3002">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-3003">Dieses Beispiel verwendet die `Write` Funktion zum Schreiben von Rohdaten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0bd66-3004">Dateimodus ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3004">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-3005">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-3005">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-3006">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-3006">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-3007">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="0bd66-3008">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3008">Required.</span></span> <span data-ttu-id="0bd66-3009">Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3009">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="0bd66-3010">Dies ist optional.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3010">Optional.</span></span> <span data-ttu-id="0bd66-3011">Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3011">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="0bd66-3012">Schreibt Daten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3012">Writes data to a sequential file.</span></span> <span data-ttu-id="0bd66-3013">Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bd66-3014">Die `Write` und `WriteLine` Funktionen werden für die Abwärtskompatibilität bereitgestellt und auf die Leistung auswirken kann.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="0bd66-3015">Für neue Anwendungen die `My.Computer.FileSystem` Objekt bietet eine bessere Leistung.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="0bd66-3016">Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="0bd66-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="0bd66-3017">Wenn Sie weglassen `Output`, eine leere Zeile wird in der Datei ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="0bd66-3018">Mehrere Ausdrücke können durch ein Komma getrennt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="0bd66-3019">Im Gegensatz zu den `Print` -Funktion, die `Write` Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen an, wie sie in der Datei geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="0bd66-3020">Sie müssen keinen explizite Trennzeichen in der Liste anzugeben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="0bd66-3021">Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Datum, Null, und `Error` Datenformate unterstützt werden.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="0bd66-3022">Die folgenden Annahmen für die universelle gefolgt sind, damit die Daten immer gelesen werden können und unter Verwendung ordnungsgemäß interpretiert `Input`, unabhängig vom Gebietsschema:</span><span class="sxs-lookup"><span data-stu-id="0bd66-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="0bd66-3023">Numerische Daten werden immer geschrieben mit einem Punkt als Dezimaltrennzeichen verwendet.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="0bd66-3024">Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="0bd66-3025">Die `True` und `False` Schlüsselwörter werden nicht übersetzt, unabhängig vom Gebietsschema.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="0bd66-3026">Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="0bd66-3027">Wenn das Datum oder die Komponente fehlt oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="0bd66-3028">"Nothing" in die Datei geschrieben wird, wenn `Output` Daten ist leer.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="0bd66-3029">Allerdings für null-Daten `#NULL#` geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="0bd66-3030">Für `Error` Daten, die Ausgabe angezeigt, als `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="0bd66-3031">Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="0bd66-3032">`WriteLine` Fügt ein Zeilenumbruchzeichen (d. h. ein Wagenrücklauf-/Zeilenvorschubzeichen, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="0bd66-3033">Sie können Anführungszeichen in einer Zeichenfolge mit doppelten Anführungszeichen einbetten oder "".</span><span class="sxs-lookup"><span data-stu-id="0bd66-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="0bd66-3034">Ein auf ein Objekt angewendeter</span><span class="sxs-lookup"><span data-stu-id="0bd66-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="0bd66-3035">Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="0bd66-3036">Schreiben in eine Datei mit den `Write` oder `WriteLine` Functions erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="0bd66-3037">Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bd66-3038">Dieses Beispiel verwendet die `Write` Funktion zum Schreiben von Rohdaten in eine sequenzielle Datei.</span><span class="sxs-lookup"><span data-stu-id="0bd66-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="0bd66-3039">Dateizugriff mit Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-3039">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="0bd66-3040">Gewusst wie: Schreiben von Text in Dateien in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0bd66-3040">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="0bd66-3041">Vorgehensweise: Schreiben von Text in eine Datei mit einem Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0bd66-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
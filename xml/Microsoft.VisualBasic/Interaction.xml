<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3db2ebd669db6d0e1f12be28a90e1a8e5a863ed0" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68437537" /></Metadata><TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Das <see langword="Interaction" />-Modul enthält Prozeduren für die Interaktion mit Objekten, Anwendungen und Systemen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-sprach Schlüsselwörter und-Lauf Zeit Bibliothekselemente, die andere Programme ausführen, eine Methode oder eine Eigenschaft aufzurufen, ein Signal vom Computer erhalten, eine Befehlszeilen Zeichenfolge bereitstellen, com-Objekte bearbeiten und Dialogfelder steuern.  
  
## Examples  
 Im folgenden Beispiel wird die `Shell` -Funktion verwendet, um eine vom Benutzer angegebene Anwendung auszuführen. Wenn <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> Sie als zweites Argument angeben, wird die Anwendung in normaler Größe geöffnet, und der Fokus wird festgelegt.  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Informationen und Interaktionen: Zusammenfassung</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Schlüsselwörter (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktiviert eine Anwendung, die bereits ausgeführt wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="ProcessId"><see langword="Integer" /> zum Angeben der diesem Prozess zugewiesene Win32-Prozess-ID. Sie können die von der <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> zurückgegebene ID verwenden, sofern diese nicht 0 (null) ist.</param>
        <summary>Aktiviert eine Anwendung, die bereits ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden `AppActivate` Sie, um das aktive Fenster einer Anwendung in den Fokus zu rücken. Sie verfügen möglicherweise nicht über ein Handle oder einen Verweis auf das aktive Fenster oder wissen sogar, welches Fenster zu einem bestimmten Zeitpunkt aktiv ist. In einem solchen Fall können Sie die <xref:System.Windows.Forms.Control.Focus%2A> -Methode nicht verwenden.  
  
 Die `AppActivate` -Funktion ändert den Fokus auf die benannte Anwendung oder das benannte Fenster, wirkt sich jedoch nicht darauf aus, ob Sie maximiert oder minimiert ist. Der Fokus wechselt vom aktivierten Anwendungsfenster, wenn der Benutzer eine Aktion durchführt, um den Fokus zu ändern oder das Fenster zu schließen. Sie können die `Shell` -Funktion verwenden, um eine Anwendung zu starten und den Fenster Stil festzulegen.  
  
 Wenn Sie den `Title` -Parameter verwenden `AppActivate` , wird von ein Vergleich ohne Berücksichtigung der Groß-/Kleinschreibung verwendet; andernfalls ist eine genaue Entsprechung mit dem Inhalt der Titelleiste erforderlich. Zuerst werden die Fenster der obersten Ebene und dann die untergeordneten Fenster durchsucht. Wenn keine Entsprechung gefunden werden kann, wird eine <xref:System.ArgumentException>ausgelöst.  
  
 Sie können nur `AppActivate` mit Prozessen verwenden, die Windows besitzen. Bei den meisten Konsolen Anwendungen handelt es sich nicht um Windows, was bedeutet, dass Sie nicht in der Liste `AppActivate` der durchsuchenden Prozesse angezeigt werden. Beim Ausführen von einer Konsolenanwendung erstellt das System einen separaten Prozess zum Ausführen der Anwendung und gibt die Ausgabe an den Konsolen Prozess zurück. Wenn Sie die aktuelle Prozess-ID anfordern, erhalten Sie folglich die Prozess-ID dieses separaten Prozesses anstelle der Prozess-ID der Konsolenanwendung.  
  
 Zur Laufzeit aktiviert die Funktion `AppActivate` jede laufende Anwendung mit einem Titel, der mit oder `Title` mit einer überein `ProcessId`stimmenden Prozess-ID übereinstimmt. Wenn keine genaue Entsprechung vorliegt, wird jede Anwendung aktiviert, deren Titel Zeichenfolge mit `Title`endet. Wenn mehr als eine Anwendung mit dem Namen `Title`vorhanden ist `AppActivate` , wählt die Funktion willkürlich eine zum Aktivieren aus.  
  
> [!NOTE]
>  Die `AppActivate` -Funktion `UIPermission` erfordert auf <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> der-Ebene, die ihre Ausführung in teilweise vertrauenswürdigen Situationen beeinflussen kann. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 In diesem Beispiel werden verschiedene Verwendungsmöglichkeiten `AppActivate` der-Funktion zum Aktivieren eines Anwendungsfensters veranschaulicht. Wenn ein Notepad-Prozess nicht ausgeführt wird, wird im Beispiel <xref:System.ArgumentException>eine ausgelöst. Die `Shell` Prozedur geht davon aus, dass sich die Anwendungen in den angegebenen Pfaden befinden.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Title"><see langword="String" />-Ausdruck, der den Titel auf der Titelleiste der Anwendung angibt, die Sie aktivieren möchten. Sie können den der Anwendung beim Start zugewiesenen Titel verwenden.</param>
        <summary>Aktiviert eine Anwendung, die bereits ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden `AppActivate` Sie, um das aktive Fenster einer Anwendung in den Fokus zu rücken. Sie verfügen möglicherweise nicht über ein Handle oder einen Verweis auf das aktive Fenster oder wissen sogar, welches Fenster zu einem bestimmten Zeitpunkt aktiv ist. In einem solchen Fall können Sie die <xref:System.Windows.Forms.Control.Focus%2A> -Methode nicht verwenden.  
  
 Die `AppActivate` -Funktion ändert den Fokus auf die benannte Anwendung oder das benannte Fenster, wirkt sich jedoch nicht darauf aus, ob Sie maximiert oder minimiert ist. Der Fokus wechselt vom aktivierten Anwendungsfenster, wenn der Benutzer eine Aktion durchführt, um den Fokus zu ändern oder das Fenster zu schließen. Sie können die `Shell` -Funktion verwenden, um eine Anwendung zu starten und den Fenster Stil festzulegen.  
  
 Wenn Sie den `Title` -Parameter verwenden `AppActivate` , wird von ein Vergleich ohne Berücksichtigung der Groß-/Kleinschreibung verwendet; andernfalls ist eine genaue Entsprechung mit dem Inhalt der Titelleiste erforderlich. Zuerst werden die Fenster der obersten Ebene und dann die untergeordneten Fenster durchsucht. Wenn keine Entsprechung gefunden werden kann, wird eine <xref:System.ArgumentException>ausgelöst.  
  
 Sie können nur `AppActivate` mit Prozessen verwenden, die Windows besitzen. Bei den meisten Konsolen Anwendungen handelt es sich nicht um Windows, was bedeutet, dass Sie nicht in der Liste `AppActivate` der durchsuchenden Prozesse angezeigt werden. Beim Ausführen von einer Konsolenanwendung erstellt das System einen separaten Prozess zum Ausführen der Anwendung und gibt die Ausgabe an den Konsolen Prozess zurück. Wenn Sie die aktuelle Prozess-ID anfordern, erhalten Sie folglich die Prozess-ID dieses separaten Prozesses anstelle der Prozess-ID der Konsolenanwendung.  
  
 Zur Laufzeit aktiviert die Funktion `AppActivate` jede laufende Anwendung mit einem Titel, der mit oder `Title` mit einer überein `ProcessId`stimmenden Prozess-ID übereinstimmt. Wenn keine genaue Entsprechung vorliegt, wird jede Anwendung aktiviert, deren Titel Zeichenfolge mit `Title`endet. Wenn mehr als eine Anwendung mit dem Namen `Title`vorhanden ist `AppActivate` , wählt die Funktion willkürlich eine zum Aktivieren aus.  
  
> [!NOTE]
>  Die `AppActivate` -Funktion `UIPermission` erfordert auf <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> der-Ebene, die ihre Ausführung in teilweise vertrauenswürdigen Situationen beeinflussen kann. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 In diesem Beispiel werden verschiedene Verwendungsmöglichkeiten `AppActivate` der-Funktion zum Aktivieren eines Anwendungsfensters veranschaulicht. Wenn ein Notepad-Prozess nicht ausgeführt wird, wird im Beispiel <xref:System.ArgumentException>eine ausgelöst. Die `Shell` Prozedur geht davon aus, dass sich die Anwendungen in den angegebenen Pfaden befinden.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Spielt einen Signalton über den Lautsprecher des Computers ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Tonhöhe und Dauer des Signal-Signals hängt von der Hardware-und Systemsoftware ab und unterscheidet sich daher von den Computern.  
  
> [!NOTE]
>  Die `Beep` -Funktion `UIPermission` erfordert auf <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> der-Ebene, die ihre Ausführung in teilweise vertrauenswürdigen Situationen beeinflussen kann. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 In diesem Beispiel wird `Beep` die-Funktion verwendet, um einen Ton über den Lautsprecher des Computers zu bescheinigen.  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/playing-sounds.md">Wiedergabe von Sound</related>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">Erforderlich. <see langword="Object" />. Ein Zeiger auf das Objekt, das die Eigenschaft oder Methode verfügbar macht.</param>
        <param name="ProcName">Erforderlich. <see langword="String" />. Ein Zeichenfolgenausdruck, der den Namen der Eigenschaft oder der Methode für das Objekt enthält.</param>
        <param name="UseCallType">Erforderlich. Ein Enumerationsmember vom Typ <see cref="T:Microsoft.VisualBasic.CallType" />, der den Typ der aufgerufenen Prozedur darstellt. Der Wert von <see langword="CallType" /> kann <see langword="Method" />, <see langword="Get" /> oder <see langword="Set" /> sein.</param>
        <param name="Args">Dies ist optional. <see langword="ParamArray" />. Ein Parameterarray mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
        <summary>Führt eine Methode für ein Objekt aus oder legt eine Eigenschaft für ein Objekt fest oder gibt diese zurück.</summary>
        <returns>Führt eine Methode für ein Objekt aus oder legt eine Eigenschaft für ein Objekt fest oder gibt diese zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `CallByName` -Funktion wird zur Laufzeit verwendet, um eine Eigenschaft zu erhalten, eine Eigenschaft festzulegen oder eine Methode aufzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird in der ersten Zeile verwendet `CallByName` , um die `Text` -Eigenschaft eines Textfelds festzulegen, die zweite Zeile Ruft den Wert `Text` der-Eigenschaft ab, und die dritte Zeile `Move` Ruft die-Methode auf, um das Textfeld zu verschieben.  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 Im nächsten Beispiel wird die `CallByName` -Funktion verwendet, `Add` um `Item` die-und-Methoden eines Auflistungs Objekts aufzurufen.  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ungültiger <paramref name="UseCallType" />-Wert; muss <see langword="Method" />, <see langword="Get" /> oder <see langword="Set" /> sein.</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Parameterarrays</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md">Aufrufen einer Eigenschaft oder Methode mit einem Zeichenfolgennamen</related>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Choice" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">Erforderlich. <see langword="Double" />. Numerischer Ausdruck, der einen Wert zwischen 1 und der Anzahl der im <paramref name="Choice" />-Argument übergebenen Elemente ergibt.</param>
        <param name="Choice">Erforderlich. <see langword="Object" />-Parameterarray. Sie können eine einzelne Variable oder einen Ausdruck, der den <see langword="Object" />-Datentyp ergibt, für eine durch Komma getrennte Liste von <see langword="Object" />-Variablen oder Ausdrücken oder für ein eindimensionales Array von <see langword="Object" />-Elementen angeben.</param>
        <summary>Wählt einen Wert aus einer Liste von Argumenten aus und gibt diesen zurück.</summary>
        <returns>Wählt einen Wert aus einer Liste von Argumenten aus und gibt diesen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Choose` -Funktion gibt basierend auf dem Wert von `Index`einen `Choice()`Member der Liste zurück, die an weitergegeben wurde. Der erste Member der Liste wird ausgewählt, wenn `Index` den Wert 1 hat. Der letzte Member der Liste wird ausgewählt, wenn `Index` ( `UBound``Choice()`) ist. Wenn `Index` außerhalb dieser Grenzwerte liegt `Choose` , `Nothing`wird zurückgegeben.  
  
 Wenn `Index` keine ganze Zahl ist, wird Sie auf die nächste ganze Zahl gerundet, bevor Sie ausgewertet wird.  
  
 Sie können verwenden `Choose` , um einen Wert in einer Liste von Möglichkeiten zu suchen.  
  
> [!NOTE]
>  Die Ausdrücke in der Argumentliste können Funktionsaufrufe einschließen. Im Rahmen der Vorbereitung der Argumentliste für den Aufruf von `Choose`ruft der Visual Basic-Compiler jede Funktion in jedem Ausdruck auf. Dies bedeutet, dass Sie sich nicht darauf verlassen können, dass eine bestimmte Funktion nicht aufgerufen wird, wenn `Index`ein anderer Ausdruck von ausgewählt wird.  
  
   
  
## Examples  
 In diesem Beispiel wird `Choose` die-Funktion verwendet, um einen Namen als Reaktion auf einen Index anzuzeigen, der `Ind` im-Parameter an die Prozedur übergeben wird.  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Argumentabschnitt der Befehlszeile zurück, mit der Visual Basic oder ein ausführbares Programm gestartet wird das mit Visual Basic entwickelt wurde. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung als die <see langword="Command" />-Funktion. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</summary>
        <returns>Der Argumentabschnitt der Befehlszeile, mit der Visual Basic oder ein ausführbares Programm gestartet wird, das mit Visual Basic entwickelt wurde.  
  
Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung als die <see langword="Command" />-Funktion. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem die Argumente zurückgegeben wurden, können Sie nach allgemeinen Trennzeichen suchen, z. b. Leerzeichen, Schrägstriche oder Schrägstriche, Bindestriche oder Anführungszeichen, um die Zeichenfolge für einzelne Parameter aufzuteilen oder zu durchsuchen.  
  
 Bei Anwendungen, die mit Visual Basic entwickelt und in eine exe-Datei kompiliert `Command` wurden, gibt die Funktion alle Argumente zurück, die nach dem Namen der Anwendung in der Befehlszeile angezeigt werden `MyApp(cmdlineargs)`, in der folgenden Form:.  
  
   
  
## Examples  
 In diesem Beispiel wird `Command` die-Funktion verwendet, um die Befehlszeilenargumente in einem Objekt zurückzugeben, das ein Array enthält.  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
        <related type="Article" href="~/docs/visual-basic/reference/command-line-compiler/index.md">Visual Basic Befehlszeilen Compiler</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md">Struktur von Visual Basic-Programmen</related>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">Erforderlich. <see langword="String" />. Die Programm-ID des zu erstellenden Objekts.</param>
        <param name="ServerName">Dies ist optional. <see langword="String" />. Der Name des Netzwerkservers, auf dem das Objekt erstellt wird. Wenn <paramref name="ServerName" /> eine leere Zeichenfolge ("") ist, wird der lokale Computer verwendet.</param>
        <summary>Erstellt und gibt einen Verweis auf ein COM-Objekt zurück. <see langword="CreateObject" /> kann in Visual Basic nur dann zur Erstellung von Klasseninstanzen verwendet werden, wenn diese explizit als COM-Komponenten verfügbar gemacht werden.</summary>
        <returns>Erstellt und gibt einen Verweis auf ein COM-Objekt zurück. <see langword="CreateObject" /> kann in Visual Basic nur dann zur Erstellung von Klasseninstanzen verwendet werden, wenn diese explizit als COM-Komponenten verfügbar gemacht werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine Instanz einer COM-Komponente zu erstellen, weisen Sie das von `CreateObject` zurückgegebene Objekt einer Objektvariablen zu:  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 Der Typ der Objektvariablen, die Sie zum Speichern des zurückgegebenen Objekts verwenden, kann die Leistung Ihrer Anwendung beeinträchtigen. Durch das Deklarieren einer Objekt `As Object` Variablen mit der-Klausel wird eine Variable erstellt, die einen Verweis auf einen beliebigen Objekttyp enthalten kann. Der Zugriff auf das Objekt über diese Variable ist jedoch *spät gebunden*, d. h., die Bindung tritt auf, wenn das Programm ausgeführt wird. Es gibt viele Gründe, warum Sie eine späte Bindung vermeiden sollten, einschließlich einer langsameren Anwendungsleistung.  
  
 Sie können eine Objekt Variable erstellen, die eine frühe Bindung ergibt, d. h. eine Bindung, wenn das Programm kompiliert wird. Fügen Sie zu diesem Zweck auf der Registerkarte **com** des Dialog Felds **Verweis hinzufügen** im Menü **Projekt** einen Verweis auf die Typbibliothek für das Objekt hinzu. Deklarieren Sie die Objekt Variable für den spezifischen Objekttyp. In den meisten Fällen ist es effizienter, die `Dim` -Anweisung und eine primäre Interop-Assembly zu verwenden, um-Objekte zu erstellen, als die `CreateObject` -Funktion zu verwenden.  
  
## <a name="interacting-with-unmanaged-code"></a>Interagieren mit nicht verwaltetem Code  
 Ein weiteres Problem besteht darin, dass COM-Objekte nicht verwalteten Code Code verwenden, ohne dass die Common Language Runtime. Die Kombination des verwalteten Codes Visual Basic mit nicht verwaltetem Code aus com ist mit einem gewissen Maß an Komplexität verbunden. Wenn Sie einen Verweis auf ein COM-Objekt hinzufügen, sucht Visual Basic nach einer primären Interop-Assembly (PIA) für diese Bibliothek. Wenn eine solche gefunden wird, wird Sie verwendet. Wenn eine PIA nicht gefunden wird, erstellt Sie eine Interoperabilitäts-Assembly, die lokale Interoperabilitäts Klassen für jede Klasse in der com-Bibliothek enthält. Weitere Informationen finden Sie unter [com-Interoperabilität in .NET Framework Anwendungen](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).  
  
 Sie sollten möglichst stark gebundene Objekte und primäre Interop-Assemblys verwenden. In den folgenden Beispielen wird `CreateObject` die-Funktion mit Microsoft Office-Objekten nur zu Demonstrationszwecken verwendet. Diese Objekte sind jedoch einfacher zu verwenden und zuverlässiger, wenn Sie mit der entsprechenden primären Interop-Assembly verwendet werden.  
  
## <a name="creating-an-object-on-a-remote-computer"></a>Erstellen eines Objekts auf einem Remote Computer  
 Sie können ein-Objekt auf einem Computer mit Remote Verbindung erstellen, indem Sie den Namen des Computers `ServerName` an das- `CreateObject` Argument der-Funktion übergeben. Dieser Name ist identisch mit dem Computer Namensteil eines Freigabe namens: bei einer Freigabe mit dem Namen "\\\myserver\public" `ServerName` ist "MyServer".  
  
> [!NOTE]
>  Weitere Informationen zum Bereitstellen einer Anwendung auf einem Computer mit Remote Netzwerk finden Sie in der com-Dokumentation (siehe Microsoft Developer Network). Möglicherweise müssen Sie einen Registrierungsschlüssel für die Anwendung hinzufügen.  
  
 Der folgende Code gibt die Versionsnummer einer Instanz von Excel zurück, die auf einem Remote Computer `MyServer`mit dem Namen ausgeführt wird:  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 Wenn der Remote Servername falsch ist oder nicht verfügbar ist, tritt ein Laufzeitfehler auf.  
  
> [!NOTE]
>  Verwenden `CreateObject` Sie, wenn keine aktuelle Instanz des-Objekts vorhanden ist. Wenn eine Instanz des-Objekts bereits ausgeführt wird, wird eine neue-Instanz gestartet, und ein Objekt vom angegebenen Typ wird erstellt. Verwenden Sie die `GetObject` -Funktion, um die aktuelle Instanz zu verwenden oder um die Anwendung zu starten und eine Datei zu laden. Wenn ein Objekt sich selbst als ein Einzelinstanzobjekt registriert hat, wird nur eine Instanz des Objekts erstellt, unabhängig davon, wie oft `CreateObject` es ausgeführt wird.  
  
## <a name="creating-framework-objects"></a>Erstellen von Frameworkobjekten  
 Sie können die `CreateObject` -Funktion nur zum Erstellen eines COM-Objekts verwenden. Obwohl es für das Erstellen eines .NET Framework Objekts keinen exakten äquivalenten Mechanismus <xref:System.Activator> gibt, <xref:System> enthält der im-Namespace Methoden zum Erstellen von lokalen oder Remote Objekten. Insbesondere die <xref:System.Activator.CreateInstance%2A> -Methode oder die <xref:System.Activator.CreateInstanceFrom%2A> -Methode ist möglicherweise nützlich.  
  
> [!IMPORTANT]
>  Die `CreateObject` Funktion erfordert die Berechtigung "nicht verwalteter Code", die sich möglicherweise auf deren Ausführung in teilweise vertrauenswürdigen Situationen auswirkt. Weitere Informationen finden <xref:System.Security.Permissions.SecurityPermission> Sie unter und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `CreateObject` -Funktion verwendet, um ein Microsoft Excel-Arbeitsblatt zu erstellen und das Arbeitsblatt in einer Datei zu speichern. Um dieses Beispiel verwenden zu können, muss Excel auf dem Computer installiert sein, auf dem das Programm ausgeführt wird. Außerdem müssen Sie auf der Registerkarte **com** des Dialog Felds **Verweis hinzufügen** im Menü **Projekt** einen Verweis auf die Typbibliothek hinzufügen. Der Name der Typbibliothek variiert abhängig von der auf dem Computer installierten Excel-Version. Die Typbibliothek für Microsoft Excel 2002 heißt beispielsweise **Microsoft Excel 10,0 Object Library**.  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Server ist nicht verfügbar</exception>
        <exception cref="T:System.IO.FileNotFoundException">Es ist kein Objekt des angegebenen Typs vorhanden.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">COM-Interoperabilität in .NET Framework-Anwendungen</related>
        <related type="Article" href="~/docs/framework/interop/index.md">Interoperation mit nicht verwaltetem Code</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen der Anwendung oder des Projekts, für die bzw. das der Abschnitt oder die Schlüsseleinstellung gilt.</param>
        <param name="Section">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen des Abschnitts, aus dem die Schlüsseleinstellung gelöscht wird. Wenn nur <paramref name="AppName" /> und <paramref name="Section" /> bereitgestellt werden, wird der angegebene Abschnitt mit allen zugehörigen Schlüsseleinstellungen gelöscht.</param>
        <param name="Key">Dies ist optional. <see langword="String" />-Ausdruck mit dem Namen der Schlüsseleinstellung, die gelöscht wird.</param>
        <summary>Löscht einen Abschnitt oder eine Schlüsseleinstellung aus einen Anwendungseintrag in der Windows-Registrierung. Das <see langword="My" />-Feature bietet bei Registrierungsvorgängen höhere Produktivität und Leistung, als die <see langword="DeleteSetting" />-Funktion. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn alle Argumente angegeben werden, wird die angegebene Einstellung gelöscht. Ein Laufzeitfehler tritt auf, wenn Sie versuchen, `DeleteSetting` für einen nicht vorhandenen Abschnitt oder eine nicht vorhandene Schlüssel Einstellung zu verwenden.  
  
 `DeleteSetting`erfordert, dass ein Benutzer angemeldet ist, da er unter dem `HKEY_LOCAL_USER` Registrierungsschlüssel betrieben wird, der erst aktiv ist, wenn sich ein Benutzer interaktiv anmeldet.  
  
 Registrierungs Einstellungen, auf die von einem nicht interaktiven Prozess aus zugegriffen werden soll (z. b. mtx. exe), sollten unter `HKEY_LOCAL_MACHINE\Software\` den `HKEY_USER\DEFAULT\Software` Registrierungs Schlüsseln oder gespeichert werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst die `SaveSetting` -Prozedur verwendet, um Einträge in der Windows- `MyApp` Registrierung für die Anwendung zu erstellen `DeleteSetting` , und anschließend wird die-Funktion verwendet, um Sie zu entfernen. Da kein `Key` Argument angegeben ist, wird der `Startup` gesamte Abschnitt gelöscht, einschließlich des Abschnitts namens und aller zugehörigen Schlüssel.  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Benutzer ist nicht angemeldet.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die zu einer Betriebssystem-Umgebungsvariablen gehörige Zeichenfolge zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Ausdruck, der entweder eine Zeichenfolge mit dem Namen einer Umgebungsvariablen oder eine ganze Zahl auswertet, die der numerischen Position einer Umgebungszeichenfolge in der Tabelle mit Umgebungszeichenfolgen entspricht.</param>
        <summary>Gibt die zu einer Betriebssystem-Umgebungsvariablen gehörige Zeichenfolge zurück.</summary>
        <returns>Die Zeichenfolge, die einer Betriebssystem-Umgebungsvariable zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Expression` eine Zeichenfolge enthält, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> gibt die Funktion den Text zurück, der der angegebenen Umgebungs Zeichenfolge zugewiesen ist, d. h. den Text, der dem Gleichheitszeichen (=) in der Umgebungs Zeichenfolgen-Tabelle für diese Umgebungsvariable folgt. Wenn die Zeichenfolge `Expression` in in der Umgebungs Zeichen folgen Tabelle nicht gefunden werden kann, wird eine Zeichenfolge der Länge 0 (null) ("") zurückgegeben.  
  
 Wenn `Expression` eine ganze Zahl enthält, wird die Zeichenfolge zurückgegeben, die diese numerische Position in der Umgebungs Zeichenfolgen-Tabelle einnimmt. In diesem Fall wird <xref:Microsoft.VisualBasic.Interaction.Environ%2A> der gesamte Text zurückgegeben, einschließlich des Namens der Umgebungsvariablen. Wenn keine Umgebungs Zeichenfolge an der angegebenen Position vorhanden <xref:Microsoft.VisualBasic.Interaction.Environ%2A> ist, gibt eine Zeichenfolge der Länge 0 (null) zurück.  
  
> [!IMPORTANT]
>  Die <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Funktion erfordert die Umgebungs Berechtigung, die sich möglicherweise auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirkt. Weitere Informationen finden <xref:System.Security.Permissions.SecurityPermission> Sie unter und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:Microsoft.VisualBasic.Interaction.Environ%2A> die-Funktion verwendet, um die Eingabe Nummer und `PATH` die Länge der-Anweisung aus der Umgebungs Zeichenfolgen-Tabelle bereitzustellen.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> fehlt.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Ausdruck, der entweder eine Zeichenfolge mit dem Namen einer Umgebungsvariablen oder eine ganze Zahl auswertet, die der numerischen Position einer Umgebungszeichenfolge in der Tabelle mit Umgebungszeichenfolgen entspricht.</param>
        <summary>Gibt die zu einer Betriebssystem-Umgebungsvariablen gehörige Zeichenfolge zurück.</summary>
        <returns>Die Zeichenfolge, die einer Betriebssystem-Umgebungsvariable zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Expression` eine Zeichenfolge enthält, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> gibt die Funktion den Text zurück, der der angegebenen Umgebungs Zeichenfolge zugewiesen ist, d. h. den Text, der dem Gleichheitszeichen (=) in der Umgebungs Zeichenfolgen-Tabelle für diese Umgebungsvariable folgt. Wenn die Zeichenfolge `Expression` in in der Umgebungs Zeichen folgen Tabelle nicht gefunden werden kann, wird eine Zeichenfolge der Länge 0 (null) ("") zurückgegeben.  
  
 Wenn `Expression` eine ganze Zahl enthält, wird die Zeichenfolge zurückgegeben, die diese numerische Position in der Umgebungs Zeichenfolgen-Tabelle einnimmt. In diesem Fall wird <xref:Microsoft.VisualBasic.Interaction.Environ%2A> der gesamte Text zurückgegeben, einschließlich des Namens der Umgebungsvariablen. Wenn keine Umgebungs Zeichenfolge an der angegebenen Position vorhanden <xref:Microsoft.VisualBasic.Interaction.Environ%2A> ist, gibt eine Zeichenfolge der Länge 0 (null) zurück.  
  
> [!IMPORTANT]
>  Die <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Funktion erfordert die Umgebungs Berechtigung, die sich möglicherweise auf die Ausführung in teilweise vertrauenswürdigen Situationen auswirkt. Weitere Informationen finden <xref:System.Security.Permissions.SecurityPermission> Sie unter und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 In diesem Beispiel wird <xref:Microsoft.VisualBasic.Interaction.Environ%2A> die-Funktion verwendet, um die Eingabe Nummer und `PATH` die Länge der-Anweisung aus der Umgebungs Zeichenfolgen-Tabelle bereitzustellen.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> fehlt.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic von Lauf Zeit Bibliotheks Membern</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen der Anwendung oder des Projekts, deren bzw. dessen Schlüsseleinstellungen angefordert werden.</param>
        <param name="Section">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen des Abschnitts, dessen Schlüsseleinstellungen angefordert werden. <see langword="GetAllSettings" /> gibt ein Objekt zurück, das ein zweidimensionales Zeichenfolgenarray enthält. Die Zeichenfolgen enthalten alle Schlüsseleinstellungen im angegebenen Abschnitt zuzüglich ihrer entsprechenden Werte.</param>
        <summary>Gibt eine Liste der Schlüsseleinstellungen eines Anwendungseintrags in der Windows-Registrierung mit ihren jeweiligen Werten (ursprünglich mit <see langword="SaveSetting" /> erstellt) zurück. Die Verwendung des <see langword="My" />-Features ermöglicht bei Registrierungsvorgängen höhere Produktivität und Leistung als <see langword="GetAllSettings" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Eine Liste der Schlüsseleinstellungen eines Anwendungseintrags in der Windows-Registrierung mit ihren jeweiligen Werten (ursprünglich mit <see langword="SaveSetting" /> erstellt).  
  
Die Verwendung des <see langword="My" />-Features ermöglicht bei Registrierungsvorgängen höhere Produktivität und Leistung als <see langword="GetAllSettings" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings`Gibt einen nicht initialisierten `Object` zurück, `AppName` Wenn `Section` entweder oder nicht vorhanden ist.  
  
 Da es unter dem `HKEY_LOCAL_USER` Registrierungsschlüssel betrieben wird, der erst aktiv ist, wenn sich ein Benutzer interaktiv anmeldet, `GetAllSettings` erfordert, dass ein Benutzer angemeldet ist.  
  
 Registrierungs Einstellungen, auf die von einem nicht interaktiven Prozess aus zugegriffen werden soll (z. b. mtx. exe), sollten unter `HKEY_LOCAL_MACHINE\Software\` den `HKEY_USER\DEFAULT\Software` Registrierungs Schlüsseln oder gespeichert werden.  
  
   
  
## Examples  
 In diesem Beispiel wird zuerst `SaveSetting` die-Funktion verwendet, um Einträge in der Windows-Registrierung für `AppName`die als angegebene Anwendung `GetAllSettings` zu erstellen. Anschließend wird die-Funktion verwendet, um die Einstellungen anzuzeigen. Beachten Sie, dass Anwendungs `Section` Namen und-Namen nicht `GetAllSettings`mit abgerufen werden können. Schließlich entfernt die `DeleteSetting` Funktion die Einträge der Anwendung.  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Benutzer ist nicht angemeldet.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Lesen aus der und Schreiben in die Registrierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Class" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="PathName">Dies ist optional. <see langword="String" />. Der vollständige Pfad und Name der Datei, die das abzurufende Objekt enthält. Wenn <paramref name="PathName" /> nicht angegeben wird, ist <paramref name="Class" /> erforderlich.</param>
        <param name="Class">Erforderlich, wenn <paramref name="PathName" /> nicht angegeben wird. <see langword="String" />. Eine Zeichenfolge, die die Klasse des Objekts darstellt. Das <paramref name="Class" />-Argument verfügt über folgende Syntax und Bestandteile: 
 <c>anwendungsname</c><c>.</c><c>objekttyp</c>  
  
[1|1] Parameter 
[1|2] Beschreibung 
[2|1] <c>anwendungsname</c>  
  
[2|2] Erforderlich. <see langword="String" />. Der Name der Anwendung, die das Objekt bereitstellt.  
  
[3|1] <c>objekttyp</c>  
  
[3|2] Erforderlich. <see langword="String" />. Der Typ oder die Klasse des zu erstellenden Objekts.</param>
        <summary>Gibt einen Verweis auf ein von einer COM-Komponente bereitgestelltes Objekt zurück.</summary>
        <returns>Ein Verweis auf ein von einer COM-Komponente bereitgestelltes Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie `GetObject` die-Funktion, um eine Instanz einer COM-Komponente aus einer Datei zu laden. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 Wenn dieser Code ausgeführt wird, wird die Anwendung, die `PathName` dem angegebenen zugeordnet ist, gestartet, und das-Objekt in der angegebenen Datei wird aktiviert.  
  
## <a name="default-cases"></a>Standardfälle  
 Wenn `PathName` eine Zeichenfolge der Länge 0 (`""`null) `GetObject` ist, gibt eine neue Objektinstanz des angegebenen Klassen Typs zurück. Wenn das `PathName` Argument weggelassen wird, `GetObject` gibt ein aktuell aktives Objekt des in `Class`angegebenen Klassen Typs zurück. Wenn kein Objekt vom angegebenen Typ vorhanden ist, tritt ein Fehler auf.  
  
## <a name="accessing-a-subobject"></a>Zugreifen auf ein untergeordnetes Objekt  
 Einige Anwendungen ermöglichen es Ihnen, ein untergeordnetes Objekt zu aktivieren, das einer Datei zugeordnet ist. Fügen Sie hierzu am Ende des Datei namens ein`!`Ausrufezeichen () hinzu, und befolgen Sie es mit einer Zeichenfolge, die den Teil der Datei angibt, die Sie aktivieren möchten. Informationen zum Erstellen dieser Zeichenfolge finden Sie in der Dokumentation für die Anwendung, die das Objekt erstellt hat.  
  
 Beispielsweise verfügen Sie in einer Zeichnungsanwendung möglicherweise über mehrere Ebenen zu einer Zeichnung, die in einer Datei gespeichert ist. Sie können den folgenden Code verwenden, um eine Ebene innerhalb einer Zeichnung mit `schema.cad`dem Namen zu aktivieren.  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>Angeben einer Klasse  
 Wenn Sie nicht die des- `Class`Objekts angeben, bestimmt Automation basierend auf dem von Ihnen angegebenen Dateinamen, ob die zu startende Anwendung und das-Objekt aktiviert werden sollen. Einige Dateien können jedoch mehr als eine Objektklasse unterstützen. Beispielsweise kann eine Zeichnung drei verschiedene Objekttypen unterstützen: ein `Application` Objekt, ein `Drawing` -Objekt und ein `Toolbar` -Objekt, die alle Teil derselben Datei sind. Um das Objekt in einer Datei anzugeben, die Sie aktivieren möchten, verwenden Sie `Class` das optionale Argument. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 Im vorherigen Beispiel ist der `Figment` Name einer Zeichnungsanwendung, und `Drawing` ist einer der Objekttypen, die Sie unterstützt.  
  
## <a name="using-the-object"></a>Verwenden des-Objekts  
 Sobald ein Objekt aktiviert ist, verweisen Sie im Code mit der von Ihnen deklarierten Objektvariablen. Im vorherigen Beispiel greifen Sie mithilfe der Objektvariablen `drawObj`auf Eigenschaften und Methoden des neuen Objekts zu. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  Verwenden Sie `GetObject` die-Funktion, wenn eine aktuelle Instanz des-Objekts vorhanden ist oder wenn Sie das Objekt mit einer geladenen Datei erstellen möchten. Wenn keine aktuelle Instanz vorhanden ist und Sie nicht möchten, dass das Objekt mit einer geladenen Datei gestartet wird, verwenden <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> Sie die-Funktion.  
>   
>  Wenn ein Objekt sich selbst als ActiveX-Einzelinstanzobjekt registriert hat, wird nur eine Instanz des Objekts erstellt, unabhängig davon, wie oft `CreateObject` aufgerufen wird. Bei einem Einzelinstanzobjekt gibt `GetObject` immer die gleiche Instanz zurück, wenn Sie mit der Syntax der Zeichenfolge`""`() mit der Länge 0 (null) aufgerufen `PathName` wird, und es wird ein Fehler ausgelöst, wenn das Argument ausgelassen wird. Sie können nicht `GetObject` verwenden, um einen Verweis auf eine Klasse abzurufen, die mit Visual Basic erstellt wurde.  
  
> [!IMPORTANT]
>  Die `GetObject` Funktion erfordert die Berechtigung "nicht verwalteter Code", die sich möglicherweise auf deren Ausführung in teilweise vertrauenswürdigen Situationen auswirkt. Weitere Informationen finden <xref:System.Security.Permissions.SecurityPermission> Sie unter und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `GetObject` -Funktion verwendet, um einen Verweis auf ein bestimmtes Microsoft Excel-`excelObj`Arbeitsblatt () zu erhalten. Es verwendet die- `Application` Eigenschaft des Arbeitsblatts, um Excel sichtbar zu machen, zu schließen und andere Aktionen auszuführen. Wenn Sie zwei API-Aufrufe `detectExcel` verwenden, sucht die Prozedur nach Excel, und wenn Sie ausgeführt wird, wird Sie in der Tabelle mit den laufenden Objekten eingegeben. Der erste `GetObject` -Befehl verursacht einen Fehler, wenn Excel nicht bereits ausgeführt wird, was in diesem Beispiel bewirkt `excelWasNotRunning` , dass das-Flag `True`auf festgelegt wird. Der zweite `GetObject` -Befehl gibt eine zu öffnende Datei an. Wenn Excel nicht bereits ausgeführt wird, wird der zweite-Befehl gestartet, und es wird ein Verweis auf das Arbeitsblatt zurückgegeben, `test.xls`das durch die angegebene Datei () dargestellt wird. Die Datei muss am angegebenen Speicherort vorhanden sein. Andernfalls löst Visual Basic einen <xref:System.IO.FileNotFoundException>aus. Im Beispielcode wird sowohl Excel als auch das Fenster mit dem angegebenen Arbeitsblatt sichtbar.  
  
 Dieses Beispiel erfordert `Option Strict Off` , dass die späte Bindung verwendet wird, bei der-Objekte Variablen vom `Object`Typ zugewiesen werden. Sie können Objekte `Option Strict On` bestimmter Objekttypen angeben und deklarieren, wenn Sie auf der Registerkarte **com** des Dialog Felds **Verweis hinzufügen** im Menü **Projekt** in Visual Studio einen Verweis auf die Excel-Typbibliothek hinzufügen.  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 Wenn Sie die `getExcel` -Funktion aufzurufen, wird eine Überprüfung durchgeführt, um festzustellen, ob Excel bereits ausgeführt wird. Wenn dies nicht der Fall ist, wird eine-Instanz erstellt.  
  
> [!IMPORTANT]
>  Der Einfachheit halber wird im vorangehenden Beispiel davon ausgegangen, `XLMAIN` dass jedes Fenster mit dem Namen zu einer Instanz von Microsoft Excel gehört. Wenn ein anderes Objekt, das möglicherweise durch illegale Manipulationen gestartet wurde, ein Fenster mit diesem Namen erstellt hat, werden alle Nachrichten empfangen, die Sie für Excel bestimmt haben. In einer Anwendung, die für die Produktion verwendet werden soll, sollten Sie einige strengere Tests einschließen, `XLMAIN` um sicherzustellen, dass wirklich zu Excel gehört.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Es ist kein Objekt des angegebenen Klassentyps vorhanden.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Es ist kein Objekt mit dem angegebenen Pfad und Dateinamen vorhanden.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Default" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen der Anwendung oder des Projekts, deren bzw. dessen Schlüsseleinstellung angefordert wird.</param>
        <param name="Section">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen des Abschnitts, in dem die Schlüsseleinstellung gefunden wird.</param>
        <param name="Key">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen der Schlüsseleinstellung, die zurückgegeben werden soll.</param>
        <param name="Default">Optional. Ausdruck mit dem Wert, der zurückgegeben werden soll, wenn in der <paramref name="Key" />-Einstellung kein Wert festgelegt wird. Wenn <paramref name="Default" /> nicht angegeben wird, wird angenommen, dass es sich um eine Zeichenfolge der Länge 0 (null, "") handelt.</param>
        <summary>Gibt einen Schlüsseleinstellungswert eines Anwendungseintrags in der Windows-Registrierung zurück. Das <see langword="My" />-Feature bietet bei Registrierungsvorgängen höhere Produktivität und Leistung als <see langword="GetAllSettings" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Ein Schlüsseleinstellungswert eines Anwendungseintrags in der Windows-Registrierung.  
  
Das <see langword="My" />-Feature bietet bei Registrierungsvorgängen höhere Produktivität und Leistung als <see langword="GetAllSettings" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eines der Elemente, die in den `GetSetting` Argumenten benannt sind, nicht `GetSetting` vorhanden ist, wird `Default`der Wert zurückgegeben.  
  
 Da es unter dem `HKEY_LOCAL_USER` Registrierungsschlüssel betrieben wird, der erst aktiv ist, wenn sich ein Benutzer interaktiv anmeldet, `GetSetting` erfordert, dass ein Benutzer angemeldet ist.  
  
 Registrierungs Einstellungen, auf die von einem nicht interaktiven Prozess aus zugegriffen werden soll (z. b. mtx. exe), sollten unter `HKEY_LOCAL_MACHINE\Software\` den `HKEY_USER\DEFAULT\Software` Registrierungs Schlüsseln oder gespeichert werden.  
  
 `GetSetting`erfordert `Read` .<xref:System.Security.Permissions.RegistryPermission>  
  
   
  
## Examples  
 In diesem Beispiel wird zuerst `SaveSetting` die-Funktion verwendet, um Einträge in der Windows-Registrierung für `AppName`die Anwendung zu erstellen, `GetSetting` die als angegeben wird. Anschließend wird die-Funktion verwendet, um eine der Einstellungen anzuzeigen. Da das `Default` -Argument angegeben ist, wird sichergestellt, dass ein Wert zurückgegeben wird. Beachten Sie `Section` , dass Namen nicht mit `GetSetting`abgerufen werden können. Schließlich entfernt die `DeleteSetting` Funktion alle Einträge der Anwendung.  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Mindestens ein Argument ist kein <see langword="String" />-Ausdruck, oder der Benutzer ist nicht angemeldet.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Lesen aus der und Schreiben in die Registrierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Boolean" />. Der auszuwertende Ausdruck.</param>
        <param name="TruePart">Erforderlich. <see langword="Object" />. Wird zurückgegeben, wenn <paramref name="Expression" /> den Wert <see langword="True" /> ergibt.</param>
        <param name="FalsePart">Erforderlich. <see langword="Object" />. Wird zurückgegeben, wenn <paramref name="Expression" /> den Wert <see langword="False" /> ergibt.</param>
        <summary>Gibt eines von zwei Objekten zurück, abhängig von der Evaluierung eines Ausdrucks.</summary>
        <returns>Gibt eines von zwei Objekten zurück, abhängig von der Evaluierung eines Ausdrucks.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `IIf` -Funktion stellt ein Pendant für den ternären [bedingten Operator:?:](https://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) in C++Visual bereit.  
  
   
  
## Examples  
 In diesem Beispiel wird `IIf` die-Funktion verwendet `testMe` , um den `checkIt` -Parameter der Prozedur auszuwerten und das Wort "Large" zurückgegeben, wenn der Wert größer als 1000 ist. andernfalls wird das Wort "Small" zurückgegeben.  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 Beachten Sie Folgendes `Option Strict` : `On`wenn ist, müssen Sie `CStr` das-Schlüsselwort verwenden, um `Object` die `String`Rückgabe explizit von in zu konvertieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/if-then-else-statement.md">If...Then...Else-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case-Anweisung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="DefaultResponse" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="XPos" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="YPos" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">Erforderlich. Als Meldung im Dialogfeld angezeigter <see langword="String" />-Ausdruck. Die maximale Länge von <paramref name="Prompt" /> beträgt ungefähr 1024 Zeichen, abhängig von der Breite der verwendeten Zeichen. Wenn <paramref name="Prompt" /> aus mehr als einer Zeile besteht, können Sie die Zeilen mit einem Wagenrücklaufzeichen (<see langword="Chr(" />13<see langword=")" />), mit einem Zeilenvorschubzeichen (<see langword="Chr(" />10<see langword=")" />) oder mit einer Kombination aus beiden (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) voneinander trennen.</param>
        <param name="Title">Dies ist optional. Auf der Titelleiste des Dialogfelds angezeigter <see langword="String" />-Ausdruck. Wenn Sie <paramref name="Title" /> nicht angeben, wird der Anwendungsname auf der Titelleiste platziert.</param>
        <param name="DefaultResponse">Dies ist optional. <see langword="String" />-Ausdruck, der im Textfeld standardmäßig angezeigt wird, wenn keine andere Eingabe erfolgt. Wenn Sie <paramref name="DefaultResponse" /> nicht angeben, ist das angezeigte Textfeld leer.</param>
        <param name="XPos">Dies ist optional. Numerischer Ausdruck, der den Abstand des linken Randes des Dialogfelds vom linken Rand des Bildschirms in Twips angibt. Wenn Sie <paramref name="XPos" /> nicht angeben, wird das Dialogfeld horizontal zentriert.</param>
        <param name="YPos">Optional. Numerischer Ausdruck, der den Abstand des oberen Randes des Dialogfelds vom oberen Rand des Bildschirms in Twips angibt. Wenn Sie <paramref name="YPos" /> nicht angeben, wird das Dialogfeld vertikal um etwa ein Drittel der Bildschirmhöhe nach unten verschoben.</param>
        <summary>Zeigt eine Eingabeaufforderung in einem Dialogfeld an, wartet auf die Eingabe eines Textes oder auf das Klicken auf eine Schaltfläche durch den Benutzer und gibt eine Zeichenfolge zurück, die den Inhalt des Textfelds angibt.</summary>
        <returns>Zeigt eine Eingabeaufforderung in einem Dialogfeld an, wartet auf die Eingabe eines Textes oder auf das Klicken auf eine Schaltfläche durch den Benutzer und gibt eine Zeichenfolge zurück, die den Inhalt des Textfelds angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Benutzer auf **Abbrechen**klickt, wird eine Zeichenfolge der Länge 0 (null) zurückgegeben.  
  
 Wenn Sie mehr als das erste Argument angeben möchten, müssen Sie `InputBox` die-Funktion in einem Ausdruck verwenden. Wenn Sie keine positionellen Argumente weglassen, müssen Sie das entsprechende Komma Trennzeichen beibehalten.  
  
> [!NOTE]
>  Die `InputBox` -Funktion `UIPermission` erfordert auf <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> der-Ebene, die ihre Ausführung in teilweise vertrauenswürdigen Situationen beeinflussen kann. Weitere Informationen finden Sie unter [anfordern](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/yd267cce(v%3dvs.100)) von Berechtigungen <xref:System.Security.Permissions.UIPermission> und.  
  
   
  
## Examples  
 Dieses Beispiel zeigt verschiedene Möglichkeiten, die- `InputBox` Funktion zu verwenden, um den Benutzer zur Eingabe eines Werts aufzufordern. Wenn die x-und y-Positionen ausgelassen werden, wird das Dialogfeld automatisch auf die jeweiligen Achsen zentriert. Die- `MyValue` Variable enthält den Wert, der vom Benutzer eingegeben wird, wenn der Benutzer auf OK klickt oder die EINGABETASTE drückt.  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">Erforderlich. Als Meldung im Dialogfeld angezeigter <see langword="String" />-Ausdruck. Die maximale Länge von <paramref name="Prompt" /> beträgt ungefähr 1024 Zeichen, abhängig von der Breite der verwendeten Zeichen. Wenn <paramref name="Prompt" /> aus mehr als einer Zeile besteht, können Sie die Zeilen mit einem Wagenrücklaufzeichen (<see langword="Chr(" />13<see langword=")" />), mit einem Zeilenvorschubzeichen (<see langword="Chr(" />10<see langword=")" />) oder mit einer Kombination aus beiden (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) voneinander trennen.</param>
        <param name="Buttons">Dies ist optional. Numerischer Ausdruck, der die Summe der Werte für folgende Angaben darstellt: Anzahl und Art der anzuzeigenden Schaltflächen, Art des zu verwendenden Symbols, Angabe der Standardschaltfläche und Verhalten des Meldungsfelds. Wenn Sie <paramref name="Buttons" /> nicht angeben, ist der Standardwert 0 (null).</param>
        <param name="Title">Optional. Auf der Titelleiste des Dialogfelds angezeigter <see langword="String" />-Ausdruck. Wenn Sie <paramref name="Title" /> nicht angeben, wird der Anwendungsname auf der Titelleiste platziert.</param>
        <summary>Zeigt eine Meldung in einem Dialogfeld an und wartet darauf, dass der Benutzer auf eine Schaltfläche klickt. Anschließend wird eine ganze Zahl zurückgegeben, die angibt, auf welche Schaltfläche geklickt wurde.</summary>
        <returns><list type="table">
            <item>
              <term> Konstante 
 </term>
              <description> Wert 
 </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1 
 </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2 
 </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3 
 </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4 
 </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5 
 </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6 
 </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie keine positionellen Argumente weglassen, müssen Sie das entsprechende Komma Trennzeichen beibehalten.  
  
 Wenn im Dialogfeld die Schaltfläche **Abbrechen** angezeigt wird, hat das Drücken der ESC-Taste denselben Effekt wie das Klicken auf **Abbrechen** .  
  
 Wenn das Dialogfeld eine **Hilfe** Schaltfläche enthält, wird die kontextbezogene Hilfe für das Dialogfeld bereitgestellt. Es wird jedoch kein Wert zurückgegeben, bis eine der anderen Schaltflächen ausgewählt ist. Wenn Sie in Windows Form-Anwendungen **** die Schaltfläche Hilfe <xref:System.Windows.Forms.Control.HelpRequested> auswählen, wird das-Ereignis für das Formular ausgeführt.  
  
> [!NOTE]
>  Die `MsgBox` -Funktion `UIPermission` erfordert auf <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> der-Ebene, die ihre Ausführung in teilweise vertrauenswürdigen Situationen beeinflussen kann. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.UIPermission>.  
  
 Die `MsgBoxStyle` Enumerationswerte sind in der folgenden Tabelle aufgeführt.  
  
|Member|Wert|Beschreibung|  
|-|-|-|  
|Member|Wert|Beschreibung|  
|`OKOnly`|0|Zeigt nur die Schaltfläche OK an.|  
|`OKCancel`|1|Zeigt die Schaltflächen OK und Abbrechen an.|  
|`AbortRetryIgnore`|2|Zeigt die Schaltflächen Abbrechen, wiederholen und ignorieren an.|  
|`YesNoCancel`|3|Zeigt die Schaltflächen Ja, Nein und Abbrechen an.|  
|`YesNo`|4|Zeigt die Schaltflächen Ja und Nein an.|  
|`RetryCancel`|5|Zeigt die Schaltflächen wiederholen und Abbrechen an.|  
|`Critical`|16|Zeigt das Symbol für kritische Meldungen an.|  
|`Question`|32|Zeigt das Symbol für Warn Abfragen an.|  
|`Exclamation`|48|Zeigt das Symbol für Warnmeldungen an.|  
|`Information`|64|Zeigt das Symbol Informations Meldung an.|  
|`DefaultButton1`|0|Erste Schaltfläche ist Standard.|  
|`DefaultButton2`|256|Zweite Schaltfläche ist Standard.|  
|`DefaultButton3`|512|Dritte Schaltfläche ist Standard.|  
|`ApplicationModal`|0|Die Anwendung ist modal. Der Benutzer muss auf das Meldungs Feld reagieren, bevor die Arbeit in der aktuellen Anwendung fortgesetzt wird.|  
|`SystemModal`|4096|Das System ist modal. Alle Anwendungen werden angehalten, bis der Benutzer auf das Meldungs Feld antwortet.|  
|`MsgBoxSetForeground`|65536|Gibt das Meldungs Feld Fenster als Vordergrund Fenster an.|  
|`MsgBoxRight`|524288|Der Text wird rechtsbündig ausgerichtet.|  
|`MsgBoxRtlReading`|1048576|Gibt an, dass Text in hebräischen und arabischen Systemen als Leseberechtigung von rechts nach links angezeigt werden soll.|  
  
 Die erste Gruppe von Werten (0-5) beschreibt die Anzahl und den Typ der Schaltflächen, die im Dialogfeld angezeigt werden. Die zweite Gruppe (16, 32, 48, 64) beschreibt die Art des Symbols. Die dritte Gruppe (0, 256, 512) bestimmt, welche Schaltfläche die Standard Schaltfläche ist. Die vierte Gruppe (0, 4096) bestimmt die Modalität des Meldungs Felds, und die fünfte Gruppe gibt an, ob das Meldungs Feld Fenster das Vordergrund Fenster ist, zusammen mit der Ausrichtung und Richtung des Texts. Wenn Sie Zahlen hinzufügen, um einen Endwert `Buttons` für das Argument zu erstellen, verwenden Sie nur eine Zahl aus jeder Gruppe.  
  
   
  
## Examples  
 In diesem Beispiel wird `MsgBox` die-Funktion verwendet, um eine Critical-Error-Meldung in einem Dialogfeld mit den Schaltflächen Ja und Nein anzuzeigen. Die Schaltfläche Nein wird als Standardantwort angegeben. Dies geschieht, indem die `MsgBox` Konstanten Werte zu einem numerischen Ausdruck kombiniert werden. Wenn Sie in diesem Fall 4 (die Schaltflächen Kombination Ja/Nein) und 16 (das Fenster **Critical Message** ) und 256 (die zweite Schaltfläche als Standard Schaltfläche) hinzufügen, ergibt dies insgesamt 276. Der von der `MsgBox` -Funktion zurückgegebene Wert hängt von der Schaltfläche ab, die vom Benutzer ausgewählt wurde: Yes gibt den Wert 6 zurück. No gibt den Wert 7 zurück.  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Prompt" /> ist kein <see langword="String" />-Ausdruck, oder <paramref name="Title" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Der Prozess wird nicht im interaktiven Modus ausgeführt.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Ein oder mehrere Parameter ist bzw. sind kein/e Member der <see langword="MsgBoxResult" />-Enumeration oder der <see langword="MsgBoxStyle" />-Enumeration.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int64" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Stop" Type="System.Int64" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Interval" Type="System.Int64" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Long" />. Ganze Zahl, die Sie in einem der berechneten Bereiche suchen möchten.</param>
        <param name="Start">Erforderlich. <see langword="Long" />. Ganze Zahl, die den Anfang der Reihe berechneter Bereiche angibt. <paramref name="Start" /> darf nicht kleiner als 0 sein.</param>
        <param name="Stop">Erforderlich. <see langword="Long" />. Ganze Zahl, die das Ende der Reihe berechneter Bereiche angibt. <paramref name="Stop" /> darf nicht kleiner oder gleich <paramref name="Start" /> sein.</param>
        <param name="Interval">Erforderlich. <see langword="Long" />. Ganze Zahl, die die Größe jedes berechneten Bereichs zwischen <paramref name="Start" /> und <paramref name="Stop" /> angibt. <paramref name="Interval" /> darf nicht kleiner als 1 sein.</param>
        <summary>Gibt eine Zeichenfolge zurück, die den berechneten Bereich darstellt, der eine Zahl enthält.</summary>
        <returns>Eine Zeichenfolge, die den berechneten Bereich darstellt, der eine Zahl enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Partition` -Funktion berechnet einen Satz numerischer Bereiche, die jeweils die Anzahl der durch `Interval`angegebenen Werte enthalten. Der erste Bereich beginnt bei `Start`, und der letzte Bereich endet bei `Stop`. Die `Partition` Funktion identifiziert dann, welcher Bereich `Number` enthalten ist, und gibt eine Zeichenfolge zurück, die diesen Bereich beschreibt. Der Bereich wird in der Zeichenfolge als "*lowervalue*:*uppervalue*" dargestellt, wobei das niedrige Ende des Bereichs ("*lowervalue*") durch einen Doppelpunkt (**:).  
  
 Bei Bedarf fügt die `Partition` Funktion führende Leerzeichen vor " *lowervalue* " und " *uppervalue* " ein, sodass beide die gleiche Anzahl von Zeichen aufweisen wie die Zeichen folgen`Stop` Darstellung des Werts (+ 1). Dadurch wird sichergestellt, dass der resultierende Text bei `Partition` jedem nachfolgenden Sortiervorgang `Number`ordnungsgemäß verarbeitet wird, wenn Sie die Ausgabe der Funktion mit mehreren Werten von verwenden.  
  
 In der folgenden Tabelle sind einige Beispiel Zeichenfolgen für Bereiche aufgeführt, `Start`die `Stop`mit drei `Interval`Sätzen von, und berechnet werden. In den Spalten "First Range" und "Last Range" werden die niedrigsten und höchsten Bereiche angezeigt, die mit `Start` den `Stop`Werten von und möglich sind. Die "vor dem ersten Bereich" und "nach den letzten Bereich" wird durch Spalten enthalten, die Zeichenfolgen, die für Werte der zurückgegebenen `Number` kleiner als `Start` und größer als `Stop`bzw.  
  
|`Start`|`Stop`|`Interval`|Vor dem ersten Bereich|Erster Bereich|Letzter Bereich|Nach dem letzten Bereich|  
|-|-|-|-|-|-|-|  
|0|99|5|"   : -1"|"  0:  0:|"95: 99 "|"100:   "|  
|20|199|10|"   : 19.07.2016|20 27|"190:199"|"200:"|  
|100|1010|20|"    : 99 "|"100: 119"|"1000:1010"|"1011:    "|  
  
 In der vorangehenden Tabelle zeigt die dritte Zeile das Ergebnis an `Start` , `Stop` wenn und einen Satz von Zahlen definieren, der nicht gleich `Interval`mäßig durch dividiert werden kann. Der letzte Bereich endet bei `Stop`, sodass er nur 11 Zahlen lang ist, auch `Interval` wenn 20 ist.  
  
 Wenn `Interval` den Wert 1 hat, ist der`Number`Bereich`Number`unabhängig von den `Start` Argumenten und `Stop` ":". Wenn `Number` z. b. 267, `Stop` 1000 und `Interval` 1 `Partition` ist, gibt "267: 267 ".  
  
 `Partition`kann beim Erstellen von Datenbankabfragen hilfreich sein. Sie können eine SELECT-Abfrage erstellen, die anzeigt, wie viele Bestellungen innerhalb verschiedener Wertebereiche vorkommen, z. b. mit Rechnungs Werten von 1 bis 1000, 1001 bis 2000 usw.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Reihe von Bereichen für Jahrzehnte zwischen 1950 und 2049 festgelegt. Er gibt den Wert von `year` innerhalb des entsprechenden Bereichs an und gibt einen `String` Wert zurück, der den Bereich anzeigt. Wenn `year` beispielsweise den Wert 1984 hat, wird `Partition` "1980:1989" zurückgegeben.  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 0, <paramref name="Stop" /> &lt;= <paramref name="Start" />, oder <paramref name="Interval" /> &lt; 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Setting" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen der Anwendung oder des Projekts, für die bzw. das die Einstellung gilt.</param>
        <param name="Section">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen des Abschnitts, in dem die Schlüsseleinstellung gespeichert wird.</param>
        <param name="Key">Erforderlich. <see langword="String" />-Ausdruck mit dem Namen der Schlüsseleinstellung, die gespeichert wird.</param>
        <param name="Setting">Erforderlich. Ausdruck mit dem Wert, auf den <paramref name="Key" /> festgelegt wird.</param>
        <summary>Speichert oder erstellt einen Anwendungseintrag in der Windows-Registrierung. Das <see langword="My" />-Feature bietet bei Registrierungsvorgängen höhere Produktivität und Leistung als <see langword="SaveSetting" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `SaveSetting` -Funktion fügt den `HKEY_CURRENT_USER\Software\VB and VBA Program Settings`Schlüssel hinzu.  
  
 Wenn die Schlüssel Einstellung aus irgendeinem Grund nicht gespeichert werden kann, tritt ein Fehler auf.  
  
 `SaveSetting`erfordert, dass ein Benutzer angemeldet ist, da er unter dem `HKEY_LOCAL_USER` Registrierungsschlüssel betrieben wird, der erst aktiv ist, wenn sich ein Benutzer interaktiv anmeldet.  
  
 Registrierungs Einstellungen, auf die von einem nicht interaktiven Prozess aus zugegriffen werden soll (z. b. mtx. exe), sollten unter `HKEY_LOCAL_MACHINE\Software\` den `HKEY_USER\DEFAULT\Software` Registrierungs Schlüsseln oder gespeichert werden.  
  
 `SaveSetting`erfordert `Write` und `Create` . <xref:System.Security.Permissions.RegistryPermission>  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst die `SaveSetting` -Funktion verwendet, um Einträge in der Windows- `MyApp` Registrierung für die Anwendung zu erstellen `DeleteSetting` , und anschließend wird die-Funktion verwendet, um Sie zu entfernen.  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Schlüsselregistrierung konnte nicht erstellt werden, oder Benutzer ist nicht angemeldet.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Lesen aus der und Schreiben in die Registrierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Pathname">Erforderlich. <see langword="String" />. Name des auszuführenden Programms zusammen mit allen erforderlichen Argumenten und Befehlszeilenschaltern. <paramref name="PathName" /> kann auch das Laufwerk und den Verzeichnispfad bzw. den Ordner beinhalten.
Wenn Sie den Pfad zum Programm nicht kennen, können Sie ihn mit <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> ermitteln. Sie können beispielsweise <c>My.Computer.FileSystem.GetFiles ("C:\", TRUE, "testFile.txt")</c> aufrufen, was den vollständigen Pfad jeder Datei mit dem Namen <c>testFile.txt</c> zurückgibt, die sich an beliebiger Stelle auf Laufwerk C:\\ befindet.</param>
        <param name="PathName">Erforderlich. <see langword="String" />. Name des auszuführenden Programms zusammen mit allen erforderlichen Argumenten und Befehlszeilenschaltern. <paramref name="PathName" /> kann auch das Laufwerk und den Verzeichnispfad bzw. den Ordner beinhalten.  
 Wenn Sie den Pfad zum Programm nicht kennen, können Sie ihn mit <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> ermitteln. Sie können beispielsweise <c>My.Computer.FileSystem.GetFiles ("C:\", TRUE, "testFile.txt")</c> aufrufen, was den vollständigen Pfad jeder Datei mit dem Namen <c>testFile.txt</c> zurückgibt, die sich an beliebiger Stelle auf Laufwerk C:\\ befindet.</param>
        <param name="Style">Optional. <see langword="AppWinStyle" />. Ein aus dem <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> ausgewählter Wert, der das Format des Fensters angibt, in dem das Programm ausgeführt werden soll. Wenn <paramref name="Style" /> nicht angegeben wird, verwendet <see langword="Shell" /><see langword="AppWinStyle.MinimizedFocus" />, wodurch das Programm minimiert und mit dem Fokus gestartet wird.</param>
        <param name="Wait">Dies ist optional. <see langword="Boolean" />. Ein Wert, der angibt, ob die <see langword="Shell" />-Funktion auf den Abschluss des Programms warten soll. Wenn <paramref name="Wait" /> nicht angegeben wird, verwendet <see langword="Shell" /> den Wert <see langword="False" />.</param>
        <param name="Timeout">Optional. <see langword="Integer" />. Die Anzahl von Millisekunden, die auf den Abschluss gewartet werden soll, wenn <paramref name="Wait" /> den Wert <see langword="True" /> hat. Wenn <paramref name="Timeout" /> nicht angegeben wird, verwendet <see langword="Shell" /> den Wert -1. Das bedeutet, dass es kein Timeout gibt und eine Rückgabe von <see langword="Shell" /> erst nach Beendigung des Programms erfolgt. Wenn Sie daher <paramref name="Timeout" /> nicht angeben oder auf -1 festlegen, ist es möglich, dass <see langword="Shell" /> die Steuerung niemals an Ihr Programm zurückgibt.</param>
        <summary>Führt ein ausführbares Programm aus und gibt eine ganze Zahl mit der Prozess-ID des Programms zurück, sofern es noch ausgeführt wird.</summary>
        <returns>Eine ganze Zahl mit der Prozess-ID des Programms, wenn es noch ausgeführt wird. 0, wenn das Programm die Ausführung bereits beendet hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert `Shell` der Funktion hängt davon ab, ob das Programm, `PathName` das in benannt ist `Shell` , immer noch ausgeführt wird, wenn zurückgibt. Wenn Sie auf `Wait` `True` festlegen und das Programm beendet wird, bevor das Timeout `Shell` abläuft, gibt 0 (null) zurück. Wenn das Timeout abläuft, oder wenn Sie `Wait` `False`es weglassen oder festlegen, wird `Shell` die Prozess-ID des Programms von zurückgegeben. Die Prozess-ID ist eine eindeutige Zahl, die das laufende Programm identifiziert.  
  
## <a name="failure-to-start"></a>Fehler beim Starten  
 Wenn die `Shell` Funktion das benannte Programm nicht starten kann, <xref:System.IO.FileNotFoundException> tritt ein Fehler auf. Dies kann z. b. der Fall sein, wenn Sie versuchen, ein 16-Bit-Programm `command.com`, z. b. <xref:System.Windows.Forms?displayProperty=nameWithType>, von einer Anwendung mit auszuführen. Um ein Problem zu umgehen, können Sie ein 32-Bit-Programm ausführen, das das gewünschte 16-Bit-Programm aufruft. Im Fall von `command.com`können Sie alternativ ausführen `cmd.exe` .  
  
## <a name="waiting-for-completion"></a>Warten auf Abschluss  
 Die- `Shell` Funktion führt das Programm standardmäßig asynchron aus. Dies bedeutet, dass die Ausführung eines Programms `Shell` , das mit der Funktion gestartet wurde, möglicherweise `Shell` nicht abgeschlossen ist, bevor die Anweisungen ausgeführt werden Wenn Sie auf das Beenden des Programms warten möchten, bevor Sie den Vorgang fort `Wait` setzen `True`, legen Sie auf fest.  
  
## <a name="determining-the-exit-code"></a>Bestimmen des Exitcodes  
 Ein Prozess kann einen Exitcode zurückgeben, wenn er beendet wird. ** Sie können jedoch nicht verwenden `Shell` , um diesen Exitcode abzurufen `Shell` , da 0 (null) zurückgibt, wenn er auf die Beendigung wartet, und auch, `Shell`weil der Prozess in einem anderen Objekt als ausgeführt wird.  
  
 Um den Exitcode von einem Prozess abzurufen, müssen Sie Ihren eigenen Code schreiben, um den Prozess zu initiieren und auf Beendigung zu warten. Im folgenden Beispiel wird gezeigt, wie Sie einen Prozess initiieren, warten, bis er beendet wird, und den Exitcode abrufen.  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>Schützen der Datei Spezifikation  
 Sie sollten den gesamten Pfad und die Datei Spezifikation immer in Anführungszeichen einschließen, wie im folgenden Beispiel gezeigt.  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 Jedes Paar von angrenzenden doppelten Anführungszeichen (`" "`) innerhalb des Zeichenfolgenliterals wird als ein doppeltes Anführungszeichen in der Zeichenfolge interpretiert. Im vorangehenden Beispiel wird daher die folgende Zeichenfolge für `Shell` die-Funktion angezeigt:  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 Wenn Sie den Pfad nicht in Anführungszeichen eingeschlossen haben, würde Windows nach einer Datei mit dem Namen `Program.exe` "C:\" suchen. Verzeichnis anstelle von `display.exe` im Verzeichnis "c:\Program Files".  
  
> [!IMPORTANT]
>  Wenn Sie den Pfad und die Datei Angabe nicht in Anführungszeichen einschließen, besteht ein Sicherheitsrisiko, wenn der Dateiname oder ein Pfad Knoten Leerzeichen enthält. Im vorherigen Beispiel enthält der Pfad Knoten `\Program Files` ein Leerzeichen. Wenn die Spezifikation nicht innerhalb von Anführungszeichen steht und ein Programm `Program.exe` mit dem Namen in\\C installiert wurde, z. b. durch illegale Manipulation, würde Windows es anstelle `display.exe`von ausführen.  
  
> [!IMPORTANT]
>  Die `Shell` Funktion erfordert die Berechtigung "nicht verwalteter Code", die sich möglicherweise auf deren Ausführung in teilweise vertrauenswürdigen Situationen auswirkt. Weitere Informationen finden <xref:System.Security.Permissions.SecurityPermission> Sie unter und [Code Zugriffsberechtigungen](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Shell` -Funktion verwendet, um eine vom Benutzer angegebene Anwendung auszuführen. Wenn <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> Sie als zweites Argument angeben, wird die Anwendung in normaler Größe geöffnet, und der Fokus wird festgelegt.  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Style" /> befindet sich nicht im Bereich von 0 bis einschließlich 9.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="Shell" /> kann die Datei <paramref name="PathName" /> nicht finden.</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="PathName" /> ist <see langword="Nothing" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">Erforderlich. <see langword="Object" />-Parameterarray. Muss über eine gerade Anzahl von Elementen verfügen. Sie können eine durch Komma getrennte Liste von <see langword="Object" />-Variablen oder Ausdrücken oder ein eindimensionales Array von <see langword="Object" />-Elementen angeben.</param>
        <summary>Evaluiert eine Liste von Ausdrücken und gibt einen <see langword="Object" />-Wert zurück, der dem ersten Ausdruck in der Liste entspricht, der <see langword="True" /> ist.</summary>
        <returns>Evaluiert eine Liste von Ausdrücken und gibt einen <see langword="Object" />-Wert zurück, der dem ersten Ausdruck in der Liste entspricht, der <see langword="True" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das für `VarExpr` angegebene Argument besteht aus gekoppelten Ausdrücken und Werten. Die `Switch` -Funktion wertet die ungerade nummerierten Ausdrücke vom niedrigsten zum höchsten `VarExpr`Index in aus und gibt den gerade nummerierten Wert zurück, der dem `True`ersten Ausdruck zugeordnet ist, der ergibt. Wenn `VarExpr(0)` z. b. `True`ist `Switch` , `VarExpr(1)`gibt zurück, `VarExpr(0)` und wenn `VarExpr(2)` gleich `False` ist `True`, gibt`Switch` zurück ,usw`VarExpr(3)`.  
  
 Wenn Sie das `VarExpr` -Argument nicht angeben, `Switch` wird `Nothing`zurückgegeben.  
  
> [!NOTE]
>  Die Ausdrücke in der Argumentliste können Funktionsaufrufe einschließen. Im Rahmen der Vorbereitung der Argumentliste für den Aufruf von `Switch`ruft der Visual Basic-Compiler jede Funktion in jedem Ausdruck auf. Dies bedeutet, dass Sie sich nicht darauf verlassen können, dass eine bestimmte Funktion nicht aufgerufen wird, wenn ein Ausdruck `True`an früherer Stelle in der Argumentliste ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Switch` -Funktion verwendet, um den Namen einer Sprache zurückzugeben, die mit dem Namen einer Stadt übereinstimmt. Dies erfordert, `Option Strict` dass `Off`ist.  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 Da der <xref:System.Diagnostics> -Namespace auch eine Klasse mit <xref:System.Diagnostics.Switch>dem Namen enthält, muss `Switch` ein Aufruf der-Funktion mit <xref:Microsoft.VisualBasic> dem-Namespace qualifiziert werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ungerade Anzahl der Argumente</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case-Anweisung (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Parameterarrays</related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Expression&lt;TDelegate&gt;" FullName="System.Linq.Expressions.Expression&lt;TDelegate&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09293d0e8f77d26402e0b1fc92a72db57606acad" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39927011" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Expression&lt;TDelegate&gt; : System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Expression`1&lt;TDelegate&gt; extends System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Expression(Of TDelegate)&#xA;Inherits LambdaExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDelegate&gt;&#xA;public ref class Expression sealed : System::Linq::Expressions::LambdaExpression" />
  <TypeSignature Language="F#" Value="type Expression&lt;'Delegate&gt; = class&#xA;    inherit LambdaExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDelegate" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Linq.Expressions.LambdaExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TDelegate">
      <span data-ttu-id="d967c-101">Der Typ des Delegaten, der die <see cref="T:System.Linq.Expressions.Expression`1" /> darstellt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d967c-101">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="d967c-102">Stellt einen stark typisierten Lambdaausdruck als Datenstruktur in Form einer Ausdrucksbaumstruktur dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d967c-102">Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</span>
      </span>
      <span data-ttu-id="d967c-103">Diese Klasse kann nicht vererbt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d967c-103">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d967c-104">Wenn ein Lambda-Ausdruck zugewiesen wird, um eine Variable, ein Feld oder Parameter, dessen Typ <xref:System.Linq.Expressions.Expression%601>, gibt der Compiler Anweisungen, um eine Ausdrucksbaumstruktur zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="d967c-104">When a lambda expression is assigned to a variable, field, or parameter whose type is <xref:System.Linq.Expressions.Expression%601>, the compiler emits instructions to build an expression tree.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d967c-105">Eine Konvertierung von einem Lambda-Ausdruck eingeben `Expression<D>` (`Expression(Of D)` in Visual Basic) ist vorhanden, wenn eine Konvertierung von Lambda-Ausdrucks in einen Delegaten vom Typ `D` vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="d967c-105">A conversion from a lambda expression to type `Expression<D>` (`Expression(Of D)` in Visual Basic) exists if a conversion from the lambda expression to a delegate of type `D` exists.</span></span> <span data-ttu-id="d967c-106">Allerdings kann die Konvertierung, z. B. fehlschlagen, wenn der Text des Lambda-Ausdrucks ein Block ist.</span><span class="sxs-lookup"><span data-stu-id="d967c-106">However, the conversion may fail, for example, if the body of the lambda expression is a block.</span></span> <span data-ttu-id="d967c-107">Dies bedeutet, dass Delegaten und Ausdrucksbaumstrukturen in Bezug auf die Auflösung von funktionsüberladungen auf ähnliche Weise Verhalten.</span><span class="sxs-lookup"><span data-stu-id="d967c-107">This means that delegates and expression trees behave similarly with regard to overload resolution.</span></span>  
  
 <span data-ttu-id="d967c-108">Die Ausdrucksbaumstruktur ist eine Darstellung der Daten im Speicher des Lambda-Ausdrucks.</span><span class="sxs-lookup"><span data-stu-id="d967c-108">The expression tree is an in-memory data representation of the lambda expression.</span></span> <span data-ttu-id="d967c-109">Die Ausdrucksbaumstruktur ist die Struktur des Lambda-Ausdrucks, transparent und explizit.</span><span class="sxs-lookup"><span data-stu-id="d967c-109">The expression tree makes the structure of the lambda expression transparent and explicit.</span></span> <span data-ttu-id="d967c-110">Sie können mit den Daten in der Ausdrucksbaumstruktur interagieren, ebenso wie mit jeder anderen Datenstruktur.</span><span class="sxs-lookup"><span data-stu-id="d967c-110">You can interact with the data in the expression tree just as you can with any other data structure.</span></span>  
  
 <span data-ttu-id="d967c-111">Die Möglichkeit, Ausdrücke als Datenstrukturen zu behandeln, können APIs, um Benutzercode in einem Format zu erhalten, die überprüft, transformiert und auf benutzerdefinierte Weise verarbeitet werden können.</span><span class="sxs-lookup"><span data-stu-id="d967c-111">The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</span></span> <span data-ttu-id="d967c-112">Z. B. die [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] Data Access-Implementierung verwendet diese Funktion, um Ausdrucksbaumstrukturen mit Transact-SQL-Anweisungen übersetzt werden, die von der Datenbank ausgewertet werden kann.</span><span class="sxs-lookup"><span data-stu-id="d967c-112">For example, the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</span></span>  
  
 <span data-ttu-id="d967c-113">Viele Standardabfrageoperatoren, die definiert, der <xref:System.Linq.Queryable> Klasse weisen eine oder mehrere Parameter vom Typ <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="d967c-113">Many standard query operators defined in the <xref:System.Linq.Queryable> class have one or more parameters of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="d967c-114">Die <xref:System.Linq.Expressions.Expression.NodeType%2A> von einem <xref:System.Linq.Expressions.Expression%601> ist <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span><span class="sxs-lookup"><span data-stu-id="d967c-114">The <xref:System.Linq.Expressions.Expression.NodeType%2A> of an <xref:System.Linq.Expressions.Expression%601> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="d967c-115">Verwenden der <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> oder <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> Methode zum Erstellen einer <xref:System.Linq.Expressions.Expression%601> Objekt.</span><span class="sxs-lookup"><span data-stu-id="d967c-115">Use the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> or <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> method to create an <xref:System.Linq.Expressions.Expression%601> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d967c-116">Im folgenden Codebeispiel wird veranschaulicht, wie einen Lambda-Ausdruck als ausführbarer Code in Form eines Delegaten und als Daten in Form einer Ausdrucksbaumstruktur dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="d967c-116">The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</span></span> <span data-ttu-id="d967c-117">Außerdem wird veranschaulicht, wie die Ausdrucksbaumstruktur in ausführbaren Code mithilfe von wieder aktivieren die <xref:System.Linq.Expressions.Expression%601.Compile%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d967c-117">It also demonstrates how to turn the expression tree back into executable code by using the <xref:System.Linq.Expressions.Expression%601.Compile%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile();" />
      <MemberSignature Language="F#" Value="override this.Compile : unit -&gt; 'Delegate" Usage="expression.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d967c-118">Kompiliert den von der Ausdrucksbaumstruktur beschriebenen Lambda-Ausdruck in ausführbaren Code und erzeugt einen Delegaten, der den Lambda-Ausdruck darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-118">Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d967c-119">Ein Delegat vom Typ <paramref name="TDelegate" />, der den vom <see cref="T:System.Linq.Expressions.Expression`1" /> beschriebenen kompilierten Lambda-Ausdruck darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-119">A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d967c-120">Die <xref:System.Linq.Expressions.Expression%601.Compile%2A> Methode erzeugt einen Delegaten vom Typ `TDelegate` zur Laufzeit.</span><span class="sxs-lookup"><span data-stu-id="d967c-120">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method produces a delegate of type `TDelegate` at runtime.</span></span> <span data-ttu-id="d967c-121">Wenn dieser Delegat ausgeführt wird, haben sie das von der Semantik der beschriebene Verhalten der <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="d967c-121">When that delegate is executed, it has the behavior described by the semantics of the <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="d967c-122">Die <xref:System.Linq.Expressions.Expression%601.Compile%2A> Methode kann verwendet werden, um den Wert der jede beliebige Ausdrucksbaumstruktur abzurufen.</span><span class="sxs-lookup"><span data-stu-id="d967c-122">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method can be used to obtain the value of any expression tree.</span></span> <span data-ttu-id="d967c-123">Erstellen Sie zunächst einen Lambda-Ausdruck, die den Ausdruck als Text mithilfe der <xref:System.Linq.Expressions.Expression.Lambda%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d967c-123">First, create a lambda expression that has the expression as its body by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span> <span data-ttu-id="d967c-124">Rufen Sie anschließend <xref:System.Linq.Expressions.Expression%601.Compile%2A> zum Abrufen eines Delegaten und führen Sie den Delegaten, um den Wert des Ausdrucks abzurufen.</span><span class="sxs-lookup"><span data-stu-id="d967c-124">Then call <xref:System.Linq.Expressions.Expression%601.Compile%2A> to obtain a delegate, and execute the delegate to obtain the value of the expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d967c-125">Im folgenden Codebeispiel wird veranschaulicht, wie <xref:System.Linq.Expressions.Expression%601.Compile%2A> wird verwendet, um eine Ausdrucksbaumstruktur ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="d967c-125">The following code example demonstrates how <xref:System.Linq.Expressions.Expression%601.Compile%2A> is used to execute an expression tree.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(bool preferInterpretation);" />
      <MemberSignature Language="F#" Value="override this.Compile : bool -&gt; 'Delegate" Usage="expression.Compile preferInterpretation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation">
          <span data-ttu-id="d967c-126">
            <see langword="true" />, um anzugeben, dass der Ausdruck in ein interpretiertes Format kompiliert werden muss, sofern verfügbar; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-126">
              <see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d967c-127">Kompiliert die Lambdaausdrücke, die von der Ausdrucksbaumstruktur als interpretierter oder kompilierter Code beschrieben werden, und erzeugt einen Delegaten, der den Lambdaausdruck darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-127">Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d967c-128">Ein Delegat, der den kompilierten Lambdaausdruck darstellt, der durch das <see cref="T:System.Linq.Expressions.Expression`1" />-Objekt beschrieben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-128">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberSignature Language="F#" Value="override this.Compile : System.Runtime.CompilerServices.DebugInfoGenerator -&gt; 'Delegate" Usage="expression.Compile debugInfoGenerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator">
          <span data-ttu-id="d967c-129">Generator für Debuginformationen, mit dem der Compiler Sequenzpunkte markiert und lokale Variablen mit Anmerkungen versieht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-129">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d967c-130">Erzeugt einen Delegaten, der den Lambdaausdruck darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-130">Produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d967c-131">Ein Delegat, der die kompilierte Version des Lambdaausdrucks enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-131">A delegate containing the compiled version of the lambda.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;TDelegate&gt; Update (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression`1&lt;!TDelegate&gt; Update(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Update(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="expression.Update (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d967c-132">Die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft des Ergebnisses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-132">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d967c-133">Die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft des Ergebnisses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-133">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d967c-134">Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-134">Creates a new expression that is like this one, but using the supplied children.</span>
          </span>
          <span data-ttu-id="d967c-135">Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-135">If all of the children are the same, it will return this expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d967c-136">Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d967c-136">This expression if no children are changed or an expression with the updated children.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
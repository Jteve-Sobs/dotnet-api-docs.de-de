<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="978f18032b1aec687a3f90531a776cb2a47a2705" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67244481" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f98d4-101">Stellt eine interne Schnittstelle für den Zugriff auf die Argumente von mehreren Strukturknoten (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression und IndexExpression) bereit.</span><span class="sxs-lookup"><span data-stu-id="f98d4-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).</span></span>  <span data-ttu-id="f98d4-102">Diese API ist ausschließlich für die interne Verwendung vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-102">This API is for internal use only.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

<span data-ttu-id="f98d4-103">Sie sollten diese API nicht verwenden.</span><span class="sxs-lookup"><span data-stu-id="f98d4-103">You should not use this API.</span></span>  <span data-ttu-id="f98d4-104">Er ist nur aufgrund der assemblyumgestaltung öffentlich, und sie nur für interne leistungsoptimierungen vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="f98d4-104">It is public only due to assembly refactoring, and it exists only for internal performance optimizations.</span></span> <span data-ttu-id="f98d4-105">Sie können zwei Optimierungen, die die Größe der Strukturen zu reduzieren:</span><span class="sxs-lookup"><span data-stu-id="f98d4-105">It enables two optimizations that reduce the size of the trees:</span></span>
  
1. <span data-ttu-id="f98d4-106">Dadurch werden die Knoten enthalten eine <xref:System.Collections.Generic.IList%601> statt einer <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-106">It enables the nodes to hold onto an <xref:System.Collections.Generic.IList%601> instead of a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>  <span data-ttu-id="f98d4-107">Dies spart die Kosten für die schreibgeschützte Auflistung für jeden Knoten zuordnen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-107">This saves the cost of allocating the read-only collection for each node.</span></span>
  
2. <span data-ttu-id="f98d4-108">Spezialisierte Unterklassen, halten für auf eine bestimmte Anzahl von Argumenten erstellt werden können (z. B. `Block2`, `Block2`, `Block4`).</span><span class="sxs-lookup"><span data-stu-id="f98d4-108">It enables specialized subclasses to be created that hold on to a specific number of arguments (for example, `Block2`, `Block2`, `Block4`).</span></span>  <span data-ttu-id="f98d4-109">Aus diesem Grund diese Knoten zu vermeiden, dass sowohl eine <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> und ein Array zum Speichern ihre Elemente, wodurch 32 Bytes pro Knoten gespart.</span><span class="sxs-lookup"><span data-stu-id="f98d4-109">Therefore, these nodes avoid allocating both a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> and an array for storing their elements, thus saving 32 bytes per node.</span></span>  <span data-ttu-id="f98d4-110">Diese Technik wird von verschiedenen Knoten, einschließlich verwendet <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, und <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-110">This technique is used by various nodes, including <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, and <xref:System.Linq.Expressions.MethodCallExpression>.</span></span>
            
<span data-ttu-id="f98d4-111">Die Knoten der Ausdrucksbaumstruktur weiterhin die ursprünglichen LINQ-Eigenschaften des verfügbar zu machen <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Objekte.</span><span class="sxs-lookup"><span data-stu-id="f98d4-111">The expression tree nodes continue to expose the original LINQ properties of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objects.</span></span> <span data-ttu-id="f98d4-112">Hierfür wird die Wiederverwendung von einem Feld zum Speichern von sowohl das Array oder ein Element aus, die normalerweise im Array gespeichert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-112">They do this by reusing a field for storing both the array or an element that would normally be stored in the array.</span></span>
            
<span data-ttu-id="f98d4-113">Für den Fall des Arrays, die Auflistung den Typ zu <xref:System.Collections.Generic.IList%601> anstelle von <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-113">For the array case, the collection is typed to <xref:System.Collections.Generic.IList%601> instead of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="f98d4-114">Wenn der Knoten erstmalig erstellt wird, ist es ein Array.</span><span class="sxs-lookup"><span data-stu-id="f98d4-114">When the node is initially constructed, it is an array.</span></span>  <span data-ttu-id="f98d4-115">Der Compiler oder Hilfsprogramme in dieser Bibliothek auf die Elemente über diese Schnittstelle zugreifen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-115">The compiler or utilities in this library access the elements through this interface.</span></span> <span data-ttu-id="f98d4-116">Zugreifen auf Arrayelemente wird das Array, das eine <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-116">Accessing array elements promotes the array to a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="f98d4-117">Für den Fall Objekt befindet sich das erste Argument in einem Feld <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-117">For the object case, the first argument is stored in a field typed to <xref:System.Object>.</span></span> <span data-ttu-id="f98d4-118">Wenn der Knoten erstmalig erstellt wird, wird dieses Feld enthält den <xref:System.Linq.Expressions.Expression> des ersten Arguments.</span><span class="sxs-lookup"><span data-stu-id="f98d4-118">When the node is initially constructed, this field holds the <xref:System.Linq.Expressions.Expression> of the first argument.</span></span>  <span data-ttu-id="f98d4-119">Beim Zugriff auf die Argumente, die Compiler und die Dienstprogramme in dieser Bibliothek, sie erneut verwenden Sie diese Schnittstelle und der Accessor für das erste Argument der internen mithilfe `Expression.ReturnObject<T>(System.Object)` Hilfsmethode, um das Objekt zurück, der verarbeitet die <xref:System.Linq.Expressions.Expression> oder <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Fall.</span><span class="sxs-lookup"><span data-stu-id="f98d4-119">When the compiler and utilities in this library access the arguments, they again use this interface, and the accessor for the first argument uses the internal `Expression.ReturnObject<T>(System.Object)` helper method to return the object that handles the <xref:System.Linq.Expressions.Expression> or <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> case.</span></span> <span data-ttu-id="f98d4-120">Wenn der Benutzer greift auf die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, das Objekt-Feld wird aktualisiert, um direkt auf enthalten die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-120">When the user accesses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, the object field is updated to hold directly onto the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="f98d4-121">Es ist wichtig, <xref:System.Linq.Expressions.Expression> Eigenschaften zurückgeben konsistent die gleichen <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f98d4-121">It is important that <xref:System.Linq.Expressions.Expression> properties consistently return the same <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="f98d4-122">Andernfalls wird der Rewriter-Struktur-Walker Ausdrücke ein, die unterbrochen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-122">Otherwise, the rewriter tree walker used by expression visitors will break.</span></span> <span data-ttu-id="f98d4-123">Es ist eine bedeutende Änderung von LINQ v1, dass andere Daten zurückgeben <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> aus der gleichen <xref:System.Linq.Expressions.Expression> Knoten.</span><span class="sxs-lookup"><span data-stu-id="f98d4-123">It is a breaking change from LINQ v1 to return different <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> from the same <xref:System.Linq.Expressions.Expression> node.</span></span> <span data-ttu-id="f98d4-124">Derzeit können Benutzer verlassen sich auf die Objektidentität mitteilen, ob der Knoten geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="f98d4-124">Currently, users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="f98d4-125">Speichern der <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in einem überladenen Feld beide verringert die speicherauslastung und erhält die Kompatibilität für die öffentliche API.</span><span class="sxs-lookup"><span data-stu-id="f98d4-125">Storing the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span>

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f98d4-126">Gibt die Anzahl der Argumente an den Ausdrucksbaumstrukturknoten zurück.</span><span class="sxs-lookup"><span data-stu-id="f98d4-126">Returns the number of arguments to the expression tree node.</span></span> <span data-ttu-id="f98d4-127">Diese API ist ausschließlich für die interne Verwendung vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-127">This API is for internal use only.</span></span></summary>
        <value><span data-ttu-id="f98d4-128">Die Anzahl der Argumente für den Ausdrucksbaumstrukturknoten als <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="f98d4-128">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks><span data-ttu-id="f98d4-129">Sie sollten diese API nicht verwenden.</span><span class="sxs-lookup"><span data-stu-id="f98d4-129">You should not use this API.</span></span> <span data-ttu-id="f98d4-130">Er ist nur aufgrund der assemblyumgestaltung öffentlich, und sie wird intern zur leistungsoptimierung verwendet.</span><span class="sxs-lookup"><span data-stu-id="f98d4-130">It is public only due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="f98d4-131">Der Index des Arguments.</span><span class="sxs-lookup"><span data-stu-id="f98d4-131">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="f98d4-132">Gibt das Argument beim <paramref name="index" /> zurück, das ausgelöst wird, wenn der <paramref name="index" /> außerhalb des gültigen Bereichs liegt.</span><span class="sxs-lookup"><span data-stu-id="f98d4-132">Returns the argument at <paramref name="index" />, throwing if <paramref name="index" /> is out of bounds.</span></span> <span data-ttu-id="f98d4-133">Diese API ist ausschließlich für die interne Verwendung vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="f98d4-133">This API is for internal use only.</span></span></summary>
        <returns><span data-ttu-id="f98d4-134">Das Argument beim Index.</span><span class="sxs-lookup"><span data-stu-id="f98d4-134">The argument at index.</span></span></returns>
        <remarks><span data-ttu-id="f98d4-135">Sie sollten diese API nicht verwenden.</span><span class="sxs-lookup"><span data-stu-id="f98d4-135">You should not use this API.</span></span>  <span data-ttu-id="f98d4-136">Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</span><span class="sxs-lookup"><span data-stu-id="f98d4-136">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
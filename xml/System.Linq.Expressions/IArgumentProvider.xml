<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04fcb17014a0ec01a0985d0765f18310aa3305e3" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82482720" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt eine interne Schnittstelle für den Zugriff auf die Argumente von mehreren Strukturknoten (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression und IndexExpression) bereit.  Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

Sie sollten diese API nicht verwenden.  Er ist nur aufgrund der assemblyumgestaltung öffentlich und nur für interne Leistungsoptimierungen vorhanden. Sie ermöglicht zwei Optimierungen, die die Größe der Strukturen verringern:
  
1. Sie ermöglicht es, dass die Knoten anstelle eines <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>auf einem <xref:System.Collections.Generic.IList%601> abgelegt werden.  Dies spart die Kosten für das Zuordnen der schreibgeschützten Auflistung für jeden Knoten.
  
2. Sie ermöglicht die Erstellung spezieller Unterklassen, die eine bestimmte Anzahl von Argumenten (z. b. `Block2`, `Block2``Block4`) enthalten.  Daher vermeiden diese Knoten das Zuordnen eines <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> und eines Arrays zum Speichern Ihrer Elemente und somit die Speicherung von 32 Byte pro Knoten.  Diese Technik wird von verschiedenen Knoten verwendet, einschließlich <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>und <xref:System.Linq.Expressions.MethodCallExpression>.
            
Die Ausdrucks Baumstruktur Knoten machen weiterhin die ursprünglichen LINQ-Eigenschaften von <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Objekten verfügbar. Dazu wird ein Feld zum Speichern des Arrays oder eines Elements, das normalerweise im Array gespeichert wäre, wieder verwendet.
            
Für den arrayfall wird die Auflistung in <xref:System.Collections.Generic.IList%601> statt <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>typisiert. Wenn der Knoten erstmalig erstellt wird, ist er ein Array.  Der Compiler oder die Hilfsprogramme in dieser Bibliothek greifen über diese Schnittstelle auf die Elemente zu. Beim Zugreifen auf Array Elemente wird das Array in eine <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>herauf gestuft.
            
Für den Objekt Fall wird das erste Argument in einem Feld gespeichert, das in <xref:System.Object>eingegeben wurde. Wenn der Knoten erstmalig erstellt wird, enthält dieses Feld den <xref:System.Linq.Expressions.Expression> des ersten Arguments.  Wenn der Compiler und die Hilfsprogramme in dieser Bibliothek auf die Argumente zugreifen, wird diese Schnittstelle wieder verwendet, und der-Accessor für das erste Argument verwendet die interne `Expression.ReturnObject<T>(System.Object)` Helper-Methode, um das Objekt zurückzugeben, das die <xref:System.Linq.Expressions.Expression> oder <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Groß-/Kleinschreibung behandelt. Wenn der Benutzer auf die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>zugreift, wird das Objektfeld so aktualisiert, dass es direkt auf dem <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>enthalten ist.
            
Es ist wichtig, dass <xref:System.Linq.Expressions.Expression> Eigenschaften konstant denselben <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>zurückgeben. Andernfalls wird der von den Ausdrucks Besuchern verwendete ReWriter-Struktur Durchlauf abgebrochen. Es ist eine Breaking Change von LINQ v1, um andere <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vom gleichen <xref:System.Linq.Expressions.Expression> Knoten zurückzugeben. Derzeit können sich Benutzer auf die Objekt Identität verlassen, um zu erkennen, ob sich der Knoten geändert hat.  Das Speichern der <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in einem überladenen Feld reduziert die Speicherauslastung und behält die Kompatibilität für die öffentliche API bei.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück. Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
        <value>Die Anzahl der Argumente für den Ausdrucksstrukturknoten als <see cref="T:System.Int32" />.</value>
        <remarks>Sie sollten diese API nicht verwenden. Er ist nur aufgrund der assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des Arguments.</param>
        <summary>Gibt das Argument beim <paramref name="index" /> zurück, das ausgelöst wird, wenn der <paramref name="index" /> außerhalb des gültigen Bereichs liegt. Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
        <returns>Das Argument beim Index.</returns>
        <remarks>Sie sollten diese API nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36555647" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ac5f1-101">Stellt eine interne Schnittstelle für den Zugriff auf die Argumente von mehreren Strukturknoten (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression und InexExpression) bereit.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span></span>  <span data-ttu-id="ac5f1-102">Sie sollten diese API nicht verwenden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-102">You should not use this API.</span></span>  <span data-ttu-id="ac5f1-103">Sie ist nur aufgrund von DLL-Umgestaltung öffentlich und nur für interne Leistungsoptimierungen vorhanden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span></span>  
  
<span data-ttu-id="ac5f1-104">Dadurch werden zwei Optimierungen ermöglicht, bei denen Ausdrucksbaumstrukturen verkleinert werden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-104">This enables two optimizations which reduce the size of expression trees.</span></span>  <span data-ttu-id="ac5f1-105">Die erste Optimierung ermöglicht für die Strukturknoten, dass sie IList&lt;T&gt; statt ReadOnlyCollection enthalten.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span></span>  <span data-ttu-id="ac5f1-106">IList&lt;T&gt; spart die Kosten für das Zuordnen der ReadOnlyCollection für jeden Knoten.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span></span>  <span data-ttu-id="ac5f1-107">Die zweite Optimierung ermöglicht das Erstellen spezialisierter Unterklassen, die eine bestimmte Anzahl von Argumenten (z. B. Block2, Block3, Block4) enthalten.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span></span>  <span data-ttu-id="ac5f1-108">Daher wird für diese Knoten vermieden, dass für sie sowohl eine ReadOnlyCollection als auch ein Array zum Speichern von deren Elementen zugeordnet wird, wodurch 32 Bytes pro Knoten gespart werden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span></span>  
  
<span data-ttu-id="ac5f1-109">Die Knoten der Ausdrucksbaumstruktur machen weiterhin die ursprünglichen LINQ-Eigenschaften von ReadOnlyCollections verfügbar.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span></span>  <span data-ttu-id="ac5f1-110">Dies geschieht, indem für die Knoten erneut ein Feld verwendet wird, in dem das Array oder ein Element gespeichert wird, das normalerweise im Array gespeichert würde.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span></span>  
  
<span data-ttu-id="ac5f1-111">Für den Fall, dass es sich um ein Array handelt, erhält die Auflistung den Typ IList&lt;T&gt; anstelle von ReadOnlyCollection&lt;T&gt;.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span></span>  <span data-ttu-id="ac5f1-112">Wenn der Knoten erstmalig erstellt wird, ist er ein Array.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-112">When the node is initially constructed it is an array.</span></span>  <span data-ttu-id="ac5f1-113">Wenn der Compiler auf die Member zugreift, verwendet er diese Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-113">When the compiler accesses the members it uses this interface.</span></span>  <span data-ttu-id="ac5f1-114">Durch Zugreifen auf Arrayelemente wird das Array in eine ReadOnlyCollection hochgestuft.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="ac5f1-115">Für den Objektfall wir das erste Argument in einem Feld mit dem Objekttyp gespeichert.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-115">For the object case we store the first argument in a field typed to object.</span></span>  <span data-ttu-id="ac5f1-116">Wenn der Knoten erstmalig erstellt wird, enthält das Feld den Ausdruck (Expression).</span><span class="sxs-lookup"><span data-stu-id="ac5f1-116">When the node is initially constructed, the field holds the Expression.</span></span>  <span data-ttu-id="ac5f1-117">Der Compiler greift über diese Schnittstelle auf Argumente zu, und der Accessor für das erste Argument verwendet Expression.ReturnObject, um das Objekt zurückzugeben, das den Expression- oder ReadOnlyCollection-Fall verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span></span>  <span data-ttu-id="ac5f1-118">Wenn der Benutzer auf die ReadOnlyCollection zugreift, wird das Objekt-Feld aktualisiert, sodass es direkt auf die ReadOnlyCollection verweist.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="ac5f1-119">Es ist unverzichtbar, dass die Ausdrücke stets dieselbe ReadOnlyCollection zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span></span>  <span data-ttu-id="ac5f1-120">Andernfalls wird der Rewriter-Strukturdurchlauf abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-120">Otherwise, the re-writer tree walker will break.</span></span>  <span data-ttu-id="ac5f1-121">Es ist eine bedeutende Änderung von LINQ v1, dass unterschiedliche ReadOnlyCollections aus demselben Ausdrucksknoten zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span></span>  <span data-ttu-id="ac5f1-122">Derzeit können sich Benutzer auf die Objektidentität verlassen, um zu erkennen, ob der Knoten geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-122">Currently users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="ac5f1-123">Ein Speichern der ReadOnlyCollection in einem überladenen Feld reduziert die Speicherauslastung und erhält die Kompatibilität für die öffentliche API.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac5f1-124">Gibt die Anzahl der Argumente für den Ausdrucksbaumstrukturknoten zurück.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-124">Returns the number of arguments to the expression tree node.</span></span>  <span data-ttu-id="ac5f1-125">Sie sollten diesen Typ nicht verwenden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-125">You should not use this type.</span></span>  <span data-ttu-id="ac5f1-126">Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <value><span data-ttu-id="ac5f1-127">Die Anzahl von Argumenten für den Ausdrucksstrukturknoten als <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ac5f1-128">Der Index des Arguments.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-128">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="ac5f1-129">Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-129">Returns the argument at index, throwing if index is out of bounds.</span></span>  <span data-ttu-id="ac5f1-130">Sie sollten diesen Typ nicht verwenden.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-130">You should not use this type.</span></span>  <span data-ttu-id="ac5f1-131">Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <returns><span data-ttu-id="ac5f1-132">Das Argument am Index, das ausgelöst wird, wenn der Index als <see cref="T:System.Linq.Expressions.Expression" /> außerhalb des gültigen Bereichs liegt.</span><span class="sxs-lookup"><span data-stu-id="ac5f1-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
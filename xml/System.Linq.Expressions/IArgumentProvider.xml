<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4abd0b0508fdc62e37d2117e5823a54dfc7dfdce" /><Meta Name="ms.sourcegitcommit" Value="d3dcd8c426adcf1bbe5ff78a76dee13bd8ad6efd" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/28/2019" /><Meta Name="ms.locfileid" Value="66251523" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt eine interne Schnittstelle für den Zugriff auf die Argumente von mehreren Strukturknoten (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression und IndexExpression) bereit.  Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

Sie sollten diese API nicht verwenden.  Er ist nur aufgrund der assemblyumgestaltung öffentlich, und sie nur für interne leistungsoptimierungen vorhanden ist. Sie können zwei Optimierungen, die die Größe der Strukturen zu reduzieren:
  
1. Dadurch werden die Knoten enthalten eine <xref:System.Collections.Generic.IList%601> statt einer <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  Dies spart die Kosten für die schreibgeschützte Auflistung für jeden Knoten zuordnen.
  
2. Spezialisierte Unterklassen, halten für auf eine bestimmte Anzahl von Argumenten erstellt werden können (z. B. `Block2`, `Block2`, `Block4`).  Aus diesem Grund diese Knoten zu vermeiden, dass sowohl eine <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> und ein Array zum Speichern ihre Elemente, wodurch 32 Bytes pro Knoten gespart.  Diese Technik wird von verschiedenen Knoten, einschließlich verwendet <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, und <xref:System.Linq.Expressions.MethodCallExpression>.
            
Die Knoten der Ausdrucksbaumstruktur weiterhin die ursprünglichen LINQ-Eigenschaften des verfügbar zu machen <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Objekte. Hierfür wird die Wiederverwendung von einem Feld zum Speichern von sowohl das Array oder ein Element aus, die normalerweise im Array gespeichert werden sollen.
            
Für den Fall des Arrays, die Auflistung den Typ zu <xref:System.Collections.Generic.IList%601> anstelle von <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Wenn der Knoten erstmalig erstellt wird, ist es ein Array.  Der Compiler oder Hilfsprogramme in dieser Bibliothek auf die Elemente über diese Schnittstelle zugreifen. Zugreifen auf Arrayelemente wird das Array, das eine <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Für den Fall Objekt befindet sich das erste Argument in einem Feld <xref:System.Object>. Wenn der Knoten erstmalig erstellt wird, wird dieses Feld enthält den <xref:System.Linq.Expressions.Expression> des ersten Arguments.  Beim Zugriff auf die Argumente, die Compiler und die Dienstprogramme in dieser Bibliothek, sie erneut verwenden Sie diese Schnittstelle und der Accessor für das erste Argument der internen mithilfe `Expression.ReturnObject<T>(System.Object)` Hilfsmethode, um das Objekt zurück, der verarbeitet die <xref:System.Linq.Expressions.Expression> oder <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Fall. Wenn der Benutzer greift auf die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, das Objekt-Feld wird aktualisiert, um direkt auf enthalten die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Es ist wichtig, <xref:System.Linq.Expressions.Expression> Eigenschaften zurückgeben konsistent die gleichen <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Andernfalls wird der Rewriter-Struktur-Walker Ausdrücke ein, die unterbrochen. Es ist eine bedeutende Änderung von LINQ v1, dass andere Daten zurückgeben <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> aus der gleichen <xref:System.Linq.Expressions.Expression> Knoten. Derzeit können Benutzer verlassen sich auf die Objektidentität mitteilen, ob der Knoten geändert wurde.  Speichern der <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in einem überladenen Feld beide verringert die speicherauslastung und erhält die Kompatibilität für die öffentliche API.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Anzahl der Argumente an den Ausdrucksbaumstrukturknoten zurück. Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
        <value>Die Anzahl der Argumente für den Ausdrucksbaumstrukturknoten als <see cref="T:System.Int32" />.</value>
        <remarks>Sie sollten diese API nicht verwenden. Er ist nur aufgrund der assemblyumgestaltung öffentlich, und sie wird intern zur leistungsoptimierung verwendet.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des Arguments.</param>
        <summary>Gibt das Argument beim <paramref name="index" /> zurück, das ausgelöst wird, wenn der <paramref name="index" /> außerhalb des gültigen Bereichs liegt. Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
        <returns>Das Argument beim Index.</returns>
        <remarks>Sie sollten diese API nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

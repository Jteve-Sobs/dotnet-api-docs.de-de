<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DebugInfoExpression.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55edff362cf07b62317c618bfac7306914a9d35c4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5edff362cf07b62317c618bfac7306914a9d35c4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.DebugInfoExpression">
          <source>Emits or clears a sequence point for debug information.</source>
          <target state="translated">Dient zum Ausgeben oder Löschen eines Sequenzpunkts für Debuginformationen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.DebugInfoExpression">
          <source>This allows the debugger to highlight the correct source code when debugging.</source>
          <target state="translated">Dadurch kann der Debugger beim Debuggen den korrekten Quellcode hervorheben.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">Der Besucher, mit dem dieser Knoten besucht werden soll.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">Sendet an die spezifische Visit-Methode für diesen Knotentyp.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">Beispielsweise ruft <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> die Methode <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph> auf.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">Das Ergebnis eines Besuchs dieses Knotens.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Diese Standardimplementierung für <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> Knoten Aufrufe <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">Überschreiben Sie diese Methode in eine genauere Methode für eine Besucherklasse abgeleiteten von Aufrufen der <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Sie sollten dennoch unbekannte Besucher unterstützen, durch den Aufruf <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.Document">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that represents the source file.</source>
          <target state="translated">Ruft die <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> ab, die die Quelldatei darstellt.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.Document">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that represents the source file.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>, die die Quelldatei darstellt.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
          <source>Gets the end column of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Ruft die Endspalte dieses <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
          <source>The number of the end column of the code that was used to generate the wrapped expression.</source>
          <target state="translated">Die Nummer der Endspalte des Codes, mit dem der umschlossene Ausdruck generiert wurde.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
          <source>Gets the end line of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Ruft die Endzeile dieses <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
          <source>The number of the end line of the code that was used to generate the wrapped expression.</source>
          <target state="translated">Die Nummer der Endzeile des Codes, mit dem der umschlossene Ausdruck generiert wurde.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
          <source>Gets the value to indicate if the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> is for clearing a sequence point.</source>
          <target state="translated">Ruft den Wert ab, mit dem angegeben wird, ob <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> zum Löschen eines Sequenzpunkts verwendet wird.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
          <source>True if the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> is for clearing a sequence point, otherwise false.</source>
          <target state="translated">True, wenn die <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> zum Löschen eines Sequenzpunkts verwendet wird, andernfalls false.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Gibt den Knotentyp dieses <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> zurück.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph>, der diesen Ausdruck darstellt.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
          <source>Gets the start column of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Ruft die Startspalte dieses <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
          <source>The number of the start column of the code that was used to generate the wrapped expression.</source>
          <target state="translated">Die Nummer der Anfangsspalte des Codes, mit dem der umschlossene Ausdruck generiert wurde.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
          <source>Gets the start line of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Ruft die Startzeile dieses <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> ab.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
          <source>The number of the start line of the code that was used to generate the wrapped expression.</source>
          <target state="translated">Die Nummer der Anfangszeile des Codes, mit dem der umschlossene Ausdruck generiert wurde.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.DebugInfoExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Ruft den statischen Typ des Ausdrucks ab, den dieser <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> darstellt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.DebugInfoExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /&gt;</ph>, der den statischen Typ des Ausdrucks darstellt.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
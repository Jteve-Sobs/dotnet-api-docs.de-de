<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConditionalExpression.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5990d64585d45900e6cd4871fb4a56992c00fb26f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">990d64585d45900e6cd4871fb4a56992c00fb26f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ConditionalExpression">
          <source>Represents an expression that has a conditional operator.</source>
          <target state="translated">Stellt einen Ausdruck mit einem bedingten Operator dar.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ConditionalExpression">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Condition%2A&gt;</ph> factory method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Condition%2A&gt;</ph> Factorymethode zum Erstellen einer <ph id="ph2">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ConditionalExpression">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Conditional&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> von einem <ph id="ph2">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph> ist <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Conditional&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ConditionalExpression">
          <source>The following code example shows how to create an expression that represents a conditional statement.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie einen Ausdruck erstellt, der eine bedingte Anweisung darstellt.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ConditionalExpression">
          <source>If the first argument evaluates to <ph id="ph1">`true`</ph>, the second argument is executed; otherwise, the third argument is executed.</source>
          <target state="translated">Wenn das erste Argument ergibt <ph id="ph1">`true`</ph>das zweite Argument ausgeführt wird; andernfalls, wird das dritte Argument ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">Der Besucher, mit dem dieser Knoten besucht werden soll.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">Sendet an die spezifische Visit-Methode für diesen Knotentyp.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">Beispielsweise ruft <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> die Methode <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph> auf.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">Das Ergebnis eines Besuchs dieses Knotens.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Diese Standardimplementierung für <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> Knoten Aufrufe <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">Überschreiben Sie diese Methode in eine genauere Methode für eine Besucherklasse abgeleiteten von Aufrufen der <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Sie sollten dennoch unbekannte Besucher unterstützen, durch den Aufruf <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
          <source>Gets the expression to execute if the test evaluates to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Ruft den Ausdruck ab, der ausgeführt werden soll, wenn der Test <ph id="ph1">&lt;see langword="false" /&gt;</ph> ergibt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the expression to execute if the test is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>, die den Ausdruck darstellt, der ausgeführt werden soll, wenn der Test <ph id="ph2">&lt;see langword="false" /&gt;</ph> ergibt.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
          <source>Gets the expression to execute if the test evaluates to <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Ruft den Ausdruck ab, der ausgeführt werden soll, wenn der Test <ph id="ph1">&lt;see langword="true" /&gt;</ph> ergibt.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the expression to execute if the test is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>, die den Ausdruck darstellt, der ausgeführt werden soll, wenn der Test <ph id="ph2">&lt;see langword="true" /&gt;</ph> ergibt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ConditionalExpression.NodeType">
          <source>Returns the node type of this expression.</source>
          <target state="translated">Gibt den Knotentyp dieses Ausdrucks zurück.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ConditionalExpression.NodeType">
          <source>Extension nodes should return <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Extension" /&gt;</ph> when overriding this method.</source>
          <target state="translated">Erweiterungsknoten sollten <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Extension" /&gt;</ph> zurückgeben, wenn diese Methode überschrieben wird.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ConditionalExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> of the expression.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> des Ausdrucks.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ConditionalExpression.Test">
          <source>Gets the test of the conditional operation.</source>
          <target state="translated">Ruft den Test der bedingten Operation ab.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ConditionalExpression.Test">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the test of the conditional operation.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>, die den Text der bedingten Operation darstellt.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ConditionalExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Ruft den statischen Typ des Ausdrucks ab, den dieser <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> darstellt.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ConditionalExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /&gt;</ph>, der den statischen Typ des Ausdrucks darstellt.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> property of the result.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>-Eigenschaft des Ergebnisses.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> property of the result.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>-Eigenschaft des Ergebnisses.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> property of the result.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph>-Eigenschaft des Ergebnisses.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If all of the children are the same, it will return this expression</source>
          <target state="translated">Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>This expression if no children changed, or an expression with the updated children.</source>
          <target state="translated">Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
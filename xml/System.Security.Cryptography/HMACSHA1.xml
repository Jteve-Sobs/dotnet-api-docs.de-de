<Type Name="HMACSHA1" FullName="System.Security.Cryptography.HMACSHA1">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f3964b12783e3c7da608cdaebc9133c28415477d" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75029718" /></Metadata><TypeSignature Language="C#" Value="public class HMACSHA1 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACSHA1 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACSHA1" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACSHA1&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACSHA1 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACSHA1 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Security.Cryptography.KeyedHashAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5fa7a-101">Berechnet unter Verwendung der <see cref="T:System.Security.Cryptography.SHA1" />-Hashfunktion einen Hash-Nachrichtenauthentifizierungscode (HMAC, Hash-based Message Authentication Code).</span><span class="sxs-lookup"><span data-stu-id="5fa7a-101">Computes a Hash-based Message Authentication Code (HMAC) using the <see cref="T:System.Security.Cryptography.SHA1" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa7a-102"><xref:System.Security.Cryptography.HMACSHA1> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der SHA1-Hash Funktion erstellt und als HMAC oder Hash basierter Nachrichten Authentifizierungscode verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-102"><xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</span></span> <span data-ttu-id="5fa7a-103">Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="5fa7a-104">Der Ausgabe Hash beträgt 160 Bits.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="5fa7a-105">Ein HMAC kann verwendet werden, um zu bestimmen, ob eine Nachricht, die über einen unsicheren Kanal gesendet wurde, manipuliert wurde, vorausgesetzt, dass der Absender und der Empfänger einen geheimen Schlüssel gemeinsam nutzen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="5fa7a-106">Der Absender berechnet den Hashwert für die ursprünglichen Daten und sendet die ursprünglichen Daten und den Hashwert als einzelne Nachricht.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-106">The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</span></span> <span data-ttu-id="5fa7a-107">Der Empfänger berechnet den Hashwert für die empfangene Nachricht neu und überprüft, ob der berechnete HMAC mit dem übertragenen HMAC übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="5fa7a-108">Jede Änderung an den Daten oder dem Hashwert führt zu einem Konflikt, da das Wissen des geheimen Schlüssels erforderlich ist, um die Nachricht zu ändern und den korrekten Hashwert zu reproduzieren.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="5fa7a-109">Wenn der ursprüngliche und der berechnete Hashwert entsprechen, wird die Nachricht Daher authentifiziert.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="5fa7a-110">Der SHA-1 (Secure Hash-Algorithmus, auch als SHS, Secure Hash Standard bezeichnet) ist ein kryptografischer Hash Algorithmus, der von der USA Government veröffentlicht wird.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-110">The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government.</span></span> <span data-ttu-id="5fa7a-111">Sie erzeugt einen 160-Bit-Hashwert aus einer beliebigen Längen Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-111">It produces a 160-bit hash value from an arbitrary length string.</span></span>  
  
 <span data-ttu-id="5fa7a-112"><xref:System.Security.Cryptography.HMACSHA1> akzeptiert Schlüssel beliebiger Größe und erzeugt eine Hash Sequenz mit einer Länge von 160 Bits.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-112"><xref:System.Security.Cryptography.HMACSHA1> accepts keys of any size, and produces a hash sequence that is 160 bits in length.</span></span>  
  
 <span data-ttu-id="5fa7a-113">Microsoft empfiehlt aufgrund der Konflikte mit SHA1 SHA256.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-113">Due to collision problems with SHA1, Microsoft recommends SHA256.</span></span>  
  
## Examples  
 <span data-ttu-id="5fa7a-114">Im folgenden Codebeispiel wird gezeigt, wie Sie eine Datei mit dem <xref:System.Security.Cryptography.HMACSHA1>-Objekt Signieren und dann die Datei überprüfen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-114">The following code example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACSHA1> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACSHA1#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACSHA1/CPP/hmacsha1.cpp#1)]
 [!code-csharp[HMACSHA1#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACSHA1/CS/hmacsha1.cs#1)]
 [!code-vb[HMACSHA1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACSHA1/vb/hmacsha1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="5fa7a-115">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="5fa7a-115">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5fa7a-116">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACSHA1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACSHA1 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACSHA1();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa7a-117">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACSHA1" />-Klasse mit einem zufällig erzeugten Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class with a randomly generated key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa7a-118"><xref:System.Security.Cryptography.HMACSHA1> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der SHA1-Hash Funktion erstellt und als HMAC oder Hash basierter Nachrichten Authentifizierungscode verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-118"><xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</span></span> <span data-ttu-id="5fa7a-119">Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="5fa7a-120">Der Ausgabe Hash hat eine Länge von 160 Bits (20 Bytes).</span><span class="sxs-lookup"><span data-stu-id="5fa7a-120">The output hash is 160 bits (20 bytes) in length.</span></span>  
  
 <span data-ttu-id="5fa7a-121">Dieser Konstruktor verwendet einen zufällig generierten 64-Byte-Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-121">This constructor uses a 64-byte, randomly generated key.</span></span>  

 <span data-ttu-id="5fa7a-122">Microsoft empfiehlt aufgrund der Konflikte mit SHA1 SHA256.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-122">Due to collision problems with SHA1, Microsoft recommends SHA256.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="5fa7a-123">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="5fa7a-123">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACSHA1 (byte[] key, bool useManagedSha1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key, bool useManagedSha1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte(), useManagedSha1 As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACSHA1(cli::array &lt;System::Byte&gt; ^ key, bool useManagedSha1);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACSHA1 : byte[] * bool -&gt; System.Security.Cryptography.HMACSHA1" Usage="new System.Security.Cryptography.HMACSHA1 (key, useManagedSha1)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useManagedSha1" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="5fa7a-124">Der geheime Schlüssel für die <see cref="T:System.Security.Cryptography.HMACSHA1" />-Verschlüsselung.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-124">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA1" /> encryption.</span></span> <span data-ttu-id="5fa7a-125">Der Schlüssel kann eine beliebige Länge aufweisen. Ab einer Länge von mehr als 64 Bytes wird jedoch unter Verwendung des SHA-1-Hashalgorithmus ein 64-Byte-Schlüssel aus ihm abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-125">The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="5fa7a-126">Für den geheimen Schlüssel wird daher eine Größe von 64 Bytes empfohlen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-126">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <param name="useManagedSha1"><span data-ttu-id="5fa7a-127"><see langword="true" />, um die verwaltete Implementierung des SHA1-Algorithmus zu verwenden (die <see cref="T:System.Security.Cryptography.SHA1Managed" />-Klasse), <see langword="false" />, um die nicht verwaltete Implementierung zu verwenden (die <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />-Klasse).</span><span class="sxs-lookup"><span data-stu-id="5fa7a-127"><see langword="true" /> to use the managed implementation of the SHA1 algorithm (the <see cref="T:System.Security.Cryptography.SHA1Managed" /> class); <see langword="false" /> to use the unmanaged implementation (the <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> class).</span></span></param>
        <summary><span data-ttu-id="5fa7a-128">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACSHA1" />-Klasse mit den angegebenen Schlüsseldaten und einem Wert, der angibt, ob die verwaltete Version des SHA1-Algorithmus verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-128">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.</span></span></summary>
        <remarks><span data-ttu-id="5fa7a-129">Aufgrund von Problemen durch Konflikte mit SHA1 wird von Microsoft ein Sicherheitsmodell empfohlen, das mindestens auf SHA256 basiert.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-129">Due to collision problems with SHA1, Microsoft recommends a security model based on SHA256 or better.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACSHA1 (byte[] key);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACSHA1(cli::array &lt;System::Byte&gt; ^ key);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACSHA1 : byte[] -&gt; System.Security.Cryptography.HMACSHA1" Usage="new System.Security.Cryptography.HMACSHA1 key" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public HMACSHA1 (byte[] rgbKey);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rgbKey) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rgbKey As Byte())" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACSHA1(cli::array &lt;System::Byte&gt; ^ rgbKey);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACSHA1 : byte[] -&gt; System.Security.Cryptography.HMACSHA1" Usage="new System.Security.Cryptography.HMACSHA1 rgbKey" FrameworkAlternate="netframework-1.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgbKey" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="5fa7a-130">Der geheime Schlüssel für die <see cref="T:System.Security.Cryptography.HMACSHA1" />-Verschlüsselung.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-130">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA1" /> encryption.</span></span> <span data-ttu-id="5fa7a-131">Der Schlüssel kann eine beliebige Länge aufweisen. Ab einer Länge von mehr als 64 Bytes wird jedoch unter Verwendung des SHA-1-Hashalgorithmus ein 64-Byte-Schlüssel aus ihm abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-131">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="5fa7a-132">Für den geheimen Schlüssel wird daher eine Größe von 64 Bytes empfohlen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-132">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <param name="rgbKey"><span data-ttu-id="5fa7a-133">Der geheime Schlüssel für die <see cref="T:System.Security.Cryptography.HMACSHA1" />-Verschlüsselung.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-133">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA1" /> encryption.</span></span> <span data-ttu-id="5fa7a-134">Der Schlüssel kann eine beliebige Länge aufweisen. Ab einer Länge von mehr als 64 Bytes wird jedoch unter Verwendung des SHA-1-Hashalgorithmus ein 64-Byte-Schlüssel aus ihm abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-134">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="5fa7a-135">Für den geheimen Schlüssel wird daher eine Größe von 64 Bytes empfohlen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-135">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <summary><span data-ttu-id="5fa7a-136">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACSHA1" />-Klasse mit den angegebenen Schlüsseldaten.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class with the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa7a-137"><xref:System.Security.Cryptography.HMACSHA1> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der SHA1-Hash Funktion erstellt und als HMAC oder Hash basierter Nachrichten Authentifizierungscode verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-137"><xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</span></span> <span data-ttu-id="5fa7a-138">Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-138">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="5fa7a-139">Der Ausgabe Hash hat eine Länge von 160 Bits (20 Bytes).</span><span class="sxs-lookup"><span data-stu-id="5fa7a-139">The output hash is 160 bits (20 bytes) in length.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5fa7a-140">Dieser Konstruktor erstellt mithilfe der <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>-Klasse eine nicht verwaltete Instanz des-Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-140">This constructor creates an unmanaged instance of the algorithm by using the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class.</span></span>  
  
<span data-ttu-id="5fa7a-141">Aufgrund von Problemen durch Konflikte mit SHA1 wird von Microsoft ein Sicherheitsmodell empfohlen, das mindestens auf SHA256 basiert.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-141">Due to collision problems with SHA1, Microsoft recommends a security model based on SHA256 or better.</span></span>   
  
## Examples  
 <span data-ttu-id="5fa7a-142">Ein Beispiel für die Verwendung dieses Konstruktors finden Sie in der <xref:System.Security.Cryptography.HMACSHA1>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-142">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA1> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5fa7a-143">Der <paramref name="key" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-143">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="5fa7a-144">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="5fa7a-144">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="hMACSHA1.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5fa7a-145"><see langword="true" />, wenn sowohl verwaltete als auch nicht verwaltete Ressourcen freigegeben werden sollen. FALSE, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-145"><see langword="true" /> to release both managed and unmanaged resources; false to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5fa7a-146">Dieser Member überschreibt <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />. Das zugehörige Thema enthält möglicherweise eine umfassendere Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-146">This member overrides <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />, and more complete documentation might be available in that topic.</span></span>

<span data-ttu-id="5fa7a-147">Gibt die von <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-147">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~HMACSHA1 ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!HMACSHA1 ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="hMACSHA1.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa7a-148">Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-148">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected override void HashCore (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void HashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub HashCore (source As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void HashCore(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="override this.HashCore : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="hMACSHA1.HashCore source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="5fa7a-149">Die Eingabe, für die der HMAC berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-149">The input to compute the HMAC for.</span></span></param>
        <summary><span data-ttu-id="5fa7a-150">Leitet in das Objekt geschriebene Daten in den HMAC-Algorithmus für die Berechnung vom HMAC weiter.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-150">Routes data written to the object into the HMAC algorithm for computing the HMAC.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected override void HashCore (byte[] rgb, int ib, int cb);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void HashCore(unsigned int8[] rgb, int32 ib, int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub HashCore (rgb As Byte(), ib As Integer, cb As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void HashCore(cli::array &lt;System::Byte&gt; ^ rgb, int ib, int cb);" />
      <MemberSignature Language="F#" Value="override this.HashCore : byte[] * int * int -&gt; unit" Usage="hMACSHA1.HashCore (rgb, ib, cb)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgb" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="ib" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="cb" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="rgb"><span data-ttu-id="5fa7a-151">Die Eingabedaten.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-151">The input data.</span></span></param>
        <param name="ib"><span data-ttu-id="5fa7a-152">Der Offset im Bytearray, ab dem Daten verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-152">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="cb"><span data-ttu-id="5fa7a-153">Die Anzahl der Bytes im Array, die als Daten verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-153">The number of bytes in the array to use as data.</span></span></param>
        <summary><span data-ttu-id="5fa7a-154">Leitet die in das Objekt geschriebenen Daten in den SHA1-Hashalgorithmus zum Berechnen von hashbasiertem Nachrichtenauthentifizierungscode weiter.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-154">Routes data written to the object into the SHA1 hash algorithm for computing the Hash-based Message Authentication Code (HMAC).</span></span></summary>
        <remarks><span data-ttu-id="5fa7a-155">Aufgrund von Problemen durch Konflikte mit SHA1 wird von Microsoft ein Sicherheitsmodell empfohlen, das mindestens auf SHA256 basiert.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-155">Due to collision problems with SHA1, Microsoft recommends a security model based on SHA256 or better.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="HashFinal">
      <MemberSignature Language="C#" Value="protected override byte[] HashFinal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance unsigned int8[] HashFinal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.HashFinal" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HashFinal () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::Byte&gt; ^ HashFinal();" />
      <MemberSignature Language="F#" Value="override this.HashFinal : unit -&gt; byte[]" Usage="hMACSHA1.HashFinal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa7a-156">Schließt die HMAC-Berechnung ab, nachdem die letzten Daten vom Algorithmus verarbeitet wurden.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-156">Finalizes the HMAC computation after the last data is processed by the algorithm.</span></span></summary>
        <returns><span data-ttu-id="5fa7a-157">Der berechnete HMAC-Wert in einem Bytearray.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-157">The computed HMAC value in a byte array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HMACSHA1.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HashName : string with get, set" Usage="System.Security.Cryptography.HMACSHA1.HashName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5fa7a-158">Ruft den Namen des für die Hashoperation verwendeten Hashalgorithmus ab oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-158">Gets or sets the name of the hash algorithm to use for hashing.</span></span></summary>
        <value><span data-ttu-id="5fa7a-159">Der Name des Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-159">The name of the hash algorithm.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashSize">
      <MemberSignature Language="C#" Value="public override int HashSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HashSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HMACSHA1.HashSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HashSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HashSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HashSize : int" Usage="System.Security.Cryptography.HMACSHA1.HashSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5fa7a-160">Ruft die Größe des berechneten HMAC-Werts in Bits ab.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-160">Gets the size, in bits, of the computed HMAC.</span></span></summary>
        <value><span data-ttu-id="5fa7a-161">Die Größe des berechneten HMAC in Bits.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-161">The size, in bits, of the computed HMAC.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize();" />
      <MemberSignature Language="F#" Value="override this.Initialize : unit -&gt; unit" Usage="hMACSHA1.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa7a-162">Setzt den Hashalgorithmus auf seinen Anfangszustand zurück.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-162">Resets the hash algorithm to its initial state.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public override byte[] Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HMACSHA1.Key" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Key As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ Key { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Key : byte[] with get, set" Usage="System.Security.Cryptography.HMACSHA1.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5fa7a-163">Ruft den im Hashalgorithmus zu verwendenden Schlüssel ab oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-163">Gets or sets the key to use in the hash algorithm.</span></span></summary>
        <value><span data-ttu-id="5fa7a-164">Der im Hashalgorithmus zu verwendende Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-164">The key to use in the hash algorithm.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryHashFinal">
      <MemberSignature Language="C#" Value="protected override bool TryHashFinal (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryHashFinal(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TryHashFinal (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool TryHashFinal(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryHashFinal : Span&lt;byte&gt; * int -&gt; bool" Usage="hMACSHA1.TryHashFinal (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5fa7a-165">Der Puffer, der den HMAC-Wert empfangen soll.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-165">The buffer to receive the HMAC value.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="5fa7a-166">Nach Ausführung dieser Methode die Gesamtzahl der in <paramref name="destination" /> geschriebenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-166">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="5fa7a-167">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-167">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="5fa7a-168">Versucht, die HMAC-Berechnung abzuschließen, nachdem die letzten Daten vom HMAC-Algorithmus verarbeitet wurden.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-168">Attempts to finalize the HMAC computation after the last data is processed by the HMAC algorithm.</span></span></summary>
        <returns><span data-ttu-id="5fa7a-169"><see langword="true" />, wenn <paramref name="destination" /> zum Empfangen des HMAC-Werts lang genug ist. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa7a-169"><see langword="true" /> if <paramref name="destination" /> is long enough to receive the HMAC value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72dc241eacf46f4bb4b198748e97972832b330bc" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75162598" /></Metadata><TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <TypeSignature Language="F#" Value="type PasswordDeriveBytes = class&#xA;    inherit DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="eb685-101">Leitet mithilfe einer Erweiterung des PBKDF1-Algorithmus einen Schlüssel von einem Kennwort ab.</span><span class="sxs-lookup"><span data-stu-id="eb685-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb685-102">Diese Klasse verwendet eine Erweiterung des PBKDF1-Algorithmus, der im PKCS # 5 v 2.0-Standard definiert ist, um die Bytes abzuleiten, die für die Verwendung als Schlüsselmaterial aus einem Kennwort geeignet sind.</span><span class="sxs-lookup"><span data-stu-id="eb685-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="eb685-103">Der Standard ist in IETF RRC 2898 dokumentiert.</span><span class="sxs-lookup"><span data-stu-id="eb685-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-104">Sie sollten niemals ein Kennwort innerhalb Ihres Quellcodes hart codieren.</span><span class="sxs-lookup"><span data-stu-id="eb685-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="eb685-105">Hart codierte Kenn Wörter können mithilfe des Tools [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) , eines Hex-Editors oder durch einfaches Öffnen der Assembly in einem Text-Editor wie Notepad. exe aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb685-106">Im folgenden Codebeispiel wird ein Schlüssel aus einem Kennwort mithilfe der <xref:System.Security.Cryptography.PasswordDeriveBytes>-Klasse erstellt.</span><span class="sxs-lookup"><span data-stu-id="eb685-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-107">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-107">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb685-108">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="eb685-108">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="eb685-109">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-109">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="eb685-110">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-110">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="eb685-111">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort und den Salt-Wert des Schlüssels an, die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-111">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-112">Niemals hart codiert ein Kennwort innerhalb Ihres Quellcodes.</span><span class="sxs-lookup"><span data-stu-id="eb685-112">Never hard code a password within your source code.</span></span>  <span data-ttu-id="eb685-113">Hart codierte Kenn Wörter können mithilfe von [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), einem Hexadezimal-Editor oder einfach in einem Text-Editor wie "Notepad. exe" aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-113">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb685-114">Im folgenden Codebeispiel wird ein Schlüssel aus einem Kennwort mithilfe der <xref:System.Security.Cryptography.PasswordDeriveBytes>-Klasse erstellt.</span><span class="sxs-lookup"><span data-stu-id="eb685-114">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-115">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-115">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="eb685-116">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-116">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="eb685-117">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-117">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="eb685-118">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort und dem Salt-Wert, die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-119">Sie sollten niemals ein Kennwort innerhalb Ihres Quellcodes hart codieren.</span><span class="sxs-lookup"><span data-stu-id="eb685-119">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="eb685-120">Hart codierte Kenn Wörter können mithilfe des Tools [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) , eines Hex-Editors oder durch einfaches Öffnen der Assembly in einem Text-Editor wie Notepad. exe aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-120">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-121">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-121">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="eb685-122">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-122">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="eb685-123">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-123">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="eb685-124">Die CSP-Parameter für den Vorgang.</span><span class="sxs-lookup"><span data-stu-id="eb685-124">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="eb685-125">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort, den Salt-Wert des Schlüssels und den CSP (Cryptographic Service Provider) an, die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-126">Niemals hart codiert ein Kennwort innerhalb Ihres Quellcodes.</span><span class="sxs-lookup"><span data-stu-id="eb685-126">Never hard code a password within your source code.</span></span>  <span data-ttu-id="eb685-127">Hart codierte Kenn Wörter können mithilfe von [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, einem Hexadezimal-Editor oder durch einfaches Öffnen der Assembly in einem Texteditor wie Notepad. exe aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-127">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb685-128">Im folgenden Codebeispiel wird ein Schlüssel aus einem Kennwort mithilfe der <xref:System.Security.Cryptography.PasswordDeriveBytes>-Klasse erstellt.</span><span class="sxs-lookup"><span data-stu-id="eb685-128">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-129">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-129">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="eb685-130">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-130">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="eb685-131">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-131">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="eb685-132">Die CSP-Parameter für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-132">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="eb685-133">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort, dem Salt-Wert des Schlüssels und den CSP-Parametern (Cryptographic Service Provider), die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-133">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-134">Sie sollten niemals ein Kennwort innerhalb Ihres Quellcodes hart codieren.</span><span class="sxs-lookup"><span data-stu-id="eb685-134">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="eb685-135">Hart codierte Kenn Wörter können mithilfe des Tools [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) , eines Hex-Editors oder durch einfaches Öffnen der Assembly in einem Text-Editor wie Notepad. exe aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-135">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-136">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-136">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] * string * int -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt, hashName, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="iterations" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="eb685-137">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-137">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="eb685-138">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-138">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="eb685-139">Der Hashalgorithmus, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-139">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="eb685-140">Die Anzahl der Iterationen, die zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-140">The iteration count to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="eb685-141">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort, den Salt-Wert des Schlüssels, den Hashnamen und die Anzahl der Iterationen an, die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-141">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-142">Niemals hart codiert ein Kennwort innerhalb Ihres Quellcodes.</span><span class="sxs-lookup"><span data-stu-id="eb685-142">Never hard code a password within your source code.</span></span>  <span data-ttu-id="eb685-143">Hart codierte Kenn Wörter können mithilfe von [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), einem Hexadezimal-Editor oder einfach in einem Text-Editor wie "Notepad. exe" aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-143">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="eb685-144">Eine Liste der hashalgorithmusnamen finden Sie in der <xref:System.Security.Cryptography.CryptoConfig>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="eb685-144">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-145">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-145">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] * string * int -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt, strHashName, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="eb685-146">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-146">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="eb685-147">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-147">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="eb685-148">Der Name des Hashalgorithmus für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-148">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="eb685-149">Die Anzahl der Iterationen für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-149">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="eb685-150">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort, dem Salt-Wert des Schlüssels, dem Hashnamen und der Anzahl der Iterationen, die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-150">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-151">Sie sollten niemals ein Kennwort innerhalb Ihres Quellcodes hart codieren.</span><span class="sxs-lookup"><span data-stu-id="eb685-151">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="eb685-152">Hart codierte Kenn Wörter können mithilfe des Tools [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) , eines Hex-Editors oder durch einfaches Öffnen der Assembly in einem Text-Editor wie Notepad. exe aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-152">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="eb685-153">Eine Liste der hashalgorithmusnamen finden Sie in der <xref:System.Security.Cryptography.CryptoConfig>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="eb685-153">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-154">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-154">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] * string * int * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt, hashName, iterations, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="iterations" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="eb685-155">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-155">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="eb685-156">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-156">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="eb685-157">Der Hashalgorithmus, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-157">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="eb685-158">Die Anzahl der Iterationen, die zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-158">The iteration count to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="eb685-159">Die CSP-Parameter für den Vorgang.</span><span class="sxs-lookup"><span data-stu-id="eb685-159">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="eb685-160">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort, den Salt-Wert des Schlüssels, den Hashnamen, die Iterationen und die CSP-Parameter an, die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-160">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-161">Niemals hart codiert ein Kennwort innerhalb Ihres Quellcodes.</span><span class="sxs-lookup"><span data-stu-id="eb685-161">Never hard code a password within your source code.</span></span>  <span data-ttu-id="eb685-162">Hart codierte Kenn Wörter können mithilfe von [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), einem Hexadezimal-Editor oder einfach in einem Text-Editor wie "Notepad. exe" aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-162">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="eb685-163">Eine Liste der hashalgorithmusnamen finden Sie in der <xref:System.Security.Cryptography.CryptoConfig>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="eb685-163">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-164">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-164">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] * string * int * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt, strHashName, iterations, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="eb685-165">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-165">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="eb685-166">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-166">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="eb685-167">Der Name des Hashalgorithmus für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-167">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="eb685-168">Die Anzahl der Iterationen für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-168">The number of iterations for the operation.</span></span></param>
        <param name="cspParams"><span data-ttu-id="eb685-169">Die CSP-Parameter für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-169">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="eb685-170">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort, dem Salt-Wert des Schlüssels, dem Hashnamen, der Anzahl der Iterationen und den CSP-Parametern (Cryptographic Service Provider), die zum Ableiten des Schlüssels verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb685-170">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb685-171">Sie sollten niemals ein Kennwort innerhalb Ihres Quellcodes hart codieren.</span><span class="sxs-lookup"><span data-stu-id="eb685-171">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="eb685-172">Hart codierte Kenn Wörter können mithilfe des Tools [Ildasm. exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) , eines Hex-Editors oder durch einfaches Öffnen der Assembly in einem Text-Editor wie Notepad. exe aus einer Assembly abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-172">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="eb685-173">Eine Liste der hashalgorithmusnamen finden Sie in der <xref:System.Security.Cryptography.CryptoConfig>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="eb685-173">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-174">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-174">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberSignature Language="F#" Value="member this.CryptDeriveKey : string * string * int * byte[] -&gt; byte[]" Usage="passwordDeriveBytes.CryptDeriveKey (algname, alghashname, keySize, rgbIV)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname"><span data-ttu-id="eb685-175">Der Name des Algorithmus, für den der Schlüssel abgeleitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-175">The algorithm name for which to derive the key.</span></span></param>
        <param name="alghashname"><span data-ttu-id="eb685-176">Der Name des Hashalgorithmus, der zum Ableiten des Schlüssels verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb685-176">The hash algorithm name to use to derive the key.</span></span></param>
        <param name="keySize"><span data-ttu-id="eb685-177">Die Größe des abzuleitenden Schlüssels in Bits.</span><span class="sxs-lookup"><span data-stu-id="eb685-177">The size of the key, in bits, to derive.</span></span></param>
        <param name="rgbIV"><span data-ttu-id="eb685-178">Der zum Ableiten des Schlüssels zu verwendende Initialisierungsvektor.</span><span class="sxs-lookup"><span data-stu-id="eb685-178">The initialization vector (IV) to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="eb685-179">Leitet einen kryptografischen Schlüssel vom <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Objekt ab.</span><span class="sxs-lookup"><span data-stu-id="eb685-179">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span></span></summary>
        <returns><span data-ttu-id="eb685-180">Der abgeleitete Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="eb685-180">The derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb685-181">Diese Funktion ist ein Wrapper für die kryptografieapi-Funktion "CryptDeriveKey ()" und soll Interoperabilität mit Anwendungen unter Verwendung der kryptografieapi ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="eb685-181">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="eb685-182">Wenn der `keySize`-Parameter auf 0 Bits festgelegt ist, wird die Standard Schlüsselgröße für den angegebenen Algorithmus verwendet.</span><span class="sxs-lookup"><span data-stu-id="eb685-182">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb685-183">Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Security.Cryptography.PasswordDeriveBytes>-Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="eb685-183">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="eb685-184">Der <paramref name="keySize" />-Parameter ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="eb685-184">The <paramref name="keySize" /> parameter is incorrect.</span></span>  
  
<span data-ttu-id="eb685-185">- oder -</span><span class="sxs-lookup"><span data-stu-id="eb685-185">-or-</span></span> 
<span data-ttu-id="eb685-186">Der Kryptografiedienstanbieter (Cryptographic Service Provider, CSP) kann nicht abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-186">The cryptographic service provider (CSP) cannot be acquired.</span></span>  
  
<span data-ttu-id="eb685-187">- oder -</span><span class="sxs-lookup"><span data-stu-id="eb685-187">-or-</span></span> 
<span data-ttu-id="eb685-188">Der <paramref name="algname" />-Parameter ist kein gültiger Algorithmusname.</span><span class="sxs-lookup"><span data-stu-id="eb685-188">The <paramref name="algname" /> parameter is not a valid algorithm name.</span></span>  
  
<span data-ttu-id="eb685-189">- oder -</span><span class="sxs-lookup"><span data-stu-id="eb685-189">-or-</span></span> 
<span data-ttu-id="eb685-190">Der <paramref name="alghashname" />-Parameter ist kein gültiger Name eines Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="eb685-190">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-191">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-191">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="passwordDeriveBytes.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="eb685-192"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="eb685-192"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="eb685-193">Gibt die von der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse verwendeten nicht verwalteten Ressourcen frei und gibt (optional) auch die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="eb685-193">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb685-194">Diese Methode wird von der öffentlichen `Dispose()`-Methode und der `Finalize`-Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="eb685-194">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="eb685-195">`Dispose()` Ruft die geschützte `Dispose(Boolean)` Methode auf, wobei der `disposing`-Parameter auf `true`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="eb685-195">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="eb685-196">`Finalize` ruft `Dispose` auf, bei dem `disposing` auf `false`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="eb685-196">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="eb685-197">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Security.Cryptography.PasswordDeriveBytes> verweist.</span><span class="sxs-lookup"><span data-stu-id="eb685-197">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="eb685-198">Diese Methode ruft die `Dispose()`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="eb685-198">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="eb685-199">
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-199">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="eb685-200">Wenn Sie <see langword="Dispose(Boolean)" />überschreiben, sollten Sie darauf achten, nicht auf Objekte zu verweisen, die zuvor in einem früheren <see langword="Dispose" />aufgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="eb685-200">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="eb685-201">Weitere Informationen zum Implementieren von <see langword="Dispose(Boolean)" />finden Sie unter [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.</span><span class="sxs-lookup"><span data-stu-id="eb685-201">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="eb685-202">Weitere Informationen zu <see langword="Dispose" /> und <see langword="Finalize" />finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="eb685-202">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~PasswordDeriveBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!PasswordDeriveBytes ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="passwordDeriveBytes.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb685-203">Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="eb685-203">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int -&gt; byte[]" Usage="passwordDeriveBytes.GetBytes cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="eb685-204">Die Anzahl der zu generierenden pseudozufälligen Schlüsselbytes.</span><span class="sxs-lookup"><span data-stu-id="eb685-204">The number of pseudo-random key bytes to generate.</span></span></param>
        <summary><span data-ttu-id="eb685-205">Gibt pseudozufällige Schlüsselbytes zurück.</span><span class="sxs-lookup"><span data-stu-id="eb685-205">Returns pseudo-random key bytes.</span></span></summary>
        <returns><span data-ttu-id="eb685-206">Ein mit pseudozufälligen Schlüsselbytes gefülltes Bytearray.</span><span class="sxs-lookup"><span data-stu-id="eb685-206">A byte array filled with pseudo-random key bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb685-207">Mit dieser Methode kann eine beliebige Anzahl von pseudo zufälligen Bytes erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="eb685-207">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="eb685-208">Die Stärke der Byte Sequenz wird jedoch durch die Anzahl der Bytes in der Hash Ausgabe beschränkt.</span><span class="sxs-lookup"><span data-stu-id="eb685-208">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-209">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-209">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HashName : string with get, set" Usage="System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb685-210">Ruft den Namen des Hashalgorithmus für die Operation ab oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="eb685-210">Gets or sets the name of the hash algorithm for the operation.</span></span></summary>
        <value><span data-ttu-id="eb685-211">Der Name des Hashalgorithmus für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-211">The name of the hash algorithm for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="eb685-212">Der Name des Hashwerts ist unveränderlich. Es wurde versucht, diesen Wert zu ändern.</span><span class="sxs-lookup"><span data-stu-id="eb685-212">The name of the hash value is fixed and an attempt is made to change this value.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-213">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-213">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IterationCount : int with get, set" Usage="System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb685-214">Ruft die Anzahl der Iterationen für die Operation ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="eb685-214">Gets or sets the number of iterations for the operation.</span></span></summary>
        <value><span data-ttu-id="eb685-215">Die Anzahl der Iterationen für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-215">The number of iterations for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="eb685-216">Die Anzahl der Iterationen ist unveränderlich. Es wurde versucht, diesen Wert zu ändern.</span><span class="sxs-lookup"><span data-stu-id="eb685-216">The number of iterations is fixed and an attempt is made to change this value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eb685-217">Die Eigenschaft kann nicht festgelegt werden, da ihr Wert außerhalb des gültigen Bereichs liegt.</span><span class="sxs-lookup"><span data-stu-id="eb685-217">The property cannot be set because its value is out of range.</span></span> <span data-ttu-id="eb685-218">Für diese Eigenschaft ist eine nicht negative Zahl erforderlich.</span><span class="sxs-lookup"><span data-stu-id="eb685-218">This property requires a non-negative number.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-219">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-219">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="passwordDeriveBytes.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb685-220">Setzt den Zustand der Operation zurück.</span><span class="sxs-lookup"><span data-stu-id="eb685-220">Resets the state of the operation.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-221">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-221">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Salt : byte[] with get, set" Usage="System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb685-222">Ruft den Salt-Wert des Schlüssels für die Operation ab oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="eb685-222">Gets or sets the key salt value for the operation.</span></span></summary>
        <value><span data-ttu-id="eb685-223">Der Salt-Wert des Schlüssels für die Operation.</span><span class="sxs-lookup"><span data-stu-id="eb685-223">The key salt value for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb685-224">Ein Wörterbuch Angriff ist ein Angriff, bei dem der Angreifer versucht, eine verschlüsselte Nachricht zu entschlüsseln, indem er den verschlüsselten Wert mit zuvor berechneten verschlüsselten Werten für die wahrscheinlichsten Schlüssel vergleicht.</span><span class="sxs-lookup"><span data-stu-id="eb685-224">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="eb685-225">Dieser Angriff wird durch die Einführung zufälliger Bytes am Ende des Kennworts vor der Schlüssel Ableitung erheblich erschwert.</span><span class="sxs-lookup"><span data-stu-id="eb685-225">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="eb685-226">Diese zufälligen Bytes werden als Salt bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="eb685-226">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="eb685-227">Der Salt-Wert des Schlüssels ist unveränderlich. Es wurde versucht, diesen Wert zu ändern.</span><span class="sxs-lookup"><span data-stu-id="eb685-227">The key salt value is fixed and an attempt is made to change this value.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="eb685-228">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="eb685-228">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="114473ac3aded1fedb136d53f48725f47b5ea62e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500334" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="81066-101">Leitet mithilfe einer Erweiterung des PBKDF1-Algorithmus einen Schlüssel von einem Kennwort ab.</span>
      <span class="sxs-lookup">
        <span data-stu-id="81066-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81066-102">Diese Klasse verwendet eine Erweiterung des PBKDF1-Algorithmus in die PKCS #5 2.0-standard definierten geeignet für die Verwendung als Schlüsselmaterial Bytes aus einem Kennwort abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="81066-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="81066-103">Der Standard ist in der IETF RRC 2898 dokumentiert.</span><span class="sxs-lookup"><span data-stu-id="81066-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-104">Nie hartcodieren ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="81066-105">Hartcodierte Kennwörter abgerufen werden können, aus einer Assembly der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Tools, einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81066-106">Das folgende Codebeispiel erstellt einen Schlüssel aus einem Kennwort mithilfe der <xref:System.Security.Cryptography.PasswordDeriveBytes> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="81066-107">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-107">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="81066-108">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-108">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="81066-109">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-109">The key salt to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-110">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort und den Salt-Wert des Schlüssels an, die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-111">Nie Hartcodieren Sie ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-111">Never hard code a password within your source code.</span></span>  <span data-ttu-id="81066-112">Hartcodierte Kennwörter können aus einer Assembly abgerufen werden die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-112">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81066-113">Das folgende Codebeispiel erstellt einen Schlüssel aus einem Kennwort mithilfe der <xref:System.Security.Cryptography.PasswordDeriveBytes> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-113">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="81066-114">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-114">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="81066-115">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-115">The key salt to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-116">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort und dem Salt-Wert, die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-117">Nie hartcodieren ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-117">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="81066-118">Hartcodierte Kennwörter abgerufen werden können, aus einer Assembly der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Tools, einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-118">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="81066-119">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-119">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="81066-120">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-120">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="81066-121">Die CSP-Parameter für den Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-121">The cryptographic service provider (CSP) parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-122">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort, den Salt-Wert des Schlüssels und den CSP (Cryptographic Service Provider) an, die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-122">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-123">Nie Hartcodieren Sie ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-123">Never hard code a password within your source code.</span></span>  <span data-ttu-id="81066-124">Hartcodierte Kennwörter können aus einer Assembly abgerufen werden die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-124">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81066-125">Das folgende Codebeispiel erstellt einen Schlüssel aus einem Kennwort mithilfe der <xref:System.Security.Cryptography.PasswordDeriveBytes> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-125">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="81066-126">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-126">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="81066-127">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-127">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="81066-128">Die CSP-Parameter für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-128">The CSP parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-129">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort, dem Salt-Wert des Schlüssels und den CSP-Parametern (Cryptographic Service Provider), die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-129">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-130">Nie hartcodieren ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-130">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="81066-131">Hartcodierte Kennwörter abgerufen werden können, aus einer Assembly der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Tools, einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-131">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="81066-132">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-132">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="81066-133">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-133">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="hashName">
          <span data-ttu-id="81066-134">Der Hashalgorithmus, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-134">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="81066-135">Die Anzahl der Iterationen, die zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-135">The iteration count to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-136">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort, den Salt-Wert des Schlüssels, den Hashnamen und die Anzahl der Iterationen an, die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-137">Nie Hartcodieren Sie ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-137">Never hard code a password within your source code.</span></span>  <span data-ttu-id="81066-138">Hartcodierte Kennwörter können aus einer Assembly abgerufen werden die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-138">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="81066-139">Eine Liste von Hash-Algorithmus verwendet werden soll, finden Sie unter der <xref:System.Security.Cryptography.CryptoConfig> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-139">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="81066-140">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-140">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="81066-141">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-141">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="strHashName">
          <span data-ttu-id="81066-142">Der Name des Hashalgorithmus für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-142">The name of the hash algorithm for the operation.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="81066-143">Die Anzahl der Iterationen für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-143">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-144">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort, dem Salt-Wert des Schlüssels, dem Hashnamen und der Anzahl der Iterationen, die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-144">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-145">Nie hartcodieren ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-145">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="81066-146">Hartcodierte Kennwörter abgerufen werden können, aus einer Assembly der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Tools, einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-146">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="81066-147">Eine Liste von Hash-Algorithmus verwendet werden soll, finden Sie unter der <xref:System.Security.Cryptography.CryptoConfig> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-147">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="81066-148">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-148">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="81066-149">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-149">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="hashName">
          <span data-ttu-id="81066-150">Der Hashalgorithmus, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-150">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="81066-151">Die Anzahl der Iterationen, die zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-151">The iteration count to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="81066-152">Die CSP-Parameter für den Vorgang.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-152">The cryptographic service provider (CSP) parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-153">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse und gibt das Kennwort, den Salt-Wert des Schlüssels, den Hashnamen, die Iterationen und die CSP-Parameter an, die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-153">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-154">Nie Hartcodieren Sie ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-154">Never hard code a password within your source code.</span></span>  <span data-ttu-id="81066-155">Hartcodierte Kennwörter können aus einer Assembly abgerufen werden die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-155">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="81066-156">Eine Liste von Hash-Algorithmus verwendet werden soll, finden Sie unter der <xref:System.Security.Cryptography.CryptoConfig> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-156">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="81066-157">Das Kennwort, für das der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-157">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="81066-158">Der Salt-Wert, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-158">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="strHashName">
          <span data-ttu-id="81066-159">Der Name des Hashalgorithmus für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-159">The name of the hash algorithm for the operation.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="81066-160">Die Anzahl der Iterationen für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-160">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="81066-161">Die CSP-Parameter für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-161">The CSP parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-162">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse mit dem Kennwort, dem Salt-Wert des Schlüssels, dem Hashnamen, der Anzahl der Iterationen und den CSP-Parametern (Cryptographic Service Provider), die zum Ableiten des Schlüssels verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-162">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="81066-163">Nie hartcodieren ein Kennwort im Quellcode.</span><span class="sxs-lookup"><span data-stu-id="81066-163">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="81066-164">Hartcodierte Kennwörter abgerufen werden können, aus einer Assembly der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Tools, einem hex-Editor oder durch das Öffnen der Assembly in einem Text-Editor wie notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="81066-164">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="81066-165">Eine Liste von Hash-Algorithmus verwendet werden soll, finden Sie unter der <xref:System.Security.Cryptography.CryptoConfig> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-165">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="81066-166">Der Name des Algorithmus, für den der Schlüssel abgeleitet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-166">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="81066-167">Der Name des Hashalgorithmus, der zum Ableiten des Schlüssels verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-167">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="81066-168">Die Größe des abzuleitenden Schlüssels in Bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-168">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="81066-169">Der zum Ableiten des Schlüssels zu verwendende Initialisierungsvektor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-169">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-170">Leitet einen kryptografischen Schlüssel vom <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Objekt ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-170">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81066-171">Der abgeleitete Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-171">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81066-172">Diese Funktion ist ein Wrapper für die CryptoAPI-Funktion CryptDeriveKey() und dient der Interoperabilität mit Anwendungen, die mithilfe der Crypto-API zu bieten.</span><span class="sxs-lookup"><span data-stu-id="81066-172">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="81066-173">Wenn die `keySize` Parameter auf 0 Bit festgelegt ist, wird die Standard-Schlüsselgröße für den angegebenen Algorithmus verwendet.</span><span class="sxs-lookup"><span data-stu-id="81066-173">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81066-174">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Security.Cryptography.PasswordDeriveBytes> Klasse.</span><span class="sxs-lookup"><span data-stu-id="81066-174">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="81066-175">Der <paramref name="keySize" />-Parameter ist ungültig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-175">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="81066-176">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-176">-or-</span>
          </span>
          <span data-ttu-id="81066-177">Der Kryptografiedienstanbieter (Cryptographic Service Provider, CSP) kann nicht abgerufen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-177">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="81066-178">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-178">-or-</span>
          </span>
          <span data-ttu-id="81066-179">Der <paramref name="algname" />-Parameter ist kein gültiger Algorithmusname.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-179">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="81066-180">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-180">-or-</span>
          </span>
          <span data-ttu-id="81066-181">Der <paramref name="alghashname" />-Parameter ist kein gültiger Name eines Hashalgorithmus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-181">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="81066-182">
            <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-182">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-183">Gibt die von der <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />-Klasse verwendeten nicht verwalteten Ressourcen frei und gibt (optional) auch die verwalteten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-183">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81066-184">Diese Methode wird aufgerufen, der öffentlich `Dispose()` Methode und die `Finalize` Methode.</span><span class="sxs-lookup"><span data-stu-id="81066-184">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="81066-185">`Dispose()` Ruft die geschützte `Dispose(Boolean)` Methode mit dem `disposing` Parametersatz auf `true`.</span><span class="sxs-lookup"><span data-stu-id="81066-185">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="81066-186">`Finalize` Ruft `Dispose` mit `disposing` festgelegt `false`.</span><span class="sxs-lookup"><span data-stu-id="81066-186">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="81066-187">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Security.Cryptography.PasswordDeriveBytes> verweist.</span><span class="sxs-lookup"><span data-stu-id="81066-187">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="81066-188">Diese Methode ruft die `Dispose()`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="81066-188">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="81066-189">
              <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden.</span>
            <span class="sxs-lookup">
              <span data-stu-id="81066-189">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="81066-190">Zum Überschreiben <see langword="Dispose(Boolean)" />müssen Sie darauf achten, nicht auf Objekte verweisen, die einen früheren Aufruf freigegeben wurden <see langword="Dispose" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="81066-190">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="81066-191">Weitere Informationen zum Implementieren <see langword="Dispose(Boolean)" />, finden Sie unter [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="81066-191">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="81066-192">Weitere Informationen zu <see langword="Dispose" /> und <see langword="Finalize" />, finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="81066-192">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="81066-193">Die Anzahl der zu generierenden pseudozufälligen Schlüsselbytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-193">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81066-194">Gibt pseudozufällige Schlüsselbytes zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-194">Returns pseudo-random key bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81066-195">Ein mit pseudozufälligen Schlüsselbytes gefülltes Bytearray.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-195">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81066-196">Diese Methode kann eine beliebige Anzahl von Bytes pseudozufälligen Schlüsselbytes erstellen.</span><span class="sxs-lookup"><span data-stu-id="81066-196">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="81066-197">Allerdings ist die Stärke der Bytesequenz durch die Anzahl der Bytes in der Hashausgabe beschränkt.</span><span class="sxs-lookup"><span data-stu-id="81066-197">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="81066-198">Ruft den Namen des Hashalgorithmus für die Operation ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-198">Gets or sets the name of the hash algorithm for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="81066-199">Der Name des Hashalgorithmus für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-199">The name of the hash algorithm for the operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="81066-200">Der Name des Hashwerts ist unveränderlich. Es wurde versucht, diesen Wert zu ändern.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-200">The name of the hash value is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="81066-201">Ruft die Anzahl der Iterationen für die Operation ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-201">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="81066-202">Die Anzahl der Iterationen für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-202">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="81066-203">Die Anzahl der Iterationen ist unveränderlich. Es wurde versucht, diesen Wert zu ändern.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-203">The number of iterations is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="81066-204">Die Eigenschaft kann nicht festgelegt werden, da ihr Wert außerhalb des gültigen Bereichs liegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-204">The property cannot be set because its value is out of range.</span>
          </span>
          <span data-ttu-id="81066-205">Für diese Eigenschaft ist eine nicht negative Zahl erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-205">This property requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="81066-206">Setzt den Zustand der Operation zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-206">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="81066-207">Ruft den Salt-Wert des Schlüssels für die Operation ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-207">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="81066-208">Der Wert der Schlüsselsalt für die Operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-208">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81066-209">Ein Wörterbuchangriff ist ein Angriff, in dem der Angreifer versucht, eine verschlüsselte Nachricht durch Vergleichen des verschlüsselten Werts mit der zuvor berechnete verschlüsselte Werte für den wahrscheinlichsten Schlüssel entschlüsselt.</span><span class="sxs-lookup"><span data-stu-id="81066-209">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="81066-210">Dieser Angriff erfolgt durch die Einführung von zufälligen Bytes am Ende des Kennworts vor dem schlüsselableitung viel schwieriger.</span><span class="sxs-lookup"><span data-stu-id="81066-210">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="81066-211">Diese zufälligen Bytes werden als Salt bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="81066-211">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="81066-212">Der Salt-Wert des Schlüssels ist unveränderlich. Es wurde versucht, diesen Wert zu ändern.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81066-212">The key salt value is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
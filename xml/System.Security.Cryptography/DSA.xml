<Type Name="DSA" FullName="System.Security.Cryptography.DSA">
  <Metadata><Meta Name="ms.openlocfilehash" Value="83d3e65e3a203ce0e7ac5341fc6c3d5c19472c3a" /><Meta Name="ms.sourcegitcommit" Value="33529b5cc32683b91d3422992fb4dc422f85782b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/17/2020" /><Meta Name="ms.locfileid" Value="88265539" /></Metadata><TypeSignature Language="C#" Value="public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DSA extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DSA" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DSA&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class DSA abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <TypeSignature Language="F#" Value="type DSA = class&#xA;    inherit AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="72473-101">Stellt die abstrakte Basisklasse dar, von der alle Implementierungen des digitalen Signaturalgorithmus (<see cref="T:System.Security.Cryptography.DSA" />) erben müssen.</span><span class="sxs-lookup"><span data-stu-id="72473-101">Represents the abstract base class from which all implementations of the Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) must inherit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-102"><xref:System.Security.Cryptography.DSA>Mithilfe der-Klasse und der abgeleiteten Klassen können Sie digitale Signaturen erstellen, mit denen die Integrität Ihrer Daten geschützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-102">You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data.</span></span>  <span data-ttu-id="72473-103"><xref:System.Security.Cryptography.DSACryptoServiceProvider>Stellt eine Implementierung dieser Klasse bereit.</span><span class="sxs-lookup"><span data-stu-id="72473-103">The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.</span></span>  
  
 <span data-ttu-id="72473-104">Um ein öffentliches Schlüsselsystem zum digitalen Signieren einer Nachricht zu verwenden, wendet der Absender zuerst eine Hash Funktion auf die Nachricht an, um einen Nachrichten Digest zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="72473-104">To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.</span></span> <span data-ttu-id="72473-105">Der Absender verschlüsselt den Nachrichten Digest dann mit dem privaten Schlüssel des Absenders, um die persönliche Signatur des Absenders zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="72473-105">The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.</span></span> <span data-ttu-id="72473-106">Beim Empfang der Nachricht und der Signatur entschlüsselt der Empfänger die Signatur mithilfe des öffentlichen Schlüssels des Absenders, um den Nachrichten Digest wiederherzustellen, und erstellt einen Hashwert für die Nachricht mit dem gleichen Hash Algorithmus, den der Absender verwendet hat.</span><span class="sxs-lookup"><span data-stu-id="72473-106">Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.</span></span> <span data-ttu-id="72473-107">Wenn der vom Empfänger genau eingehende Nachrichten Digest mit dem vom Absender empfangenen Nachrichten Digest übereinstimmt, kann der Empfänger annehmen, dass die Nachricht während der Übertragung nicht geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="72473-107">If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit.</span></span> <span data-ttu-id="72473-108">Beachten Sie, dass eine Signatur von jedem überprüft werden kann, da der öffentliche Schlüssel des Absenders allgemein bekannt ist.</span><span class="sxs-lookup"><span data-stu-id="72473-108">Note that a signature can be verified by anyone, because the sender's public key is common knowledge.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="72473-109">Die Ersteller des DSA-Algorithmus haben ihre Unterstützung für Sie zurückgezogen.</span><span class="sxs-lookup"><span data-stu-id="72473-109">The creators of the DSA algorithm have withdrawn their support for it.</span></span> <span data-ttu-id="72473-110">Verwenden Sie ggf. die- <xref:System.Security.Cryptography.RSA> Klasse oder die-Klasse anstelle der- <xref:System.Security.Cryptography.ECDsa> <xref:System.Security.Cryptography.DSA> Klasse.</span><span class="sxs-lookup"><span data-stu-id="72473-110">Consider using the <xref:System.Security.Cryptography.RSA> class or the <xref:System.Security.Cryptography.ECDsa> class instead of the <xref:System.Security.Cryptography.DSA> class.</span></span> <span data-ttu-id="72473-111">Verwenden Sie <xref:System.Security.Cryptography.DSA> nur aus Gründen der Kompatibilität mit Legacy Anwendungen und-Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-111">Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data.</span></span>  
  
 <span data-ttu-id="72473-112">Zwei verschiedene Versionen des DSA-Algorithmus sind vorhanden.</span><span class="sxs-lookup"><span data-stu-id="72473-112">Two different versions of the DSA algorithm exist.</span></span>
<span data-ttu-id="72473-113">Das ursprüngliche Formular, das in der Datei "fps 186-2" beschrieben wird, erfordert die Verwendung von SHA-1 als Hash Algorithmus und unterstützt Schlüssellängen von 512 Bits bis 1024 Bits in Schritten von 64 Bits.</span><span class="sxs-lookup"><span data-stu-id="72473-113">The original form, described in FIPS 186-2, requires the use of SHA-1 as the hash algorithm and supports key lengths from 512 bits to 1024 bits in increments of 64 bits.</span></span>
<span data-ttu-id="72473-114">Eine aktualisierte Version des Algorithmus wurde in "fps 186-3" beschrieben, die die Verwendung der SHA-2-Familie von Hash Algorithmen und die Unterstützung von 2048-Bit-Schlüsseln und 3072-Bit-Schlüsseln ermöglichte.</span><span class="sxs-lookup"><span data-stu-id="72473-114">An updated version of the algorithm was described in FIPS 186-3, which enabled the use of the SHA-2 family of hash algorithms and added support for 2048 bit keys and 3072 bit keys.</span></span>
<span data-ttu-id="72473-115">Nicht alle abgeleiteten Implementierungen dieses Typs unterstützen die Erweiterungen von "PPS 186-3" an DSA.</span><span class="sxs-lookup"><span data-stu-id="72473-115">Not all derived implementations of this type support the FIPS 186-3 enhancements to DSA.</span></span> <span data-ttu-id="72473-116">Unterstützung kann über die- <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes> Eigenschaft erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="72473-116">Support can be detected via the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes> property.</span></span>
 
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-117">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-117">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DSA ();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.#ctor" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DSA();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="72473-118">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.DSA" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="72473-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSA" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72473-119">Erstellt ein Kryptografieobjekt zum Ausführen des asymmetrischen Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-119">Creates a cryptographic object used to perform the asymmetric algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="72473-120">Erstellt das Standardkryptografieobjekt zum Ausführen des asymmetrischen Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-120">Creates the default cryptographic object used to perform the asymmetric algorithm.</span></span></summary>
        <returns><span data-ttu-id="72473-121">Ein Kryptografieobjekt zum Ausführen des asymmetrischen Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-121">A cryptographic object used to perform the asymmetric algorithm.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-122">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-122">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create (int keySizeInBits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create(int32 keySizeInBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (keySizeInBits As Integer) As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create(int keySizeInBits);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create keySizeInBits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits"><span data-ttu-id="72473-123">Die Schlüsselgröße in Bits.</span><span class="sxs-lookup"><span data-stu-id="72473-123">The key size, in bits.</span></span></param>
        <summary><span data-ttu-id="72473-124">Erstellt einen neuen kurzlebigen DSA-Schlüssel mit der angegebenen Schlüsselgröße.</span><span class="sxs-lookup"><span data-stu-id="72473-124">Creates a new ephemeral DSA key with the specified key size.</span></span></summary>
        <returns><span data-ttu-id="72473-125">Ein neuer kurzlebiger DSA-Schlüssel mit der angegebenen Schlüsselgröße.</span><span class="sxs-lookup"><span data-stu-id="72473-125">A new ephemeral DSA key with the specified key size.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-126"><paramref name="keySizeInBits" /> wird von <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" /> nicht zugelassen.</span><span class="sxs-lookup"><span data-stu-id="72473-126"><paramref name="keySizeInBits" /> is not permitted by <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create (System.Security.Cryptography.DSAParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create(valuetype System.Security.Cryptography.DSAParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As DSAParameters) As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create(System::Security::Cryptography::DSAParameters parameters);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.DSAParameters -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.DSAParameters" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="72473-127">Die Parameter für den <see cref="T:System.Security.Cryptography.DSA" />-Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-127">The parameters for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</span></span></param>
        <summary><span data-ttu-id="72473-128">Erstellt einen neuen kurzlebigen DSA-Schlüssel mit den angegebenen DSA-Schlüsselparametern.</span><span class="sxs-lookup"><span data-stu-id="72473-128">Creates a new ephemeral DSA key with the specified DSA key parameters.</span></span></summary>
        <returns><span data-ttu-id="72473-129">Ein neuer kurzlebiger DSA-Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="72473-129">A new ephemeral DSA key.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA? Create (string algName);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create(string algName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algName As String) As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create(System::String ^ algName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create algName" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create (string algName);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algName"><span data-ttu-id="72473-130">Der Name der spezifischen Implementierung von <see cref="T:System.Security.Cryptography.DSA" />, die verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-130">The name of the specific implementation of <see cref="T:System.Security.Cryptography.DSA" /> to use.</span></span></param>
        <summary><span data-ttu-id="72473-131">Erstellt das angegebene Kryptografieobjekt zum Ausführen des asymmetrischen Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-131">Creates the specified cryptographic object used to perform the asymmetric algorithm.</span></span></summary>
        <returns><span data-ttu-id="72473-132">Ein Kryptografieobjekt zum Ausführen des asymmetrischen Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-132">A cryptographic object used to perform the asymmetric algorithm.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-133">Verwenden Sie für <xref:System.Security.Cryptography.DSA> den Namen System. Security. Cryptography. DSA.</span><span class="sxs-lookup"><span data-stu-id="72473-133">For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-134">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-134">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateSignature">
      <MemberSignature Language="C#" Value="public abstract byte[] CreateSignature (byte[] rgbHash);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] CreateSignature(unsigned int8[] rgbHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateSignature (rgbHash As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ CreateSignature(cli::array &lt;System::Byte&gt; ^ rgbHash);" />
      <MemberSignature Language="F#" Value="abstract member CreateSignature : byte[] -&gt; byte[]" Usage="dSA.CreateSignature rgbHash" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="72473-135">Der Hashwert, der signiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-135">The hash value to be signed.</span></span></param>
        <summary><span data-ttu-id="72473-136">Erstellt beim Überschreiben in einer abgeleiteten Klasse die <see cref="T:System.Security.Cryptography.DSA" />-Signatur für die angegebenen Hashdaten</span><span class="sxs-lookup"><span data-stu-id="72473-136">When overridden in a derived class, creates the <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified hash value.</span></span></summary>
        <returns><span data-ttu-id="72473-137">Die digitale Signatur für den angegebenen Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-137">The digital signature for the specified hash value.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-138">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-138">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateSignature">
      <MemberSignature Language="C#" Value="public byte[] CreateSignature (byte[] rgbHash, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CreateSignature(unsigned int8[] rgbHash, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSignature (rgbHash As Byte(), signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CreateSignature(cli::array &lt;System::Byte&gt; ^ rgbHash, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.CreateSignature : byte[] * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.CreateSignature (rgbHash, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="72473-139">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-139">The hash value to sign.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-140">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-140">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-141">Erstellt die DSA-Signatur für den angegebenen Hashwert im angegebenen Format.</span><span class="sxs-lookup"><span data-stu-id="72473-141">Creates the DSA signature for the specified hash value in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="72473-142">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-142">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-143"><paramref name="rgbHash" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-143"><paramref name="rgbHash" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-144"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-144"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-145">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-145">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSignatureCore">
      <MemberSignature Language="C#" Value="protected virtual byte[]? CreateSignatureCore (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] CreateSignatureCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateSignatureCore (hash As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ CreateSignatureCore(ReadOnlySpan&lt;System::Byte&gt; hash, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member CreateSignatureCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.CreateSignatureCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.CreateSignatureCore (hash, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-146">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-146">The hash value to sign.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-147">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-147">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-148">Erstellt die DSA-Signatur für den angegebenen Hashwert im angegebenen Format.</span><span class="sxs-lookup"><span data-stu-id="72473-148">Creates the DSA signature for the specified hash value in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="72473-149">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-149">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-150">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-150">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExportParameters (includePrivateParameters As Boolean) As DSAParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::Cryptography::DSAParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportParameters : bool -&gt; System.Security.Cryptography.DSAParameters" Usage="dSA.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSAParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="72473-151"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-151"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72473-152">Exportiert beim Überschreiben in einer abgeleiteten Klasse die <see cref="T:System.Security.Cryptography.DSAParameters" />.</span><span class="sxs-lookup"><span data-stu-id="72473-152">When overridden in a derived class, exports the <see cref="T:System.Security.Cryptography.DSAParameters" />.</span></span></summary>
        <returns><span data-ttu-id="72473-153">Die Parameter für <see cref="T:System.Security.Cryptography.DSA" />.</span><span class="sxs-lookup"><span data-stu-id="72473-153">The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-154">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-154">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string -&gt; unit" Usage="dSA.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="72473-155">Die XML-Zeichenfolge zur Wiederherstellung des <see cref="T:System.Security.Cryptography.DSA" />-Objekts.</span><span class="sxs-lookup"><span data-stu-id="72473-155">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.DSA" /> object.</span></span></param>
        <summary><span data-ttu-id="72473-156">Stellt ein <see cref="T:System.Security.Cryptography.DSA" />-Objekt aus einer XML-Zeichenfolge wieder her.</span><span class="sxs-lookup"><span data-stu-id="72473-156">Reconstructs a <see cref="T:System.Security.Cryptography.DSA" /> object from an XML string.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-157">Der <paramref name="xmlString" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-157">The <paramref name="xmlString" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-158">Das Format des <paramref name="xmlString" />-Parameters ist nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="72473-158">The format of the <paramref name="xmlString" /> parameter is not valid.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-159">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-159">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetMaxSignatureSize">
      <MemberSignature Language="C#" Value="public int GetMaxSignatureSize (System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetMaxSignatureSize(valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMaxSignatureSize (signatureFormat As DSASignatureFormat) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetMaxSignatureSize(System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.GetMaxSignatureSize : System.Security.Cryptography.DSASignatureFormat -&gt; int" Usage="dSA.GetMaxSignatureSize signatureFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="signatureFormat"><span data-ttu-id="72473-160">Das Codierungsformat für eine Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-160">The encoding format for a signature.</span></span></param>
        <summary><span data-ttu-id="72473-161">Ruft die größte Größe (in Bytes) für eine Signatur ab, die von diesem Schlüssel im angegeben Format generiert wird.</span><span class="sxs-lookup"><span data-stu-id="72473-161">Gets the largest size, in bytes, for a signature produced by this key in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="72473-162">Die größte Größe (in Bytes) für eine Signatur, die von diesem Schlüssel im angegeben Format generiert wird.</span><span class="sxs-lookup"><span data-stu-id="72473-162">The largest size, in bytes, for a signature produced by this key in the indicated format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-163"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-163"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="HashData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72473-164">Berechnet den Hashwert von Binärdaten.</span><span class="sxs-lookup"><span data-stu-id="72473-164">Computes the hash value of binary data.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.HashData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-165">Der binäre Datenstrom, für den der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-165">The binary stream to hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-166">Der Algorithmus, der zum Bestimmen des Hashwerts der Daten verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-166">The algorithm to use to hash the data.</span></span></param>
        <summary><span data-ttu-id="72473-167">Berechnet, falls in einer abgeleiteten Klasse überschrieben, den Hashwert eines angegebenen Binärdatenstroms mithilfe eines angegebenen Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-167">When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="72473-168">Die Daten, für die der Hashwert berechnet wurde.</span><span class="sxs-lookup"><span data-stu-id="72473-168">The hashed data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="72473-169">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="72473-169">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.HashData (data, offset, count, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-170">Die Daten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-170">The data to be hashed.</span></span></param>
        <param name="offset"><span data-ttu-id="72473-171">Der Index des ersten Bytes in <paramref name="data" />, für das der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-171">The index of the first byte in <paramref name="data" /> that is to be hashed.</span></span></param>
        <param name="count"><span data-ttu-id="72473-172">Die Anzahl der Bytes, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-172">The number of bytes to hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-173">Der Algorithmus, der zum Bestimmen des Hashwerts der Daten verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-173">The algorithm to use to hash the data.</span></span></param>
        <summary><span data-ttu-id="72473-174">Berechnet, falls in einer abgeleiteten Klasse überschrieben, den Hashwert eines angegebenen Teils eines Bytearrays mithilfe eines angegebenen Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-174">When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="72473-175">Die Daten, für die der Hashwert berechnet wurde.</span><span class="sxs-lookup"><span data-stu-id="72473-175">The hashed data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="72473-176">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="72473-176">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportEncryptedPkcs8PrivateKey (passwordBytes, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="72473-177">Die Bytes, die als Kennwort bei der Entschlüsselung des Schlüsselmaterials verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="72473-177">The bytes to use as a password when decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="72473-178">Die Bytes einer PKCS#8-EncryptedPrivateKeyInfo-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="72473-178">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="72473-179">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-179">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="72473-180">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-180">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-181">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer PKCS#8-EncryptedPrivateKeyInfo-Struktur nach der Entschlüsselung mit einem bytebasierten Kennwort und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-181">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a byte-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-182">Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die vom Algorithmus verwendet wird, der durch den verschlüsseltedprivatekeyinfo-Inhalt angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="72473-182">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by the EncryptedPrivateKeyInfo contents.</span></span>
<span data-ttu-id="72473-183">Dadurch wird die Kompatibilität mit anderen Systemen ermöglicht, bei denen bei der Verarbeitung von Kenn Wörtern mit PBKDF2 eine andere Text Codierung als UTF-8 verwendet wird (Kenn Wort basierte Schlüssel abderivations Funktion 2).</span><span class="sxs-lookup"><span data-stu-id="72473-183">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
<span data-ttu-id="72473-184">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von "verschlüsseltedprivatekeyinfo".</span><span class="sxs-lookup"><span data-stu-id="72473-184">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="72473-185">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="72473-185">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-186">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="72473-186">The password is incorrect.</span></span>

<span data-ttu-id="72473-187">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-187">-or-</span></span>

<span data-ttu-id="72473-188">Der Inhalt von <paramref name="source" /> gibt an, dass die anzuwendende Schlüsselableitungsfunktion die Legacy-PKCS#12-KDF ist, die <see cref="T:System.Char" />-basierte Kennwörter erfordert.</span><span class="sxs-lookup"><span data-stu-id="72473-188">The contents of <paramref name="source" /> indicate the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</span></span>

<span data-ttu-id="72473-189">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-189">-or-</span></span>

<span data-ttu-id="72473-190">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="72473-190">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="72473-191">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-191">-or-</span></span>

<span data-ttu-id="72473-192">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="72473-192">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="72473-193">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-193">-or-</span></span>

<span data-ttu-id="72473-194">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-194">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="72473-195">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-195">-or-</span></span>

<span data-ttu-id="72473-196">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="72473-196">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportEncryptedPkcs8PrivateKey (password, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="72473-197">Das Kennwort, das bei der Entschlüsselung des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-197">The password to use for decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="72473-198">Die Bytes einer PKCS#8-EncryptedPrivateKeyInfo-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="72473-198">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="72473-199">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-199">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="72473-200">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-200">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-201">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer PKCS#8-EncryptedPrivateKeyInfo-Struktur nach der Entschlüsselung mit einem zeichenbasierten Kennwort und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-201">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a char-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-202">Wenn der Inhalt von `source` einen Algorithmus angibt, der PBKDF1 (Kenn Wort basierte Schlüssel abderivations Funktion 1) oder PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.</span><span class="sxs-lookup"><span data-stu-id="72473-202">When the contents of `source` indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
<span data-ttu-id="72473-203">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von "verschlüsseltedprivatekeyinfo".</span><span class="sxs-lookup"><span data-stu-id="72473-203">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="72473-204">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="72473-204">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-205">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="72473-205">The password is incorrect.</span></span>

<span data-ttu-id="72473-206">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-206">-or-</span></span>

<span data-ttu-id="72473-207">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="72473-207">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="72473-208">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-208">-or-</span></span>

<span data-ttu-id="72473-209">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="72473-209">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="72473-210">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-210">-or-</span></span>

<span data-ttu-id="72473-211">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-211">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="72473-212">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-212">-or-</span></span>

<span data-ttu-id="72473-213">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="72473-213">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;byte&gt; passwordBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), passwordBytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;System::Byte&gt; passwordBytes);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="dSA.ImportFromEncryptedPem (input, passwordBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="72473-214">Der PEM-Text des verschlüsselten Schlüssels, der importiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-214">The PEM text of the encrypted key to import.</span></span></param>
        <param name="passwordBytes"><span data-ttu-id="72473-215">Die Bytes, die als Kennwort bei der Entschlüsselung des Schlüsselmaterials verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="72473-215">The bytes to use as a password when decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="72473-216">Importiert einen verschlüsselten, mit RFC 7468 PEM-codierten privaten Schlüssel und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-216">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="72473-217">Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die von dem durch angegeben Algorithmus verwendet werden `pbeParameters` .</span><span class="sxs-lookup"><span data-stu-id="72473-217">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span> <span data-ttu-id="72473-218">Dies ermöglicht die Kompatibilität mit anderen Systemen, die eine andere Text Codierung als UTF-8 verwenden, wenn Kenn Wörter mit PBKDF2 verarbeitet werden (Kenn Wort basierte Schlüssel abderivations Funktion 2).</span><span class="sxs-lookup"><span data-stu-id="72473-218">This enables compatibility with other systems that use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 

 <span data-ttu-id="72473-219">Nicht unterstützte oder falsch formatierte PEM-codierte Objekte werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="72473-219">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="72473-220">Wenn mehrere unterstützte PEM-Bezeichnungen gefunden werden, wird eine Ausnahme ausgelöst, um das Importieren eines Schlüssels zu verhindern, wenn der Schlüssel mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-220">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="72473-221">Diese Methode unterstützt die `ENCRYPTED PRIVATE KEY` PEM-Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-221">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-222"><paramref name="input" /> enthält keinen PEM-codierten Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-222"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="72473-223">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-223">-or-</span></span>

            <span data-ttu-id="72473-224"><paramref name="input" /> enthält mehrere PEM-codierte Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-224"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
                    <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-225">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="72473-225">The password is incorrect.</span></span>

<span data-ttu-id="72473-226">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-226">-or-</span></span>

<span data-ttu-id="72473-227">Der Base-64-decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt keine ASN.1-BER-codierte PKCS#8 EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="72473-227">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="72473-228">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-228">-or-</span></span>

<span data-ttu-id="72473-229">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="72473-229">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="72473-230">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-230">-or-</span></span>

<span data-ttu-id="72473-231">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-231">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="72473-232">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-232">-or-</span></span>

<span data-ttu-id="72473-233">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="72473-233">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), password As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="dSA.ImportFromEncryptedPem (input, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="72473-234">Der PEM-Text des verschlüsselten Schlüssels, der importiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-234">The PEM text of the encrypted key to import.</span></span></param>
        <param name="password"><span data-ttu-id="72473-235">Das Kennwort, das bei der Entschlüsselung des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-235">The password to use for decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="72473-236">Importiert einen verschlüsselten, mit RFC 7468 PEM-codierten privaten Schlüssel und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-236">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="72473-237">Wenn der von Base-64 decodierte Inhalt von `input` einen Algorithmus angibt, der PBKDF1 (Kenn Wort basierte Schlüssel abzurufende Funktion 1) oder PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.</span><span class="sxs-lookup"><span data-stu-id="72473-237">When the base-64 decoded contents of `input` indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
 

 <span data-ttu-id="72473-238">Nicht unterstützte oder falsch formatierte PEM-codierte Objekte werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="72473-238">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="72473-239">Wenn mehrere unterstützte PEM-Bezeichnungen gefunden werden, wird eine Ausnahme ausgelöst, um das Importieren eines Schlüssels zu verhindern, wenn der Schlüssel mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-239">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="72473-240">Diese Methode unterstützt die `ENCRYPTED PRIVATE KEY` PEM-Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-240">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-241"><paramref name="input" /> enthält keinen PEM-codierten Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-241"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="72473-242">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-242">-or-</span></span>

            <span data-ttu-id="72473-243"><paramref name="input" /> enthält mehrere PEM-codierte Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-243"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
                    <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-244">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="72473-244">The password is incorrect.</span></span>

<span data-ttu-id="72473-245">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-245">-or-</span></span>

<span data-ttu-id="72473-246">Der Base-64-decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt keine ASN.1-BER-codierte PKCS#8 EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="72473-246">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="72473-247">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-247">-or-</span></span>

<span data-ttu-id="72473-248">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="72473-248">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="72473-249">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-249">-or-</span></span>

<span data-ttu-id="72473-250">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-250">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="72473-251">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-251">-or-</span></span>

<span data-ttu-id="72473-252">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="72473-252">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromPem">
      <MemberSignature Language="C#" Value="public override void ImportFromPem (ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromPem (input As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromPem(ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="F#" Value="override this.ImportFromPem : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="dSA.ImportFromPem input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="72473-253">Der PEM-Text des Schlüssels, der importiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-253">The PEM text of the key to import.</span></span></param>
        <summary><span data-ttu-id="72473-254">Importiert einen mit RFC 7468 PEM-codierten Schlüssel und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-254">Imports an RFC 7468 PEM-encoded key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="72473-255">Nicht unterstützte oder falsch formatierte PEM-codierte Objekte werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="72473-255">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="72473-256">Wenn mehrere unterstützte PEM-Bezeichnungen gefunden werden, wird eine Ausnahme ausgelöst, um das Importieren eines Schlüssels zu verhindern, wenn der Schlüssel mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-256">If multiple supported PEM labels are found, an exception is raised to prevent importing a key when the key is ambiguous.</span></span>
 

 <span data-ttu-id="72473-257">Diese Methode unterstützt die folgenden PEM-Bezeichnungen:</span><span class="sxs-lookup"><span data-stu-id="72473-257">This method supports the following PEM labels:</span></span>

  - <span data-ttu-id="72473-258">ÖFFENTLICHER SCHLÜSSEL</span><span class="sxs-lookup"><span data-stu-id="72473-258">PUBLIC KEY</span></span>
  - <span data-ttu-id="72473-259">privater Schlüssel</span><span class="sxs-lookup"><span data-stu-id="72473-259">PRIVATE KEY</span></span>


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-260"><paramref name="input" /> enthält keinen PEM-codierten Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-260"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="72473-261">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-261">-or-</span></span>

            <span data-ttu-id="72473-262"><paramref name="input" /> enthält mehrere PEM-codierte Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="72473-262"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span>

<span data-ttu-id="72473-263">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-263">-or-</span></span>

            <span data-ttu-id="72473-264"><paramref name="input" /> enthält einen verschlüsselten PEM-codierten Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="72473-264"><paramref name="input" /> contains an encrypted PEM-encoded key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.DSAParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ImportParameters (parameters As DSAParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ImportParameters(System::Security::Cryptography::DSAParameters parameters);" />
      <MemberSignature Language="F#" Value="abstract member ImportParameters : System.Security.Cryptography.DSAParameters -&gt; unit" Usage="dSA.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.DSAParameters" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="72473-265">Die Parameter für <see cref="T:System.Security.Cryptography.DSA" />.</span><span class="sxs-lookup"><span data-stu-id="72473-265">The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</span></span></param>
        <summary><span data-ttu-id="72473-266">Importiert beim Überschreiben in einer abgeleiteten Klasse die angegebenen <see cref="T:System.Security.Cryptography.DSAParameters" />.</span><span class="sxs-lookup"><span data-stu-id="72473-266">When overridden in a derived class, imports the specified <see cref="T:System.Security.Cryptography.DSAParameters" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-267">In <paramref name="parameters" /> fehlen Pflichtfelder.</span><span class="sxs-lookup"><span data-stu-id="72473-267"><paramref name="parameters" /> is missing required fields.</span></span>

<span data-ttu-id="72473-268">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-268">-or-</span></span>

<span data-ttu-id="72473-269"><paramref name="parameters" /> weist Felder mit inkonsistenten Längen für einen gültigen Schlüssel auf.</span><span class="sxs-lookup"><span data-stu-id="72473-269"><paramref name="parameters" /> has fields with inconsistent lengths for a valid key.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-270"><paramref name="parameters" /> stellt keinen gültigen DSA-Schlüsselparametersatz dar.</span><span class="sxs-lookup"><span data-stu-id="72473-270"><paramref name="parameters" /> does not represent a valid DSA key parameter set.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-271">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-271">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ImportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportPkcs8PrivateKey (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportPkcs8PrivateKey (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="72473-272">Die Bytes einer PKCS#8-PrivateKeyInfo-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="72473-272">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="72473-273">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-273">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="72473-274">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-274">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-275">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer PKCS#8-PrivateKeyInfo-Struktur nach der Entschlüsselung und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-275">Imports the public/private keypair from a PKCS#8 PrivateKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-276">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von privatekeyinfo.</span><span class="sxs-lookup"><span data-stu-id="72473-276">This method only supports the binary (BER/CER/DER) encoding of PrivateKeyInfo.</span></span>
<span data-ttu-id="72473-277">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="72473-277">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-278">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-PrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="72473-278">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</span></span>

<span data-ttu-id="72473-279">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-279">-or-</span></span>

<span data-ttu-id="72473-280">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="72473-280">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="72473-281">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-281">-or-</span></span>

<span data-ttu-id="72473-282">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-282">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="72473-283">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-283">-or-</span></span>

<span data-ttu-id="72473-284">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="72473-284">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override void ImportSubjectPublicKeyInfo (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportSubjectPublicKeyInfo(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportSubjectPublicKeyInfo (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportSubjectPublicKeyInfo(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportSubjectPublicKeyInfo : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportSubjectPublicKeyInfo (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="72473-285">Die Bytes einer X.509-SubjectPublicKeyInfo-Struktur in der ASN.1-DER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="72473-285">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="72473-286">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-286">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="72473-287">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-287">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-288">Importiert den öffentlichen Schlüssel aus einer X.509-SubjectPublicKeyInfo-Struktur nach der Entschlüsselung und ersetzt dabei die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="72473-288">Imports the public key from an X.509 SubjectPublicKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-289">Diese Methode unterstützt nur die binäre Codierung (der) von "subjetpublickeyinfo".</span><span class="sxs-lookup"><span data-stu-id="72473-289">This method only supports the binary (DER) encoding of SubjectPublicKeyInfo.</span></span>
<span data-ttu-id="72473-290">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="72473-290">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-291">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-DER-codierte X.509-SubjectPublicKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="72473-291">The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</span></span>

<span data-ttu-id="72473-292">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-292">-or-</span></span>

<span data-ttu-id="72473-293">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="72473-293">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="72473-294">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-294">-or-</span></span>

<span data-ttu-id="72473-295">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="72473-295">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="72473-296">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-296">-or-</span></span>

<span data-ttu-id="72473-297">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="72473-297">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72473-298">Berechnet den Hashwert der angegebenen Daten und signiert ihn.</span><span class="sxs-lookup"><span data-stu-id="72473-298">Computes the hash value of the specified data and signs it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-299">Die Eingabedaten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-299">The input data for which to compute the hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-300">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-300">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="72473-301">Berechnet den Hashwert des angegebenen Bytearrays mithilfe des angegebenen Hashalgorithmus und signiert den resultierenden Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-301">Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="72473-302">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-302">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-303"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-303"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-304"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-304"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-305">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-305">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-306">Der Eingabedatenstrom, für den der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-306">The input stream for which to compute the hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-307">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-307">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="72473-308">Berechnet den Hashwert des angegebenen Datenstroms mithilfe des angegebenen Hashalgorithmus und signiert den resultierenden Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-308">Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="72473-309">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-309">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-310"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-310"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-311"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-311"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-312">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-312">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-313">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-313">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-314">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-314">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-315">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-315">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-316">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="72473-316">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="72473-317">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-317">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-318"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-318"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-319"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-319"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-320"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-320"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-321">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-321">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-322">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-322">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-323">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-323">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-324">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-324">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-325">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="72473-325">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="72473-326">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-326">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-327"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-327"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-328"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-328"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-329"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-329"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-330">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-330">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.SignData (data, offset, count, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-331">Die Eingabedaten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-331">The input data for which to compute the hash.</span></span></param>
        <param name="offset"><span data-ttu-id="72473-332">Der Offset im Array, ab dem Daten verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-332">The offset into the array at which to begin using data.</span></span></param>
        <param name="count"><span data-ttu-id="72473-333">Die Anzahl der Bytes im Array, die als Daten verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-333">The number of bytes in the array to use as data.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-334">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-334">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="72473-335">Berechnet den Hashwert eines Teils des angegebenen Bytearrays mithilfe des angegebenen Hashalgorithmus und signiert den sich ergebenden Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-335">Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="72473-336">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-336">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-337"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-337"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-338"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-338"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-339">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-339">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-340"><paramref name="offset" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="72473-340"><paramref name="offset" /> is less than zero.</span></span>  
  
<span data-ttu-id="72473-341">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-341">-or-</span></span> 
 <span data-ttu-id="72473-342"><paramref name="count" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="72473-342"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="72473-343">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-343">-or-</span></span> 
 <span data-ttu-id="72473-344"><paramref name="offset" /> + <paramref name="count" /> – 1 resultiert in einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="72473-344"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignData (data, offset, count, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-345">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-345">The data to sign.</span></span></param>
        <param name="offset"><span data-ttu-id="72473-346">Der Offset in <paramref name="data" />, ab dem Hashing erfolgen soll.</span><span class="sxs-lookup"><span data-stu-id="72473-346">The offset into <paramref name="data" /> at which to begin hashing.</span></span></param>
        <param name="count"><span data-ttu-id="72473-347">Die Anzahl der aus <paramref name="data" /> zu lesenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="72473-347">The number of bytes to read from <paramref name="data" />.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-348">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-348">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-349">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-349">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-350">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="72473-350">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="72473-351">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-351">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-352"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-352"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-353"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-353"><paramref name="signatureFormat" /> is not a known format.</span></span>
 
<span data-ttu-id="72473-354">Oder <paramref name="offset" /> ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="72473-354">-or- <paramref name="offset" /> is less than zero.</span></span>
 
<span data-ttu-id="72473-355">Oder <paramref name="count" /> ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="72473-355">-or- <paramref name="count" /> is less than zero.</span></span>
 
<span data-ttu-id="72473-356"><paramref name="offset" /> + <paramref name="count" /> – 1 führt zu einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="72473-356">-or- <paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-357"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-357"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-358">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-358">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected virtual byte[] SignDataCore (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignDataCore(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignDataCore (data As Stream, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignDataCore(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignDataCore : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignDataCore (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-359">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-359">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-360">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-360">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-361">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-361">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-362">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="72473-362">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="72473-363">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-363">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-364">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-364">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected virtual byte[]? SignDataCore (ReadOnlySpan&lt;byte&gt; data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignDataCore (data As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignDataCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignDataCore (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-365">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-365">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-366">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-366">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-367">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-367">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="72473-368">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="72473-368">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="72473-369">Die DSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-369">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-370">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-370">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : bool -&gt; string" Usage="dSA.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="72473-371"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-371"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72473-372">Erstellt eine XML-Zeichenfolgendarstellung des aktuellen <see cref="T:System.Security.Cryptography.DSA" />-Objekts und gibt diese zurück.</span><span class="sxs-lookup"><span data-stu-id="72473-372">Creates and returns an XML string representation of the current <see cref="T:System.Security.Cryptography.DSA" /> object.</span></span></summary>
        <returns><span data-ttu-id="72473-373">Eine XML-Zeichenfolgencodierung des aktuellen <see cref="T:System.Security.Cryptography.DSA" />-Objekts.</span><span class="sxs-lookup"><span data-stu-id="72473-373">An XML string encoding of the current <see cref="T:System.Security.Cryptography.DSA" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-374">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-374">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryCreateSignature">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateSignature (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateSignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateSignature (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateSignature(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateSignature : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool&#xA;override this.TryCreateSignature : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryCreateSignature (hash, destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-375">Der zu signierende Hash.</span><span class="sxs-lookup"><span data-stu-id="72473-375">The hash to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-376">Die Bytespanne, die die Signatur empfangen soll.</span><span class="sxs-lookup"><span data-stu-id="72473-376">The byte span to receive the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-377">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-377">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="72473-378">Versucht, die DSA-Signatur für den angegebenen Hash im angegebenen Puffer zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="72473-378">Attempts to create the DSA signature for the specified hash into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-379"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, das Ergebnis zu empfangen. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-379"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-380">Die Standard Implementierung dieser Methode besteht darin, aufzurufen <xref:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])> und das Ergebnis in zu kopieren `destination` .</span><span class="sxs-lookup"><span data-stu-id="72473-380">The default implementation of this method is to call <xref:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])> and copy the result to `destination`.</span></span>
<span data-ttu-id="72473-381">Abgeleitete Typen sollten diese Methode überschreiben, um die Erstellung von zwischen Arrays zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="72473-381">Derived types should override this method to avoid the intermediate array creation.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-382">Diese Instanz stellt nur einen öffentlichen Schlüssel dar.</span><span class="sxs-lookup"><span data-stu-id="72473-382">This instance represents only a public key.</span></span>

<span data-ttu-id="72473-383">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-383">-or-</span></span>

<span data-ttu-id="72473-384">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und <paramref name="hash" /> ist kein 20-Byte-Wert.</span><span class="sxs-lookup"><span data-stu-id="72473-384">The implementation type only supports legacy DSA (FIPS 186-2), and <paramref name="hash" /> is not a 20-byte value.</span></span>

<span data-ttu-id="72473-385">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-385">-or-</span></span>

<span data-ttu-id="72473-386">Die Erstellung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-386">Creating the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryCreateSignature">
      <MemberSignature Language="C#" Value="public bool TryCreateSignature (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCreateSignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateSignature (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCreateSignature(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryCreateSignature : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TryCreateSignature (hash, destination, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-387">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-387">The hash value to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-388">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="72473-388">The buffer to receive the signature.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-389">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-389">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-390">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-390">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-391">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-391">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-392">Versucht, die DSA-Signatur für den angegebenen Hashwert im angegebenen Format im angegebenen Puffer zu erstellen und im bereitgestellten Puffer zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="72473-392">Attempts to create the DSA signature for the specified hash value in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-393"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-393"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-394"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-394"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-395">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-395">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryCreateSignatureCore">
      <MemberSignature Language="C#" Value="protected virtual bool TryCreateSignatureCore (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryCreateSignatureCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryCreateSignatureCore (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryCreateSignatureCore(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateSignatureCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool&#xA;override this.TryCreateSignatureCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TryCreateSignatureCore (hash, destination, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-396">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="72473-396">The hash value to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-397">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="72473-397">The buffer to receive the signature.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-398">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-398">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-399">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-399">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-400">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-400">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-401">Versucht, die DSA-Signatur für den angegebenen Hashwert im angegebenen Format im angegebenen Puffer zu erstellen und im bereitgestellten Puffer zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="72473-401">Attempts to create the DSA signature for the specified hash value in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-402"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-402"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-403">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-403">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportEncryptedPkcs8PrivateKey (passwordBytes, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="72473-404">Die Bytes, die als Kennwort bei der Verschlüsselung des Schlüsselmaterials verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="72473-404">The bytes to use as a password when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="72473-405">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Schlüsselmaterials verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-405">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-406">Die Bytespanne, in der die PKCS#8-EncryptedPrivateKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-406">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-407">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-407">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-408">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-408">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-409">Versucht, den aktuellen Schlüssel im PKCS#8-EncryptedPrivateKeyInfo-Format mit einem bytebasierten Kennwort in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="72473-409">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</span></span></summary>
        <returns><span data-ttu-id="72473-410"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-410"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-411">Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die von dem durch angegeben Algorithmus verwendet werden `pbeParameters` .</span><span class="sxs-lookup"><span data-stu-id="72473-411">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span>
<span data-ttu-id="72473-412">Dadurch wird die Kompatibilität mit anderen Systemen ermöglicht, bei denen bei der Verarbeitung von Kenn Wörtern mit PBKDF2 eine andere Text Codierung als UTF-8 verwendet wird (Kenn Wort basierte Schlüssel abderivations Funktion 2).</span><span class="sxs-lookup"><span data-stu-id="72473-412">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-413">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="72473-413">The key could not be exported.</span></span>

<span data-ttu-id="72473-414">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-414">-or-</span></span>

<span data-ttu-id="72473-415"><paramref name="pbeParameters" /> gibt an, dass <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> verwendet werden soll, wofür <see cref="T:System.Char" />-basierte Kennwörter erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="72473-415"><paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportEncryptedPkcs8PrivateKey (password, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="72473-416">Das Kennwort, das bei der Verschlüsselung des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-416">The password to use when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="72473-417">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Schlüsselmaterials verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-417">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-418">Die Bytespanne, in der die PKCS#8-EncryptedPrivateKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-418">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-419">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-419">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-420">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-420">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-421">Versucht, den aktuellen Schlüssel im PKCS#8-EncryptedPrivateKeyInfo-Format mit einem zeichenbasierten Kennwort in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="72473-421">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</span></span></summary>
        <returns><span data-ttu-id="72473-422"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-422"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-423">Wenn `pbeParameters` einen Algorithmus angibt, der PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.</span><span class="sxs-lookup"><span data-stu-id="72473-423">When `pbeParameters` indicates an algorithm that uses PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-424">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="72473-424">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportPkcs8PrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportPkcs8PrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportPkcs8PrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportPkcs8PrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportPkcs8PrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportPkcs8PrivateKey (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="72473-425">Die Bytespanne, in der die PKCS#8-PrivateKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-425">The byte span to receive the PKCS#8 PrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-426">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-426">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-427">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-427">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-428">Versucht, den aktuellen Schlüssel im PKCS#8-PrivateKeyInfo-Format in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="72473-428">Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-429"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-429"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-430">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="72473-430">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override bool TryExportSubjectPublicKeyInfo (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportSubjectPublicKeyInfo(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportSubjectPublicKeyInfo (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportSubjectPublicKeyInfo(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportSubjectPublicKeyInfo : Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportSubjectPublicKeyInfo (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="72473-431">Die Bytespanne, in der die X.509-SubjectPublicKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-431">The byte span to receive the X.509 SubjectPublicKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-432">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-432">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-433">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-433">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-434">Versucht, den aktuellen Schlüssel im X.509-SubjectPublicKeyInfo-Format in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="72473-434">Attempts to export the current key in the X.509 SubjectPublicKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-435"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-435"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-436">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="72473-436">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryHashData">
      <MemberSignature Language="C#" Value="protected virtual bool TryHashData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryHashData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryHashData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryHashData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryHashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool&#xA;override this.TryHashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool" Usage="dSA.TryHashData (data, destination, hashAlgorithm, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-437">Die Daten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-437">The data to be hashed.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-438">Die Bytespanne, die den Hashwert empfangen soll.</span><span class="sxs-lookup"><span data-stu-id="72473-438">The byte span to receive the hash value.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-439">Der Name des zu verwendeten Hash-Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-439">The name of the hash algorithm to use.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-440">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-440">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="72473-441">Versucht, den Hashwert der angegebenen Daten in einen angegebenen Puffer zu berechnen.</span><span class="sxs-lookup"><span data-stu-id="72473-441">Attempts to compute the hash value of the provided data into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-442"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, das Ergebnis zu empfangen. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-442"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="72473-443">Die Standard Implementierung dieser Methode besteht darin, aufzurufen <xref:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)> und das Ergebnis in zu kopieren `destination` .</span><span class="sxs-lookup"><span data-stu-id="72473-443">The default implementation of this method is to call <xref:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)> and copy the result to `destination`.</span></span>

<span data-ttu-id="72473-444">Abgeleitete Typen sollten diese Methode überschreiben, um die Erstellung von zwischen Arrays zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="72473-444">Derived types should override this method to avoid the intermediate array creation.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public virtual bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool&#xA;override this.TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool" Usage="dSA.TrySignData (data, destination, hashAlgorithm, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-445">Die Daten, die gehasht und signiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-445">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-446">Die Bytespanne, die die Signatur empfangen soll.</span><span class="sxs-lookup"><span data-stu-id="72473-446">The byte span to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-447">Der Name des zu verwendeten Hash-Algorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-447">The name of the hash algorithm to use.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-448">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-448">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="72473-449">Versucht, die DSA-Signatur für die angegebenen Daten im angegebenen Puffer zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="72473-449">Attempts to create the DSA signature for the specified data into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-450"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, das Ergebnis zu empfangen. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-450"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TrySignData (data, destination, hashAlgorithm, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-451">Die Daten, die gehasht und signiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-451">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-452">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="72473-452">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-453">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-453">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-454">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-454">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-455">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-455">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-456">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-456">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-457">Versucht, die DSA-Signatur für die angegebenen Daten im angegebenen Format im angegebenen Puffer zu erstellen und im bereitgestellten Puffer zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="72473-457">Attempts to create the DSA signature for the specified data in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-458"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-458"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-459"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-459"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-460"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-460"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-461">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-461">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TrySignDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool TrySignDataCore (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TrySignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TrySignDataCore (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TrySignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignDataCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool&#xA;override this.TrySignDataCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TrySignDataCore (data, destination, hashAlgorithm, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-462">Die Daten, die gehasht und signiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="72473-462">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="72473-463">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="72473-463">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-464">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="72473-464">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-465">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-465">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="72473-466">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-466">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="72473-467">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="72473-467">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="72473-468">Versucht, die DSA-Signatur für die angegebenen Daten im angegebenen Format im angegebenen Puffer zu erstellen und im bereitgestellten Puffer zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="72473-468">Attempts to create the DSA signature for the specified data in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="72473-469"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-469"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-470">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-470">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VerifyData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72473-471">Überprüft, ob eine digitale Signatur gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-471">Verifies that a digital signature is valid.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-472">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-472">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-473">Die zu überprüfenden Signaturdaten.</span><span class="sxs-lookup"><span data-stu-id="72473-473">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-474">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-474">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="72473-475">Überprüft, ob eine digitale Signatur gültig ist, indem der Hashwert der angegebenen Daten unter Verwendung des angegebenen Hashalgorithmus und durch Vergleichen mit der angegebenen Signatur berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-475">Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="72473-476"><see langword="true" />, wenn die digitale Signatur gültig ist; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-476"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-477"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-477"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="72473-478">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-478">-or-</span></span> 
 <span data-ttu-id="72473-479"><paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-479"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-480">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und der Hashalgorithmus ist nicht SHA-1.</span><span class="sxs-lookup"><span data-stu-id="72473-480">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="72473-481">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-481">-or-</span></span>

<span data-ttu-id="72473-482">Die Verifizierung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-482">Verifying the signature otherwise failed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-483"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-483"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-484">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-484">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-485">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-485">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-486">Die zu überprüfenden Signaturdaten.</span><span class="sxs-lookup"><span data-stu-id="72473-486">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-487">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-487">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="72473-488">Überprüft, ob eine digitale Signatur gültig ist, indem der Hashwert des angegebenen Datenstroms unter Verwendung des angegebenen Hashalgorithmus und durch Vergleichen mit der angegebenen Signatur berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-488">Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="72473-489"><see langword="true" />, wenn die digitale Signatur gültig ist; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-489"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-490"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-490"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="72473-491">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-491">-or-</span></span> 
 <span data-ttu-id="72473-492"><paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-492"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-493"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-493"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-494">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-494">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-495">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und der Hashalgorithmus ist nicht SHA-1.</span><span class="sxs-lookup"><span data-stu-id="72473-495">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="72473-496">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-496">-or-</span></span>

<span data-ttu-id="72473-497">Die Verifizierung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-497">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-498">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-498">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-499">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-499">The signature to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-500">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-500">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="72473-501">Überprüft, ob eine digitale Signatur gültig ist, indem der Hashwert der Daten in einer Bytespanne unter Verwendung des angegebenen Hashalgorithmus und durch Vergleichen mit der angegebenen Signatur berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-501">Verifies that a digital signature is valid by calculating the hash value of the data in a byte span using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="72473-502"><see langword="true" />, wenn die digitale Signatur gültig ist; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-502"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-503"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-503"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-504">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-504">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-505">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und der Hashalgorithmus ist nicht SHA-1.</span><span class="sxs-lookup"><span data-stu-id="72473-505">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="72473-506">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-506">-or-</span></span>

<span data-ttu-id="72473-507">Die Verifizierung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-507">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-508">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-508">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-509">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-509">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-510">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-510">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-511">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-511">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-512">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-512">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="72473-513"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-513"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-514"><paramref name="data" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-514"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-515"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-515"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-516"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-516"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-517">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-517">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-518">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-518">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-519">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-519">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-520">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-520">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-521">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-521">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-522">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-522">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="72473-523"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-523"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-524"><paramref name="data" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-524"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-525"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-525"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-526"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-526"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-527">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-527">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-528">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-528">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-529">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-529">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-530">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-530">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-531">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-531">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-532">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-532">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="72473-533"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-533"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-534"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-534"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-535">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-535">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, offset, count, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-536">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-536">The signed data.</span></span></param>
        <param name="offset"><span data-ttu-id="72473-537">Der Startindex, an dem der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-537">The starting index at which to compute the hash.</span></span></param>
        <param name="count"><span data-ttu-id="72473-538">Die Anzahl der Bytes, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="72473-538">The number of bytes to hash.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-539">Die zu überprüfenden Signaturdaten.</span><span class="sxs-lookup"><span data-stu-id="72473-539">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-540">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-540">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="72473-541">Überprüft, ob eine digitale Signatur gültig ist, indem der Hashwert der Daten in einem Teil eines Bytearrays unter Verwendung des angegebenen Hashalgorithmus und durch Vergleichen mit der angegebenen Signatur berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-541">Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="72473-542"><see langword="true" />, wenn die digitale Signatur gültig ist; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-542"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-543"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-543"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="72473-544">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-544">-or-</span></span> 
 <span data-ttu-id="72473-545"><paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-545"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-546"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="72473-546"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="72473-547">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="72473-547">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-548"><paramref name="offset" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="72473-548"><paramref name="offset" /> is less than zero.</span></span>  
  
<span data-ttu-id="72473-549">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-549">-or-</span></span> 
 <span data-ttu-id="72473-550"><paramref name="count" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="72473-550"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="72473-551">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-551">-or-</span></span> 
 <span data-ttu-id="72473-552"><paramref name="offset" /> + <paramref name="count" /> – 1 resultiert in einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="72473-552"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-553">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und der Hashalgorithmus ist nicht SHA-1.</span><span class="sxs-lookup"><span data-stu-id="72473-553">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="72473-554">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-554">-or-</span></span>

<span data-ttu-id="72473-555">Die Verifizierung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-555">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, offset, count, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="4" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="5" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-556">Ein Array, das die signierten Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="72473-556">An array that contains the signed data.</span></span></param>
        <param name="offset"><span data-ttu-id="72473-557">Der Startindex des signierten Teils von <paramref name="data" />.</span><span class="sxs-lookup"><span data-stu-id="72473-557">The starting index of the signed portion of <paramref name="data" />.</span></span></param>
        <param name="count"><span data-ttu-id="72473-558">Die Anzahl der Bytes in <paramref name="data" />, die signiert wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-558">The number of bytes in <paramref name="data" /> that were signed.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-559">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-559">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-560">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-560">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-561">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-561">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-562">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-562">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="72473-563"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-563"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-564"><paramref name="data" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-564"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-565"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-565"><paramref name="signatureFormat" /> is not a known format.</span></span>
 
<span data-ttu-id="72473-566">Oder <paramref name="offset" /> ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="72473-566">-or- <paramref name="offset" /> is less than zero.</span></span>
 
<span data-ttu-id="72473-567">Oder <paramref name="count" /> ist kleiner als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="72473-567">-or- <paramref name="count" /> is less than zero.</span></span>
 
<span data-ttu-id="72473-568"><paramref name="offset" /> + <paramref name="count" /> – 1 führt zu einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="72473-568">-or- <paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72473-569"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="72473-569"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-570">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-570">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDataCore (System.IO.Stream? data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(class System.IO.Stream data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyDataCore (data As Stream, signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyDataCore(System::IO::Stream ^ data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : System.IO.Stream * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyDataCore : System.IO.Stream * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyDataCore (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-571">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-571">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-572">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-572">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-573">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-573">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-574">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-574">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-575">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-575">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="72473-576"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-576"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-577">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-577">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDataCore (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyDataCore (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyDataCore(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyDataCore (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="72473-578">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-578">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-579">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-579">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="72473-580">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="72473-580">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-581">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-581">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-582">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-582">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="72473-583"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-583"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-584">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-584">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifySignature(unsigned int8[] rgbHash, unsigned int8[] rgbSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function VerifySignature (rgbHash As Byte(), rgbSignature As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool VerifySignature(cli::array &lt;System::Byte&gt; ^ rgbHash, cli::array &lt;System::Byte&gt; ^ rgbSignature);" />
      <MemberSignature Language="F#" Value="abstract member VerifySignature : byte[] * byte[] -&gt; bool" Usage="dSA.VerifySignature (rgbHash, rgbSignature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" />
        <Parameter Name="rgbSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="72473-585">Der Hash der mit <paramref name="rgbSignature" /> signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-585">The hash of the data signed with <paramref name="rgbSignature" />.</span></span></param>
        <param name="rgbSignature"><span data-ttu-id="72473-586">Die für <c>rgbData</c> zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-586">The signature to be verified for <c>rgbData</c>.</span></span></param>
        <summary><span data-ttu-id="72473-587">Überprüft beim Überschreiben in einer abgeleiteten Klasse die <see cref="T:System.Security.Cryptography.DSA" />-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="72473-587">When overridden in a derived class, verifies the <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified data.</span></span></summary>
        <returns><span data-ttu-id="72473-588"><see langword="true" />, wenn <paramref name="rgbSignature" /> der Signatur entspricht, die mit dem angegebenen Hashalgorithmus und Schlüssel für <paramref name="rgbHash" /> berechnet wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-588"><see langword="true" /> if <paramref name="rgbSignature" /> matches the signature computed using the specified hash algorithm and key on <paramref name="rgbHash" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-589">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und der Hashwert ist keine 20 Byte lang.</span><span class="sxs-lookup"><span data-stu-id="72473-589">The implementation type only supports legacy DSA (FIPS 186-2), and the hash value is not 20 bytes long.</span></span>

<span data-ttu-id="72473-590">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-590">-or-</span></span>

<span data-ttu-id="72473-591">Die Verifizierung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-591">Verifying the signature otherwise failed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="72473-592">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="72473-592">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public virtual bool VerifySignature (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifySignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifySignature (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifySignature(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature);" />
      <MemberSignature Language="F#" Value="abstract member VerifySignature : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool&#xA;override this.VerifySignature : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="dSA.VerifySignature (hash, signature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-593">Der zu überprüfende Datenhash.</span><span class="sxs-lookup"><span data-stu-id="72473-593">The data hash to verify.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-594">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-594">The signature to be verify.</span></span></param>
        <summary><span data-ttu-id="72473-595">Überprüft, ob eine digitale Signatur für einen angegebenen Datenhash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-595">Verifies that a digital signature is valid for a provided data hash.</span></span></summary>
        <returns><span data-ttu-id="72473-596"><see langword="true" />, wenn die digitale Signatur für den Hash gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-596"><see langword="true" /> if the digital signature is valid for the hash; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72473-597">Die Standard Implementierung dieser Methode ruft <xref:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])> auf, nachdem die Spannen in Arrays kopiert wurden.</span><span class="sxs-lookup"><span data-stu-id="72473-597">The default implementation of this method calls <xref:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])> after copying the spans to arrays.</span></span>
<span data-ttu-id="72473-598">Abgeleitete Typen sollten diese Methode überschreiben, um die Erstellung von zwischen Arrays zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="72473-598">Derived types should override this method to avoid the intermediate array creation.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-599">Der Implementierungstyp unterstützt nur den Legacy-DSA (Digital Signature Algorithm, Digitaler Signaturalgorithmus) FIPS 186-2, und der Hashwert ist keine 20 Byte lang.</span><span class="sxs-lookup"><span data-stu-id="72473-599">The implementation type only supports legacy DSA (FIPS 186-2), and the hash value is not 20 bytes long.</span></span>

<span data-ttu-id="72473-600">- oder -</span><span class="sxs-lookup"><span data-stu-id="72473-600">-or-</span></span>

<span data-ttu-id="72473-601">Die Verifizierung der Signatur schlägt andernfalls fehl.</span><span class="sxs-lookup"><span data-stu-id="72473-601">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public bool VerifySignature (byte[] rgbHash, byte[] rgbSignature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignature(unsigned int8[] rgbHash, unsigned int8[] rgbSignature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignature (rgbHash As Byte(), rgbSignature As Byte(), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifySignature(cli::array &lt;System::Byte&gt; ^ rgbHash, cli::array &lt;System::Byte&gt; ^ rgbSignature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifySignature : byte[] * byte[] * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifySignature (rgbHash, rgbSignature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="rgbSignature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="72473-602">Der signierte Hash.</span><span class="sxs-lookup"><span data-stu-id="72473-602">The signed hash.</span></span></param>
        <param name="rgbSignature"><span data-ttu-id="72473-603">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-603">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-604">Das Codierungsformat für <paramref name="rgbSignature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-604">The encoding format for <paramref name="rgbSignature" />.</span></span></param>
        <summary><span data-ttu-id="72473-605">Überprüft, ob eine digitale Signatur für den bereitgestellten Hash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-605">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="72473-606"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-606"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72473-607"><paramref name="rgbHash" /> oder <paramref name="rgbSignature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="72473-607"><paramref name="rgbHash" /> or <paramref name="rgbSignature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-608"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-608"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-609">Beim Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-609">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public bool VerifySignature (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignature (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifySignature(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifySignature : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifySignature (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-610">Der signierte Hash.</span><span class="sxs-lookup"><span data-stu-id="72473-610">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-611">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-611">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-612">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-612">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-613">Überprüft, ob eine digitale Signatur für den bereitgestellten Hash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-613">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="72473-614"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-614"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72473-615"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="72473-615"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-616">Beim Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-616">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifySignatureCore (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifySignatureCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifySignatureCore (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifySignatureCore(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifySignatureCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifySignatureCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifySignatureCore (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="72473-617">Der signierte Hash.</span><span class="sxs-lookup"><span data-stu-id="72473-617">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="72473-618">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="72473-618">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="72473-619">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="72473-619">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="72473-620">Überprüft, ob eine digitale Signatur für den bereitgestellten Hash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="72473-620">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="72473-621"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72473-621"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="72473-622">Beim Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="72473-622">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

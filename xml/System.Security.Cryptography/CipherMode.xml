<Type Name="CipherMode" FullName="System.Security.Cryptography.CipherMode">
  <TypeSignature Language="C#" Value="public enum CipherMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CipherMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.CipherMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum CipherMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class CipherMode" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6102e-101">Gibt den Blockchiffremodus an, der für die Verschlüsselung verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="6102e-101">Specifies the block cipher mode to use for encryption.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6102e-102">Blockverschlüsselungsalgorithmen Verschlüsseln von Daten im Blockeinheiten, anstatt ein einzelnes Byte an einem Zeitpunkt.</span><span class="sxs-lookup"><span data-stu-id="6102e-102">Block cipher algorithms encrypt data in block units, rather than a single byte at a time.</span></span> <span data-ttu-id="6102e-103">Die am häufigsten verwendete Blockgröße umfasst 8 Bytes.</span><span class="sxs-lookup"><span data-stu-id="6102e-103">The most common block size is 8 bytes.</span></span> <span data-ttu-id="6102e-104">Da jeder Block stark verarbeitet wird, bieten Blockverschlüsselungsverfahren ein höheres Maß an Sicherheit als datenstromchiffren.</span><span class="sxs-lookup"><span data-stu-id="6102e-104">Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers.</span></span> <span data-ttu-id="6102e-105">Blockverschlüsselungsalgorithmen tendenziell jedoch langsamer als datenstromchiffren ausführen.</span><span class="sxs-lookup"><span data-stu-id="6102e-105">However, block cipher algorithms tend to execute more slowly than stream ciphers.</span></span>  
  
 <span data-ttu-id="6102e-106">Blockchiffren verwenden denselben Verschlüsselungsalgorithmus für jeden Block.</span><span class="sxs-lookup"><span data-stu-id="6102e-106">Block ciphers use the same encryption algorithm for each block.</span></span> <span data-ttu-id="6102e-107">Aus diesem Grund wird ein nur-Text-Block immer den gleichen Verschlüsselungstext, wenn mit dem gleichen Schlüssel und dem angegebenen Algorithmus verschlüsselt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="6102e-107">Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm.</span></span> <span data-ttu-id="6102e-108">Da dieses Verhalten verwendet werden kann, um ein Verschlüsselungsverfahren geknackt werden Cipher Modi eingeführt, die den Verschlüsselungsvorgang basierend auf Feedback aus früheren Block Verschlüsselungen ändern.</span><span class="sxs-lookup"><span data-stu-id="6102e-108">Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions.</span></span> <span data-ttu-id="6102e-109">Die resultierende Verschlüsselung bietet ein höheres Maß an Sicherheit als eine Verschlüsselung mit einem einfachen Block.</span><span class="sxs-lookup"><span data-stu-id="6102e-109">The resulting encryption provides a higher level of security than a simple block encryption.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CBC">
      <MemberSignature Language="C#" Value="CBC" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CBC = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CBC" />
      <MemberSignature Language="VB.NET" Value="CBC" />
      <MemberSignature Language="C++ CLI" Value="CBC" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6102e-110">Ein Modus, bei dem die Rückkopplung genutzt wird, ist der <see langword="CBC" />-Modus (Cipher Block Chaining).</span><span class="sxs-lookup"><span data-stu-id="6102e-110">The Cipher Block Chaining (<see langword="CBC" />) mode introduces feedback.</span></span> <span data-ttu-id="6102e-111">Vor der Verschlüsselung jedes einzelnen Klartextblocks wird dieser durch eine bitweise exklusive OR-Operation mit dem Geheimtext des vorherigen Blocks kombiniert.</span><span class="sxs-lookup"><span data-stu-id="6102e-111">Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation.</span></span> <span data-ttu-id="6102e-112">Auch wenn der Klartext viele identische Blöcke enthält, wird hierdurch sichergestellt, dass jeder zu einem anderen Geheimtextblock verschlüsselt wird.</span><span class="sxs-lookup"><span data-stu-id="6102e-112">This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block.</span></span> <span data-ttu-id="6102e-113">Der Initialisierungsvektor wird durch eine bitweise exklusive OR-Operation mit dem ersten Klartextblock kombiniert, bevor der Block verschlüsselt wird.</span><span class="sxs-lookup"><span data-stu-id="6102e-113">The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted.</span></span> <span data-ttu-id="6102e-114">Wenn ein einzelnes Bit des Geheimtextblocks geändert wird, ändert sich auch der entsprechende Klartextblock.</span><span class="sxs-lookup"><span data-stu-id="6102e-114">If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled.</span></span> <span data-ttu-id="6102e-115">Außerdem wird ein Bit im folgenden Block an derselben Position wie das ursprüngliche geänderte Bit geändert.</span><span class="sxs-lookup"><span data-stu-id="6102e-115">In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="CFB">
      <MemberSignature Language="C#" Value="CFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CFB = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CFB" />
      <MemberSignature Language="VB.NET" Value="CFB" />
      <MemberSignature Language="C++ CLI" Value="CFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6102e-116">Im <see langword="CFB" />-Modus (Cipher Feedback) wird nicht der gesamte Block auf einmal verarbeitet, sondern es werden kleine Abschnitte des Klartexts schrittweise in Geheimtext umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="6102e-116">The Cipher Feedback (<see langword="CFB" />) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time.</span></span> <span data-ttu-id="6102e-117">Für diesen Modus wird ein Schieberegister verwendet, das eine Länge von einem Block hat und in Abschnitte unterteilt ist.</span><span class="sxs-lookup"><span data-stu-id="6102e-117">This mode uses a shift register that is one block in length and is divided into sections.</span></span> <span data-ttu-id="6102e-118">Bei einer Blockgröße von 8 Bytes, die nacheinander verarbeitet werden, ist das Schieberegister in acht Abschnitte unterteilt.</span><span class="sxs-lookup"><span data-stu-id="6102e-118">For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections.</span></span> <span data-ttu-id="6102e-119">Wenn ein Bit im Geheimtext geändert wird, wird ein Bit im Klartext geändert und das Schieberegister beschädigt.</span><span class="sxs-lookup"><span data-stu-id="6102e-119">If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted.</span></span> <span data-ttu-id="6102e-120">In der Folge werden die nächsten Klartextabschnitte geändert, bis das ungültige Bit aus dem Schieberegister heraus verschoben wurde.</span><span class="sxs-lookup"><span data-stu-id="6102e-120">This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register.</span></span> <span data-ttu-id="6102e-121">Die Standardfeedbackgröße kann entsprechend dem Algorithmus variieren, i. d. R. entspricht sie jedoch 8 Bit oder der Bitanzahl der Blockgröße.</span><span class="sxs-lookup"><span data-stu-id="6102e-121">The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size.</span></span> <span data-ttu-id="6102e-122">Sie können die Anzahl der Bits für die Feedbackgröße mit der <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" />-Eigenschaft ändern.</span><span class="sxs-lookup"><span data-stu-id="6102e-122">You can alter the number of feedback bits by using the <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> property.</span></span> <span data-ttu-id="6102e-123">Algorithmen, die CFB unterstützen, legen mithilfe dieser Eigenschaft das Feedback fest.</span><span class="sxs-lookup"><span data-stu-id="6102e-123">Algorithms that support CFB use this property to set the feedback.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="CTS">
      <MemberSignature Language="C#" Value="CTS" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CTS = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CTS" />
      <MemberSignature Language="VB.NET" Value="CTS" />
      <MemberSignature Language="C++ CLI" Value="CTS" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6102e-124">Der <see langword="CTS" />-Modus (Cipher Text Stealing) verarbeitet Klartext jeder Länge und erzeugt Geheimtext mit gleicher Länge.</span><span class="sxs-lookup"><span data-stu-id="6102e-124">The Cipher Text Stealing (<see langword="CTS" />) mode handles any length of plain text and produces cipher text whose length matches the plain text length.</span></span> <span data-ttu-id="6102e-125">Bis auf die letzten zwei Blöcke des Klartextes entspricht dieser Modus in seiner Funktion dem <see langword="CBC" />-Modus.</span><span class="sxs-lookup"><span data-stu-id="6102e-125">This mode behaves like the <see langword="CBC" /> mode for all but the last two blocks of the plain text.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ECB">
      <MemberSignature Language="C#" Value="ECB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode ECB = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.ECB" />
      <MemberSignature Language="VB.NET" Value="ECB" />
      <MemberSignature Language="C++ CLI" Value="ECB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6102e-126">Im <see langword="ECB" />-Modus (Electronic Codebook) wird jeder Block einzeln verschlüsselt.</span><span class="sxs-lookup"><span data-stu-id="6102e-126">The Electronic Codebook (<see langword="ECB" />) mode encrypts each block individually.</span></span> <span data-ttu-id="6102e-127">Alle identischen Klartextblöcke innerhalb einer Nachricht bzw. in unterschiedlichen Nachrichten, die mit demselben Schlüssel verschlüsselt wurden, werden in identische Geheimtextblöcke umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="6102e-127">Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks.</span></span> <span data-ttu-id="6102e-128">**Wichtig**: Dieser Modus wird nicht empfohlen, da er eine Reihe von Sicherheitslücken eröffnet.</span><span class="sxs-lookup"><span data-stu-id="6102e-128">**Important**:  This mode is not recommended because it opens the door for multiple security exploits.</span></span> <span data-ttu-id="6102e-129">Wenn der zu verschlüsselnde Klartext genügend viele Wiederholungen enthält, kann der Geheimtext blockweise entschlüsselt werden.</span><span class="sxs-lookup"><span data-stu-id="6102e-129">If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time.</span></span> <span data-ttu-id="6102e-130">Der Verschlüsselungsschlüssel kann auch mithilfe der Blockanalyse bestimmt werden.</span><span class="sxs-lookup"><span data-stu-id="6102e-130">It is also possible to use block analysis to determine the encryption key.</span></span> <span data-ttu-id="6102e-131">Darüber hinaus kann ein aktiver Angreifer einzelne Blöcke ohne Erkennung ersetzen und austauschen, wodurch Blöcke im Stream ohne Erkennung an anderen Positionen gespeichert und eingefügt werden können.</span><span class="sxs-lookup"><span data-stu-id="6102e-131">Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OFB">
      <MemberSignature Language="C#" Value="OFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode OFB = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.OFB" />
      <MemberSignature Language="VB.NET" Value="OFB" />
      <MemberSignature Language="C++ CLI" Value="OFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6102e-132">Im <see langword="OFB" />-Modus (Output Feedback) wird nicht der gesamte Block auf einmal verarbeitet, sondern es werden kleine Abschnitte des Klartexts schrittweise in Geheimtext umgewandelt.</span><span class="sxs-lookup"><span data-stu-id="6102e-132">The Output Feedback (<see langword="OFB" />) mode processes small increments of plain text into cipher text instead of processing an entire block at a time.</span></span> <span data-ttu-id="6102e-133">Dieser Modus ist dem <see langword="CFB" />-Modus ähnlich. Der Unterschied zwischen den beiden Modi besteht lediglich in der Art, in der das Schieberegister gefüllt wird.</span><span class="sxs-lookup"><span data-stu-id="6102e-133">This mode is similar to <see langword="CFB" />; the only difference between the two modes is the way that the shift register is filled.</span></span> <span data-ttu-id="6102e-134">Wenn ein Bit des Geheimtexts geändert wird, ändert sich auch das entsprechende Bit des Klartexts.</span><span class="sxs-lookup"><span data-stu-id="6102e-134">If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled.</span></span> <span data-ttu-id="6102e-135">Wenn jedoch Bits dem Geheimtext hinzugefügt oder aus diesem entfernt werden, wird der Klartext von diesem Punkt an geändert.</span><span class="sxs-lookup"><span data-stu-id="6102e-135">However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ECDiffieHellmanOpenSsl" FullName="System.Security.Cryptography.ECDiffieHellmanOpenSsl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="810ddf3455633933a87460764e5ffd9600051a41" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82325719" /></Metadata><TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanOpenSsl : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanOpenSsl extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanOpenSsl&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanOpenSsl sealed : System::Security::Cryptography::ECDiffieHellman" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanOpenSsl = class&#xA;    inherit ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7f072-101">Stellt eine Implementierung des von OpenSSL unterstützten ECDH (Elliptic Curve Diffie-Hellman)-Algorithmus bereit.</span><span class="sxs-lookup"><span data-stu-id="7f072-101">Provides an implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm backed by OpenSSL.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="7f072-102">Diese Klasse sollte nur direkt verwendet werden, wenn Sie Platt Form Interop mit der OpenSSL-Systembibliothek durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="7f072-102">This class should only be used directly when doing platform interop with the system OpenSSL library.</span></span> <span data-ttu-id="7f072-103">Wenn eine plattformübergreifende Interoperabilität nicht erforderlich ist, sollten Sie die <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A?displayProperty=nameWithType> Factorymethoden anstelle einer bestimmten abgeleiteten Implementierung verwenden.</span><span class="sxs-lookup"><span data-stu-id="7f072-103">When platform interop is not needed, you should use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A?displayProperty=nameWithType> factory methods instead of a specific derived implementation.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f072-104">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />-Klasse mit einer Standardkurve von NIST P-521/secp521r1.</span><span class="sxs-lookup"><span data-stu-id="7f072-104">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class with a default curve of NIST P-521/secp521r1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="7f072-105">Dieser Konstruktor generiert nicht sofort ein neues öffentliches/privates Schlüsselpaar, sondern legt lediglich die Größe fest, die zum Generieren eines Schlüssels verwendet wird, wenn ein solcher benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-105">This constructor does not generate a new public/private keypair immediately, it just sets the size which will be used to generate a key when one is needed.</span></span>
<span data-ttu-id="7f072-106">Wenn key über die <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A>-Methode oder eine andere Schlüssel Import Methode geladen wird, hat die Schlüsselgröße dieses Konstruktors keine Bedeutung.</span><span class="sxs-lookup"><span data-stu-id="7f072-106">If key is loaded via the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A> method, or other key import method, the key size from this constructor has no meaning.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.Create" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(int keySize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : int -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl keySize" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize"><span data-ttu-id="7f072-107">Die Größe des zu generierenden Schlüssels, wenn ein Schlüssel benötigt wird</span><span class="sxs-lookup"><span data-stu-id="7f072-107">The size of the key to generate, when a key is needed.</span></span></param>
        <summary><span data-ttu-id="7f072-108">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />-Klasse, die auf die NIST-Primkurve der angegebenen Größe zurückgeht.</span><span class="sxs-lookup"><span data-stu-id="7f072-108">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class defaulting to the NIST prime curve of the specified size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="7f072-109">Nur drei Schlüsselgrößen werden von diesem Konstruktor unterstützt: 256 (NIST p-256/secp256r1), 384 (NIST p-384/secp384r1) und 521 (NIST p-521/secp521r1).</span><span class="sxs-lookup"><span data-stu-id="7f072-109">Only three key sizes are supported by this constructor: 256 (NIST P-256/secp256r1), 384 (NIST P-384/secp384r1), and 521 (NIST P-521/secp521r1).</span></span>
<span data-ttu-id="7f072-110">Um Schlüssel für eine beliebige andere Kurve zu generieren, verwenden Sie den <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.%23ctor(System.Security.Cryptography.ECCurve)>-Konstruktor oder die <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)>-Methode.</span><span class="sxs-lookup"><span data-stu-id="7f072-110">To generate keys For any other curve, use the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.%23ctor(System.Security.Cryptography.ECCurve)> constructor or the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)> method.</span></span>

<span data-ttu-id="7f072-111">Dieser Konstruktor generiert nicht sofort ein neues öffentliches/privates Schlüsselpaar, sondern legt lediglich die Größe fest, die zum Generieren eines Schlüssels verwendet wird, wenn ein solcher benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-111">This constructor does not generate a new public/private keypair immediately, it just sets the size which will be used to generate a key when one is needed.</span></span>
<span data-ttu-id="7f072-112">Wenn key über die <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A>-Methode oder eine andere Schlüssel Import Methode geladen wird, hat die Schlüsselgröße dieses Konstruktors keine Bedeutung.</span><span class="sxs-lookup"><span data-stu-id="7f072-112">If key is loaded via the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A> method, or other key import method, the key size from this constructor has no meaning.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-113">Der <paramref name="keySize" />-Wert wird von dieser Implementierung nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="7f072-113">The <paramref name="keySize" /> value is not supported by this implementation.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.Create" />
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.ECCurve)" />
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(IntPtr handle);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : nativeint -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="7f072-114">Der OpenSSL-Wert <c>EC_KEY\*</c>, der als Schlüssel verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="7f072-114">The OpenSSL <c>EC_KEY\*</c> value to use as the key.</span></span></param>
        <summary><span data-ttu-id="7f072-115">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />-Klasse aus einem vorhandenen OpenSSL-Schlüssel, der als <c>EC_KEY\*</c> dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-115">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class from an existing OpenSSL key represented as an <c>EC_KEY\*</c>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
> <span data-ttu-id="7f072-116">OpenSSL unterstützt, dass mehrere Bibliotheksversionen innerhalb desselben Prozesses geladen werden.</span><span class="sxs-lookup"><span data-stu-id="7f072-116">OpenSSL supports multiple library versions being loaded within the same process.</span></span>
> <span data-ttu-id="7f072-117">Vergewissern Sie sich vor dem Aufrufen dieses Konstruktors, dass der Zeiger Wert von der gleichen OpenSSL-Version stammt, die von dieser Klasse verwendet wird. Weitere Informationen finden Sie unter <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.</span><span class="sxs-lookup"><span data-stu-id="7f072-117">Before calling this constructor verify your pointer value came from the same version of OpenSSL that this class uses, see <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion> for more information.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f072-118"><paramref name="handle" /> ist <see cref="F:System.IntPtr.Zero" /></span><span class="sxs-lookup"><span data-stu-id="7f072-118"><paramref name="handle" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-119"><paramref name="handle" /> ist für <c>EC_KEY \*</c> nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="7f072-119"><paramref name="handle" /> is not a valid <c>EC_KEY\*</c>.</span></span></exception>
        <altmember cref="P:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl curve" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="7f072-120">Die Kurve, die für das Generieren eines kurzlebigen Paars aus privatem und öffentlichem Schlüssel verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-120">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="7f072-121">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />-Klasse und generiert einen neuen Schlüssel für die angegebene Kurve.</span><span class="sxs-lookup"><span data-stu-id="7f072-121">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class and generates a new key on the specified curve.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-122"><paramref name="curve" /> führt keine Validierung durch.</span><span class="sxs-lookup"><span data-stu-id="7f072-122"><paramref name="curve" /> does not validate.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECCurve.Validate" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (System.Security.Cryptography.SafeEvpPKeyHandle pkeyHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.SafeEvpPKeyHandle pkeyHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pkeyHandle As SafeEvpPKeyHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(System::Security::Cryptography::SafeEvpPKeyHandle ^ pkeyHandle);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : System.Security.Cryptography.SafeEvpPKeyHandle -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl pkeyHandle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pkeyHandle" Type="System.Security.Cryptography.SafeEvpPKeyHandle" />
      </Parameters>
      <Docs>
        <param name="pkeyHandle"><span data-ttu-id="7f072-123">Der OpenSSL-<c>EVP_PKEY\*</c>-Wert, der als Schlüssel verwendet werden soll und als <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> dargestellt wird</span><span class="sxs-lookup"><span data-stu-id="7f072-123">The OpenSSL <c>EVP_PKEY\*</c> value to use as the key, represented as a <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" />.</span></span></param>
        <summary><span data-ttu-id="7f072-124">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />-Klasse aus einem vorhandenen OpenSSL-Schlüssel, der als <c>EVP_PKEY\*</c> dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-124">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class from an existing OpenSSL key represented as an <c>EVP_PKEY\*</c>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
> [!IMPORTANT]
> <span data-ttu-id="7f072-125">OpenSSL unterstützt, dass mehrere Bibliotheksversionen innerhalb desselben Prozesses geladen werden.</span><span class="sxs-lookup"><span data-stu-id="7f072-125">OpenSSL supports multiple library versions being loaded within the same process.</span></span>
> <span data-ttu-id="7f072-126">Vergewissern Sie sich vor dem Aufrufen dieses Konstruktors, dass der Zeiger Wert von der gleichen OpenSSL-Version stammt, die von dieser Klasse verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-126">Before calling this constructor, verify your pointer value came from the same version of OpenSSL that this class uses.</span></span>
> <span data-ttu-id="7f072-127">Weitere Informationen finden Sie unter <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.</span><span class="sxs-lookup"><span data-stu-id="7f072-127">For more information, see <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f072-128"><paramref name="pkeyHandle" /> stellt ein ungültiges Handle dar.</span><span class="sxs-lookup"><span data-stu-id="7f072-128"><paramref name="pkeyHandle" /> represents an invalid handle.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f072-129"><paramref name="pkeyHandle" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="7f072-129"><paramref name="pkeyHandle" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-130"><paramref name="pkeyHandle" /> stellt keinen Schlüssel für eine elliptische Kurve (EC) dar.</span><span class="sxs-lookup"><span data-stu-id="7f072-130"><paramref name="pkeyHandle" /> does not represent a elliptic curve (EC) key.</span></span></exception>
        <seealso cref="P:System.Security.Cryptography.SafeEvpPKeyValue.OpenSslVersion" />
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="7f072-131">Der öffentliche Schlüssel der anderen Partei.</span><span class="sxs-lookup"><span data-stu-id="7f072-131">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="7f072-132">Der Hashalgorithmus, der zum Ableiten des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="7f072-132">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="7f072-133">Ein Wert, der dem abgeleiteten geheimen Schlüssel vor dem Hashverfahren vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-133">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="7f072-134">Ein Wert, der dem abgeleiteten geheimen Schlüssel vor dem Hashverfahren angefügt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-134">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="7f072-135">Führt die Schlüsselableitung mithilfe eines angegebenen Hashalgorithmus mit optionalen vorangestellten oder angefügten Daten aus.</span><span class="sxs-lookup"><span data-stu-id="7f072-135">Performs key derivation using a specified hash algorithm with optional prepended or appended data.</span></span></summary>
        <returns><span data-ttu-id="7f072-136">Der Hash des gemeinsamen geheimen Schlüssels nach dem Voranstellen oder Anfügen von Daten wie angefordert.</span><span class="sxs-lookup"><span data-stu-id="7f072-136">The hash of the shared secret after prepending or appending data as requested.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f072-137">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve hat eine andere Größe als die Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-137">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="7f072-138">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-138">-or-</span></span>

<span data-ttu-id="7f072-139">Der <paramref name="hashAlgorithm" />-Parameter gibt keinen Hash an.</span><span class="sxs-lookup"><span data-stu-id="7f072-139">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f072-140"><paramref name="otherPartyPublicKey" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="7f072-140"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-141">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve unterscheidet sich von der Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-141">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="7f072-142">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-142">-or-</span></span>

<span data-ttu-id="7f072-143">Diese Instanz stellt nur einen öffentlichen Schlüssel dar.</span><span class="sxs-lookup"><span data-stu-id="7f072-143">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="7f072-144">Der öffentliche Schlüssel der anderen Partei.</span><span class="sxs-lookup"><span data-stu-id="7f072-144">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="7f072-145">Der Hashalgorithmus, der zum Ableiten des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="7f072-145">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="7f072-146">Der Schlüssel für den HMAC.</span><span class="sxs-lookup"><span data-stu-id="7f072-146">The key for the HMAC.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="7f072-147">Ein Wert, der dem abgeleiteten geheimen Schlüssel vor dem Hashverfahren vorangestellt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-147">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="7f072-148">Ein Wert, der dem abgeleiteten geheimen Schlüssel vor dem Hashverfahren angefügt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-148">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="7f072-149">Führt die Schlüsselableitung mithilfe eines angegebenen HMAC-Algorithmus (Hash-based Message Authentication Code, Hash-Nachrichtenauthentifizierungscode) mit optionalen vorangestellten oder angefügten Daten aus.</span><span class="sxs-lookup"><span data-stu-id="7f072-149">Performs key derivation using a specified HMAC (Hash-based Message Authentication Code) algorithm with optional prepended or appended data.</span></span></summary>
        <returns><span data-ttu-id="7f072-150">Der HMAC des gemeinsamen geheimen Schlüssels nach dem Voranstellen oder Anfügen von Daten wie angefordert.</span><span class="sxs-lookup"><span data-stu-id="7f072-150">The HMAC of the shared secret after prepending or appending data as requested.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f072-151">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve hat eine andere Größe als die Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-151">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="7f072-152">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-152">-or-</span></span>

<span data-ttu-id="7f072-153">Der <paramref name="hashAlgorithm" />-Parameter gibt keinen Hash an.</span><span class="sxs-lookup"><span data-stu-id="7f072-153">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f072-154"><paramref name="otherPartyPublicKey" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="7f072-154"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-155">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve unterscheidet sich von der Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-155">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="7f072-156">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-156">-or-</span></span>

<span data-ttu-id="7f072-157">Diese Instanz stellt nur einen öffentlichen Schlüssel dar.</span><span class="sxs-lookup"><span data-stu-id="7f072-157">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="7f072-158">Der öffentliche Schlüssel der anderen Partei.</span><span class="sxs-lookup"><span data-stu-id="7f072-158">The other party's public key.</span></span></param>
        <summary><span data-ttu-id="7f072-159">Führt eine Schlüsselableitung für den gemeinsamen geheimen Schlüssel aus.</span><span class="sxs-lookup"><span data-stu-id="7f072-159">Performs a key derivation on the shared secret.</span></span></summary>
        <returns><span data-ttu-id="7f072-160">Der SHA-256-Hash des gemeinsamen geheimen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="7f072-160">The SHA-256 hash of the shared secret.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f072-161">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve hat eine andere Größe als die Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-161">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f072-162"><paramref name="otherPartyPublicKey" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="7f072-162"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-163">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve unterscheidet sich von der Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-163">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="7f072-164">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-164">-or-</span></span>

<span data-ttu-id="7f072-165">Diese Instanz stellt nur einen öffentlichen Schlüssel dar.</span><span class="sxs-lookup"><span data-stu-id="7f072-165">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="7f072-166">Der öffentliche Schlüssel der anderen Partei.</span><span class="sxs-lookup"><span data-stu-id="7f072-166">The other party's public key.</span></span></param>
        <param name="prfLabel"><span data-ttu-id="7f072-167">Die ASCII-codierte PRF-Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="7f072-167">The ASCII-encoded PRF label.</span></span></param>
        <param name="prfSeed"><span data-ttu-id="7f072-168">Der 64-Byte-PRF-Startwert.</span><span class="sxs-lookup"><span data-stu-id="7f072-168">The 64-byte PRF seed.</span></span></param>
        <summary><span data-ttu-id="7f072-169">Führt eine Schlüsselableitung mithilfe der Pseudozufallsfunktion von TLS 1.1 (Transport Layer Security) durch.</span><span class="sxs-lookup"><span data-stu-id="7f072-169">Performs key derivation using the TLS (Transport Layer Security) 1.1 PRF (Pseudo-Random Function).</span></span></summary>
        <returns><span data-ttu-id="7f072-170">Die ersten 48 Bytes der Pseudozufallsfunktion von TLS 1.1, wobei der gemeinsame geheime Schlüssel als Schlüssel verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-170">The first 48 bytes from the TLS 1.1 PRF, using the shared secret as the key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="7f072-171">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="7f072-171">A derived class must override this method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f072-172">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve hat eine andere Größe als die Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-172">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f072-173"><paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> oder <paramref name="prfSeed" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7f072-173"><paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> or <paramref name="prfSeed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-174"><paramref name="prfSeed" /> ist nicht genau 64 Bytes lang.</span><span class="sxs-lookup"><span data-stu-id="7f072-174"><paramref name="prfSeed" /> is not exactly 64 bytes in length.</span></span>

<span data-ttu-id="7f072-175">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-175">-or-</span></span>

<span data-ttu-id="7f072-176">Die von <paramref name="otherPartyPublicKey" /> verwendete Kurve unterscheidet sich von der Kurve aus diesem Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="7f072-176">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="7f072-177">Oder</span><span class="sxs-lookup"><span data-stu-id="7f072-177">-or-</span></span>

<span data-ttu-id="7f072-178">Diese Instanz stellt nur einen öffentlichen Schlüssel dar.</span><span class="sxs-lookup"><span data-stu-id="7f072-178">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DuplicateKeyHandle">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.SafeEvpPKeyHandle DuplicateKeyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.SafeEvpPKeyHandle DuplicateKeyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DuplicateKeyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateKeyHandle () As SafeEvpPKeyHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::SafeEvpPKeyHandle ^ DuplicateKeyHandle();" />
      <MemberSignature Language="F#" Value="member this.DuplicateKeyHandle : unit -&gt; System.Security.Cryptography.SafeEvpPKeyHandle" Usage="eCDiffieHellmanOpenSsl.DuplicateKeyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SafeEvpPKeyHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f072-179">Ruft eine <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" />-Darstellung des kryptografischen Schlüssels ab.</span><span class="sxs-lookup"><span data-stu-id="7f072-179">Gets a <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> representation of the cryptographic key.</span></span></summary>
        <returns><span data-ttu-id="7f072-180">Eine <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" />-Darstellung des kryptografischen Werts.</span><span class="sxs-lookup"><span data-stu-id="7f072-180">A <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> representation of the cryptographic key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="7f072-181">Jeder Aufrufe dieser Methode erzeugt ein neues <xref:System.Security.Cryptography.SafeEvpPKeyHandle>-Objekt mit seiner eigenen Lebensdauer.</span><span class="sxs-lookup"><span data-stu-id="7f072-181">Each call to this method produces a new <xref:System.Security.Cryptography.SafeEvpPKeyHandle> object with its own lifetime.</span></span>
<span data-ttu-id="7f072-182">Die von dieser Methode zurückgegebenen Objekte können auch dann sicher verwendet werden, wenn diese <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl> Instanz verworfen wurde.</span><span class="sxs-lookup"><span data-stu-id="7f072-182">The objects returned by this method can safely be used even after this <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl> instance has been disposed.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanOpenSsl.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="7f072-183"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7f072-183"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7f072-184">Exportiert Informationen zum öffentlichen oder zum öffentlichen und privaten Schlüssel unter Verwendung der expliziten Kurvenform in eine <see cref="T:System.Security.Cryptography.ECParameters" />-Struktur, damit sie an die <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />-Methode übergeben werden können.</span><span class="sxs-lookup"><span data-stu-id="7f072-184">Exports either the public or the public and private key information using the explicit curve form from the current key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7f072-185">Ein Objekt, das unter Verwendung des expliziten Kurvenformats den Punkt auf der Kurve für diesen Schlüssel darstellt.</span><span class="sxs-lookup"><span data-stu-id="7f072-185">An object that represents the point on the curve for this key, using the explicit curve format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-186">Die Methode kann keine Kurvenwerte abrufen.</span><span class="sxs-lookup"><span data-stu-id="7f072-186">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanOpenSsl.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="7f072-187"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7f072-187"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7f072-188">Exportiert den vom <see cref="T:System.Security.Cryptography.ECCurve" />-Objekt verwendeten Schlüssel in ein <see cref="T:System.Security.Cryptography.ECParameters" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="7f072-188">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="7f072-189">Die Schlüssel- und die benannten Kurvenparameter, die vom <see cref="T:System.Security.Cryptography.ECCurve" />-Objekt verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="7f072-189">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f072-190">Wenn der Schlüssel als benannte Kurve erstellt wurde, enthält das <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> Feld benannte Kurven Parameter. Andernfalls enthält Sie explizite Parameter.</span><span class="sxs-lookup"><span data-stu-id="7f072-190">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters; otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-191">Die Methode kann keine Kurvenwerte abrufen.</span><span class="sxs-lookup"><span data-stu-id="7f072-191">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellmanOpenSsl.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="7f072-192">Die Kurve, die für das Generieren eines kurzlebigen Paars aus privatem und öffentlichem Schlüssel verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-192">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="7f072-193">Generiert ein neues kurzlebiges Paar aus privatem und öffentlichem Schlüssel für die angegebene Kurve.</span><span class="sxs-lookup"><span data-stu-id="7f072-193">Generates a new ephemeral public/private key pair for the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f072-194">`curve` müssen validieren (d. h., er muss true zurückgeben, wenn er an die <xref:System.Security.Cryptography.ECCurve.Validate?displayProperty=nameWithType>-Methode übermittelt wird) und darf nicht implizit sein.</span><span class="sxs-lookup"><span data-stu-id="7f072-194">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-195"><paramref name="curve" /> führt keine Validierung durch.</span><span class="sxs-lookup"><span data-stu-id="7f072-195"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellmanOpenSsl.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="7f072-196">Die zu importierenden Parameter der Kurve.</span><span class="sxs-lookup"><span data-stu-id="7f072-196">The curve's parameters to import.</span></span></param>
        <summary><span data-ttu-id="7f072-197">Importiert die angegebenen Parameter für ein <see cref="T:System.Security.Cryptography.ECCurve" />-Objekt als Schlüssel in die Kurveninstanz.</span><span class="sxs-lookup"><span data-stu-id="7f072-197">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f072-198">Die <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A>-Methode ersetzt den vorhandenen Schlüssel, mit dem dieses Objekt arbeitet, indem ein neues <xref:System.Security.Cryptography.CngKey>-Objekt erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-198">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="7f072-199">Wenn `parameters` nur das <xref:System.Security.Cryptography.ECParameters.Q> Feld enthält, wird nur ein öffentlicher Schlüssel importiert.</span><span class="sxs-lookup"><span data-stu-id="7f072-199">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="7f072-200">Wenn `parameters` auch <xref:System.Security.Cryptography.ECParameters.D>enthält, wird ein vollständiges Schlüsselpaar importiert.</span><span class="sxs-lookup"><span data-stu-id="7f072-200">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="7f072-201">Der `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> Wert gibt den Typ der zu importierenden Kurve an.</span><span class="sxs-lookup"><span data-stu-id="7f072-201">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="7f072-202"><paramref name="parameters" /> führt keine Validierung durch.</span><span class="sxs-lookup"><span data-stu-id="7f072-202"><paramref name="parameters" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7f072-203"><paramref name="parameters" /> verweist auf eine Kurve, die nicht importiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="7f072-203"><paramref name="parameters" /> references a curve that cannot be imported.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7f072-204"><paramref name="parameters" /> verweist auf eine Kurve, die von dieser Plattform nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="7f072-204"><paramref name="parameters" /> references a curve that is not supported by this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanOpenSsl.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellmanOpenSsl.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f072-205">Ruft den öffentlichen Schlüssel ab, der von einem anderen <see cref="T:System.Security.Cryptography.ECDiffieHellman" />-Objekt zum Generieren eines gemeinsamen Geheimvertrags verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="7f072-205">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> object to generate a shared secret agreement.</span></span></summary>
        <value><span data-ttu-id="7f072-206">Der öffentliche Schlüssel, der dieser Instanz des <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />-Objekts zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="7f072-206">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

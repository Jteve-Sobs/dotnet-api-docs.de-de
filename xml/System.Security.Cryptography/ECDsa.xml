<Type Name="ECDsa" FullName="System.Security.Cryptography.ECDsa">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53ff4f656cba17ecb9dc914ebbc80bad64799ba0" /><Meta Name="ms.sourcegitcommit" Value="33529b5cc32683b91d3422992fb4dc422f85782b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/17/2020" /><Meta Name="ms.locfileid" Value="88267242" /></Metadata><TypeSignature Language="C#" Value="public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ECDsa extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDsa" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ECDsa&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDsa abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <TypeSignature Language="F#" Value="type ECDsa = class&#xA;    inherit AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ef348-101">Stellt eine abstrakte Basisklasse, die den ECDSA (Elliptic Curve Digital Signature Algorithm) kapselt.</span><span class="sxs-lookup"><span data-stu-id="ef348-101">Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-102">Diese Klasse dient als abstrakte Basisklasse für <xref:System.Security.Cryptography.ECDsaCng> Ableitungen.</span><span class="sxs-lookup"><span data-stu-id="ef348-102">This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ECDsa ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ECDsa();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef348-103">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.ECDsa" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="ef348-103">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsa" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-104">Dieser Konstruktor wird von Klassen aufgerufen, die von der-Klasse abgeleitet werden <xref:System.Security.Cryptography.ECDsa> .</span><span class="sxs-lookup"><span data-stu-id="ef348-104">This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class.</span></span> <span data-ttu-id="ef348-105">Die- <xref:System.Security.Cryptography.ECDsaCng> Klasse ist die einzige Implementierung, die derzeit von unterstützt wird [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="ef348-105">The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="ef348-106">Sie können eine eigene benutzerdefinierte-Implementierung bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-106">You may provide your own custom implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ef348-107">Erstellt eine neue Instanz einer Implementierung des ECDSA (Elliptic Curve Digital Signature Algorithm).</span><span class="sxs-lookup"><span data-stu-id="ef348-107">Creates a new instance of an implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.ECDsa" Usage="System.Security.Cryptography.ECDsa.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef348-108">Erstellt eine neue Instanz der Standardimplementierung des ECDSA (Elliptic Curve Digital Signature Algorithm).</span><span class="sxs-lookup"><span data-stu-id="ef348-108">Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</span></span></summary>
        <returns><span data-ttu-id="ef348-109">Eine neue Instanz der Standardimplementierung (<see cref="T:System.Security.Cryptography.ECDsaCng" />) dieser Klasse.</span><span class="sxs-lookup"><span data-stu-id="ef348-109">A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (curve As ECCurve) As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDsa" Usage="System.Security.Cryptography.ECDsa.Create curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="ef348-110">Die Kurve für die Schlüsselgenerierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-110">The curve to use for key generation.</span></span></param>
        <summary><span data-ttu-id="ef348-111">Erstellt eine neue Instanz der ECDSA-Standardimplementierung (Elliptic Curve Digital Signature Algorithm) mit einem neu generierten Schlüssel über der angegebenen Kurve.</span><span class="sxs-lookup"><span data-stu-id="ef348-111">Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.</span></span></summary>
        <returns><span data-ttu-id="ef348-112">Eine neue Instanz der Standardimplementierung (<see cref="T:System.Security.Cryptography.ECDsaCng" />) dieser Klasse.</span><span class="sxs-lookup"><span data-stu-id="ef348-112">A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As ECParameters) As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.ECParameters -&gt; System.Security.Cryptography.ECDsa" Usage="System.Security.Cryptography.ECDsa.Create parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="ef348-113">Die Parameter, die den zu verwendenden Schlüssel darstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-113">The parameters representing the key to use.</span></span></param>
        <summary><span data-ttu-id="ef348-114">Erstellt eine neue Instanz der ECDSA-Standardimplementierung (Elliptic Curve Digital Signature Algorithm) mit den angegebenen Parametern als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="ef348-114">Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.</span></span></summary>
        <returns><span data-ttu-id="ef348-115">Eine neue Instanz der Standardimplementierung (<see cref="T:System.Security.Cryptography.ECDsaCng" />) dieser Klasse.</span><span class="sxs-lookup"><span data-stu-id="ef348-115">A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa? Create (string algorithm);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algorithm As String) As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.ECDsa" Usage="System.Security.Cryptography.ECDsa.Create algorithm" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create (string algorithm);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="ef348-116">Der Name einer ECDSA-Implementierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-116">The name of an ECDSA implementation.</span></span> <span data-ttu-id="ef348-117">Die folgenden Zeichenfolgen verweisen alle auf dieselbe Implementierung, bei der es sich um die einzige aktuell in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] unterstützte Implementierung handelt:</span><span class="sxs-lookup"><span data-stu-id="ef348-117">The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:</span></span> 
<span data-ttu-id="ef348-118">- "ECDsa"</span><span class="sxs-lookup"><span data-stu-id="ef348-118">- "ECDsa"</span></span> 
<span data-ttu-id="ef348-119">- "ECDsaCng"</span><span class="sxs-lookup"><span data-stu-id="ef348-119">- "ECDsaCng"</span></span> 
<span data-ttu-id="ef348-120">- "System.Security.Cryptography.ECDsaCng"</span><span class="sxs-lookup"><span data-stu-id="ef348-120">- "System.Security.Cryptography.ECDsaCng"</span></span> 
<span data-ttu-id="ef348-121">Sie können zudem den Namen einer benutzerdefinierten ECDSA-Implementierung bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-121">You can also provide the name of a custom ECDSA implementation.</span></span></param>
        <summary><span data-ttu-id="ef348-122">Erstellt eine neue Instanz der angegebenen Implementierung des ECDSA (Elliptic Curve Digital Signature Algorithm).</span><span class="sxs-lookup"><span data-stu-id="ef348-122">Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</span></span></summary>
        <returns><span data-ttu-id="ef348-123">Eine neue Instanz der angegebenen Implementierung dieser Klasse.</span><span class="sxs-lookup"><span data-stu-id="ef348-123">A new instance of the specified implementation of this class.</span></span> <span data-ttu-id="ef348-124">Wenn der angegebene Algorithmusname keiner ECDSA-Implementierung zugeordnet werden kann, gibt diese Methode <see langword="null" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="ef348-124">If the specified algorithm name does not map to an ECDSA implementation, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-125">Wenn Sie Ihre eigene Implementierung eines Objekts entwickeln <xref:System.Security.Cryptography.ECDsa> , können Sie die- <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> Methoden Überladung verwenden, um eine benutzerdefinierte `algorithm` Zeichenfolge zu erstellen, die ihre Implementierung angibt.</span><span class="sxs-lookup"><span data-stu-id="ef348-125">If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.</span></span>  
  
 <span data-ttu-id="ef348-126">Wenn Sie einen benutzerdefinierten Wert für den `algorithm` Parameter angeben, <xref:System.Security.Cryptography.CryptoConfig> wird er vom Objekt verwendet, um zu bestimmen, ob ein ECDSA-Objekt erstellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="ef348-126">If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-127">Der <paramref name="algorithm" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-127">The <paramref name="algorithm" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportECPrivateKey">
      <MemberSignature Language="C#" Value="public virtual byte[] ExportECPrivateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ExportECPrivateKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportECPrivateKey () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ ExportECPrivateKey();" />
      <MemberSignature Language="F#" Value="abstract member ExportECPrivateKey : unit -&gt; byte[]&#xA;override this.ExportECPrivateKey : unit -&gt; byte[]" Usage="eCDsa.ExportECPrivateKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef348-128">Exportiert den aktuellen Schlüssel im ECPrivateKey-Format.</span><span class="sxs-lookup"><span data-stu-id="ef348-128">Exports the current key in the ECPrivateKey format.</span></span></summary>
        <returns><span data-ttu-id="ef348-129">Ein Bytearray mit der ECPrivateKey-Darstellung dieses Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-129">A byte array containing the ECPrivateKey representation of this key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-130">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-130">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.ECDsa.TryExportECPrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters&#xA;override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDsa.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="ef348-131"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-131"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ef348-132">Exportiert beim Überschreiben in einer abgeleiteten Klasse die expliziten Parameter für eine elliptische Kurve.</span><span class="sxs-lookup"><span data-stu-id="ef348-132">When overridden in a derived class, exports the explicit parameters for an elliptic curve.</span></span></summary>
        <returns><span data-ttu-id="ef348-133">Die Parameter, die unter Verwendung des expliziten Kurvenformats den Punkt auf der Kurve für diesen Schlüssel darstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-133">The parameters representing the point on the curve for this key, using the explicit curve format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ef348-134">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ef348-134">A derived class must override this method.</span></span></exception>
        <altmember cref="T:System.Security.Cryptography.ECCurve" />
        <altmember cref="T:System.Security.Cryptography.ECParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters&#xA;override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDsa.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="ef348-135"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-135"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ef348-136">Exportiert beim Überschreiben in einer abgeleiteten Klasse die benannten oder expliziten Parameter für eine elliptische Kurve.</span><span class="sxs-lookup"><span data-stu-id="ef348-136">When overridden in a derived class, exports the named or explicit parameters for an elliptic curve.</span></span> <span data-ttu-id="ef348-137">Wenn die Kurve einen Namen hat, enthält das Feld <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> benannte Kurvenparameter, andernfalls enthält sie explizite Parameter.</span><span class="sxs-lookup"><span data-stu-id="ef348-137">If the curve has a name, the <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> field contains named curve parameters, otherwise it         contains explicit parameters.</span></span></summary>
        <returns><span data-ttu-id="ef348-138">Die Parameter, die den Punkt auf der Kurve für diesen Schlüssel darstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-138">The parameters representing the point on the curve for this key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ef348-139">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ef348-139">A derived class must override this method.</span></span></exception>
        <altmember cref="T:System.Security.Cryptography.ECCurve" />
        <altmember cref="T:System.Security.Cryptography.ECParameters" />
        <altmember cref="F:System.Security.Cryptography.ECParameters.Curve" />
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string -&gt; unit" Usage="eCDsa.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="ef348-140">Die XML-Zeichenfolge zur Wiederherstellung des <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />-Objekts.</span><span class="sxs-lookup"><span data-stu-id="ef348-140">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</span></span></param>
        <summary><span data-ttu-id="ef348-141">Diese Methode löst in allen Fällen aus.</span><span class="sxs-lookup"><span data-stu-id="ef348-141">This method throws in all cases.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="ef348-142">In allen Fällen.</span><span class="sxs-lookup"><span data-stu-id="ef348-142">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="abstract member GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit&#xA;override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDsa.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="ef348-143">Die Kurve zum Generieren des Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-143">The curve to use to generate the key.</span></span></param>
        <summary><span data-ttu-id="ef348-144">Generiert beim Überschreiben in einer abgeleiteten Klasse ein neues kurzlebiges Paar aus privatem und öffentlichem Schlüssel für die angegebene Kurve, wobei der aktuelle Schlüssel ersetzt wird</span><span class="sxs-lookup"><span data-stu-id="ef348-144">When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve, replacing the current key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ef348-145">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ef348-145">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMaxSignatureSize">
      <MemberSignature Language="C#" Value="public int GetMaxSignatureSize (System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetMaxSignatureSize(valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMaxSignatureSize (signatureFormat As DSASignatureFormat) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetMaxSignatureSize(System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.GetMaxSignatureSize : System.Security.Cryptography.DSASignatureFormat -&gt; int" Usage="eCDsa.GetMaxSignatureSize signatureFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="signatureFormat"><span data-ttu-id="ef348-146">Das Codierungsformat für eine Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-146">The encoding format for a signature.</span></span></param>
        <summary><span data-ttu-id="ef348-147">Ruft die größte Größe (in Bytes) für eine Signatur ab, die von diesem Schlüssel im angegeben Format generiert wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-147">Gets the largest size, in bytes, for a signature produced by this key in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="ef348-148">Die größte Größe (in Bytes) für eine Signatur, die von diesem Schlüssel im angegeben Format generiert wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-148">The largest size, in bytes, for a signature produced by this key in the indicated format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-149"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-149"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="HashData">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ef348-150">Berechnet den Hashwert von Binärdaten.</span><span class="sxs-lookup"><span data-stu-id="ef348-150">Computes the hash value of binary data.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.HashData (data, hashAlgorithm)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HashData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ HashData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="F#" Value="abstract member HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.HashData (data, hashAlgorithm)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-151">Der binäre Datenstrom, für den der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-151">The binary stream to hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-152">Der Algorithmus, der zum Bestimmen des Hashwerts der Daten verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-152">The algorithm to use to hash the data.</span></span></param>
        <summary><span data-ttu-id="ef348-153">Berechnet, falls in einer abgeleiteten Klasse überschrieben, den Hashwert des angegebenen Binärdatenstroms mithilfe des angegebenen Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-153">When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-154">Die Daten, für die der Hashwert berechnet wurde.</span><span class="sxs-lookup"><span data-stu-id="ef348-154">The hashed data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="ef348-155">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ef348-155">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.HashData (data, offset, count, hashAlgorithm)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HashData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ HashData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="F#" Value="abstract member HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.HashData (data, offset, count, hashAlgorithm)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.4;netstandard-1.6" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-156">Die Daten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-156">The data to be hashed.</span></span></param>
        <param name="offset"><span data-ttu-id="ef348-157">Der Index des ersten Bytes in <paramref name="data" />, für das der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-157">The index of the first byte in <paramref name="data" /> to be hashed.</span></span></param>
        <param name="count"><span data-ttu-id="ef348-158">Die Anzahl der Bytes, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-158">The number of bytes to hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-159">Der Algorithmus, der zum Bestimmen des Hashwerts der Daten verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-159">The algorithm to use to hash the data.</span></span></param>
        <summary><span data-ttu-id="ef348-160">Berechnet, falls in einer abgeleiteten Klasse überschrieben, den Hashwert des angegebenen Teils eines Bytearrays mithilfe des angegebenen Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-160">When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-161">Die Daten, für die der Hashwert berechnet wurde.</span><span class="sxs-lookup"><span data-stu-id="ef348-161">The hashed data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="ef348-162">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ef348-162">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportECPrivateKey">
      <MemberSignature Language="C#" Value="public virtual void ImportECPrivateKey (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportECPrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportECPrivateKey (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportECPrivateKey(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="abstract member ImportECPrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit&#xA;override this.ImportECPrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDsa.ImportECPrivateKey (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ef348-163">Die Bytes einer ECPrivateKey-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-163">The bytes of an ECPrivateKey structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="ef348-164">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-164">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="ef348-165">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-165">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-166">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer ECPrivateKey-Struktur und ersetzt dabei die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-166">Imports the public/private keypair from an ECPrivateKey structure, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-167">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von ecprivatekey.</span><span class="sxs-lookup"><span data-stu-id="ef348-167">This method only supports the binary (BER/CER/DER) encoding of ECPrivateKey.</span></span>
<span data-ttu-id="ef348-168">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-168">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-169">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-ECPrivateKey-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-169">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 ECPrivateKey structure.</span></span>

<span data-ttu-id="ef348-170">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-170">-or-</span></span>

<span data-ttu-id="ef348-171">Fehler beim Schlüsselimport.</span><span class="sxs-lookup"><span data-stu-id="ef348-171">The key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDsa.ImportEncryptedPkcs8PrivateKey (passwordBytes, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="ef348-172">Die Bytes, die als Kennwort bei der Entschlüsselung des Schlüsselmaterials verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-172">The bytes to use as a password when decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="ef348-173">Die Bytes einer PKCS#8-EncryptedPrivateKeyInfo-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-173">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="ef348-174">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-174">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="ef348-175">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-175">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-176">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer PKCS#8-EncryptedPrivateKeyInfo-Struktur nach der Entschlüsselung mit einem bytebasierten Kennwort und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-176">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a byte-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-177">Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die vom Algorithmus verwendet wird, der durch den verschlüsseltedprivatekeyinfo-Inhalt angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-177">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by the EncryptedPrivateKeyInfo contents.</span></span>
<span data-ttu-id="ef348-178">Dadurch wird die Kompatibilität mit anderen Systemen ermöglicht, bei denen bei der Verarbeitung von Kenn Wörtern mit PBKDF2 eine andere Text Codierung als UTF-8 verwendet wird (Kenn Wort basierte Schlüssel abderivations Funktion 2).</span><span class="sxs-lookup"><span data-stu-id="ef348-178">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
<span data-ttu-id="ef348-179">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von "verschlüsseltedprivatekeyinfo".</span><span class="sxs-lookup"><span data-stu-id="ef348-179">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="ef348-180">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-180">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-181">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="ef348-181">The password is incorrect.</span></span>

<span data-ttu-id="ef348-182">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-182">-or-</span></span>

<span data-ttu-id="ef348-183">Der Inhalt von <paramref name="source" /> gibt an, dass die anzuwendende Schlüsselableitungsfunktion die Legacy-PKCS#12-KDF ist, die <see cref="T:System.Char" />-basierte Kennwörter erfordert.</span><span class="sxs-lookup"><span data-stu-id="ef348-183">The contents of <paramref name="source" /> indicate the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</span></span>

<span data-ttu-id="ef348-184">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-184">-or-</span></span>

<span data-ttu-id="ef348-185">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-185">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="ef348-186">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-186">-or-</span></span>

<span data-ttu-id="ef348-187">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="ef348-187">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="ef348-188">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-188">-or-</span></span>

<span data-ttu-id="ef348-189">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-189">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="ef348-190">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-190">-or-</span></span>

<span data-ttu-id="ef348-191">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-191">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDsa.ImportEncryptedPkcs8PrivateKey (password, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="ef348-192">Das Kennwort, das bei der Entschlüsselung des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-192">The password to use for decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="ef348-193">Die Bytes einer PKCS#8-EncryptedPrivateKeyInfo-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-193">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="ef348-194">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-194">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="ef348-195">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-195">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-196">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer PKCS#8-EncryptedPrivateKeyInfo-Struktur nach der Entschlüsselung mit einem zeichenbasierten Kennwort und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-196">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a char-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-197">Wenn der Inhalt von `source` einen Algorithmus angibt, der PBKDF1 (Kenn Wort basierte Schlüssel abderivations Funktion 1) oder PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.</span><span class="sxs-lookup"><span data-stu-id="ef348-197">When the contents of `source` indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
<span data-ttu-id="ef348-198">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von "verschlüsseltedprivatekeyinfo".</span><span class="sxs-lookup"><span data-stu-id="ef348-198">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="ef348-199">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-199">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-200">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="ef348-200">The password is incorrect.</span></span>

<span data-ttu-id="ef348-201">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-201">-or-</span></span>

<span data-ttu-id="ef348-202">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-202">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="ef348-203">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-203">-or-</span></span>

<span data-ttu-id="ef348-204">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="ef348-204">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="ef348-205">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-205">-or-</span></span>

<span data-ttu-id="ef348-206">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-206">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="ef348-207">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-207">-or-</span></span>

<span data-ttu-id="ef348-208">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-208">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;byte&gt; passwordBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), passwordBytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;System::Byte&gt; passwordBytes);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="eCDsa.ImportFromEncryptedPem (input, passwordBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="ef348-209">Der PEM-Text des verschlüsselten Schlüssels, der importiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-209">The PEM text of the encrypted key to import.</span></span></param>
        <param name="passwordBytes"><span data-ttu-id="ef348-210">Die Bytes, die als Kennwort bei der Entschlüsselung des Schlüsselmaterials verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-210">The bytes to use as a password when decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="ef348-211">Importiert einen verschlüsselten, mit RFC 7468 PEM-codierten privaten Schlüssel und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-211">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="ef348-212">Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die von dem durch angegeben Algorithmus verwendet werden `pbeParameters` .</span><span class="sxs-lookup"><span data-stu-id="ef348-212">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span> <span data-ttu-id="ef348-213">Dies ermöglicht die Kompatibilität mit anderen Systemen, die eine andere Text Codierung als UTF-8 verwenden, wenn Kenn Wörter mit PBKDF2 verarbeitet werden (Kenn Wort basierte Schlüssel abderivations Funktion 2).</span><span class="sxs-lookup"><span data-stu-id="ef348-213">This enables compatibility with other systems that use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 

 <span data-ttu-id="ef348-214">Nicht unterstützte oder falsch formatierte PEM-codierte Objekte werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="ef348-214">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="ef348-215">Wenn mehrere unterstützte PEM-Bezeichnungen gefunden werden, wird eine Ausnahme ausgelöst, um das Importieren eines Schlüssels zu verhindern, wenn der Schlüssel mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-215">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="ef348-216">Diese Methode unterstützt die `ENCRYPTED PRIVATE KEY` PEM-Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-216">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-217"><paramref name="input" /> enthält keinen PEM-codierten Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-217"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="ef348-218">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-218">-or-</span></span>

<span data-ttu-id="ef348-219"><paramref name="input" /> enthält mehrere PEM-codierte Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-219"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-220">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="ef348-220">The password is incorrect.</span></span>

<span data-ttu-id="ef348-221">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-221">-or-</span></span> 
<span data-ttu-id="ef348-222">Der Base-64-decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt keine ASN.1-BER-codierte PKCS#8 EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-222">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="ef348-223">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-223">-or-</span></span>

<span data-ttu-id="ef348-224">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="ef348-224">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="ef348-225">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-225">-or-</span></span>

<span data-ttu-id="ef348-226">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-226">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="ef348-227">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-227">-or-</span></span>

<span data-ttu-id="ef348-228">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-228">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), password As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="eCDsa.ImportFromEncryptedPem (input, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="ef348-229">Der PEM-Text des verschlüsselten Schlüssels, der importiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-229">The PEM text of the encrypted key to import.</span></span></param>
        <param name="password"><span data-ttu-id="ef348-230">Das Kennwort, das bei der Entschlüsselung des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-230">The password to use for decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="ef348-231">Importiert einen verschlüsselten, mit RFC 7468 PEM-codierten privaten Schlüssel und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-231">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="ef348-232">Wenn der von Base-64 decodierte Inhalt von `input` einen Algorithmus angibt, der PBKDF1 (Kenn Wort basierte Schlüssel abzurufende Funktion 1) oder PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.</span><span class="sxs-lookup"><span data-stu-id="ef348-232">When the base-64 decoded contents of `input` indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
 

 <span data-ttu-id="ef348-233">Nicht unterstützte oder falsch formatierte PEM-codierte Objekte werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="ef348-233">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="ef348-234">Wenn mehrere unterstützte PEM-Bezeichnungen gefunden werden, wird eine Ausnahme ausgelöst, um das Importieren eines Schlüssels zu verhindern, wenn der Schlüssel mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-234">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="ef348-235">Diese Methode unterstützt die `ENCRYPTED PRIVATE KEY` PEM-Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-235">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-236"><paramref name="input" /> enthält keinen PEM-codierten Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-236"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="ef348-237">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-237">-or-</span></span>

<span data-ttu-id="ef348-238"><paramref name="input" /> enthält mehrere PEM-codierte Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-238"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-239">Das Kennwort ist falsch.</span><span class="sxs-lookup"><span data-stu-id="ef348-239">The password is incorrect.</span></span>

<span data-ttu-id="ef348-240">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-240">-or-</span></span>

<span data-ttu-id="ef348-241">Der Base-64-decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt keine ASN.1-BER-codierte PKCS#8 EncryptedPrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-241">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="ef348-242">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-242">-or-</span></span>

<span data-ttu-id="ef348-243">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="ef348-243">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="ef348-244">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-244">-or-</span></span>

<span data-ttu-id="ef348-245">Der Base-64 decodierte Inhalt des PEM-Texts aus <paramref name="input" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-245">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="ef348-246">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-246">-or-</span></span>

<span data-ttu-id="ef348-247">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-247">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromPem">
      <MemberSignature Language="C#" Value="public override void ImportFromPem (ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportFromPem(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromPem (input As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromPem(ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="F#" Value="override this.ImportFromPem : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="eCDsa.ImportFromPem input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="ef348-248">Der PEM-Text des Schlüssels, der importiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-248">The PEM text of the key to import.</span></span></param>
        <summary><span data-ttu-id="ef348-249">Importiert einen mit RFC 7468 PEM-codierten Schlüssel und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-249">Imports an RFC 7468 PEM-encoded key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="ef348-250">Nicht unterstützte oder falsch formatierte PEM-codierte Objekte werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="ef348-250">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="ef348-251">Wenn mehrere unterstützte PEM-Bezeichnungen gefunden werden, wird eine Ausnahme ausgelöst, um das Importieren eines Schlüssels zu verhindern, wenn der Schlüssel mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-251">If multiple supported PEM labels are found, an exception is raised to prevent importing a key when the key is ambiguous.</span></span>
 

 <span data-ttu-id="ef348-252">Diese Methode unterstützt die folgenden PEM-Bezeichnungen:  </span><span class="sxs-lookup"><span data-stu-id="ef348-252">This method supports the following PEM labels:  </span></span><list type="bullet"><item><description><span data-ttu-id="ef348-253">ÖFFENTLICHER SCHLÜSSEL</span><span class="sxs-lookup"><span data-stu-id="ef348-253">PUBLIC KEY</span></span></description></item><item><description><span data-ttu-id="ef348-254">privater Schlüssel</span><span class="sxs-lookup"><span data-stu-id="ef348-254">PRIVATE KEY</span></span></description></item><item><description><span data-ttu-id="ef348-255">privater Schlüssel für EC</span><span class="sxs-lookup"><span data-stu-id="ef348-255">EC PRIVATE KEY</span></span></description></item></list>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-256"><paramref name="input" /> enthält keinen PEM-codierten Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-256"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="ef348-257">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-257">-or-</span></span>

<span data-ttu-id="ef348-258"><paramref name="input" /> enthält mehrere PEM-codierte Schlüssel mit einer erkannten Bezeichnung.</span><span class="sxs-lookup"><span data-stu-id="ef348-258"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span>

<span data-ttu-id="ef348-259">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-259">-or-</span></span>

<span data-ttu-id="ef348-260"><paramref name="input" /> enthält einen verschlüsselten PEM-codierten Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="ef348-260"><paramref name="input" /> contains an encrypted PEM-encoded key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="abstract member ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit&#xA;override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDsa.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="ef348-261">Die Kurvenparameter.</span><span class="sxs-lookup"><span data-stu-id="ef348-261">The curve parameters.</span></span></param>
        <summary><span data-ttu-id="ef348-262">Importiert beim Überschreiben in einer abgeleiteten Klasse die angegebenen Parameter.</span><span class="sxs-lookup"><span data-stu-id="ef348-262">When overridden in a derived class, imports the specified parameters.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ef348-263">Eine abgeleitete Klasse muss diese Methode überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ef348-263">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportPkcs8PrivateKey (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDsa.ImportPkcs8PrivateKey (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ef348-264">Die Bytes einer PKCS#8-PrivateKeyInfo-Struktur in der ASN.1-BER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-264">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="ef348-265">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-265">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="ef348-266">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-266">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-267">Importiert das Paar aus öffentlichem und privatem Schlüssel aus einer PKCS#8-PrivateKeyInfo-Struktur nach der Entschlüsselung und ersetzt die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-267">Imports the public/private keypair from a PKCS#8 PrivateKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-268">Diese Methode unterstützt nur die binäre Codierung (ber/CER/der) von privatekeyinfo.</span><span class="sxs-lookup"><span data-stu-id="ef348-268">This method only supports the binary (BER/CER/DER) encoding of PrivateKeyInfo.</span></span>
<span data-ttu-id="ef348-269">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-269">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-270">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-BER-codierte PKCS#8-PrivateKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-270">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</span></span>

<span data-ttu-id="ef348-271">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-271">-or-</span></span>

<span data-ttu-id="ef348-272">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="ef348-272">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="ef348-273">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-273">-or-</span></span>

<span data-ttu-id="ef348-274">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-274">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="ef348-275">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-275">-or-</span></span>

<span data-ttu-id="ef348-276">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-276">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override void ImportSubjectPublicKeyInfo (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportSubjectPublicKeyInfo(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportSubjectPublicKeyInfo (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportSubjectPublicKeyInfo(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportSubjectPublicKeyInfo : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDsa.ImportSubjectPublicKeyInfo (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ef348-277">Die Bytes einer X.509-SubjectPublicKeyInfo-Struktur in der ASN.1-DER-Codierung.</span><span class="sxs-lookup"><span data-stu-id="ef348-277">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="ef348-278">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die aus <paramref name="source" /> gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-278">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="ef348-279">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-279">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-280">Importiert den öffentlichen Schlüssel aus einer X.509-SubjectPublicKeyInfo-Struktur nach der Entschlüsselung und ersetzt dabei die Schlüssel für dieses Objekt.</span><span class="sxs-lookup"><span data-stu-id="ef348-280">Imports the public key from an X.509 SubjectPublicKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-281">Diese Methode unterstützt nur die binäre Codierung (der) von "subjetpublickeyinfo".</span><span class="sxs-lookup"><span data-stu-id="ef348-281">This method only supports the binary (DER) encoding of SubjectPublicKeyInfo.</span></span>
<span data-ttu-id="ef348-282">Wenn der Wert Base64-codiert ist oder im PEM-Textformat vorliegt, muss der Aufrufer den Inhalt vor dem Aufrufen dieser Methode Base64-decodieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-282">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-283">Der Inhalt von <paramref name="source" /> stellt keine ASN.1-DER-codierte X.509-SubjectPublicKeyInfo-Struktur dar.</span><span class="sxs-lookup"><span data-stu-id="ef348-283">The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</span></span>

<span data-ttu-id="ef348-284">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-284">-or-</span></span>

<span data-ttu-id="ef348-285">Der Inhalt von <paramref name="source" /> gibt an, dass der Schlüssel für einen anderen Algorithmus als den von dieser Instanz dargestellten Algorithmus gilt.</span><span class="sxs-lookup"><span data-stu-id="ef348-285">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="ef348-286">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-286">-or-</span></span>

<span data-ttu-id="ef348-287">Der Inhalt von <paramref name="source" /> stellt den Schlüssel in einem Format dar, das nicht unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-287">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="ef348-288">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-288">-or-</span></span>

<span data-ttu-id="ef348-289">Fehler beim Importieren des algorithmusspezifischen Schlüssels.</span><span class="sxs-lookup"><span data-stu-id="ef348-289">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public override string? KeyExchangeAlgorithm { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyExchangeAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeyExchangeAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ KeyExchangeAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyExchangeAlgorithm : string" Usage="System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm" />
      <MemberSignature Language="C#" Value="public override string KeyExchangeAlgorithm { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef348-290">Ruft den Namen des Algorithmus für den Schlüsselaustausch ab.</span><span class="sxs-lookup"><span data-stu-id="ef348-290">Gets the name of the key exchange algorithm.</span></span></summary>
        <value><span data-ttu-id="ef348-291">Immer <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-291">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-292">Diese Eigenschaft wird von der- <xref:System.Security.Cryptography.AsymmetricAlgorithm> Basisklasse geerbt.</span><span class="sxs-lookup"><span data-stu-id="ef348-292">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 <span data-ttu-id="ef348-293">Der ECDSA (Elliptic Curve Digital Signature-Algorithmus) wird für die Generierung digitaler Signaturen verwendet. Diese Eigenschaft wird nicht für die Schlüssel Ableitung verwendet. Daher gibt diese Eigenschaft zurück `null` .</span><span class="sxs-lookup"><span data-stu-id="ef348-293">The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public override string? SignatureAlgorithm { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SignatureAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureAlgorithm : string" Usage="System.Security.Cryptography.ECDsa.SignatureAlgorithm" />
      <MemberSignature Language="C#" Value="public override string SignatureAlgorithm { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef348-294">Ruft den Namen des Signaturalgorithmus ab.</span><span class="sxs-lookup"><span data-stu-id="ef348-294">Gets the name of the signature algorithm.</span></span></summary>
        <value><span data-ttu-id="ef348-295">Die Zeichenfolge "ECDsa".</span><span class="sxs-lookup"><span data-stu-id="ef348-295">The string "ECDsa".</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignData">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ef348-296">Berechnet den Hashwert der angegebenen Daten und signiert ihn.</span><span class="sxs-lookup"><span data-stu-id="ef348-296">Computes the hash value of the specified data and signs it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.SignData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-297">Die Eingabedaten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-297">The input data for which to compute the hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-298">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-298">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="ef348-299">Berechnet den Hashwert des angegebenen Bytearrays mithilfe des angegebenen Hashalgorithmus und signiert den resultierenden Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-299">Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="ef348-300">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-300">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-301"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-301"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-302"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-302"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-303">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-303">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.SignData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-304">Der Eingabedatenstrom, für den der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-304">The input stream for which to compute the hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-305">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-305">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="ef348-306">Berechnet den Hashwert des angegebenen Datenstroms mithilfe des angegebenen Hashalgorithmus und signiert den resultierenden Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-306">Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="ef348-307">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-307">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-308"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-308"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-309"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-309"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-310">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-310">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignData (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-311">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-311">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-312">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-312">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-313">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-313">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-314">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="ef348-314">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="ef348-315">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-315">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-316"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-316"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-317"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-317"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-318"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-318"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-319">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-319">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignData (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-320">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-320">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-321">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-321">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-322">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-322">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-323">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="ef348-323">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="ef348-324">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-324">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-325"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-325"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-326"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-326"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-327"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-327"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-328">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-328">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDsa.SignData (data, offset, count, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-329">Die Eingabedaten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-329">The input data for which to compute the hash.</span></span></param>
        <param name="offset"><span data-ttu-id="ef348-330">Der Offset im Array, ab dem Daten verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-330">The offset into the array at which to begin using data.</span></span></param>
        <param name="count"><span data-ttu-id="ef348-331">Die Anzahl der Bytes im Array, die als Daten verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-331">The number of bytes in the array to use as data.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-332">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-332">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="ef348-333">Berechnet den Hashwert eines Teils des angegebenen Bytearrays mithilfe des angegebenen Hashalgorithmus und signiert den sich ergebenden Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-333">Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="ef348-334">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-334">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-335"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-335"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-336"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-336"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-337">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-337">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-338"><paramref name="offset" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-338"><paramref name="offset" /> is less than zero.</span></span>  
  
<span data-ttu-id="ef348-339">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-339">-or-</span></span> 
 <span data-ttu-id="ef348-340"><paramref name="count" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-340"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="ef348-341">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-341">-or-</span></span> 
 <span data-ttu-id="ef348-342"><paramref name="offset" /> + <paramref name="count" /> – 1 resultiert in einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-342"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignData (data, offset, count, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-343">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-343">The data to sign.</span></span></param>
        <param name="offset"><span data-ttu-id="ef348-344">Der Offset in <paramref name="data" />, ab dem Hashing erfolgen soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-344">The offset into <paramref name="data" /> at which to begin hashing.</span></span></param>
        <param name="count"><span data-ttu-id="ef348-345">Die Anzahl der aus <paramref name="data" /> zu lesenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="ef348-345">The number of bytes to read from <paramref name="data" />.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-346">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-346">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-347">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-347">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-348">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="ef348-348">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="ef348-349">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-349">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-350"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-350"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-351"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-351"><paramref name="signatureFormat" /> is not a known format.</span></span>
 
<span data-ttu-id="ef348-352">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-352">-or-</span></span> 
 <span data-ttu-id="ef348-353"><paramref name="offset" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-353"><paramref name="offset" /> is less than zero.</span></span>
 
<span data-ttu-id="ef348-354">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-354">-or-</span></span> 
 <span data-ttu-id="ef348-355"><paramref name="count" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-355"><paramref name="count" /> is less than zero.</span></span>
 
<span data-ttu-id="ef348-356">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-356">-or-</span></span> 
 <span data-ttu-id="ef348-357"><paramref name="offset" /> + <paramref name="count" /> – 1 resultiert in einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-357"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-358"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-358"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-359">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-359">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected virtual byte[] SignDataCore (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignDataCore(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignDataCore (data As Stream, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignDataCore(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignDataCore : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignDataCore (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-360">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-360">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-361">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-361">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-362">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-362">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-363">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="ef348-363">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="ef348-364">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-364">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-365">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-365">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected virtual byte[]? SignDataCore (ReadOnlySpan&lt;byte&gt; data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignDataCore (data As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignDataCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignDataCore (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-366">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-366">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-367">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-367">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-368">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-368">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-369">Berechnet den Hashwert der angegebenen Daten und signiert ihn unter Verwendung des angegebenen Signaturformats.</span><span class="sxs-lookup"><span data-stu-id="ef348-369">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="ef348-370">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-370">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-371">Beim Hash- oder Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-371">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignHash">
      <MemberSignature Language="C#" Value="public abstract byte[] SignHash (byte[] hash);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignHash(unsigned int8[] hash) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SignHash (hash As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ SignHash(cli::array &lt;System::Byte&gt; ^ hash);" />
      <MemberSignature Language="F#" Value="abstract member SignHash : byte[] -&gt; byte[]" Usage="eCDsa.SignHash hash" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-372">Der Hashwert der signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-372">The hash value of the data that is being signed.</span></span></param>
        <summary><span data-ttu-id="ef348-373">Generiert eine digitale Signatur für den angegebenen Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-373">Generates a digital signature for the specified hash value.</span></span></summary>
        <returns><span data-ttu-id="ef348-374">Eine digitale Signatur für den angegebenen Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-374">A digital signature for the specified hash value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-375">Der <paramref name="hash" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-375">The <paramref name="hash" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignHash">
      <MemberSignature Language="C#" Value="public byte[] SignHash (byte[] hash, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignHash(unsigned int8[] hash, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[],System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignHash (hash As Byte(), signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignHash(cli::array &lt;System::Byte&gt; ^ hash, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignHash : byte[] * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignHash (hash, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-376">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-376">The hash value to sign.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-377">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-377">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-378">Berechnet die ECDSA-Signatur für den angegebenen Hashwert im angegebenen Format.</span><span class="sxs-lookup"><span data-stu-id="ef348-378">Computes the ECDSA signature for the specified hash value in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="ef348-379">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-379">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-380"><paramref name="hash" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-380"><paramref name="hash" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-381"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-381"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-382">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-382">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignHashCore">
      <MemberSignature Language="C#" Value="protected virtual byte[]? SignHashCore (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignHashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignHashCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignHashCore (hash As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignHashCore(ReadOnlySpan&lt;System::Byte&gt; hash, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignHashCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignHashCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="eCDsa.SignHashCore (hash, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-383">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-383">The hash value to sign.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-384">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-384">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="ef348-385">Berechnet die ECDSA-Signatur für den angegebenen Hashwert im angegebenen Format.</span><span class="sxs-lookup"><span data-stu-id="ef348-385">Computes the ECDSA signature for the specified hash value in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="ef348-386">Die ECDSA-Signatur für die angegebenen Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-386">The ECDSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-387">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-387">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : bool -&gt; string" Usage="eCDsa.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="ef348-388"><see langword="true" />, wenn private Parameter angegeben werden sollen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-388"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ef348-389">Diese Methode löst in allen Fällen aus.</span><span class="sxs-lookup"><span data-stu-id="ef348-389">This method throws in all cases.</span></span></summary>
        <returns><span data-ttu-id="ef348-390">Diese Methode gibt keinen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="ef348-390">This method does not return a value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="ef348-391">In allen Fällen.</span><span class="sxs-lookup"><span data-stu-id="ef348-391">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportECPrivateKey">
      <MemberSignature Language="C#" Value="public virtual bool TryExportECPrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryExportECPrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryExportECPrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryExportECPrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryExportECPrivateKey : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.TryExportECPrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="eCDsa.TryExportECPrivateKey (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ef348-392">Die Bytespanne, die die ECPrivateKey-Daten empfangen soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-392">The byte span to receive the ECPrivateKey data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-393">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-393">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-394">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-394">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-395">Versucht, den aktuellen Schlüssel im ECPrivateKey-Format in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-395">Attempts to export the current key in the ECPrivateKey format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-396"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-396"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-397">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-397">The key could not be exported.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="eCDsa.TryExportEncryptedPkcs8PrivateKey (passwordBytes, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="ef348-398">Die Bytes, die als Kennwort bei der Verschlüsselung des Schlüsselmaterials verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-398">The bytes to use as a password when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="ef348-399">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Schlüsselmaterials verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-399">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-400">Die Bytespanne, in der die PKCS#8-EncryptedPrivateKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-400">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-401">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-401">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-402">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-402">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-403">Versucht, den aktuellen Schlüssel im PKCS#8-EncryptedPrivateKeyInfo-Format mit einem bytebasierten Kennwort in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-403">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</span></span></summary>
        <returns><span data-ttu-id="ef348-404"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-404"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-405">Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die von dem durch angegeben Algorithmus verwendet werden `pbeParameters` .</span><span class="sxs-lookup"><span data-stu-id="ef348-405">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span>
<span data-ttu-id="ef348-406">Dadurch wird die Kompatibilität mit anderen Systemen ermöglicht, bei denen bei der Verarbeitung von Kenn Wörtern mit PBKDF2 eine andere Text Codierung als UTF-8 verwendet wird (Kenn Wort basierte Schlüssel abderivations Funktion 2).</span><span class="sxs-lookup"><span data-stu-id="ef348-406">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-407">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-407">The key could not be exported.</span></span>

<span data-ttu-id="ef348-408">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-408">-or-</span></span>

<span data-ttu-id="ef348-409"><paramref name="pbeParameters" /> gibt an, dass <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> verwendet werden soll, wofür <see cref="T:System.Char" />-basierte Kennwörter erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="ef348-409"><paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="eCDsa.TryExportEncryptedPkcs8PrivateKey (password, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="ef348-410">Das Kennwort, das bei der Verschlüsselung des Schlüsselmaterials verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-410">The password to use when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="ef348-411">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Schlüsselmaterials verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-411">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-412">Die Bytespanne, in der die PKCS#8-EncryptedPrivateKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-412">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-413">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-413">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-414">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-414">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-415">Versucht, den aktuellen Schlüssel im PKCS#8-EncryptedPrivateKeyInfo-Format mit einem zeichenbasierten Kennwort in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-415">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</span></span></summary>
        <returns><span data-ttu-id="ef348-416"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-416"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef348-417">Wenn `pbeParameters` einen Algorithmus angibt, der PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.</span><span class="sxs-lookup"><span data-stu-id="ef348-417">When `pbeParameters` indicates an algorithm that uses PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-418">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-418">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportPkcs8PrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportPkcs8PrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportPkcs8PrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportPkcs8PrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportPkcs8PrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="eCDsa.TryExportPkcs8PrivateKey (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ef348-419">Die Bytespanne, in der die PKCS#8-PrivateKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-419">The byte span to receive the PKCS#8 PrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-420">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-420">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-421">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-421">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-422">Versucht, den aktuellen Schlüssel im PKCS#8-PrivateKeyInfo-Format in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-422">Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-423"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-423"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-424">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-424">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override bool TryExportSubjectPublicKeyInfo (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportSubjectPublicKeyInfo(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportSubjectPublicKeyInfo (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportSubjectPublicKeyInfo(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportSubjectPublicKeyInfo : Span&lt;byte&gt; * int -&gt; bool" Usage="eCDsa.TryExportSubjectPublicKeyInfo (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ef348-425">Die Bytespanne, in der die X.509-SubjectPublicKeyInfo-Daten empfangen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-425">The byte span to receive the X.509 SubjectPublicKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-426">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-426">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-427">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-427">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-428">Versucht, den aktuellen Schlüssel im X.509-SubjectPublicKeyInfo-Format in einen bereitgestellten Puffer zu exportieren.</span><span class="sxs-lookup"><span data-stu-id="ef348-428">Attempts to export the current key in the X.509 SubjectPublicKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-429"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-429"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-430">Der Schlüssel konnte nicht exportiert werden.</span><span class="sxs-lookup"><span data-stu-id="ef348-430">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryHashData">
      <MemberSignature Language="C#" Value="protected virtual bool TryHashData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryHashData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryHashData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryHashData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryHashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool&#xA;override this.TryHashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool" Usage="eCDsa.TryHashData (data, destination, hashAlgorithm, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-431">Die Daten, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-431">The data to be hashed.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-432">Der Puffer zum Empfangen des Hashwerts.</span><span class="sxs-lookup"><span data-stu-id="ef348-432">The buffer to receive the hash value.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-433">Der Algorithmus, der zum Bestimmen des Hashwerts der Daten verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-433">The algorithm to use to hash the data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-434">Nach Ausführung dieser Methode die Gesamtzahl der in <paramref name="destination" /> geschriebenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="ef348-434">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-435">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-435">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-436">Versucht, den Hashwert der angegebenen schreibgeschützten Spanne von Bytes in das angegebene Ziel unter Verwendung des angegebenen Hashalgorithmus zu berechnen.</span><span class="sxs-lookup"><span data-stu-id="ef348-436">Attempts to compute the hash value of the specified read-only span of bytes into the provided destination by using the specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-437"><see langword="false" />, wenn <paramref name="destination" /> zum Empfangen des Hashwerts nicht lang genug ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-437"><see langword="false" /> if <paramref name="destination" /> is not long enough to receive the hash value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ef348-438">Die Standard Implementierung dieser Methode besteht darin, aufzurufen <xref:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)> und das Ergebnis in zu kopieren `destination` .</span><span class="sxs-lookup"><span data-stu-id="ef348-438">The default implementation of this method is to call <xref:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)> and copy the result to `destination`.</span></span>
<span data-ttu-id="ef348-439">Abgeleitete Typen sollten diese Methode überschreiben, um die Erstellung von zwischen Arrays zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="ef348-439">Derived types should override this method to avoid the intermediate array creation.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public virtual bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool&#xA;override this.TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool" Usage="eCDsa.TrySignData (data, destination, hashAlgorithm, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-440">Die zu signierenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-440">The data to be signed.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-441">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="ef348-441">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-442">Der Algorithmus, der zum Bestimmen des Hashwerts der Daten zum Signieren verwendet werden soll</span><span class="sxs-lookup"><span data-stu-id="ef348-442">The algorithm to use to hash the data for signing.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-443">Nach Ausführung dieser Methode die Gesamtzahl der in <paramref name="destination" /> geschriebenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="ef348-443">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-444">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-444">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-445">Versucht, die digitale ECDSA-Signatur für die angegebene schreibgeschützte Spanne von Bytes in das angegebene Ziel unter Verwendung des angegebenen Hashalgorithmus und des aktuellen Schlüssels zu berechnen.</span><span class="sxs-lookup"><span data-stu-id="ef348-445">Attempts to compute the ECDSA digital signature for the specified read-only span of bytes into the provided destination by using the specified hashing algorithm and the current key.</span></span></summary>
        <returns><span data-ttu-id="ef348-446"><see langword="false" />, wenn <paramref name="destination" /> zum Empfangen der Signatur nicht lang genug ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-446"><see langword="false" /> if <paramref name="destination" /> is not long enough to receive the signature.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="eCDsa.TrySignData (data, destination, hashAlgorithm, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-447">Die Daten, die gehasht und signiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-447">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-448">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="ef348-448">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-449">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-449">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-450">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-450">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-451">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-451">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-452">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-452">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-453">Versucht, die ECDSA-Signatur für die angegebenen Daten im angegebenen Format im angegebenen Puffer zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-453">Attempts to create the ECDSA signature for the specified data in the indicated format into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-454"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-454"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-455"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-455"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-456"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-456"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-457">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-457">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TrySignDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool TrySignDataCore (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TrySignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TrySignDataCore (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TrySignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignDataCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool&#xA;override this.TrySignDataCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="eCDsa.TrySignDataCore (data, destination, hashAlgorithm, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-458">Die Daten, die gehasht und signiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-458">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-459">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="ef348-459">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-460">Der zum Erstellen des Hashwerts zu verwendende Hashalgorithmus.</span><span class="sxs-lookup"><span data-stu-id="ef348-460">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-461">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-461">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-462">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-462">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-463">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-463">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-464">Versucht, die ECDSA-Signatur für die angegebenen Daten im angegebenen Format im angegebenen Puffer zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-464">Attempts to create the ECDSA signature for the specified data in the indicated format into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-465"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-465"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-466">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-466">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TrySignHash">
      <MemberSignature Language="C#" Value="public virtual bool TrySignHash (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySignHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySignHash (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySignHash(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignHash : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool&#xA;override this.TrySignHash : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="eCDsa.TrySignHash (hash, destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-467">Der Hashwert der signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-467">The hash value of the data that is being signed.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-468">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="ef348-468">The buffer to receive the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-469">Nach Ausführung dieser Methode die Gesamtzahl der in <paramref name="destination" /> geschriebenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="ef348-469">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-470">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-470">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-471">Versucht, die digitale ECDSA-Signatur für die angegebene schreibgeschützte Spanne von Bytes zu berechnen, die einen Datenhash in das angegebene Ziel darstellen, indem der aktuelle Schlüssel verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-471">Attempts to compute the ECDSA digital signature for the specified read-only span of bytes representing a data hash into the provided destination by using the current key.</span></span></summary>
        <returns><span data-ttu-id="ef348-472"><see langword="false" />, wenn <paramref name="destination" /> zum Empfangen der Signatur nicht lang genug ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-472"><see langword="false" /> if <paramref name="destination" /> is not long enough to receive the signature.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignHash">
      <MemberSignature Language="C#" Value="public bool TrySignHash (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySignHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySignHash (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySignHash(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TrySignHash : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="eCDsa.TrySignHash (hash, destination, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-473">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-473">The hash value to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-474">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="ef348-474">The buffer to receive the signature.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-475">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-475">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-476">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-476">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-477">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-477">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-478">Versucht, die ECDSA-Signatur für den angegebenen Hashwert im angegebenen Format im angegebenen Puffer zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-478">Attempts to create the ECDSA signature for the specified hash value in the indicated format into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-479"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-479"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-480"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-480"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-481">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-481">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TrySignHashCore">
      <MemberSignature Language="C#" Value="protected virtual bool TrySignHashCore (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TrySignHashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignHashCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TrySignHashCore (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TrySignHashCore(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignHashCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool&#xA;override this.TrySignHashCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="eCDsa.TrySignHashCore (hash, destination, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-482">Der zu signierende Hashwert.</span><span class="sxs-lookup"><span data-stu-id="ef348-482">The hash value to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="ef348-483">Der Puffer zum Empfangen der Signatur</span><span class="sxs-lookup"><span data-stu-id="ef348-483">The buffer to receive the signature.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-484">Das Codierungsformat, das für die Signatur verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-484">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ef348-485">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-485">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="ef348-486">Dieser Parameter wird nicht initialisiert behandelt.</span><span class="sxs-lookup"><span data-stu-id="ef348-486">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ef348-487">Versucht, die ECDSA-Signatur für den angegebenen Hashwert im angegebenen Format im angegebenen Puffer zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="ef348-487">Attempts to create the ECDSA signature for the specified hash value in the indicated format into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ef348-488"><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Signatur zu empfangen, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-488"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-489">Beim Signaturvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-489">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VerifyData">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ef348-490">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und die bereitgestellten Daten mit einem angegebenen Hashalgorithmus geeignet ist</span><span class="sxs-lookup"><span data-stu-id="ef348-490">Verifies that a digital signature is appropriate for the current key and provided data with a specified hash algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="eCDsa.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-491">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-491">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-492">Die zu überprüfenden Signaturdaten.</span><span class="sxs-lookup"><span data-stu-id="ef348-492">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-493">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-493">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="ef348-494">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und die bereitgestellten Daten mit einem angegebenen Hashalgorithmus geeignet ist</span><span class="sxs-lookup"><span data-stu-id="ef348-494">Verifies that a digital signature is appropriate for the current key and provided data with a specified hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-495"><see langword="true" />, wenn die Signatur gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-495"><see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-496"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-496"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ef348-497">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-497">-or-</span></span> 
 <span data-ttu-id="ef348-498"><paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-498"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-499"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-499"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-500">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-500">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="eCDsa.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-501">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-501">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-502">Die zu überprüfenden Signaturdaten.</span><span class="sxs-lookup"><span data-stu-id="ef348-502">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-503">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-503">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="ef348-504">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und die bereitgestellten Daten mit einem angegebenen Hashalgorithmus geeignet ist</span><span class="sxs-lookup"><span data-stu-id="ef348-504">Verifies that a digital signature is appropriate for the current key and provided data with a specified hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-505"><see langword="true" />, wenn die Signatur gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-505"><see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-506"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-506"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ef348-507">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-507">-or-</span></span> 
 <span data-ttu-id="ef348-508"><paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-508"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-509"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-509"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-510">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-510">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="eCDsa.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-511">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-511">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-512">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-512">The signature to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-513">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-513">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="ef348-514">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und die bereitgestellten Daten mit einem angegebenen Hashalgorithmus geeignet ist</span><span class="sxs-lookup"><span data-stu-id="ef348-514">Verifies that a digital signature is appropriate for the current key and provided data with a specified hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-515"><see langword="true" />, wenn die Signatur gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-515"><see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-516"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-516"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-517">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-517">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-518">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-518">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-519">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-519">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-520">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-520">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-521">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-521">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-522">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-522">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="ef348-523"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-523"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-524"><paramref name="data" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-524"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-525"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-525"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-526"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-526"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-527">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-527">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-528">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-528">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-529">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-529">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-530">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-530">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-531">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-531">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-532">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-532">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="ef348-533"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-533"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-534"><paramref name="data" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-534"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-535"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-535"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-536"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-536"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-537">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-537">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-538">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-538">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-539">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-539">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-540">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-540">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-541">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-541">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-542">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-542">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="ef348-543"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-543"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-544"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-544"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-545">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-545">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="eCDsa.VerifyData (data, offset, count, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="4" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-546">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-546">The signed data.</span></span></param>
        <param name="offset"><span data-ttu-id="ef348-547">Der Startindex, an dem der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-547">The starting index at which to compute the hash.</span></span></param>
        <param name="count"><span data-ttu-id="ef348-548">Die Anzahl der Bytes, für die der Hashwert berechnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="ef348-548">The number of bytes to hash.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-549">Die zu überprüfenden Signaturdaten.</span><span class="sxs-lookup"><span data-stu-id="ef348-549">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-550">Der Hashalgorithmus, der zum Erstellen des Hashwerts der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-550">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="ef348-551">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und dem bereitgestellten Teil der Daten mit einem angegebenen Hashalgorithmus geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-551">Verifies that a digital signature is appropriate for the current key and provided portion of data with a specified hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="ef348-552"><see langword="true" />, wenn die Signatur gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-552"><see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-553"><paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-553"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ef348-554">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-554">-or-</span></span> 
 <span data-ttu-id="ef348-555"><paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-555"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-556"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ef348-556"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ef348-557">ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-557">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-558"><paramref name="offset" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-558"><paramref name="offset" /> is less than zero.</span></span>  
  
<span data-ttu-id="ef348-559">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-559">-or-</span></span> 
 <span data-ttu-id="ef348-560"><paramref name="count" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-560"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="ef348-561">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-561">-or-</span></span> 
 <span data-ttu-id="ef348-562"><paramref name="offset" /> + <paramref name="count" /> – 1 resultiert in einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-562"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyData (data, offset, count, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="4" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="5" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-563">Ein Array, das die signierten Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="ef348-563">An array that contains the signed data.</span></span></param>
        <param name="offset"><span data-ttu-id="ef348-564">Der Startindex des signierten Teils von <paramref name="data" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-564">The starting index of the signed portion of <paramref name="data" />.</span></span></param>
        <param name="count"><span data-ttu-id="ef348-565">Die Anzahl der Bytes in <paramref name="data" />, die signiert wurden.</span><span class="sxs-lookup"><span data-stu-id="ef348-565">The number of bytes in <paramref name="data" /> that were signed.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-566">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-566">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-567">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-567">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-568">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-568">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-569">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-569">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="ef348-570"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-570"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-571"><paramref name="data" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-571"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-572"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-572"><paramref name="signatureFormat" /> is not a known format.</span></span>
 
<span data-ttu-id="ef348-573">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-573">-or-</span></span> 
 <span data-ttu-id="ef348-574"><paramref name="offset" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-574"><paramref name="offset" /> is less than zero.</span></span>
 
<span data-ttu-id="ef348-575">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-575">-or-</span></span> 
 <span data-ttu-id="ef348-576"><paramref name="count" /> ist kleiner als Null.</span><span class="sxs-lookup"><span data-stu-id="ef348-576"><paramref name="count" /> is less than zero.</span></span>
 
<span data-ttu-id="ef348-577">- oder -</span><span class="sxs-lookup"><span data-stu-id="ef348-577">-or-</span></span> 
 <span data-ttu-id="ef348-578"><paramref name="offset" /> + <paramref name="count" /> – 1 resultiert in einem Index, der größer als die Obergrenze von <paramref name="data" /> ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-578"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ef348-579"><paramref name="hashAlgorithm" /> ist <see langword="null" /> oder weist einen leeren <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-579"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-580">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-580">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDataCore (System.IO.Stream? data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(class System.IO.Stream data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyDataCore (data As Stream, signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyDataCore(System::IO::Stream ^ data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : System.IO.Stream * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyDataCore : System.IO.Stream * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyDataCore (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-581">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-581">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-582">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-582">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-583">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-583">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-584">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-584">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-585">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-585">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="ef348-586"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-586"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-587">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-587">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDataCore (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyDataCore (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyDataCore(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyDataCore (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ef348-588">Die signierten Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-588">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-589">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-589">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ef348-590">Der Hashalgorithmus, der für den Hashwert der Daten für den Überprüfungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ef348-590">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-591">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-591">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-592">Überprüft, ob eine digitale Signatur für die angegebenen Daten gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-592">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="ef348-593"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-593"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-594">Beim Hash- oder Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-594">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyHash">
      <MemberSignature Language="C#" Value="public abstract bool VerifyHash (byte[] hash, byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyHash(unsigned int8[] hash, unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function VerifyHash (hash As Byte(), signature As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool VerifyHash(cli::array &lt;System::Byte&gt; ^ hash, cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberSignature Language="F#" Value="abstract member VerifyHash : byte[] * byte[] -&gt; bool" Usage="eCDsa.VerifyHash (hash, signature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-595">Der Hashwert der zu überprüfenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-595">The hash value of the data to be verified.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-596">Die digitale Signatur der Daten, die mit dem Hashwert überprüft werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-596">The digital signature of the data to be verified against the hash value.</span></span></param>
        <summary><span data-ttu-id="ef348-597">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und den bereitgestellten Datenhash geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-597">Verifies that a digital signature is appropriate for the current key and provided data hash.</span></span></summary>
        <returns><span data-ttu-id="ef348-598"><see langword="true" />, wenn die Signatur gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-598"><see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-599"><paramref name="hash" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-599"><paramref name="hash" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyHash">
      <MemberSignature Language="C#" Value="public virtual bool VerifyHash (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyHash (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyHash(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature);" />
      <MemberSignature Language="F#" Value="abstract member VerifyHash : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool&#xA;override this.VerifyHash : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="eCDsa.VerifyHash (hash, signature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-600">Der Hashwert der zu überprüfenden Daten.</span><span class="sxs-lookup"><span data-stu-id="ef348-600">The hash value of the data to be verified.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-601">Die digitale Signatur der Daten, die mit dem Hashwert überprüft werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ef348-601">The digital signature of the data to be verified against the hash value.</span></span></param>
        <summary><span data-ttu-id="ef348-602">Überprüft, ob eine digitale Signatur für den aktuellen Schlüssel und den bereitgestellten Datenhash geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-602">Verifies that a digital signature is appropriate for the current key and provided data hash.</span></span></summary>
        <returns><span data-ttu-id="ef348-603"><see langword="true" />, wenn die Signatur gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-603"><see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyHash">
      <MemberSignature Language="C#" Value="public bool VerifyHash (byte[] hash, byte[] signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyHash(unsigned int8[] hash, unsigned int8[] signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyHash (hash As Byte(), signature As Byte(), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyHash(cli::array &lt;System::Byte&gt; ^ hash, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyHash : byte[] * byte[] * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyHash (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-604">Der signierte Hash.</span><span class="sxs-lookup"><span data-stu-id="ef348-604">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-605">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-605">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-606">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-606">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-607">Überprüft, ob eine digitale Signatur für den bereitgestellten Hash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-607">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="ef348-608"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-608"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ef348-609"><paramref name="hash" /> oder <paramref name="signature" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-609"><paramref name="hash" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-610"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-610"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-611">Beim Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-611">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyHash">
      <MemberSignature Language="C#" Value="public bool VerifyHash (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyHash (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyHash(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyHash : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyHash (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-612">Der signierte Hash.</span><span class="sxs-lookup"><span data-stu-id="ef348-612">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-613">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-613">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-614">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-614">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-615">Überprüft, ob eine digitale Signatur für den bereitgestellten Hash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-615">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="ef348-616"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-616"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ef348-617"><paramref name="signatureFormat" /> weist kein bekanntes Format auf.</span><span class="sxs-lookup"><span data-stu-id="ef348-617"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-618">Beim Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-618">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyHashCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyHashCore (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyHashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyHashCore (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyHashCore(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyHashCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyHashCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="eCDsa.VerifyHashCore (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ef348-619">Der signierte Hash.</span><span class="sxs-lookup"><span data-stu-id="ef348-619">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="ef348-620">Die zu überprüfende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ef348-620">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="ef348-621">Das Codierungsformat für <paramref name="signature" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-621">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="ef348-622">Überprüft, ob eine digitale Signatur für den bereitgestellten Hash gültig ist.</span><span class="sxs-lookup"><span data-stu-id="ef348-622">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="ef348-623"><see langword="true" />, wenn die digitale Signatur für die angegebenen Daten gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef348-623"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ef348-624">Beim Überprüfungsvorgang ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="ef348-624">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="PemEncoding" FullName="System.Security.Cryptography.PemEncoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4013121a306ecfaac8e22b5e0c6f15bb1b0ffe7c" /><Meta Name="ms.sourcegitcommit" Value="33529b5cc32683b91d3422992fb4dc422f85782b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/17/2020" /><Meta Name="ms.locfileid" Value="88267099" /></Metadata><TypeSignature Language="C#" Value="public static class PemEncoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PemEncoding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PemEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class PemEncoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class PemEncoding abstract sealed" />
  <TypeSignature Language="F#" Value="type PemEncoding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Methoden zum Lesen und Schreiben der IETF RFC 7468-Teilmenge von PEM-Textcodierungen (Privacy-Enhanced Mail) bereit.
Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.PemFields Find (ReadOnlySpan&lt;char&gt; pemData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.PemFields Find(valuetype System.ReadOnlySpan`1&lt;char&gt; pemData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.Find(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Find (pemData As ReadOnlySpan(Of Char)) As PemFields" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::PemFields Find(ReadOnlySpan&lt;char&gt; pemData);" />
      <MemberSignature Language="F#" Value="static member Find : ReadOnlySpan&lt;char&gt; -&gt; System.Security.Cryptography.PemFields" Usage="System.Security.Cryptography.PemEncoding.Find pemData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.PemFields</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="pemData">Der Text, der die PEM-codierten Daten enthält.</param>
        <summary>Sucht nach den ersten PEM-codierten Daten.</summary>
        <returns>Ein Wert, der den Speicherort, die Bezeichnung und den Datenspeicherort der codierten Daten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

IETF RFC 7468 gestattet verschiedene Decodierungs Regeln. Diese Methode verwendet immer Lax-Regeln.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="pemData" /> enthält keinen wohlgeformten PEM-codierten Wert.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEncodedSize">
      <MemberSignature Language="C#" Value="public static int GetEncodedSize (int labelLength, int dataLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetEncodedSize(int32 labelLength, int32 dataLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.GetEncodedSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodedSize (labelLength As Integer, dataLength As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetEncodedSize(int labelLength, int dataLength);" />
      <MemberSignature Language="F#" Value="static member GetEncodedSize : int * int -&gt; int" Usage="System.Security.Cryptography.PemEncoding.GetEncodedSize (labelLength, dataLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelLength" Type="System.Int32" />
        <Parameter Name="dataLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="labelLength">Die Länge der Bezeichnung in Zeichen.</param>
        <param name="dataLength">Die Länge der Daten in Bytes.</param>
        <summary>Bestimmt die Länge eines PEM-codierten Werts (in Zeichen), wenn die Länge einer Bezeichnung und Binärdaten angegeben werden.</summary>
        <returns>Die Anzahl der Zeichen in der codierten PEM.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="labelLength" /> ist eine negativer Wert.

- oder -

<paramref name="dataLength" /> ist eine negativer Wert.

- oder -

<paramref name="labelLength" /> überschreitet die maximal mögliche Bezeichnungslänge.

- oder -

<paramref name="dataLength" /> überschreitet die maximal zulässige Länge codierter Daten.</exception>
        <exception cref="T:System.ArgumentException">Die Länge des PEM-codierten Werts ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryFind">
      <MemberSignature Language="C#" Value="public static bool TryFind (ReadOnlySpan&lt;char&gt; pemData, out System.Security.Cryptography.PemFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFind(valuetype System.ReadOnlySpan`1&lt;char&gt; pemData, [out] valuetype System.Security.Cryptography.PemFields&amp; fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryFind(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PemFields@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFind (pemData As ReadOnlySpan(Of Char), ByRef fields As PemFields) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFind(ReadOnlySpan&lt;char&gt; pemData, [Runtime::InteropServices::Out] System::Security::Cryptography::PemFields % fields);" />
      <MemberSignature Language="F#" Value="static member TryFind : ReadOnlySpan&lt;char&gt; * PemFields -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryFind (pemData, fields)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="fields" Type="System.Security.Cryptography.PemFields" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pemData">Der Text, der die PEM-codierten Daten enthält.</param>
        <param name="fields">Die Rückgabe dieser Methode ist ein Wert, der den Speicherort, die Bezeichnung und den Datenspeicherort der codierten Daten angibt. Wenn keine PEM-codierten Daten gefunden werden, wird ein Wert zurückgegeben, der diese Speicherorte als leer angibt.

          Dieser Parameter wird nicht initialisiert behandelt.</param>
        <summary>Versucht, die ersten PEM-codierten Daten zu ermitteln.</summary>
        <returns><see langword="true" />, wenn PEM-codierte Daten gefunden wurden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

IETF RFC 7468 gestattet verschiedene Decodierungs Regeln. Diese Methode verwendet immer Lax-Regeln.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWrite">
      <MemberSignature Language="C#" Value="public static bool TryWrite (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryWrite(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWrite(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryWrite : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryWrite (label, data, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="label">Die zu schreibende Bezeichnung.</param>
        <param name="data">Die zu schreibenden Daten.</param>
        <param name="destination">Der Puffer, der den PEM-codierten Text empfangen soll.</param>
        <param name="charsWritten">Nach dem Beenden dieser Methode enthält dieser Parameter die Anzahl der Zeichen, die in <paramref name="destination" /> geschrieben wurden. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <summary>Versucht, die bereitgestellten Daten und die Bezeichnung als PEM-codierte Daten in einen bereitgestellten Puffer zu schreiben.</summary>
        <returns><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um den PEM-codierten Text zu enthalten, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Diese Methode umschließt den Base64 64-codierten Text stets in 64 Zeichen gemäß der empfohlenen Umbrüche von IETF RFC 7468. Zeilenenden im Unix-Stil werden für Zeilenumbrüche verwendet.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="label" /> überschreitet die maximal mögliche Bezeichnungslänge.

- oder -

<paramref name="data" /> überschreitet die maximal zulässige Länge codierter Daten.</exception>
        <exception cref="T:System.ArgumentException">Der sich ergebende PEM-codierte Text ist größer als <see cref="F:System.Int32.MaxValue" />.

- oder -

<paramref name="label" /> enthält ungültige Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static char[]? Write (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] Write(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.Write(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Write (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte)) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ Write(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="static member Write : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; char[]" Usage="System.Security.Cryptography.PemEncoding.Write (label, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="label">Die zu codierende Bezeichnung.</param>
        <param name="data">Die zu codierenden Daten.</param>
        <summary>Erstellt eine codierte PEM mit der angegebenen Bezeichnung und den angegebenen Daten.</summary>
        <returns>Ein Zeichenarray des codierten PEM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Diese Methode umschließt 64 den Base64-codierten Text stets in 64 Zeichen gemäß der empfohlenen Umbrüche von RFC-7468. Zeilenenden im Unix-Stil werden für Zeilenumbrüche verwendet.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="label" /> überschreitet die maximal mögliche Bezeichnungslänge.

- oder -

<paramref name="data" /> überschreitet die maximal zulässige Länge codierter Daten.</exception>
        <exception cref="T:System.ArgumentException">Der sich ergebende PEM-codierte Text ist größer als <see cref="F:System.Int32.MaxValue" />.

- oder -

<paramref name="label" /> enthält ungültige Zeichen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

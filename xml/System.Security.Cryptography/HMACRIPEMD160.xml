<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fd3906fcbab62384e6ca161bad0c386ca4d50fc" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83963983" /></Metadata><TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e50a5-101">Berechnet unter Verwendung der <see cref="T:System.Security.Cryptography.RIPEMD160" />-Hashfunktion einen Hash-Nachrichtenauthentifizierungscode (HMAC, Hash-based Message Authentication Code).</span><span class="sxs-lookup"><span data-stu-id="e50a5-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e50a5-102"><xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der RIPEMD-160-Hash Funktion erstellt und als Hash basiertes Nachrichtenauthentifizierungscode (HMAC) verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="e50a5-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="e50a5-103">Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an.</span><span class="sxs-lookup"><span data-stu-id="e50a5-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="e50a5-104">Der Ausgabe Hash beträgt 160 Bits.</span><span class="sxs-lookup"><span data-stu-id="e50a5-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="e50a5-105">Ein HMAC kann verwendet werden, um zu bestimmen, ob eine Nachricht, die über einen unsicheren Kanal gesendet wurde, manipuliert wurde, vorausgesetzt, dass der Absender und der Empfänger einen geheimen Schlüssel gemeinsam nutzen.</span><span class="sxs-lookup"><span data-stu-id="e50a5-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="e50a5-106">Der Absender berechnet den Hashwert für die ursprünglichen Daten und sendet die ursprünglichen Daten und den Hashwert als einzelne Nachricht.</span><span class="sxs-lookup"><span data-stu-id="e50a5-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="e50a5-107">Der Empfänger berechnet den Hashwert für die empfangene Nachricht neu und überprüft, ob der berechnete HMAC mit dem übertragenen HMAC übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="e50a5-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="e50a5-108">Jede Änderung an den Daten oder dem Hashwert führt zu einem Konflikt, da das Wissen des geheimen Schlüssels erforderlich ist, um die Nachricht zu ändern und den korrekten Hashwert zu reproduzieren.</span><span class="sxs-lookup"><span data-stu-id="e50a5-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="e50a5-109">Wenn der ursprüngliche und der berechnete Hashwert entsprechen, wird die Nachricht Daher authentifiziert.</span><span class="sxs-lookup"><span data-stu-id="e50a5-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="e50a5-110"><xref:System.Security.Cryptography.HMACRIPEMD160> akzeptiert Schlüssel beliebiger Größe und erzeugt eine Hash Sequenz mit einer Länge von 160 Bits.</span><span class="sxs-lookup"><span data-stu-id="e50a5-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="e50a5-111">Der ripemd-Hash Algorithmus und seine Nachfolger wurden vom Europäischen Reifen Projekt entwickelt.</span><span class="sxs-lookup"><span data-stu-id="e50a5-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="e50a5-112">Der ursprüngliche ripemd-Algorithmus wurde entwickelt, um MD4 und MD5 zu ersetzen und wurde später verstärkt und umbenannt in RIPEMD-160.</span><span class="sxs-lookup"><span data-stu-id="e50a5-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="e50a5-113">Der RIPEMD-160-Hash Algorithmus erzeugt einen 160-Bit-Hashwert.</span><span class="sxs-lookup"><span data-stu-id="e50a5-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="e50a5-114">Die Designer der Algorithmen haben Sie in der öffentlichen Domäne abgelegt.</span><span class="sxs-lookup"><span data-stu-id="e50a5-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
 <span data-ttu-id="e50a5-115">Aufgrund von Konnektivitätsproblemen mit MD4 und MD5 empfiehlt Microsoft SHA256 oder besser.</span><span class="sxs-lookup"><span data-stu-id="e50a5-115">Due to collision problems with MD4 and MD5, Microsoft recommends SHA256 or better.</span></span>  
  
## Examples  
 <span data-ttu-id="e50a5-116">Im folgenden Beispiel wird gezeigt, wie Sie eine Datei mit dem <xref:System.Security.Cryptography.HMACRIPEMD160>-Objekt Signieren und dann die Datei überprüfen.</span><span class="sxs-lookup"><span data-stu-id="e50a5-116">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="e50a5-117">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="e50a5-117">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e50a5-118">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="e50a5-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e50a5-119">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse mit einem nach dem Zufallsprinzip generierten 64-Byte-Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="e50a5-119">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e50a5-120"><xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der RIPEMD-160-Hash Funktion erstellt und als Hash basiertes Nachrichtenauthentifizierungscode (HMAC) verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="e50a5-120"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="e50a5-121">Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an.</span><span class="sxs-lookup"><span data-stu-id="e50a5-121">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="e50a5-122">Der Ausgabe Hash beträgt 160 bytes.</span><span class="sxs-lookup"><span data-stu-id="e50a5-122">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="e50a5-123">Dieser Konstruktor verwendet einen zufällig generierten 64-Byte-Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="e50a5-123">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="e50a5-124">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="e50a5-124">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e50a5-125">Der geheime Schlüssel für die <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Verschlüsselung.</span><span class="sxs-lookup"><span data-stu-id="e50a5-125">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span></span> <span data-ttu-id="e50a5-126">Der Schlüssel kann eine beliebige Länge aufweisen. Ab einer Länge von mehr als 64 Bytes wird jedoch unter Verwendung des SHA-1-Hashalgorithmus ein 64-Byte-Schlüssel aus ihm abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="e50a5-126">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="e50a5-127">Für den geheimen Schlüssel wird daher eine Größe von 64 Bytes empfohlen.</span><span class="sxs-lookup"><span data-stu-id="e50a5-127">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <summary><span data-ttu-id="e50a5-128">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse mit den angegebenen Schlüsseldaten.</span><span class="sxs-lookup"><span data-stu-id="e50a5-128">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e50a5-129"><xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der RIPEMD-160-Hash Funktion erstellt und als Hash basiertes Nachrichtenauthentifizierungscode (HMAC) verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="e50a5-129"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="e50a5-130">Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an.</span><span class="sxs-lookup"><span data-stu-id="e50a5-130">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="e50a5-131">Der Ausgabe Hash beträgt 160 bytes.</span><span class="sxs-lookup"><span data-stu-id="e50a5-131">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e50a5-132">Ein Beispiel für die Verwendung dieses Konstruktors finden Sie in der <xref:System.Security.Cryptography.HMACRIPEMD160>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="e50a5-132">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e50a5-133">Der Parameter <paramref name="key" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e50a5-133">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="e50a5-134">Kryptografische Dienste</span><span class="sxs-lookup"><span data-stu-id="e50a5-134">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

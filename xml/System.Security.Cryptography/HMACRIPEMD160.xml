<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8dbae615f73b276d9a73b731a30e0587151fc9c1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30495584" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c0165-101">Berechnet unter Verwendung der <see cref="T:System.Security.Cryptography.RIPEMD160" />-Hashfunktion einen Hash-Nachrichtenauthentifizierungscode (HMAC, Hash-based Message Authentication Code).</span>
      <span class="sxs-lookup">
        <span data-stu-id="c0165-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0165-102"><xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ schlüsselgebundenen Hashalgorithmus, der aus der RIPEMD-160-Hashfunktion erstellt und als einen hashbasierten Message Authentication Code (HMAC) verwendet.</span><span class="sxs-lookup"><span data-stu-id="c0165-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="c0165-103">Der HMAC-Prozess kombiniert einen geheimen Schlüssel mit den Nachrichtendaten, erstellt einen Hashwert für das Ergebnis bei der Hashfunktion vermischt diesen Hashwert mit dem geheimen Schlüssel erneut aus und wendet dann die Hashfunktion ein zweites Mal.</span><span class="sxs-lookup"><span data-stu-id="c0165-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="c0165-104">Die Ausgabehash ist 160 Bits lang.</span><span class="sxs-lookup"><span data-stu-id="c0165-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="c0165-105">Ein HMAC kann verwendet werden, um zu bestimmen, ob eine über einen unsicheren Kanal gesendete Nachricht manipuliert wurde, vorausgesetzt, dass Sender und Empfänger einen gemeinsamen geheimen Schlüssel besitzen.</span><span class="sxs-lookup"><span data-stu-id="c0165-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="c0165-106">Der Absender berechnet den Hashwert für die ursprünglichen Daten und sendet die ursprünglichen Daten und den Hashwert als eine einzelne Nachricht.</span><span class="sxs-lookup"><span data-stu-id="c0165-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="c0165-107">Der Empfänger berechnet den Hashwert für die empfangene Nachricht und überprüft, ob der berechnete HMAC den übertragenen HMAC übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="c0165-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="c0165-108">Alle Änderungen an den Daten oder der Hashwert führt keine Übereinstimmung gefunden, da Wissen des geheimen Schlüssels zum Ändern der Nachricht, und reproduzieren Sie den richtigen Hashwert erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="c0165-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="c0165-109">Aus diesem Grund wird der ursprüngliche und der berechnete Hashwerte übereinstimmen, die Nachricht authentifiziert.</span><span class="sxs-lookup"><span data-stu-id="c0165-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="c0165-110"><xref:System.Security.Cryptography.HMACRIPEMD160> akzeptiert Schlüssel jeder Größe und erzeugt eine Hashsequenz, die 160 Bits lang ist.</span><span class="sxs-lookup"><span data-stu-id="c0165-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="c0165-111">RIPEMD-Hashalgorithmus und seine Nachfolger wurden von der Europäischen REIF Projekt entwickelt.</span><span class="sxs-lookup"><span data-stu-id="c0165-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="c0165-112">Der ursprüngliche RIPEMD-Algorithmus wurde entwickelt, um MD4 und MD5 ersetzen und später verstärkt wurde und RIPEMD-160 umbenannt.</span><span class="sxs-lookup"><span data-stu-id="c0165-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="c0165-113">Der RIPEMD-160-Hashalgorithmus erzeugt einen 160-Bit-Hash-Wert.</span><span class="sxs-lookup"><span data-stu-id="c0165-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="c0165-114">Der Algorithmus Designer haben es in der öffentlichen Domäne gespeichert.</span><span class="sxs-lookup"><span data-stu-id="c0165-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0165-115">Im folgende Beispiel wird gezeigt, wie zum Signieren einer Datei mithilfe der <xref:System.Security.Cryptography.HMACRIPEMD160> -Objekt, und klicken Sie dann überprüfen, ob die Datei.</span><span class="sxs-lookup"><span data-stu-id="c0165-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0165-116">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0165-117">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse mit einem nach dem Zufallsprinzip generierten 64-Byte-Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0165-118"><xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ schlüsselgebundenen Hashalgorithmus, der aus der RIPEMD-160-Hashfunktion erstellt und als einen hashbasierten Message Authentication Code (HMAC) verwendet.</span><span class="sxs-lookup"><span data-stu-id="c0165-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="c0165-119">Der HMAC-Prozess kombiniert einen geheimen Schlüssel mit den Nachrichtendaten, erstellt einen Hashwert für das Ergebnis bei der Hashfunktion vermischt diesen Hashwert mit dem geheimen Schlüssel erneut aus und wendet dann die Hashfunktion ein zweites Mal.</span><span class="sxs-lookup"><span data-stu-id="c0165-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="c0165-120">Die Ausgabehash ist 160 Bytes lang.</span><span class="sxs-lookup"><span data-stu-id="c0165-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="c0165-121">Dieser Konstruktor verwendet einen zufällig generierten Schlüssel 64 Byte.</span><span class="sxs-lookup"><span data-stu-id="c0165-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="c0165-122">Der geheime Schlüssel für die <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Verschlüsselung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span>
          </span>
          <span data-ttu-id="c0165-123">Der Schlüssel kann eine beliebige Länge aufweisen. Ab einer Länge von mehr als 64 Bytes wird jedoch unter Verwendung des SHA-1-Hashalgorithmus ein 64-Byte-Schlüssel aus ihm abgeleitet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span>
          </span>
          <span data-ttu-id="c0165-124">Für den geheimen Schlüssel wird daher eine Größe von 64 Bytes empfohlen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-124">Therefore, the recommended size of the secret key is 64 bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0165-125">Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse mit den angegebenen Schlüsseldaten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0165-126"><xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ schlüsselgebundenen Hashalgorithmus, der aus der RIPEMD-160-Hashfunktion erstellt und als einen hashbasierten Message Authentication Code (HMAC) verwendet.</span><span class="sxs-lookup"><span data-stu-id="c0165-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="c0165-127">Der HMAC-Prozess kombiniert einen geheimen Schlüssel mit den Nachrichtendaten, erstellt einen Hashwert für das Ergebnis bei der Hashfunktion vermischt diesen Hashwert mit dem geheimen Schlüssel erneut aus und wendet dann die Hashfunktion ein zweites Mal.</span><span class="sxs-lookup"><span data-stu-id="c0165-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="c0165-128">Die Ausgabehash ist 160 Bytes lang.</span><span class="sxs-lookup"><span data-stu-id="c0165-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0165-129">Ein Beispiel dafür, wie dieser Konstruktor verwendet, finden Sie die <xref:System.Security.Cryptography.HMACRIPEMD160> Klasse.</span><span class="sxs-lookup"><span data-stu-id="c0165-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0165-130">Der <paramref name="key" />-Parameter ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0165-130">The <paramref name="key" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fd3906fcbab62384e6ca161bad0c386ca4d50fc" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83963983" /></Metadata><TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Berechnet unter Verwendung der <see cref="T:System.Security.Cryptography.RIPEMD160" />-Hashfunktion einen Hash-Nachrichtenauthentifizierungscode (HMAC, Hash-based Message Authentication Code).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der RIPEMD-160-Hash Funktion erstellt und als Hash basiertes Nachrichtenauthentifizierungscode (HMAC) verwendet wird. Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an. Der Ausgabe Hash beträgt 160 Bits.  
  
 Ein HMAC kann verwendet werden, um zu bestimmen, ob eine Nachricht, die über einen unsicheren Kanal gesendet wurde, manipuliert wurde, vorausgesetzt, dass der Absender und der Empfänger einen geheimen Schlüssel gemeinsam nutzen. Der Absender berechnet den Hashwert für die ursprünglichen Daten und sendet die ursprünglichen Daten und den Hashwert als einzelne Nachricht. Der Empfänger berechnet den Hashwert für die empfangene Nachricht neu und überprüft, ob der berechnete HMAC mit dem übertragenen HMAC übereinstimmt.  
  
 Jede Änderung an den Daten oder dem Hashwert führt zu einem Konflikt, da das Wissen des geheimen Schlüssels erforderlich ist, um die Nachricht zu ändern und den korrekten Hashwert zu reproduzieren. Wenn der ursprüngliche und der berechnete Hashwert entsprechen, wird die Nachricht Daher authentifiziert.  
  
 <xref:System.Security.Cryptography.HMACRIPEMD160> akzeptiert Schlüssel beliebiger Größe und erzeugt eine Hash Sequenz mit einer Länge von 160 Bits.  
  
 Der ripemd-Hash Algorithmus und seine Nachfolger wurden vom Europäischen Reifen Projekt entwickelt. Der ursprüngliche ripemd-Algorithmus wurde entwickelt, um MD4 und MD5 zu ersetzen und wurde später verstärkt und umbenannt in RIPEMD-160. Der RIPEMD-160-Hash Algorithmus erzeugt einen 160-Bit-Hashwert. Die Designer der Algorithmen haben Sie in der öffentlichen Domäne abgelegt.  
  
 Aufgrund von Konnektivitätsproblemen mit MD4 und MD5 empfiehlt Microsoft SHA256 oder besser.  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie eine Datei mit dem <xref:System.Security.Cryptography.HMACRIPEMD160>-Objekt Signieren und dann die Datei überprüfen.  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/security/cryptographic-services">Kryptografische Dienste</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse mit einem nach dem Zufallsprinzip generierten 64-Byte-Schlüssel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der RIPEMD-160-Hash Funktion erstellt und als Hash basiertes Nachrichtenauthentifizierungscode (HMAC) verwendet wird. Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an. Der Ausgabe Hash beträgt 160 bytes.  
  
 Dieser Konstruktor verwendet einen zufällig generierten 64-Byte-Schlüssel.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services">Kryptografische Dienste</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">Der geheime Schlüssel für die <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Verschlüsselung. Der Schlüssel kann eine beliebige Länge aufweisen. Ab einer Länge von mehr als 64 Bytes wird jedoch unter Verwendung des SHA-1-Hashalgorithmus ein 64-Byte-Schlüssel aus ihm abgeleitet. Für den geheimen Schlüssel wird daher eine Größe von 64 Bytes empfohlen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />-Klasse mit den angegebenen Schlüsseldaten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> ist ein Typ eines Schlüssel gebundenen Hash Algorithmus, der aus der RIPEMD-160-Hash Funktion erstellt und als Hash basiertes Nachrichtenauthentifizierungscode (HMAC) verwendet wird. Der HMAC-Prozess mischt einen geheimen Schlüssel mit den Nachrichten Daten, führt einen Hashwert für das Ergebnis mit der Hash Funktion aus, mischt diesen Hashwert erneut mit dem geheimen Schlüssel und wendet die Hash Funktion dann ein zweites Mal an. Der Ausgabe Hash beträgt 160 bytes.  
  
   
  
## Examples  
 Ein Beispiel für die Verwendung dieses Konstruktors finden Sie in der <xref:System.Security.Cryptography.HMACRIPEMD160>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="key" /> ist <see langword="null" />.</exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services">Kryptografische Dienste</related>
      </Docs>
    </Member>
  </Members>
</Type>

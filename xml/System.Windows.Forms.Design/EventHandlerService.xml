<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventHandlerService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventHandlerService sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0b000-101">Stellt einen systematischen Ansatz für das Verwalten der Ereignishandler für das aktuelle Dokument bereit.</span><span class="sxs-lookup"><span data-stu-id="0b000-101">Provides a systematic way to manage event handlers for the current document.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b000-102">Entwickler sollten in der Lage, Code an einem Ort zu schreiben, die Ereignisse eines bestimmten Typs behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="0b000-102">Developers may want to be able to write code in one place that handles events of a certain type.</span></span>  
  
 <span data-ttu-id="0b000-103">Darüber hinaus müssen Entwickler möglicherweise globales ändern das Verhalten der Handler für bestimmte Ereignisse oder Typen von Ereignissen, die Designer-Komponenten verteilt werden können.</span><span class="sxs-lookup"><span data-stu-id="0b000-103">Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.</span></span>  
  
 <span data-ttu-id="0b000-104">Der Designer bei einem typischen Projekt sind viele verschiedene Objekte aus, damit er ist hilfreich zum Auflisten und Verweis auf diese Ereignisse von einem gemeinsamen Ort speichern.</span><span class="sxs-lookup"><span data-stu-id="0b000-104">The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.</span></span>  
  
 <span data-ttu-id="0b000-105">Dieser Dienst implementiert einen "Ereignis Stapel", der den aktuellen Satz von Ereignishandlern enthält.</span><span class="sxs-lookup"><span data-stu-id="0b000-105">This service implements an "event stack" that contains the current set of event handlers.</span></span> <span data-ttu-id="0b000-106">Der Stapel möglicherweise eine Vielzahl verschiedener Typen von Handlern auf dem Stapel.</span><span class="sxs-lookup"><span data-stu-id="0b000-106">The stack may have a variety of different types of handlers on the stack.</span></span>  
  
 <span data-ttu-id="0b000-107">Ein Designer kann z. B. mithilfe von Push übertragen oder hinzufügen, einen Tastaturhandler und eine Maushandler im Stapel.</span><span class="sxs-lookup"><span data-stu-id="0b000-107">For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack.</span></span> <span data-ttu-id="0b000-108">Bei ein Designer einen Ereignishandler anfordert, findet der Dienst den obersten Handler auf dem Stapel, der die Klasse entspricht, die Sie angefordert haben.</span><span class="sxs-lookup"><span data-stu-id="0b000-108">When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.</span></span>  
  
 <span data-ttu-id="0b000-109">Auf diese Weise der Dienst kann erweitert werden alle Ereignisse-Schema, und kann auch bestimmte Typen von Ereignishandlern ersetzt werden.</span><span class="sxs-lookup"><span data-stu-id="0b000-109">This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced.</span></span> <span data-ttu-id="0b000-110">Beispielsweise können Sie die Mausereignishandler ersetzen, ohne Auswirkung auf im Menü Ereignishandler oder die Tastatur-Ereignishandler.</span><span class="sxs-lookup"><span data-stu-id="0b000-110">For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (focusWnd As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventHandlerService(System::Windows::Forms::Control ^ focusWnd);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd"><span data-ttu-id="0b000-111">Das <see cref="T:System.Windows.Forms.Control" />, das gerade entworfen wird.</span><span class="sxs-lookup"><span data-stu-id="0b000-111">The <see cref="T:System.Windows.Forms.Control" /> which is being designed.</span></span></param>
        <summary><span data-ttu-id="0b000-112">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Design.EventHandlerService" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="0b000-112">Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventHandlerChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ EventHandlerChanged;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Forms.Design.IEventHandlerService.EventHandlerChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b000-113">Löst ein OnEventHandlerChanged-Ereignis aus.</span><span class="sxs-lookup"><span data-stu-id="0b000-113">Fires an OnEventHandlerChanged event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusWindow As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ FocusWindow { System::Windows::Forms::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b000-114">Ruft das Steuerelement ab, an das Ereignishandler angefügt sind.</span><span class="sxs-lookup"><span data-stu-id="0b000-114">Gets the control to which event handlers are attached.</span></span></summary>
        <value><span data-ttu-id="0b000-115">Das <see cref="T:System.Windows.Forms.Control" />, das durch den Konstruktor angefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="0b000-115">The <see cref="T:System.Windows.Forms.Control" /> which was attached through the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (handlerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetHandler(Type ^ handlerType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType"><span data-ttu-id="0b000-116">Der Typ des abzurufenden Handlers.</span><span class="sxs-lookup"><span data-stu-id="0b000-116">The type of the handler to get.</span></span></param>
        <summary><span data-ttu-id="0b000-117">Ruft den derzeit aktiven Ereignishandler des angegebenen Typs ab.</span><span class="sxs-lookup"><span data-stu-id="0b000-117">Gets the currently active event handler of the specified type.</span></span></summary>
        <returns><span data-ttu-id="0b000-118">Eine Instanz des Handlers, oder <see langword="null" />, wenn kein Handler des angeforderten Typs vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="0b000-118">An instance of the handler, or <see langword="null" /> if there is no handler of the requested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b000-119">Dieser Wert sollte niemals zwischengespeichert werden, da andere Komponenten geändert werden.</span><span class="sxs-lookup"><span data-stu-id="0b000-119">You should never cache this value because other components are free to change it.</span></span> <span data-ttu-id="0b000-120">Dieser Aufruf ist jedoch sehr schnell, insbesondere für Fälle, in denen Sie immer die gleiche Art von Handler angefordert werden.</span><span class="sxs-lookup"><span data-stu-id="0b000-120">This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopHandler(System::Object ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="0b000-121">Der Handler, der aus dem Stapel entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="0b000-121">The handler to remove from the stack.</span></span></param>
        <summary><span data-ttu-id="0b000-122">Nimmt den angegebenen Handler vom Stapel auf.</span><span class="sxs-lookup"><span data-stu-id="0b000-122">Pops the given handler off of the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b000-123">Wenn der Handler nicht die obersten Komponente auf dem Stapel ist, wird dies alle Handler bis zur und einschließlich Handler angezeigt.</span><span class="sxs-lookup"><span data-stu-id="0b000-123">If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushHandler(System::Object ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="0b000-124">Der Handler, der dem Stapel hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="0b000-124">The handler to add to the stack.</span></span></param>
        <summary><span data-ttu-id="0b000-125">Fügt einen neuen Ereignishandler im Stapel hinzu.</span><span class="sxs-lookup"><span data-stu-id="0b000-125">Pushes a new event handler on the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b000-126">Diese Ereignishandler werden alle Komponenten verwendet werden, die einen kompatiblen Handlertyp anfordern.</span><span class="sxs-lookup"><span data-stu-id="0b000-126">This handler will be used by all components that request a compatible handler type.</span></span> <span data-ttu-id="0b000-127">Wenn dieser Handler den angeforderten Typ nicht unterstützt, wird der nächste Handler auf dem Stapel verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0b000-127">If this handler does not support the requested type, the next handler on the stack will be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
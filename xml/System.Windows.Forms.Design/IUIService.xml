<Type Name="IUIService" FullName="System.Windows.Forms.Design.IUIService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9b70e3491e7fc4626ece56a30f590b12b2626d26" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37576628" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IUIService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIService" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.IUIService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IUIService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IUIService" />
  <TypeSignature Language="F#" Value="type IUIService = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("06A9C74B-5E32-4561-BE73-381B37869F4F")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ermöglicht die Interaktion mit der Benutzeroberfläche des Entwicklungsumgebungsobjekts, das als Host für den Designer fungiert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.IUIService> kann anzeigen von Fehlermeldungen, Dialogfelder anzeigen und Abrufen von ambient-Eigenschaften des Hosts, wie z. B. die Schriftart für die angezeigten Dialogfelder und Farbschemas, die über die <xref:System.Windows.Forms.Design.IUIService.Styles%2A> Eigenschaft "Dictionary".  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt einen Designer, die Befehle im Menü DesignerVerb bereitstellt, die Methoden zum Aufrufen der <xref:System.Windows.Forms.Design.IUIService>. Das Beispiel zu verwenden, kompilieren Sie den Beispielcode in eine Assembly, und fügen Sie einen Verweis auf die Assembly in einer Windows Forms-Anwendung. Wenn Sie Visual Studio verwenden das `IUIServiceExampleControl` wird automatisch hinzugefügt, die **Toolbox**. Fügen Sie eine Instanz von der `IUIServiceExampleControl` zu einem <xref:System.Windows.Forms.Form>. Auf die Designer-Verb-Befehle, die Aufrufen <xref:System.Windows.Forms.Design.IUIService> -Methoden, entweder mit der rechten Maustaste auf das Steuerelement auf der Oberfläche oder klicken Sie auf die Smarttag-Glyphe des Steuerelements auf und wählen Sie ein Element aus den Smarttagbereich.  
  
 [!code-cpp[IUIServiceExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#1)]
 [!code-csharp[IUIServiceExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#1)]
 [!code-vb[IUIServiceExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanShowComponentEditor">
      <MemberSignature Language="C#" Value="public bool CanShowComponentEditor (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanShowComponentEditor(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.CanShowComponentEditor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanShowComponentEditor (component As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanShowComponentEditor(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member CanShowComponentEditor : obj -&gt; bool" Usage="iUIService.CanShowComponentEditor component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">Die Komponente, die darauf überprüft werden soll, ob sie das Anzeigen eines <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> unterstützt.</param>
        <summary>Gibt an, ob die Komponente ein <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> anzeigen kann.</summary>
        <returns>
          <see langword="true" />, wenn die angegebene Komponente ein Formular des Komponenten-Editors anzeigen kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Komponenten-Editoren können ein Formular des Komponenten-Editor anzeigen, die auf einer Eigenschaftenseite aus das Component Object Model (COM) ähnelt.  
  
 Diese Methode überprüft, um zu bestimmen, ob die angegebene Komponente hat eine <xref:System.ComponentModel.ComponentEditor> anzeigen kann eine <xref:System.Windows.Forms.Design.ComponentEditorForm>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Design.IUIService.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)" />
      </Docs>
    </Member>
    <Member MemberName="GetDialogOwnerWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWin32Window GetDialogOwnerWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.IWin32Window GetDialogOwnerWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.GetDialogOwnerWindow" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDialogOwnerWindow () As IWin32Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::IWin32Window ^ GetDialogOwnerWindow();" />
      <MemberSignature Language="F#" Value="abstract member GetDialogOwnerWindow : unit -&gt; System.Windows.Forms.IWin32Window" Usage="iUIService.GetDialogOwnerWindow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWin32Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das Fenster ab, das beim Anzeigen von Dialogfeldern als Besitzer verwendet werden soll.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.IWin32Window" />, das das Fenster angibt, das alle untergeordneten Dialogfelder besitzen soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einige Dialogfelder sind diesen übergeordnet, zu einer Anwendung für die Besitzer und werden nicht in der Aufgabenliste angezeigt. Diese Methode gibt ein <xref:System.Windows.Forms.IWin32Window> , die angibt, dass des Fensters, das den Besitzer für Dialogfelder dieser Art werden soll, die aus einer integrierten Entwicklungsumgebung erzeugt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUIDirty">
      <MemberSignature Language="C#" Value="public void SetUIDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUIDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.SetUIDirty" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetUIDirty ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetUIDirty();" />
      <MemberSignature Language="F#" Value="abstract member SetUIDirty : unit -&gt; unit" Usage="iUIService.SetUIDirty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt ein Flag fest, das eine Änderung der Benutzeroberfläche angibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt an, dass die Benutzeroberfläche geändert wurde und muss aktualisiert werden. Es ist wichtig, um die Notwendigkeit, eine Aktualisierung anzugeben, die Änderung einer Symbolleiste oder im Menü der Status des Artikels. Die meisten entwicklungsumgebungen cache den Status eines dieser Elemente auf Geschwindigkeit und müssen wissen, wann sie aktualisiert werden müssen. Diese Methode wird z. B. aufgerufen, nachdem die Objekte in der Designeransicht, aktivieren das Ausschneiden und kopieren die Menüelemente ausgewählt wurden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowComponentEditor">
      <MemberSignature Language="C#" Value="public bool ShowComponentEditor (object component, System.Windows.Forms.IWin32Window parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowComponentEditor(object component, class System.Windows.Forms.IWin32Window parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowComponentEditor (component As Object, parent As IWin32Window) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShowComponentEditor(System::Object ^ component, System::Windows::Forms::IWin32Window ^ parent);" />
      <MemberSignature Language="F#" Value="abstract member ShowComponentEditor : obj * System.Windows.Forms.IWin32Window -&gt; bool" Usage="iUIService.ShowComponentEditor (component, parent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="parent" Type="System.Windows.Forms.IWin32Window" />
      </Parameters>
      <Docs>
        <param name="component">Die Komponente, für die ein <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> angezeigt werden soll.</param>
        <param name="parent">Das <see cref="T:System.Windows.Forms.IWin32Window" />, dem alle Dialogfelder untergeordnet sein sollen.</param>
        <summary>Versucht, ein <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> für eine Komponente anzuzeigen.</summary>
        <returns>
          <see langword="true" />, wenn der Versuch erfolgreich ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.Design.ComponentEditorForm> ist vergleichbar mit einer Eigenschaftenseite aus das Component Object Model (COM).  
  
 Wenn die Komponente keine Komponenten-Editoren, unterstützt eine <xref:System.ArgumentException> ausgelöst. Um dies zu vermeiden, müssen Sie Sie aufrufen <xref:System.Windows.Forms.Design.IUIService.CanShowComponentEditor%2A> erste.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Komponente unterstützt keine Komponenten-Editoren.</exception>
        <altmember cref="M:System.Windows.Forms.Design.IUIService.CanShowComponentEditor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog (System.Windows.Forms.Form form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DialogResult ShowDialog(class System.Windows.Forms.Form form) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowDialog(System.Windows.Forms.Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowDialog(System::Windows::Forms::Form ^ form);" />
      <MemberSignature Language="F#" Value="abstract member ShowDialog : System.Windows.Forms.Form -&gt; System.Windows.Forms.DialogResult" Usage="iUIService.ShowDialog form" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="form">Das anzuzeigende <see cref="T:System.Windows.Forms.Form" />.</param>
        <summary>Versucht, das angegebene Formular in einem Dialogfeld anzuzeigen.</summary>
        <returns>Einer der <see cref="T:System.Windows.Forms.DialogResult" />-Werte, der den vom Dialogfeld zurückgegebenen Ergebniscode angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird versucht, zum Abrufen einer Instanz von der <xref:System.Windows.Forms.Design.IUIService> Klasse und das Aufrufen des Diensts <xref:System.Windows.Forms.Design.IUIService.ShowDialog%2A> Methode.  
  
 [!code-cpp[IUIServiceExample#4](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#4)]
 [!code-csharp[IUIServiceExample#4](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#4)]
 [!code-vb[IUIServiceExample#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DialogResult" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowError">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt die angegebene Fehlermeldung in einem Meldungsfeld an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowError (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowError(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="abstract member ShowError : Exception -&gt; unit" Usage="iUIService.ShowError ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Das anzuzeigende <see cref="T:System.Exception" />.</param>
        <summary>Zeigt die angegebene Ausnahme und die Informationen darüber in einem Meldungsfeld an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode ermöglicht die Message-Box-Anzeige ordnungsgemäß in der Entwicklungsumgebung integriert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowError (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowError(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ShowError : string -&gt; unit" Usage="iUIService.ShowError message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die anzuzeigende Fehlermeldung.</param>
        <summary>Zeigt die angegebene Fehlermeldung in einem Meldungsfeld an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode ermöglicht die Message-Box-Anzeige ordnungsgemäß in der Entwicklungsumgebung integriert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (Exception ex, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(class System.Exception ex, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowError (ex As Exception, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowError(Exception ^ ex, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ShowError : Exception * string -&gt; unit" Usage="iUIService.ShowError (ex, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Das anzuzeigende <see cref="T:System.Exception" />.</param>
        <param name="message">Eine anzuzeigende Meldung, die Informationen über die Ausnahme bereitstellt.</param>
        <summary>Zeigt die angegebene Ausnahme und die Informationen darüber in einem Meldungsfeld an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode ermöglicht die Message-Box-Anzeige ordnungsgemäß in der Entwicklungsumgebung integriert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird versucht, zum Abrufen einer Instanz von der <xref:System.Windows.Forms.Design.IUIService> und Aufrufen des Diensts <xref:System.Windows.Forms.Design.IUIService.ShowError%2A> Methode.  
  
 [!code-cpp[IUIServiceExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#3)]
 [!code-csharp[IUIServiceExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#3)]
 [!code-vb[IUIServiceExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowMessage">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zeigt die angegebene Meldung in einem Meldungsfeld an.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public void ShowMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ShowMessage : string -&gt; unit" Usage="iUIService.ShowMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die anzuzeigende Meldung.</param>
        <summary>Zeigt die angegebene Meldung in einem Meldungsfeld an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird sichergestellt, dass die Anzeige des Meldungsfelds ordnungsgemäß mit der Entwicklungsumgebung integriert ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A> Methode, um ein Meldungsfeld anzuzeigen.  
  
 [!code-cpp[IUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[IUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#2)]
 [!code-vb[IUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public void ShowMessage (string message, string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMessage(string message, string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowMessage (message As String, caption As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowMessage(System::String ^ message, System::String ^ caption);" />
      <MemberSignature Language="F#" Value="abstract member ShowMessage : string * string -&gt; unit" Usage="iUIService.ShowMessage (message, caption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die anzuzeigende Meldung.</param>
        <param name="caption">Die Beschriftung für das Meldungsfeld.</param>
        <summary>Zeigt die angegebene Meldung in einem Meldungsfeld mit der angegebenen Beschriftung an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird sichergestellt, dass die Anzeige des Meldungsfelds ordnungsgemäß mit der Entwicklungsumgebung integriert ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird versucht, zum Abrufen einer Instanz von der <xref:System.Windows.Forms.Design.IUIService> und Aufrufen des Diensts <xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A> Methode.  
  
 [!code-cpp[IUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[IUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#2)]
 [!code-vb[IUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowMessage (string message, string caption, System.Windows.Forms.MessageBoxButtons buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DialogResult ShowMessage(string message, string caption, valuetype System.Windows.Forms.MessageBoxButtons buttons) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxButtons)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowMessage (message As String, caption As String, buttons As MessageBoxButtons) As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowMessage(System::String ^ message, System::String ^ caption, System::Windows::Forms::MessageBoxButtons buttons);" />
      <MemberSignature Language="F#" Value="abstract member ShowMessage : string * string * System.Windows.Forms.MessageBoxButtons -&gt; System.Windows.Forms.DialogResult" Usage="iUIService.ShowMessage (message, caption, buttons)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="buttons" Type="System.Windows.Forms.MessageBoxButtons" />
      </Parameters>
      <Docs>
        <param name="message">Die anzuzeigende Meldung.</param>
        <param name="caption">Die Beschriftung für das Dialogfeld.</param>
        <param name="buttons">Einer der <see cref="T:System.Windows.Forms.MessageBoxButtons" />-Werte: <see cref="F:System.Windows.Forms.MessageBoxButtons.OK" />, <see cref="F:System.Windows.Forms.MessageBoxButtons.OKCancel" />, <see cref="F:System.Windows.Forms.MessageBoxButtons.YesNo" /> oder <see cref="F:System.Windows.Forms.MessageBoxButtons.YesNoCancel" />.</param>
        <summary>Zeigt die angegebene Meldung in einem Meldungsfeld mit der angegebenen Beschriftung und den im Dialogfeld zu platzierenden Schaltflächen an.</summary>
        <returns>Einer der <see cref="T:System.Windows.Forms.DialogResult" />-Werte, der den vom Dialogfeld zurückgegebenen Ergebniscode angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird sichergestellt, dass die Anzeige des Meldungsfelds ordnungsgemäß mit der Entwicklungsumgebung integriert ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A> Methode, um ein Meldungsfeld anzuzeigen.  
  
 [!code-cpp[IUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[IUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#2)]
 [!code-vb[IUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DialogResult" />
        <altmember cref="T:System.Windows.Forms.MessageBox" />
      </Docs>
    </Member>
    <Member MemberName="ShowToolWindow">
      <MemberSignature Language="C#" Value="public bool ShowToolWindow (Guid toolWindow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowToolWindow(valuetype System.Guid toolWindow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowToolWindow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowToolWindow (toolWindow As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShowToolWindow(Guid toolWindow);" />
      <MemberSignature Language="F#" Value="abstract member ShowToolWindow : Guid -&gt; bool" Usage="iUIService.ShowToolWindow toolWindow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolWindow" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="toolWindow">Ein <see cref="T:System.Guid" />-Bezeichner für das Toolfenster. Es kann sich um eine benutzerdefinierte <see cref="T:System.Guid" /> oder um einen der vordefinierten Werte aus <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> handeln.</param>
        <summary>Zeigt das angegebene Toolfenster an.</summary>
        <returns>
          <see langword="true" />, wenn das Toolfenster erfolgreich angezeigt wurde, <see langword="false" />, wenn es nicht angezeigt oder nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird versucht, zum Abrufen einer Instanz von der <xref:System.Windows.Forms.Design.IUIService> und Aufrufen des Diensts <xref:System.Windows.Forms.Design.IUIService.ShowToolWindow%2A> Methode.  
  
 [!code-cpp[IUIServiceExample#5](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#5)]
 [!code-csharp[IUIServiceExample#5](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#5)]
 [!code-vb[IUIServiceExample#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.StandardToolWindows" />
      </Docs>
    </Member>
    <Member MemberName="Styles">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Styles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Styles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.IUIService.Styles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Styles As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Styles { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Styles : System.Collections.IDictionary" Usage="System.Windows.Forms.Design.IUIService.Styles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der spezifischen Formate der Hostumgebung ab.</summary>
        <value>Ein <see cref="T:System.Collections.IDictionary" />, das die Stileinstellungen enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Wörterbuch kann Informationen aus der hostumgebung bereitstellen. Mindestens besteht aus die Schriftart, die für die standardmäßigen Benutzeroberflächen-Text, und die Farbe verwendet werden soll, für die Hervorhebung verwenden. Diese ist erforderlich, dass die Stile "DialogFont" und "HighlightColor" sind.  
  
 Die Werte bei diesen Formaten können mithilfe des Stils als Schlüssel für das Wörterbuch, das Zugriff auf das Wörterbuch mit dem Schlüssel als Indexer abgerufen werden. Zum Beispiel: (objektimplementierung <xref:System.Windows.Forms.Design.IUIService>). Formate [(Stilnamenzeichenfolge in Anführungszeichen)].  
  
   
  
## Examples  
 Im folgenden Codebeispiel ruft die Dialogfeld-Schriftart aus der hostumgebung ab.  
  
 [!code-cpp[Classic IUIService.Styles Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic IUIService.Styles Example/CPP/source.cpp#1)]
 [!code-csharp[Classic IUIService.Styles Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic IUIService.Styles Example/CS/source.cs#1)]
 [!code-vb[Classic IUIService.Styles Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic IUIService.Styles Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
  </Members>
</Type>
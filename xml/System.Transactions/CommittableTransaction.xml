<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommittableTransaction.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cd3e8700bb48cfabbbc72eb2ea0616b8d41848bb1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3e8700bb48cfabbbc72eb2ea0616b8d41848bb1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Describes a committable transaction.</source>
          <target state="translated">Beschreibt eine Transaktion, für die ein Commit ausgeführt werden kann.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class provides an explicit way for applications to use a transaction, as opposed to using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class implicitly.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>-Klasse ermöglicht es Anwendungen, Transaktionen explizit zu verwenden, anstatt die <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph>-Klasse implizit zu verwenden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, the application writer needs to specifically call the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> methods in order to commit or abort the transaction.</source>
          <target state="translated">Im Unterschied zur <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>-Klasse muss der Autor der Anwendung die <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph>-Methode bzw. die <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph>-Methode aufrufen, um einen Commit der Transaktion auszuführen oder um sie abzubrechen.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>However, only the creator of a transaction can commit the transaction.</source>
          <target state="translated">Die Transaktion kann jedoch nur der Ersteller einer Transaktion übergeben werden.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Therefore, copies of a committable transaction, obtained through the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> method are not committable.</source>
          <target state="translated">Kopien der Transaktion ein Commit ausgeführt werden kann, deshalb erhalten, über die <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> Methode sind nicht in der Commit ausgeführt werden kann.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">Wir empfehlen das Erstellen von impliziter Transaktionen, die mithilfe der <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> Klasse, sodass der Kontext der ambient-Transaktion automatisch für Sie verwaltet wird.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">Verwenden Sie zudem die <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> und <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> Klasse für Anwendungen, die die Verwendung der gleichen Transaktion über mehrere Funktionsaufrufe oder Aufrufe von mehreren Threads erfordern.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Weitere Informationen zu diesem Modell finden Sie unter der <bpt id="p1">[</bpt>implementieren eine implizite Transaktion mithilfe von Transaktionsbereich<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> Thema.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Creating a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> does not automatically set the ambient transaction, which is the transaction your code executes in.</source>
          <target state="translated">Erstellen einer <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> nicht automatisch die Ambiente-Transaktion, also den Code, in ausführt der Transaktion festgelegt.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You can get or set the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> object.</source>
          <target state="translated">Sie können abrufen oder festlegen die Ambiente-Transaktion durch Aufrufen der statischen <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft des globalen <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Weitere Informationen zu ambient-Transaktionen finden Sie im Abschnitt "Verwalten des Transaktionsflusses mithilfe von TransactionScopeOption" die <bpt id="p1">[</bpt>implementieren eine implizite Transaktion mithilfe von Transaktionsbereich<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> Thema.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</source>
          <target state="translated">Wenn die Ambiente-Transaktion nicht festgelegt ist, ist jeder Vorgang in einem Ressourcenmanager nicht Teil dieser Transaktion.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You need to explicitly set and reset the ambient transaction to ensure that resource managers operate under the right transaction context.</source>
          <target state="translated">Sie müssen explizit festlegen und Zurücksetzen der ambient-Transaktions um sicherzustellen, dass die Ressourcen-Manager die richtigen bereits verwendeten Transaktionskontext ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Until a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> has been committed, all the resources involved with the transaction are still locked.</source>
          <target state="translated">Bis eine <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> wurde bereits ein Commit ausgeführt wurde, werden weiterhin alle Ressourcen, die mit der Transaktion beteiligten gesperrt.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object cannot be reused.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>-Objekt kann nicht wiederverwendet werden.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</source>
          <target state="translated">Nachdem sie ein Commit oder Rollback wurde, kann nicht erneut verwendet werden, in einer Transaktion oder als der aktuelle Kontext der ambient-Transaktion festgelegt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The following sample creates two new instances of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, commits and rolls back them respectively.</source>
          <target state="translated">Im folgende Beispiel erstellt zwei neue Instanzen von <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, ein Commit ausgeführt wird, und werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>This type is thread safe.</source>
          <target state="translated">Dieser Typ ist threadsicher.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> and commits it.</source>
          <target state="translated">Das folgende Beispiel erstellt eine neue Instanz der <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> und führt einen Commit für sie.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Es wurde versucht, unter Windows 98, Windows 98 SE oder Windows Millennium Edition eine Transaktion zu erstellen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>The maximum amount of time the transaction can exist, before it is aborted.</source>
          <target state="translated">Die maximale Zeitspanne, für die die Transaktion vorhanden sein kann, bevor sie abgebrochen wird.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> value.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>-Klasse mit dem angegebenen <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>-Wert.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Es wurde versucht, unter Windows 98, Windows 98 SE oder Windows Millennium Edition eine Transaktion zu erstellen.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use for the new transaction.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph>-Struktur, die die Transaktionsoptionen beschreibt, die für die neue Transaktion verwendet werden sollen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified transaction options.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>-Klasse mit den angegebenen Transaktionsoptionen.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> with options, and aborts it.</source>
          <target state="translated">Das folgende Beispiel erstellt eine neue Instanz der <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> mit Optionen, und abgebrochen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Es wurde versucht, unter Windows 98, Windows 98 SE oder Windows Millennium Edition eine Transaktion zu erstellen.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> ist ungültig.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>Begins an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Versucht, einen asynchronen Commit für die Transaktion auszuführen.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Schnittstelle, mit deren Hilfe der Aufrufer den Status des asynchronen Vorgangs überprüfen oder auf den Abschluss des Vorgangs warten kann.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>This method returns immediately, before the transaction has been completed.</source>
          <target state="translated">Diese Methode gibt sofort vor dem Abschluss der Transaktion.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The transaction then commits on a different thread, and the <ph id="ph1">`asyncCallback`</ph> delegate is invoked when it has completed.</source>
          <target state="translated">Die Transaktion führt anschließend einen Commit in einem anderen Thread und die <ph id="ph1">`asyncCallback`</ph> Delegat wird aufgerufen, wenn er abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>After this method is called, you do not receive the outcome of the transaction until you call <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</source>
          <target state="translated">Nachdem diese Methode aufgerufen wird, erhalten Sie keine das Ergebnis der Transaktion bis zum Aufruf von <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The commit process may complete synchronously inside this method call.</source>
          <target state="translated">Das Commit möglicherweise synchron in den Aufruf dieser Methode abzuschließen.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Attempts to commit the transaction.</source>
          <target state="translated">Versucht, einen Commit für die Transaktion auszuführen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</source>
          <target state="translated">Wenn diese Methode aufgerufen wird, wird alle Objekte, die registriert haben, für die Einbeziehung in die Transaktion abgerufen werden, können ihre Stimme auf ein commit oder ein Rollback der Transaktion unabhängig angeben.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If any participant votes to roll back the transaction, it is rolled back and this method throws a <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> exception.</source>
          <target state="translated">Wenn sich ein Teilnehmer bestimmt, ob für die Transaktion ein Rollback auszuführen, wird ein Rollback und löst diese Methode eine <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> Ausnahme.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is a normal occurrence for a transaction and your code should catch and process such exceptions.</source>
          <target state="translated">Dies ist ein normales Verhalten für eine Transaktion und Ihren Code abgefangen und verarbeitet Sie solche Ausnahmen werden sollte.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> blockieren, bis die erste Phase der transaktionsverarbeitung abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">Die erste Phase nach der alle Ressourcen-Manager beendet und Eintragungen in der Transaktion für das Transaktionsergebnis gewählt haben und die <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> hat dauerhaft entschieden, einen commit oder Abbruch der Transaktion.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">Die zweite Phase der Verarbeitung ist immer asynchron.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">Daher besteht keine Garantie, dass Daten nur von innerhalb einer bestimmten Transaktion ein Commit unmittelbar danach zur Verfügung stehen, wenn eine andere Transaktion nicht verwenden, um diese Daten anzuzeigen.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">Da diese Methode blockiert, bis die erste Phase der transaktionsverarbeitung abgeschlossen ist, ist Sie äußerst vorsichtig sein sollte bei Verwendung dieser Methode in einer Windows Form (WinForm)-Anwendung oder ein Deadlock auftreten können.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">Wenn Sie diese Methode eine WinForm-Steuerelement-Ereignis (z. B. auf eine Schaltfläche) aufrufen, und verwenden Sie die synchrone <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> Methode, um das Steuerelement zum Ausführen einiger Aufgaben Benutzeroberfläche (z. B. Farben zu ändern), während der Verarbeitung der Transaktions leiten eine Deadlock erfolgt.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">Grund hierfür ist die <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> Methode erfolgt synchron, und den Thread blockiert, bis im UI-Thread seine Aufgabe abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">In diesem Szenario im UI-Thread jedoch auch wartet der Arbeitsthread eines Commits die Transaktion auf.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">Das Ergebnis ist, dass keine zu fortfahren können, und der Bereich wartet unbegrenzt des Commits abgeschlossen.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">Verwenden Sie <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> statt <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> möglich, da es sich um asynchron und daher weniger anfällig für Deadlocks handelt.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called on a transaction and the transaction becomes <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> wird für eine Transaktion aufgerufen, und die Transaktion wird zu <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> wird aufgerufen, und es wird zum ersten Mal ein Commit der Transaktion ausgeführt.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Ends an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Beendet einen Versuch, einen asynchronen Commit für die Transaktion auszuführen.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You should call this method in the callback delegate specified as a parameter to the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> method, when you have finished any cleanup work associated with the asynchronous commitment.</source>
          <target state="translated">Sie sollten diese Methode aufrufen, in der Rückrufdelegat, der als Parameter an die <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> Methode, wenn Sie alle zugeordneten asynchronen Commit Bereinigungen abgeschlossen haben.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You can also call this method early without waiting for the delegate.</source>
          <target state="translated">Sie können diese Methode auch frühe aufrufen, ohne zu warten, für den Delegaten.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>If, by the time you call this method, the transaction has not completed, this method waits for its completion.</source>
          <target state="translated">Wenn nach der Zeit, die Sie diese Methode aufrufen, die Transaktion nicht abgeschlossen wurde, wird dessen Abschluss dieser Methode wartet.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> property returned by <ph id="ph2">`asyncResult`</ph> is always <ph id="ph3">`false`</ph>, even if the operation completed synchronously.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> von zurückgegebene Eigenschaft <ph id="ph2">`asyncResult`</ph> ist immer <ph id="ph3">`false`</ph>, selbst wenn der Vorgang synchron abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> blockieren, bis die erste Phase der transaktionsverarbeitung abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">Die erste Phase nach der alle Ressourcen-Manager beendet und Eintragungen in der Transaktion für das Transaktionsergebnis gewählt haben und die <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> hat dauerhaft entschieden, einen commit oder Abbruch der Transaktion.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">Die zweite Phase der Verarbeitung ist immer asynchron.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">Daher besteht keine Garantie, dass Daten nur von innerhalb einer bestimmten Transaktion ein Commit unmittelbar danach zur Verfügung stehen, wenn eine andere Transaktion nicht verwenden, um diese Daten anzuzeigen.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> wird aufgerufen, und es wird zum ersten Mal ein Commit der Transaktion ausgeführt.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>Gets the object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Ruft das Objekt ab, das als letzter Parameter des <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph>-Methodenaufrufs bereitgestellt wurde.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>The object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Das Objekt, das als letzter Parameter des <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph>-Methodenaufrufs bereitgestellt wurde.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">Ruft einen <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> ab, der verwendet wird, um auf den Abschluss eines asynchronen Vorgangs zu warten.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, der verwendet wird, um auf den Abschluss eines asynchronen Vorgangs zu warten.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>Gets an indication of whether the asynchronous commit operation completed synchronously.</source>
          <target state="translated">Ruft eine Angabe darüber ab, ob der asynchrone Commitvorgang synchron abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous commit operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der asynchrone Commitvorgang synchron abgeschlossen wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> even if the operation completed synchronously.</source>
          <target state="translated">Diese Eigenschaft gibt immer <ph id="ph1">&lt;see langword="false" /&gt;</ph> zurück, auch wenn der Vorgang synchron abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source>Gets an indication whether the asynchronous commit operation has completed.</source>
          <target state="translated">Ruft eine Angabe darüber ab, ob der asynchrone Commitvorgang abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is complete; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Vorgang abgeschlossen ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="HasRunnableWorkflowEvent" FullName="System.Activities.DurableInstancing.HasRunnableWorkflowEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="216e5505e7f1a9e45ff853c379ef7c1b6a3cfba1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HasRunnableWorkflowEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent&lt;System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HasRunnableWorkflowEvent extends System.Runtime.DurableInstancing.InstancePersistenceEvent`1&lt;class System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HasRunnableWorkflowEvent&#xA;Inherits InstancePersistenceEvent(Of HasRunnableWorkflowEvent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class HasRunnableWorkflowEvent sealed : System::Runtime::DurableInstancing::InstancePersistenceEvent&lt;System::Activities::DurableInstancing::HasRunnableWorkflowEvent ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.DurableInstancing.InstancePersistenceEvent&lt;System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.Activities.DurableInstancing.HasRunnableWorkflowEvent</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3ea73-101">Stellt ein Ereignis dar, das der SQL-Workflowinstanzspeicher auslöst, um Workflowhosts zu benachrichtigen, dass ausführbare Instanzen in der Beibehaltungsdatenbank vorhanden sind.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3ea73-101">Represents an event that the SQL Workflow Instance Store raises to notify workflow hosts about the existence of runnable instances in the persistence database.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ea73-102">Eine Instanz ist *ausführbare*, wenn er befindet sich nicht im Zustand "angehalten" oder "abgeschlossen" befindet und die folgenden Bedingungen erfüllt:</span><span class="sxs-lookup"><span data-stu-id="3ea73-102">An instance is *runnable*, if it is not in the suspended state or the completed state and satisfies the following conditions:</span></span>  
  
-   <span data-ttu-id="3ea73-103">Die Instanz ist nicht gesperrt und weist einen ausstehenden Timer auf, der abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="3ea73-103">The instance is unlocked and has a pending timer that has expired.</span></span>  
  
-   <span data-ttu-id="3ea73-104">Die Instanz ist nicht gesperrt und sein Status **ausführen**.</span><span class="sxs-lookup"><span data-stu-id="3ea73-104">The instance is unlocked and its status is **Executing**.</span></span>  
  
-   <span data-ttu-id="3ea73-105">Die Instanz weist eine ungültige Sperre auf.</span><span class="sxs-lookup"><span data-stu-id="3ea73-105">The instance has an invalid lock on it.</span></span>  
  
 <span data-ttu-id="3ea73-106">Ein Instanzspeicher soll in regelmäßigen Abständen nach ausführbaren Instanzen suchen, die zu einem Workflowhost gehören, der den Speicher verwendet.</span><span class="sxs-lookup"><span data-stu-id="3ea73-106">An instance store should periodically search for runnable instances that belong to a workflow host that uses the store.</span></span> <span data-ttu-id="3ea73-107">Er soll das <xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent> auslösen, wenn im Beibehaltungsspeicher eine ausführbare Instanz gefunden wird, die dem zugehörigen Workflowhosttyp entspricht.</span><span class="sxs-lookup"><span data-stu-id="3ea73-107">It should raise the <xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent> when it finds a runnable instance in the persistence store that matches its workflow host type.</span></span> <span data-ttu-id="3ea73-108">Wenn der Instanzspeicher keine ausführbare Instanz im Beibehaltungsspeicher findet, soll er weiterhin den Beibehaltungsspeicher auf ausführbare Instanzen überwachen.</span><span class="sxs-lookup"><span data-stu-id="3ea73-108">If the instance store does not find a runnable instance in the persistence store, it should continue to monitor the persistence store for any runnable instances.</span></span>  
  
 <span data-ttu-id="3ea73-109">Nach Auslösen von HasRunnableWorkflowEvent soll der Instanzspeicher die Überwachung des Beibehaltungsspeichers auf ausführbare Instanzen beenden, bis er das <xref:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand>-Element empfängt und ausführt.</span><span class="sxs-lookup"><span data-stu-id="3ea73-109">After raising the HasRunnableWorkflowEvent, the instance store should stop monitoring the persistence store for runnable instances until it receives and executes the <xref:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand>.</span></span> <span data-ttu-id="3ea73-110">Die Überwachung wird nur dann fortgeführt, wenn die Ausführung von TryLoadRunnableWorkflowCommand keine ausführbaren Instanzen zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="3ea73-110">The monitoring continues only if the TryLoadRunnableWorkflowCommand execution does not return any runnable instances.</span></span>  
  
 <span data-ttu-id="3ea73-111">Wenn ein Workflowhost das HasRunnableWorkflowEvent empfängt, führt er das <xref:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand>-Element für den Instanzspeicher aus, um die Instanz in den Arbeitsspeicher zu laden.</span><span class="sxs-lookup"><span data-stu-id="3ea73-111">When a workflow host receives the HasRunnableWorkflowEvent, it executes the <xref:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand> against the instance store to load the instance into the memory.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HasRunnableWorkflowEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.DurableInstancing.HasRunnableWorkflowEvent.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HasRunnableWorkflowEvent();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3ea73-112">Initialisiert eine Instanz der <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ea73-112">Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ColumnAttribute" FullName="System.Data.Linq.Mapping.ColumnAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="434bdeafe85ec70ee665c0143c4b57306fd46422" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30389044" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ColumnAttribute : System.Data.Linq.Mapping.DataAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ColumnAttribute extends System.Data.Linq.Mapping.DataAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.ColumnAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ColumnAttribute&#xA;Inherits DataAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ColumnAttribute sealed : System::Data::Linq::Mapping::DataAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Linq.Mapping.DataAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ordnet einer Spalte in einer Datenbanktabelle eine Klasse zu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Attribut können Sie einen Member einer Entitätsklasse für die Darstellung einer Spalte in einer Datenbanktabelle festlegen. Sie können dieses Attribut anwenden, um ein Feld oder eine Eigenschaft, die `public`, `private`, oder `internal`.  
  
 Nur diese Entität Klassenmember als Spalten beibehalten werden identifiziert beim [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] Änderungen in der Datenbank gespeichert.  
  
 Verwenden Sie Kommas zum Trennen mehrerer Eigenschaften des Attributs an.  
  
   
  
## Examples  
  
```vb  
<Table(Name:="Employees")>  _  
Public Class Employees  
    Private _LastName As String  
    ' …  
    <Column(Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", _  
        CanBeNull:=false)> _  
    Public Property LastName() As String  
        Get  
            Return Me._LastName  
        End Get  
        Set  
            If ((Me._LastName = value) _  
                = false) Then  
                Me.OnPropertyChanging("LastName")  
                Me._LastName = value  
                Me.OnPropertyChanged("LastName")  
            End If  
        End Set  
    End Property  
End Class  
```  
  
```csharp  
[Table(Name="Employees")]  
public class Employees  
{  
    private string _LastName;      
    // …  
    [Column(Storage="_LastName", DbType="NVarChar(20) NOT NULL",   
        CanBeNull=false)]  
    public string LastName  
    {  
        get  
        {  
            return this._LastName;  
        }  
        set  
        {  
            if ((this._LastName != value))  
            {  
                this.OnPropertyChanging("LastName");  
                this._LastName = value;  
                this.OnPropertyChanged("LastName");  
            }  
        }  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ColumnAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ColumnAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSync">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Mapping.AutoSync AutoSync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Linq.Mapping.AutoSync AutoSync" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSync As AutoSync" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::Mapping::AutoSync AutoSync { System::Data::Linq::Mapping::AutoSync get(); void set(System::Data::Linq::Mapping::AutoSync value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.AutoSync</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Data.Linq.Mapping.AutoSync" />-Enumeration ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Data.Linq.Mapping.AutoSync" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#1)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeNull">
      <MemberSignature Language="C#" Value="public bool CanBeNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull" />
      <MemberSignature Language="VB.NET" Value="Public Property CanBeNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob eine Spalte NULL-Werte enthalten kann.</summary>
        <value>Standard = <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diesen Wert, um festlegen `false`, werden angenommen, dass die Daten in die entsprechende Spalte ungleich Null sein.  
  
> [!NOTE]
>  Diese Eigenschaft ist doppelt vorhanden, von der <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> Eigenschaft der Einfachheit halber. Die <xref:System.Data.Linq.DataContext.CreateDatabase%2A> Methode verwendet nur die <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> Eigenschaft. Aus diesem Grund müssen Sie angeben, ob eine Spalte in null-Werte enthalten, kann die <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> Eigenschaft auch.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#2)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbType">
      <MemberSignature Language="C#" Value="public string DbType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DbType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.DbType" />
      <MemberSignature Language="VB.NET" Value="Public Property DbType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DbType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der Datenbankspalte ab oder legt diesen fest.</summary>
        <value>Ein Zeichenfolgenwert, der den genauen Text angibt, der die Spalte in einer Transact-SQL-Tabellendeklaration definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft, um den genauen Text festzulegen, der die Spalte in einer Transact-SQL-Tabellendeklaration definiert. Geben Sie die <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> Eigenschaft nur, wenn Sie planen, verwenden Sie <xref:System.Data.Linq.DataContext.CreateDatabase%2A> zum Erstellen einer Instanz der Datenbank.  
  
 Der Standardwert von <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> aus den Elementtyp abgeleitet wird. Weitere Informationen finden Sie unter [SQL-CLR-Typzuordnung](~/docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md).  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#4)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob eine Spalte eine berechnete Spalte in einer Datenbank ist.</summary>
        <value>Standard = leer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft bei Verwendung von <xref:System.Data.Linq.DataContext.CreateDatabase%2A> für eine Spalte definieren, die berechneten Werte enthält.  
  
 Z. B. zum Erstellen einer Spalte, die in SQL als definierten `InventoryVal AS UnitPrice * UnitsInStock`, verwenden Sie die folgenden *Ausdruck* Zeichenfolge: `"UnitPrice * UnitsInStock"`.  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] unterstützt keine berechneten Spalten als Primärschlüssel.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#5)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDbGenerated">
      <MemberSignature Language="C#" Value="public bool IsDbGenerated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDbGenerated" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDbGenerated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDbGenerated { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob eine Spalte Werte enthält, die von der Datenbank automatisch generiert werden.</summary>
        <value>Standard = <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> Mitglieder werden synchronisiert, unmittelbar nachdem die Datenzeile eingefügt wird, und die Elemente verfügbar, nachdem sind <xref:System.Data.Linq.DataContext.SubmitChanges%2A> abgeschlossen ist.  
  
> [!NOTE]
>  Wenn die Spalte enthält die Primärschlüsselwerte angeben <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> als `true`, sollten Sie auch hinzufügen der <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> Eigenschaft mithilfe der `IDENTITY` Modifizierer.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#6)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDiscriminator">
      <MemberSignature Language="C#" Value="public bool IsDiscriminator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDiscriminator" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDiscriminator As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDiscriminator { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob eine Spalte einen Diskriminatorwert für eine [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]-Vererbungshierarchie enthält.</summary>
        <value>Standard = <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `true`, diese Eigenschaft kennzeichnet den Klassenmember der Diskriminatorwert für eine Vererbungshierarchie.  
  
 Sie können diese Eigenschaft festlegen, um `true` für nicht mehr als ein Member, die auf den obersten gehören muss Klasse in der Hierarchie zugeordnet.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#7)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimaryKey">
      <MemberSignature Language="C#" Value="public bool IsPrimaryKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimaryKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPrimaryKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimaryKey { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob dieser Klassenmember eine Spalte darstellt, die den gesamten Primärschlüssel der Tabelle oder einen Teil von diesem bildet.</summary>
        <value>Standard = <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Entitätsklasse, müssen Sie mindestens einen Member mit diesem Attribut angeben, und müssen Sie den Primärschlüssel oder einen eindeutigen Schlüssel in der entsprechenden Tabelle oder Sicht zugeordnet werden. Diese Anweisungen vorgehen [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] Instanzen der Klasse als schreibgeschützt sind und zum Senden von Änderungen an der Datenbank berücksichtigen.  
  
 Wenn Sie mehr als ein Member der Klasse mithilfe dieser Eigenschaft festlegen, wird der Schlüssel als eine Zusammensetzung der zugeordneten Spalten bezeichnet.  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] unterstützt keine berechneten Spalten als Primärschlüssel.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#8)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVersion">
      <MemberSignature Language="C#" Value="public bool IsVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property IsVersion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVersion { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob der Spaltentyp des Members ein Datenbankzeitstempel oder eine Versionsnummer ist.</summary>
        <value>Standardwert = <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Versionsnummern erhöht werden, und Timestamp-Spalten werden jedes Mal, die die zugeordnete Zeile aktualisiert wird aktualisiert. (Diese Eigenschaft teilt [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] , dass eine Spalte aktualisiert werden soll, um anzuzeigen, dass es sich um eine neue Version ist; es nicht, Informationen aufzeichnen vorgesehen ist, z. B., wer das Update vorgenommen hat.)  
  
 Beachten Sie Folgendes bei der `IsVersion` ist "true":  
  
-   Verwendung <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> an die richtigen Modifizierer, um eine Version oder den Timestamp-Spalte zu bestimmen. Wenn Sie keinen angeben <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A>, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] leitet die richtigen Modifizierer.  
  
 Versionsnummern erhöht werden, und Timestamp-Spalten werden jedes Mal, die die zugeordnete Zeile aktualisiert wird aktualisiert. Member mit `IsVersion=true` werden unmittelbar nach der Aktualisierung der Datenzeile synchronisiert. Die neuen Werte sind sichtbar, nachdem <xref:System.Data.Linq.DataContext.SubmitChanges%2A> abgeschlossen ist.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#9)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCheck">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Mapping.UpdateCheck UpdateCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Linq.Mapping.UpdateCheck UpdateCheck" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCheck As UpdateCheck" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::Mapping::UpdateCheck UpdateCheck { System::Data::Linq::Mapping::UpdateCheck get(); void set(System::Data::Linq::Mapping::UpdateCheck value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.UpdateCheck</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, wie [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] beim Erkennen von Konflikten der vollständigen Parallelität vorgeht.</summary>
        <value>Standard = <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, sofern für einen Member <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> nicht <see langword="true" /> ist.  
  
 Als weitere Werte sind <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> und <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" /> verfügbar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft mit einem der drei Enums verwendet wird, bestimmt wie [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] Parallelitätskonflikte erkennt.  
  
 Wenn kein Member, als konzipiert ist `IsVersion=true`, ursprünglichen Memberwerte werden mit dem aktuellen Datenbankstatus verglichen.  
  
 Die folgenden Enumerationen sind verfügbar:  
  
-   `Always` Verwenden Sie diese Spalte immer für die konflikterkennung.  
  
-   `Never` Verwenden Sie diese Spalte nie für die konflikterkennung.  
  
-   `WhenChanged` Verwenden Sie diese Spalte aus, nur, wenn das Element von der Anwendung geändert wurde.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#10)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
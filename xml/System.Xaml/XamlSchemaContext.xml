<Type Name="XamlSchemaContext" FullName="System.Xaml.XamlSchemaContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3cb020dadf6911a6184d7c73f01746771d9bdf1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720714" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlSchemaContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlSchemaContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlSchemaContext" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlSchemaContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlSchemaContext" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert einen wiederverwendbaren Kontext zum Interpretieren oder Zuordnen von XAML-Typen und der Typen in den Assemblys, die ihnen zugrunde liegen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein XAML-Schemakontext stellt eine Abstraktionsebene zwischen ein Schema oder Vokabular für XAML und einer bestimmten Parser-Implementierung. Durch Einfügen von das Konzept eines Schemakontexts, das Schema kann mit anderen XAML-Parser verwendet werden, und der Schemakontext füllt die Details, die für die Interaktion mit einem bestimmten XAML-Parser erforderlich sind. Beispielsweise enthält der XAML-Schemakontext Abfrage APIs, die die Verwendung von XAML-Konzepte oder auf die CLR-Bindung für XAML-Typsystem beziehen. Der XAML-Schemakontext ist auch für die Verwaltung der Assemblyliste der geladenen Assemblys, die definiert, in denen ein XAML-Parser Unterstützungstypen sucht zuständig.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>In einer <see cref="T:System.AppDomain" />, eine <see cref="T:System.Xaml.XamlSchemaContext" /> zwischen den verschiedenen Aufrufer, darunter sowohl vollständige und teilweise vertrauenswürdige Aufrufer freigegeben werden können. Diese Situation ist in Frameworks wie z. B. WPF, die teilweise vertrauenswürdigen Zugriff in XAML für Teile des Modells WPF-Anwendung bereitstellen laden vorhanden. Die Standardeinstellung <see cref="T:System.Xaml.XamlSchemaContext" /> -Implementierung bietet Schutzmaßnahmen in diesem Szenario bleiben alle zugehörigen Eigenschaften und Einstellungen, die unveränderlich. Abgeleitete Implementierungen sollten auch nach diesem Modell der Unveränderlichkeit für Eigenschaften und Einstellungen von einem XAML-Schemakontext.  
  
 Die <see cref="T:System.Xaml.XamlSchemaContext" /> Basisklasse ist so konzipiert, dass Suchvorgänge keine extern wahrnehmbaren Nebeneffekte haben. Die Typen, die verweist <see cref="T:System.Xaml.XamlSchemaContext" /> -APIs in der Base-Klasse, z. B. <see cref="T:System.Xaml.XamlType" /> oder <see cref="T:System.Xaml.XamlMember" />, erzeugen auch keine Nebeneffekte von suchen. Alle Daten, die erforderlich ist, um ein Schema zu bestimmen, die zur Erstellung und die Einstellungen des verfügbar sein sollte die <see cref="T:System.AppDomain" />. Beachten Sie, dass keine Such-APIs auf explizit übergeben Dienste beruhen; Ihre Eingabe basiert auf nur Zeichenfolgen.  
  
 Die <see cref="T:System.Xaml.XamlSchemaContext" /> -Basisklasse und <see cref="T:System.Xaml.XamlType" /> und <see cref="T:System.Xaml.XamlMember" /> sind alle threadsicher in ihre Basis Implementierungen. Ableiten von <see cref="T:System.Xaml.XamlSchemaContext" /> oder leiten Sie die Verwendung von XAML-Typ Systemklassen z. B. <see cref="T:System.Xaml.XamlType" /> und <see cref="T:System.Xaml.XamlMember" /> , Sie können auswählen, ob Ihre Klassen als threadsicher Verhalten.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; referenceAssemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; referenceAssemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (referenceAssemblies As IEnumerable(Of Assembly))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ referenceAssemblies);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="referenceAssemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="referenceAssemblies">Ein aufzählbarer Satz von Assemblyinformationselementen. Jedes Assemblyinformationselement wird durch einen <see cref="T:System.Reflection.Assembly" />-Wert angegeben.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse auf der Grundlage eines Satzes von Verweisassemblys.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Xaml.XamlSchemaContextSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContextSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As XamlSchemaContextSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Xaml::XamlSchemaContextSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Xaml.XamlSchemaContextSettings" />
      </Parameters>
      <Docs>
        <param name="settings">Das Einstellungsobjekt für das Erstellen der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse auf der Grundlage eines Einstellungsobjekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Einstellungsobjekt speichert Informationen zu den Konverter für Text und Markup Extension Einzelheiten der Schemakontext. Weitere Informationen finden Sie unter <xref:System.Xaml.XamlSchemaContextSettings>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; referenceAssemblies, System.Xaml.XamlSchemaContextSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; referenceAssemblies, class System.Xaml.XamlSchemaContextSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (referenceAssemblies As IEnumerable(Of Assembly), settings As XamlSchemaContextSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ referenceAssemblies, System::Xaml::XamlSchemaContextSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="referenceAssemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
        <Parameter Name="settings" Type="System.Xaml.XamlSchemaContextSettings" />
      </Parameters>
      <Docs>
        <param name="referenceAssemblies">Ein aufzählbarer Satz von Assemblyinformationen. Jedes Assemblyinformationselement wird durch einen <see cref="T:System.Reflection.Assembly" />-Wert angegeben.</param>
        <param name="settings">Das Einstellungsobjekt für das Erstellen der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse auf Grundlage eines Satzes von Verweisassemblys und eines Einstellungsobjekts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~XamlSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!XamlSchemaContext ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stellt eine nicht standardmäßige <see langword="Finalize" />-Implementierung bereit, in der <see langword="Dispose" /> nicht aufgerufen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwendung von XAML-Schemakontexten sollten nicht durch die automatische Garbagecollection oder durch manuelle Schritte verworfen werden. Obwohl XAML-Schemakontexten keine nicht verwalteten Ressourcen haben <xref:System.Windows.Markup.XamlDeferLoadAttribute> Eigenschaften möglicherweise immer noch aktiv sein, und einen XAML-Schemakontext disposing kann verhindern, dass die zugehörigen-Ladevorgang.  
  
 <xref:System.AppDomain.AssemblyLoad> Ereignishandler, die intern als schwache Verweise verknüpft sind, werden von dieser Implementierung bereinigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullyQualifyAssemblyNamesInClrNamespaces">
      <MemberSignature Language="C#" Value="public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullyQualifyAssemblyNamesInClrNamespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullyQualifyAssemblyNamesInClrNamespaces { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein XAML-Schema und der Kontext vollqualifizierte Assemblynamen in den von der Such-API zurückgegebenen Werten verwenden.</summary>
        <value>
          <see langword="true" />, wenn ein XAML-Schema und der Kontext vollqualifizierte Assemblynamen in den von den Such-APIs zurückgegebenen Werten verwenden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt die <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType> -Wert, der in den Einstellungen für hergestellt wird die <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> Konstruktorsignatur. Wenn andere Signaturen für die Konstruktion verwendet werden oder wenn <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType> nicht speziell auf festgelegt ist `true`, der Wert dieser Eigenschaft ist `false`.  
  
 Der Wert dieser Eigenschaft wirkt sich auf die Zeichenfolgen, die von zurückgegeben werden <xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>. Wenn <xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A> ist `true`, die Assemblyteil der Zeichenfolge gibt die Entsprechung der <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetAllXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetAllXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllXamlNamespaces () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetAllXamlNamespaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sucht die in dieser <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse enthaltenen Assemblys und gibt einen Satz von Namespaces zurück.</summary>
        <returns>Ein aufzählbarer Satz von Namespacebezeichnern. Diese Bezeichner werden als Zeichenfolgen bereitgestellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht nur die Verweisassemblys, wenn sie durch Einstellung in der Konstruktion oder Eigenschaft übergeben werden. Wenn keine Assemblys als Verweisassemblys festgelegt werden, überprüft die Logik dieser Methode alle geladenen Assemblys, in denen dies <xref:System.Xaml.XamlSchemaContext> aktiv ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllXamlTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt; GetAllXamlTypes (string xamlNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlType&gt; GetAllXamlTypes(string xamlNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllXamlTypes (xamlNamespace As String) As ICollection(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::ICollection&lt;System::Xaml::XamlType ^&gt; ^ GetAllXamlTypes(System::String ^ xamlNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">Der XAML-Namespace, für den Typen zurückgegeben werden sollen.</param>
        <summary>Sucht die in dieser <see cref="T:System.Xaml.XamlSchemaContext" />-Klasse enthaltenen Assemblys und gibt einen Satz von Typen aus dem angegebenen XAML-Namespace zurück.</summary>
        <returns>Ein aufzählbarer Satz von XAML-Typen. Jeder XAML-Typ im Satz wird durch ein <see cref="T:System.Xaml.XamlType" />-Objekt dargestellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredPrefix">
      <MemberSignature Language="C#" Value="public virtual string GetPreferredPrefix (string xmlns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPreferredPrefix(string xmlns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredPrefix (xmlns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetPreferredPrefix(System::String ^ xmlns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlns">Der XAML-Namespace, für den das bevorzugte Präfix abgerufen werden soll.</param>
        <summary>Ruft beim Zuordnen des angegebenen XAML-Namespaces eine Zeichenfolge ab, die als bevorzugtes Präfix für Consumer angegeben wird.</summary>
        <returns>Eine Zeichenfolge, die von Consumern beim Zuordnen des angegebenen XAML-Namespaces zur Markupverwendung verwendet werden sollte.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuellste Consumer der Informationen wird in der Regel ein XAML-Writer. Andere indirekte Consumer einschließen Entwurfstools  
  
 Sie können diese Informationen im Rahmen der Verwendung von XAML-Bindung für die common Language Runtime (CLR) angeben, durch Anwenden von <xref:System.Windows.Markup.XmlnsPrefixAttribute> auf Assemblyebene.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlns" /> ist NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueConverter&lt;TConverterBase&gt;">
      <MemberSignature Language="C#" Value="protected internal System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; GetValueConverter&lt;TConverterBase&gt; (Type converterType, System.Xaml.XamlType targetType) where TConverterBase : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Xaml.Schema.XamlValueConverter`1&lt;!!TConverterBase&gt; GetValueConverter&lt;class TConverterBase&gt;(class System.Type converterType, class System.Xaml.XamlType targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetValueConverter(Of TConverterBase As Class) (converterType As Type, targetType As XamlType) As XamlValueConverter(Of TConverterBase)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TConverterBase&gt;&#xA; where TConverterBase : class System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ GetValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConverterBase">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <typeparam name="TConverterBase">Die bestimmte Konverterbasisklasse.</typeparam>
        <param name="converterType">Die Konverterimplementierung.</param>
        <param name="targetType">Der gewünschte Zieltyp für den Konverter.</param>
        <summary>Gibt einen Wertkonverter zurück, der eine Konvertierung in den angeforderten <paramref name="targetType" /> vornehmen kann.</summary>
        <returns>Ein <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> mit einer Einschränkung, die der auf den Methodenaufruf angewendeten Einschränkung entspricht.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlDirective">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlDirective GetXamlDirective (string xamlNamespace, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlDirective GetXamlDirective(string xamlNamespace, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlDirective (xamlNamespace As String, name As String) As XamlDirective" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlDirective ^ GetXamlDirective(System::String ^ xamlNamespace, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlDirective</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">Der XAML-Namespace, der die benannte Direktive enthält.</param>
        <param name="name">Der Name der abzurufenden Direktive.</param>
        <summary>Gibt einen <see cref="T:System.Xaml.XamlDirective" />-Wert zurück, der eine Direktive darstellt (entweder für die XAML-Sprache oder für eine bestimmte Implementierung).</summary>
        <returns>Ein <see cref="T:System.Xaml.XamlDirective" />-Objekt, das die angeforderte Direktive darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben Sie diese Methode, wenn Sie eine abgeleitete Klasse von erstellen <xref:System.Xaml.XamlDirective> als Bestandteil des Szenarios Erweiterung System für eine Verwendung von XAML-Typ.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlNamespace" /> oder <paramref name="name" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetXamlType">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt ein <see cref="T:System.Xaml.XamlType" />-Objekt zurück, das auf einem CLR-Typbezeichner oder XAML-Typbezeichner basiert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlType GetXamlType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlType GetXamlType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlType ^ GetXamlType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Der Typ, für den ein <see cref="T:System.Xaml.XamlType" />-Objekt abgerufen werden soll.</param>
        <summary>Gibt ein <see cref="T:System.Xaml.XamlType" />-Objekt zurück, das auf einem CLR-Typbezeichner basiert.</summary>
        <returns>Das <see cref="T:System.Xaml.XamlType" />-Objekt, das dem <paramref name="type" /> der Eingabe entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung wird davon ausgegangen, dass Sie die CLR für das Unterstützungstypsystem verwenden. Wenn Sie das CLR-Typsystem nicht verwenden, verwenden Sie <xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType GetXamlType (System.Xaml.Schema.XamlTypeName xamlTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlType GetXamlType(class System.Xaml.Schema.XamlTypeName xamlTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlType ^ GetXamlType(System::Xaml::Schema::XamlTypeName ^ xamlTypeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlTypeName" Type="System.Xaml.Schema.XamlTypeName" />
      </Parameters>
      <Docs>
        <param name="xamlTypeName">Der XAML-Typname, für den ein <see cref="T:System.Xaml.XamlType" />-Objekt abgerufen werden soll.</param>
        <summary>Gibt ein <see cref="T:System.Xaml.XamlType" />-Objekt zurück, das auf einem XAML-Systemtypnamen basiert.</summary>
        <returns>Das <see cref="T:System.Xaml.XamlType" />-Objekt, das dem <paramref name="xamlTypeName" /> der Eingabe entspricht.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Eine Komonenten von <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> oder <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) lautet <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlTypeName" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Xaml.Schema.XamlTypeName" />
      </Docs>
    </Member>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="protected internal virtual System.Xaml.XamlType GetXamlType (string xamlNamespace, string name, params System.Xaml.XamlType[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xaml.XamlType GetXamlType(string xamlNamespace, string name, class System.Xaml.XamlType[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetXamlType (xamlNamespace As String, name As String, ParamArray typeArguments As XamlType()) As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Xaml::XamlType ^ GetXamlType(System::String ^ xamlNamespace, System::String ^ name, ... cli::array &lt;System::Xaml::XamlType ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="xamlNamespace">Der XAML-Namespace, der den gewünschten Typ enthält.</param>
        <param name="name">Der Zeichenfolgenname des gewünschten Typs.</param>
        <param name="typeArguments">Die Initialisierungstypargumente für einen generischen Typ.</param>
        <summary>Gibt einen <see cref="T:System.Xaml.XamlType" /> zurück, der auf einem XAML-Namespace und einer Zeichenfolge für den Typnamen basiert. Diese Signatur kann die Typargumente für Fälle angeben, bei denen der gewünschte Typ ein generischer Typ ist.</summary>
        <returns>Das <see cref="T:System.Xaml.XamlType" />-Objekt, das den Eingabekriterien entspricht.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAssemblyResolve">
      <MemberSignature Language="C#" Value="protected internal virtual System.Reflection.Assembly OnAssemblyResolve (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Reflection.Assembly OnAssemblyResolve(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function OnAssemblyResolve (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Reflection::Assembly ^ OnAssemblyResolve(System::String ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Der Namen zu ladenden Assembly.</param>
        <summary>Wird aufgerufen, wenn für Vorgänge mithilfe des Schemakontexts eine Assembly aufgelöst wird, die für die Auflösung des darin enthaltenen XAML-Namespaces erforderlich ist.</summary>
        <returns>Die aufgelöste Assembly.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verfahren Auflösung zugrunde liegenden Assembly an, die eine interne API ist, hat integrierte Toleranzen für andere Zeichenfolgenformen von Namen einer Assembly im auf der Grundlage der <xref:System.Reflection.AssemblyName> Konstruktion Verhalten.  
  
 Der Zweck dieser API werden erste-Chance-Auflösung für bekannte Sätze von Assemblys, z. B. gegen Verweisassemblys statt für den globalen Assemblycache zu aktivieren. Wenn die Liste der Verweisassemblys aufgefüllt wird, kann die standardmäßige Implementierung die bekannten Verweisassemblys zugreifen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt; ReferenceAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.Assembly&gt; ReferenceAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferenceAssemblies As IList(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Reflection::Assembly ^&gt; ^ ReferenceAssemblies { System::Collections::Generic::IList&lt;System::Reflection::Assembly ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen aufzählbaren Satz von Verweisassemblys für den XAML-Schemakontext ab.</summary>
        <value>Ein aufzählbarer Satz von Verweisassemblys für den Schemakontext. Jedes Assemblyinformationselement wird durch einen <see cref="T:System.Reflection.Assembly" />-Wert angegeben.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMarkupExtensionsWithDuplicateArity">
      <MemberSignature Language="C#" Value="public bool SupportMarkupExtensionsWithDuplicateArity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMarkupExtensionsWithDuplicateArity" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportMarkupExtensionsWithDuplicateArity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMarkupExtensionsWithDuplicateArity { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein XAML-Schema und der Kontext Markuperweiterungen unterstützen, in denen zwei Konstruktoren mit der gleichen Stelligkeit (Anzahl von Eingabeparametern) enthalten sind.</summary>
        <value>
          <see langword="true" />, wenn der Schemakontext Markuperweiterungen mit doppelter Stelligkeit zulässt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt die <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType> -Wert, der in den Einstellungen für hergestellt wird die <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> Konstruktorsignatur. Wenn andere Signaturen für die Konstruktion verwendet werden oder wenn <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType> nicht speziell auf festgelegt ist `true`, der Wert dieser Eigenschaft ist `false`.  
  
 Doppelter Stelligkeit von Markuperweiterungen wird durch die Verwendung von XAML-Spezifikation [MS-XAML] Abschnitt 6.6.7.2 nicht gesondert behandelt. Dies ist, da die Bildung des Elements XAML-Informationen für eine Markuperweiterung unabhängig von der doppelte Stelligkeit identisch ist, die ggf. in der Implementierung der Markuperweiterung vorhanden. Nur den eigentlichen Aufruf der Markuperweiterung und die zugehörige `ProvideValue` macht alle Probleme in Zusammenhang mit doppelte Stelligkeit handelt. Verhalten für die Behandlung doppelten Stelligkeit ist daher nicht definiert und bleibt bis zu einzelnen implementierende XAML-Schemakontext und die Verwendung von XAML-Writer-Integration. Die Verwendung von XAML-Standardschemakontext wie für .NET Framework XAML Services-Vorgänge implementiert unterstützt keine doppelten Stelligkeit; verschiedene .NET Framework-XAML-Dienste-APIs werden Ausnahmen auslösen, bei der Verarbeitung von Markuperweiterungsverwendung mit zugrunde liegenden doppelte Stelligkeit handelt.  
  
 Weitere Informationen zum Definieren von Markuperweiterungen finden Sie unter [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCompatibleXamlNamespace">
      <MemberSignature Language="C#" Value="public virtual bool TryGetCompatibleXamlNamespace (string xamlNamespace, out string compatibleNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetCompatibleXamlNamespace(string xamlNamespace, [out] string&amp; compatibleNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetCompatibleXamlNamespace (xamlNamespace As String, ByRef compatibleNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetCompatibleXamlNamespace(System::String ^ xamlNamespace, [Runtime::InteropServices::Out] System::String ^ % compatibleNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="compatibleNamespace" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">Die <see langword="xmlns" />-Zeichenfolge für den XAML-Namespace, der auf ein kompatibles Ergebnis überprüft werden soll.</param>
        <param name="compatibleNamespace">Wenn diese Methode beendet wird, die <see langword="xmlns" />-Zeichenfolge für eine kompatible XAML-Namespaceanforderung. Diese kann mit <c>xamlNamespace</c> identisch sein, wenn die Methode <see langword="false" /> zurückgibt.</param>
        <summary>Gibt den Erfolg oder den Fehler der Anforderung eines kompatiblen XAML-Namespaces zurück. Bei einer erfolgreichen Anforderung wird dieser XAML-Namespace als Out-Parameter gemeldet.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="compatibleNamespace" /> ein verwendbares Ergebnis enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet intern die folgenden Suchreihenfolge:  
  
1.  Ein Kompatibilitätswörterbuch intern implementierte, die möglicherweise von einer früheren Suche aufgefüllt wurde.  
  
2.  Die <xref:System.Windows.Markup.XmlnsCompatibleWithAttribute> Parameter Auswertung.  
  
 Wenn kein anderer kompatibler Namespace ermittelt wird und die Rückgabe dieser Methode `false`, `compatibleNamespace` Parameter Ausgabe möglicherweise den gleichen Wert wie die `xamlNamespace` Eingabe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlNamespace" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
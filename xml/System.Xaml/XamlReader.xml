<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f45c4db698b9a0e44f0e359804ec4f94b21c279b" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82503494" /></Metadata><TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Basisdefinitionen für Klassen bereit, die XAML-Eingabe nutzen und XAML-Knotenstreams erzeugen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> ist eine abstrakte Klasse und stellt keine Implementierungen oder Definitionen bereit, die ein funktionierendes Ergebnis für alle Elemente aufweisen. Member, die über eine Implementierung in <xref:System.Xaml.XamlReader> verfügen, werden in den Hinweisen für dieses Element angegeben. <xref:System.Xaml.XamlReader> verfügt insbesondere über mehrere abstrakte Member, die implementiert werden müssen, und mehrere virtuelle Member.  
  
 Der virtuellen Member <xref:System.Xaml.XamlReader.ReadSubtree%2A> und <xref:System.Xaml.XamlReader.Skip%2A> jeweils eine Standard Implementierung bereitstellen, die für die meisten Fälle geeignet ist. Die <xref:System.Xaml.XamlReader.ReadSubtree%2A>-und <xref:System.Xaml.XamlReader.Skip%2A> Standard Implementierungen basieren jedoch auf einem anderen erwarteten Verhalten des implementierenden XAML-Readers. insbesondere basieren Sie auf der <xref:System.Xaml.XamlReader.Read%2A> Überschreibung. <xref:System.Xaml.XamlReader.Dispose%2A> ist auch ein virtueller Member, der über eine funktionierende Standard Implementierung verfügt.  
  
 Die folgenden zwei Klassen sind die relevantesten und praktischsten abgeleiteten Klassen in .NET Framework XAML-Diensten und der System. XAML-Assembly:  
  
-   <xref:System.Xaml.XamlObjectReader>, das ein Objekt Diagramm liest, z. b. das aktive Objekt Diagramm einer Anwendung zur Laufzeit.  
  
-   <xref:System.Xaml.XamlXmlReader>, das XAML in Form einer XML-Textdatei liest, indem ein allgemeiner <xref:System.Xml.XmlReader> verwendet wird, der die Datei als zwischengeschaltete Hilfsklasse lädt.  
  
 Andere XAML-Reader aus anderen Frameworks enthalten <xref:System.Windows.Baml2006.Baml2006Reader> und <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader> unterscheidet sich von [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] und <xref:System.Xml.XmlReader> Entwurfs Prinzipien, da <xref:System.Xaml.XamlReader> keine `Create`-Methode hat, um zugrunde liegende XAML-Reader-Standard Implementierungen zurückzugeben. Sie müssen stattdessen bestimmte abgeleitete XAML-readerklassen instanziieren, indem Sie deren Konstruktoren oder andere klassenspezifische Hilfsobjekte aufrufen.  
  
## <a name="subtree-readers"></a>Teilstruktur Leser  
 Zum größten Teil wird <xref:System.Xaml.XamlReader>-API im Kontext spezifischer XAML-readerklassen aufgerufen, die von <xref:System.Xaml.XamlReader>abgeleitet werden. Allerdings greifen Sie in einem bestimmten Fall auf <xref:System.Xaml.XamlReader>-API auf einer praktischen XAML-Reader-Instanz zu, die nicht öffentlich ist und nicht von <xref:System.Xaml.XamlObjectReader> oder <xref:System.Xaml.XamlXmlReader>abgeleitet ist. Dies ist der Fall, wenn Sie <xref:System.Xaml.XamlReader.ReadSubtree%2A>aufzurufen, der eine <xref:System.Xaml.XamlReader> Instanz zurückgibt. In der Standard Implementierung ist das <xref:System.Xaml.XamlReader>, das von dieser API zurückgegeben wird, eine interne Klasse.  
  
 Der <xref:System.Xaml.XamlReader>, der zum Lesen der Teilstruktur abgerufen wurde, verfügt über gültige Aktionen für APIs wie <xref:System.Xaml.XamlReader.Read%2A> und <xref:System.Xaml.XamlReader.NodeType%2A>, und diese Aktionen basieren auf der übergeordneten Reader-Klasse. Dieser Entwurf ermöglicht der internen-Klasse die Nachverfolgung der Frame Ebene, an der die Teilstruktur eingegeben wurde. Durch die aktive Teilstruktur <xref:System.Xaml.XamlReader> wird sichergestellt, dass der jeweilige Teilstruktur Leser das Dateiende oder `null` auf dem aktuellen Knoten meldet, wenn die Position des aktuellen Knotens über die Grenzen der Teilstruktur hinaus verschoben wird.  
  
 Hinweise zur Verwendung von Teilstruktur Lesern sind in bestimmten <xref:System.Xaml.XamlReader>-APIs enthalten.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">Grundlagen zu XAML-Knotenstreamstrukturen und -konzepten</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert die <see cref="T:System.Xaml.XamlReader" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt den XAML-Knotenstream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Basis Implementierung ruft der Aufruf von <xref:System.Xaml.XamlReader.Close%2A> <xref:System.Xaml.XamlReader.Dispose%2A> mit dem `isDisposing`-Parameter als `true`auf.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um die verwalteten Ressourcen freizugeben, andernfalls <see langword="false" />.</param>
        <summary>Gibt die von der <see cref="T:System.Xaml.XamlReader" />-Klasse verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`muss die Basisklasse aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob die <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />-Methode aufgerufen wurde.</summary>
        <value><see langword="true" />, wenn <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> aufgerufen wurde, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse wird ein Wert abgerufen, durch den angegeben wird, ob sich die Readerposition am Dateiende befindet.</summary>
        <value><see langword="true" />, wenn sich die Position am konzeptionellen Dateiende des XAML-Knotenstreams befindet, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teilstruktur Leser können <xref:System.Xaml.XamlReader.IsEof%2A>mit dem Verhalten abrufen, das die Begrenzungen der eingegebenen Unterstruktur korrekt widerspiegelt. Weitere Informationen finden Sie im Abschnitt "Teilstruktur-Reader" in <xref:System.Xaml.XamlReader>oder unter <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse wird der aktuelle Member an der Readerposition abgerufen, wenn sich die Readerposition in einem <see cref="F:System.Xaml.XamlNodeType.StartMember" />-Feld befindet.</summary>
        <value>Der aktuelle Member oder <see langword="null" />, wenn sich die Readerposition nicht in einem Member befindet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teilstruktur Leser können <xref:System.Xaml.XamlReader.Member%2A>mit Verhaltens Einschränkungen aufzurufen. Weitere Informationen finden Sie im Abschnitt "Teilstruktur-Reader" in <xref:System.Xaml.XamlReader>oder unter <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft bei der Implementierung in einer abgeleiteten Klasse die XAML-Namespaceinformationen aus dem aktuellen Knoten ab.</summary>
        <value>Die XAML-Namespaceinformationen, sofern verfügbar, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der beabsichtigte Entwurf dieser API besteht darin, nur dann ein nicht-NULL-Ergebnis zurückzugeben, wenn die <xref:System.Xaml.XamlReader.NodeType%2A> des aktuellen Knotens <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>ist. Die-Eigenschaft meldet nicht den XAML-Namespace, der für Objekte oder Member in einem allgemeinen Bereichs Sinn gilt, wie in einem XAML-Schema Kontext interpretiert. Die Anwendung muss eine Methode zum Zwischenspeichern von Informationen für den aktiven XAML-Namespace bereitstellen, während Sie XAML-Knoten durchläuft, wenn Sie diese Informationen auf andere Weise als die vom XAML-Schema Kontext an einen Writer übermittelt werden müssen. Hinweise zur Referenz Implementierung finden Sie unter <xref:System.Xaml.XamlXmlReader.Namespace%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Implementieren in einer abgeleiteten Klasse den Typ des aktuellen Knotens ab.</summary>
        <value>Ein Wert der <see cref="T:System.Xaml.XamlNodeType" />-Enumeration.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teilstruktur Leser können <xref:System.Xaml.XamlReader.NodeType%2A>mit Verhaltens Einschränkungen aufzurufen. Weitere Informationen finden Sie im Abschnitt "Teilstruktur-Reader" in <xref:System.Xaml.XamlReader>oder unter <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bei der Implementierung in einer abgeleiteten Klasse wird der nächste XAML-Knoten aus der Quelle bereitgestellt, wenn ein Knoten verfügbar ist.</summary>
        <returns><see langword="true" />, wenn ein Knoten verfügbar ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teilstruktur Leser können <xref:System.Xaml.XamlReader.Read%2A>mit Verhaltens Einschränkungen aufzurufen. Weitere Informationen finden Sie im Abschnitt "Teilstruktur-Reader" in <xref:System.Xaml.XamlReader>oder unter <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein <see cref="T:System.Xaml.XamlReader" />-Objekt auf Grundlage des aktuellen <see cref="T:System.Xaml.XamlReader" />-Objekts zurück, bei dem das zurückgegebene <see cref="T:System.Xaml.XamlReader" />-Objekt zum Durchlaufen einer Teilstruktur der XAML-Knotenstruktur verwendet wird.</summary>
        <returns>Eine neue Instanz des XAML-Reader für die Teilstruktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verfügt über eine Standard Implementierung und gibt einen gültigen <xref:System.Xaml.XamlReader>zurück. Der zurückgegebene <xref:System.Xaml.XamlReader> ist eine interne Klasse, die bestimmte <xref:System.Xaml.XamlReader> Aktionen einschränkt. Die Einschränkungen sind konsistent mit dem Zweck, nur eine dimensionierte Teilstruktur einer größeren Quelle für eine XAML-Knotengruppe zu lesen und das Dateiende oder die `null` auf dem aktuellen Knoten zurückzugeben, wenn die Teilstruktur verlassen wird.  
  
 Im Allgemeinen sollten Sie den aktuellen Knoten aus dem anfänglichen <xref:System.Xaml.XamlReader.Read%2A> überprüfen, um zu bestimmen, ob Sie einen Teilstruktur Reader benötigen. Wie Sie dies überprüfen, ist möglicherweise Implementierungs spezifisch. vermeiden Sie jedoch das Erstellen mehrerer untergeordneter Readern für jede Unterstruktur. Vermeiden Sie außerdem das Aufrufen eines Teilstruktur Readers für bestimmte Knoten Fälle (z. b. für <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>), die keine Unterstruktur von Knoten enthalten können.  
  
 Nachdem Sie einen Teilstruktur Leser abgerufen haben, müssen Sie <xref:System.Xaml.XamlReader.Read%2A> darauf abrufen, um einen aktuellen Knoten abzurufen (oder <xref:System.Xaml.XamlReader.Skip%2A> zum Abrufen eines nächsten Knotens aufzurufen). Beim Erstellen wird nicht automatisch eine anfängliche Knoten Position vom Teilstruktur Reader abgerufen.  
  
 Der Reader, den Sie durch Aufrufen von <xref:System.Xaml.XamlReader.ReadSubtree%2A> aus dieser Standard Implementierung abrufen, ist eine interne Klasse. Die interne Klasse basiert auf der <xref:System.Xaml.XamlReader>-Implementierung, die beim Aufrufen <xref:System.Xaml.XamlReader.ReadSubtree%2A> verwendet wird. Der Zweck der internen Klasse besteht darin, das <xref:System.Xaml.XamlReader.Read%2A> und das allgemeine Durchlauf Verhalten zu wrappen. Die Traversierung bleibt in der vorgesehenen Teilstruktur, indem <xref:System.Xaml.XamlNodeType.StartMember>/<xref:System.Xaml.XamlNodeType.EndMember>-Paare oder <xref:System.Xaml.XamlNodeType.StartObject>/<xref:System.Xaml.XamlNodeType.EndObject> Paare nachverfolgt wird. Außerdem werden `false` für <xref:System.Xaml.XamlReader.Read%2A> ordnungsgemäß und `true` für <xref:System.Xaml.XamlReader.IsEof%2A> zurückgegeben, wenn sich der Reader am Ende der Teilstruktur befindet, wie vom Einstiegspunkt definiert. Im Allgemeinen gehen Sie davon aus, dass alle <xref:System.Xaml.XamlReader>-APIs, die Sie von einem Teilstruktur Leser aufzurufen, dieselbe Implementierung wie die allgemeine <xref:System.Xaml.XamlReader> haben, mit Ausnahme des umgebenden Verhaltens.  
  
 <xref:System.Xaml.XamlReader.ReadSubtree%2A> ist jedoch virtuell. Daher kann eine bestimmte <xref:System.Xaml.XamlReader> Implementierung Verhalten bereitstellen, das sich vom <xref:System.Xaml.XamlReader> internen Wrapper Verhalten unterscheidet. und eine <xref:System.Xaml.XamlReader>-Implementierung kann sogar die Funktionalität von Teilstruktur Lesern deaktivieren, indem Sie <xref:System.NotImplementedException> oder andere Ausnahmen zurückgibt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Implementieren in einer abgeleiteten Klasse ein Objekt ab, das XAML-Schemakontextinformationen für den Informationssatz bereitstellt.</summary>
        <value>Ein Objekt, das XAML-Schemakontextinformationen für den Informationssatz bereitstellt.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Überspringt den aktuellen Knoten und verschiebt die Readerposition weiter zum nächsten Knoten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nach dem übersprungen wird <xref:System.Xaml.XamlReader.Read%2A> von der standardmäßigen <xref:System.Xaml.XamlReader.Skip%2A> Implementierung aufgerufen. Sie werden in der Regel nicht <xref:System.Xaml.XamlReader.Skip%2A> und <xref:System.Xaml.XamlReader.Read%2A> nacheinander aufgerufen.  
  
 In der standardmäßigen <xref:System.Xaml.XamlReader.Skip%2A> Implementierung werden verschiedene Aktionen ausgeführt, je nachdem, welche <xref:System.Xaml.XamlReader.NodeType%2A> die Readerposition aktuell ist. Wenn sich die Readerposition derzeit in einem <xref:System.Xaml.XamlNodeType.StartMember> oder <xref:System.Xaml.XamlNodeType.StartObject>befindet, wird dieser Member oder dieses Objekt übersprungen. Bei anderen <xref:System.Xaml.XamlReader.NodeType%2A> Werten wird keine Aktion ausgeführt, außer wenn <xref:System.Xaml.XamlReader.Read%2A> von der aktuellen Position aufgerufen wird.  
  
 Teilstruktur Leser können <xref:System.Xaml.XamlReader.Skip%2A>mit Verhaltens Einschränkungen aufzurufen. Weitere Informationen finden Sie im Abschnitt "Teilstruktur-Reader" in <xref:System.Xaml.XamlReader>oder unter <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 Das Knoten Strukturverhalten von <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> basiert auf der XML-Entsprechung <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>. Basierend auf der <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> Verhalten-Äquivalenz überspringt <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> den Knoten und seine Unterstruktur, nicht nur den einzelnen Einstiegs Knoten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="xamlReader.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Xaml.XamlReader" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Implementieren in einer abgeleiteten Klasse das <see cref="T:System.Xaml.XamlType" />-Objekt des aktuellen Knotens ab.</summary>
        <value>Das <see cref="T:System.Xaml.XamlType" />-Objekt des aktuellen Knotens, andernfalls <see langword="null" />, wenn sich die aktuelle Position des Readers nicht in einem Objekt befindet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teilstruktur Leser können <xref:System.Xaml.XamlReader.Type%2A>mit Verhaltens Einschränkungen aufzurufen. Weitere Informationen finden Sie im Abschnitt "Teilstruktur-Reader" in <xref:System.Xaml.XamlReader>oder unter <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Implementieren in einer abgeleiteten Klasse den Wert des aktuellen Knotens ab.</summary>
        <value>Der Wert des aktuellen Knotens oder <see langword="null" />, wenn sich die aktuelle Position des Readers nicht auf einem <see cref="F:System.Xaml.XamlNodeType.Value" />-Knotentyp befindet.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>

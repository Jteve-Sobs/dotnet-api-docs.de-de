<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b34e14110aa65e54e7ebad88c3081a75a17bdd15" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39796873" /></Metadata><TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <TypeSignature Language="F#" Value="type XamlServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Dienste auf höherer Ebene (statische Methoden) für die allgemeinen XAML-Aufgaben Lesen von XAML und Schreiben eines Objektdiagramms bzw. Lesen von Objektdiagrammen und Schreiben von XAML-Dateiausgaben zu Serialisierungszwecken bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Modi von der <xref:System.Xaml.XamlServices> -Klasse, die verwendet werden, in der am häufigsten verwendeten XAML Lesen und Schreiben von Szenarien, die zum Erstellen von XAML-Reader und XAML-Writer-Instanzen unterliegen. Diese Reader und Writer werden spezielle aber internen Implementierungen von öffentlichen Klassen wie z. B. <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, und <xref:System.Xaml.XamlObjectWriter>. Verwendung von <xref:System.Xaml.XamlServices> in den meisten Fällen können Sie eine verlassen auf die internen standardimplementierungen aus, um die Ergebnisse zu erhalten, die Sie möchten. Speziellere Szenarien möglicherweise Sie Readern und Writern selbst definieren, und übergeben Sie sie als Argumente für die Überladungen von der <xref:System.Xaml.XamlServices> Methoden.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> ist nicht die empfohlene XAML Lesen oder XAML Schreiben von API-Satz, wenn Sie WPF-Typen verarbeiten oder Typen auf Grundlage von WPF. Für [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Nutzung verwenden <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> für das Lesen oder das Laden von XAML (oder BAML) und <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> für das Schreiben von XAML zurück. Diese Klassen verwenden APIs von .NET Framework XAML-Dienste und XAML-Reader und XAML-Writer intern in ihrer Implementierung. Allerdings bieten auch Unterstützung und spezielle XAML-Schemakontext für WPF-spezifische Konzepte, z. B. Optimierungen für Abhängigkeitseigenschaften und WPF, die bekannten Typen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lädt die Quelle für einen XAML-Reader und schreibt dessen Ausgabe als Objektdiagramm.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Xaml.XamlServices.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der Datenstrom, der als Eingabe geladen werden soll.</param>
        <summary>Lädt eine <see cref="T:System.IO.Stream" />-Quelle für einen XAML-Reader und schreibt dessen Ausgabe als Objektdiagramm.</summary>
        <returns>Das Objektdiagramm, das als Ausgabe geschrieben wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Andere Signaturen für die <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> Methode geben die verschiedene Arten von Eingaben für die XAML-Quelle. Die <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> interne Implementierung erstellt zunächst eine <xref:System.Xml.XmlReader> durch Aufrufen von <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> und erstellt dann eine neue Instanz einer speziellen <xref:System.Xaml.XamlReader> , die die Eingabe verarbeitet.  
  
 In der Reihenfolge für die <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> aufrufen, um ein Objektdiagramm erfolgreich zu erstellen, muss die folgende Bedingungen erfüllt sein:  
  
-   Die Quelle ist wohlgeformt und gültiges XML.  
  
-   Die Quelle ist ungültig XAML auf Sprachebene.  
  
-   Die XAML-Typen, die in der Quelle angegeben werden, muss XAML in Unterstützungstypen in den entsprechenden XAML-Namespaces aufgelöst. Beispielsweise können XAML-Typen für WPF-Namespaces zu einem WPF XAML-Namespace, wie in der XAML angegeben; aufgelöst werden die Assemblys für WPF müssen es sich um in das Projekt eingeschlossen oder zur Laufzeit verfügbar sein. Und so weiter.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> ist nicht die empfohlene Literatur XAML oder XAML-API schreiben festgelegt, wenn Sie verarbeiten [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Typen oder Typen, die basierend auf [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Für [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Nutzung verwenden <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> für das Lesen oder das Laden von XAML; und <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> für das Schreiben von XAML zurück. Diese Klassen verwenden <xref:System.Xaml> APIs intern in ihrer Implementierung; allerdings auch bieten Unterstützung für WPF-spezifische Konzepte, die die Art des XAML Lesen und schreiben, z. B. Optimierungen für Abhängigkeitseigenschaften zu beeinflussen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; obj" Usage="System.Xaml.XamlServices.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">Der <see cref="T:System.IO.TextReader" />, der als Basis für den erstellten <see cref="T:System.Xml.XmlReader" /> verwendet werden soll.</param>
        <summary>Erstellt einen XAML-Reader aus einem <see cref="T:System.IO.TextReader" /> und gibt ein Objektdiagramm zurück.</summary>
        <returns>Das Objektdiagramm, das zurückgegeben wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um das Objektdiagramm zurückzugeben. die `textReader` Eingabe mit der entsprechenden Eingabe erstellt werden sollten. Beispielsweise sollten sie übergeben eine <xref:System.IO.StringReader> , wird erstellt, indem Sie eine gültige Eingabe von XAML-als-Zeichenfolge für die Verwendung der <xref:System.IO.StringReader.%23ctor%28System.String%29> Konstruktor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textReader" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; obj" Usage="System.Xaml.XamlServices.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Dateiname, der geladen und als Quelle verwendet werden soll.</param>
        <summary>Lädt eine <see cref="T:System.IO.Stream" />-Quelle für einen XAML-Reader und gibt ein Objektdiagramm zurück.</summary>
        <returns>Das Objektdiagramm, das zurückgegeben wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Andere Signaturen für die <xref:System.Xaml.XamlServices.Load%2A> Methode geben die verschiedene Arten von Eingaben für die XAML-Quelle. Die <xref:System.Xaml.XamlServices.Load%2A> interne Implementierung erstellt zunächst eine <xref:System.Xml.XmlReader> durch Aufrufen von <xref:System.Xml.XmlReader.Create%28System.String%29> und erstellt dann eine neue Instanz einer speziellen <xref:System.Xaml.XamlReader> , die die Eingabe verarbeitet.  
  
 In der Reihenfolge für die <xref:System.Xaml.XamlServices.Load%28System.String%29> aufrufen, um ein Objektdiagramm erfolgreich zu erstellen, muss die folgende Bedingungen erfüllt sein:  
  
-   Die Quelle ist wohlgeformt und gültiges XML.  
  
-   Die Quelle ist ungültig XAML auf Sprachebene.  
  
-   Die XAML-Typen, die in der Quelle angegeben werden, muss XAML in Unterstützungstypen in den entsprechenden XAML-Namespaces aufgelöst. Beispielsweise können XAML-Typen für WPF-Namespaces zu einem WPF XAML-Namespace, wie in der XAML angegeben; aufgelöst werden die für WPF-Assemblys im Projekt enthalten sein müssen oder zur Laufzeit verfügbar sein; Und so weiter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="fileName" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xamlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Die XAML-Readerimplementierung, die als Reader für diesen <see langword="Load" />-Vorgang verwendet werden soll.</param>
        <summary>Lädt eine bestimmte XAML-Readerimplementierung und gibt ein Objektdiagramm zurück.</summary>
        <returns>Das Objektdiagramm, das zurückgegeben wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten diese Signatur in der Regel nur in den folgenden Fällen verwenden:  
  
-   Sie definiert Ihre eigene Implementierung von einem <xref:System.Xaml.XamlReader>.  
  
-   Einstellungen für die Angabe einer <xref:System.Xaml.XamlReader> , die von den Standardeinstellungen abweichen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">Die <see cref="T:System.Xml.XmlReader" />-Implementierung, die als Reader für den <see langword="Load" />-Vorgang verwendet werden soll.</param>
        <summary>Lädt eine bestimmte XML-Readerimplementierung und gibt ein Objektdiagramm zurück.</summary>
        <returns>Das Ausgabeobjektdiagramm.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten in der Regel verwenden Sie diese Signatur nur, wenn Sie eine eigene Implementierung definiert eine <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Xaml.XamlServices.Parse xaml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">Die zu analysierende XAML-Zeichenfolgeneingabe.</param>
        <summary>Liest XAML als Zeichenfolgenausgabe und gibt ein Objektdiagramm zurück.</summary>
        <returns>Das Objektdiagramm, das zurückgegeben wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Reihenfolge für die <xref:System.Xaml.XamlServices.Parse%2A> aufrufen, um erfolgreich eine Objektstruktur zu erstellen, muss die folgende Bedingungen erfüllt sein:  
  
-   Die `xaml` Eingabe wohlgeformt ist und ein gültiges XML.  
  
-   Die `xaml` Eingabe ist ungültig XAML auf Sprachebene.  
  
-   Die XAML-Typen, die im angegebenen die `xaml` Eingabe muss in Unterstützungstypen in den entsprechenden XAML-Namespaces aufgelöst werden. Beispielsweise können XAML-Typen für einen WPF-Namespace mit einem WPF XAML-Namespace, wie in der XAML angegeben; aufgelöst werden die für WPF-Assemblys im Projekt enthalten sein müssen oder zur Laufzeit verfügbar sein; Und so weiter.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> ist nicht die empfohlene Literatur XAML oder XAML-API schreiben festgelegt, wenn Sie verarbeiten [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Typen oder Typen, die basierend auf [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Für [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Nutzung verwenden <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> zum Lesen oder XAML, laden und <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> für das Schreiben von XAML zurück. Diese Klassen verwenden <xref:System.Xaml> APIs intern in ihrer Implementierung; allerdings auch bieten Unterstützung für WPF-spezifische Konzepte, die die Art des XAML Lesen und schreiben, z. B. Optimierungen für Abhängigkeitseigenschaften zu beeinflussen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xaml" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Verarbeitet ein bereitgestelltes Objektdiagramm zu einer XAML-Knotendarstellung und anschließend zu einem Ausgabeformat für die Serialisierung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : obj -&gt; string" Usage="System.Xaml.XamlServices.Save instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Das Stammverzeichnis des zu verarbeitenden Objektdiagramms.</param>
        <summary>Verarbeitet eine bereitgestellte Objektstruktur in einer XAML-Knotendarstellung und gibt eine Zeichenfolgendarstellung der Ausgabe-XAML zurück.</summary>
        <returns>Die XAML-Markupausgabe als Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ausgabe von dieser Methode ist die `ToString` Ergebnis eine <xref:System.Xml.XmlWriter> , das vom Aufruf Methode erstellt wird. Dass <xref:System.Xml.XmlWriter> wird erstellt, indem Sie mit den folgenden Einstellungen: <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> ist `true`; und <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> ist `true`.  
  
 Die zurückgegebene Zeichenfolge kann geladen werden, als gültige XML-Codes über die <xref:System.Xml.XmlReader.Create%2A> Methode, wenn Sie die Zeichenfolge in einen Stream oder in einen genauer dedizierte Reader für XAML verarbeitet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.Stream * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (stream, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">Der Zieldatenstrom.</param>
        <param name="instance">Das Stammverzeichnis des zu verarbeitenden Objektdiagramms.</param>
        <summary>Verarbeitet ein bereitgestelltes Objektdiagramm zu einer XAML-Knotendarstellung und anschließend zu einem Ausgabedatenstrom für die Serialisierung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> ist nicht die empfohlene Literatur XAML oder XAML-API schreiben festgelegt, wenn Sie verarbeiten [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Typen oder Typen, die basierend auf [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Für [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Nutzung verwenden <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> für das Lesen oder das Laden von XAML; und <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> für das Schreiben von XAML zurück. Diese Klassen verwenden <xref:System.Xaml> APIs intern in ihrer Implementierung; allerdings auch bieten Unterstützung für WPF-spezifische Konzepte, die die Art des XAML Lesen und schreiben, z. B. Optimierungen für Abhängigkeitseigenschaften zu beeinflussen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.TextWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, von dem die Ausgabe geschrieben wird.</param>
        <param name="instance">Das Stammverzeichnis des zu verarbeitenden Objektdiagramms.</param>
        <summary>Verarbeitet ein bereitgestelltes Objektdiagramm zu einer XAML-Knotendarstellung und anschließend zu einer Ausgabe, die der bereitgestellten <see cref="T:System.IO.TextWriter" />-Klasse zugeordnet wird.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : string * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (fileName, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name und Speicherort der Datei, in die die Ausgabe geschrieben werden soll.</param>
        <param name="instance">Das Stammverzeichnis des zu verarbeitenden Objektdiagramms.</param>
        <summary>Verarbeitet ein bereitgestelltes Objektdiagramm zu einer XAML-Knotendarstellung und schreibt sie anschließend am angegebenen Speicherort in eine Ausgabedatei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `fileName` Parameterwert wird verwendet, als die `outputFileName` Eingabe für einen Aufruf von <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>, erstellt eine <xref:System.Xml.XmlWriter> als Teil des Methodenaufrufs.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="fileName" /> ist eine leere Zeichenfolge.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="fileName" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xaml.XamlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Die zu verwendende <see cref="T:System.Xaml.XamlWriter" />-Implementierung.</param>
        <param name="instance">Das Stammverzeichnis des zu verarbeitenden Objektdiagramms.</param>
        <summary>Verarbeitet ein bereitgestelltes Objektdiagramm zu einer XAML-Knotendarstellung und schreibt sie anschließend in einen bereitgestellten XAML-Writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten diese Signatur in der Regel nur in den folgenden Fällen verwenden:  
  
-   Sie definiert Ihre eigene Implementierung von einem <xref:System.Xaml.XamlWriter>.  
  
-   Einstellungen für die Angabe der <xref:System.Xaml.XamlWriter> , die von den Standardeinstellungen abweichen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xml.XmlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Die zu verwendende <see cref="T:System.Xml.XmlWriter" />-Implementierung.</param>
        <param name="instance">Das Stammverzeichnis des zu verarbeitenden Objektdiagramms.</param>
        <summary>Verarbeitet ein bereitgestelltes Objektdiagramm zu einer XAML-Knotendarstellung und schreibt sie anschließend in die bereitgestellte <see cref="T:System.Xml.XmlWriter" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />-Eingabe ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Verbindet ein <see cref="T:System.Xaml.XamlReader" />-Element und ein <see cref="T:System.Xaml.XamlWriter" />-Element, um einen allgemeinen XAML-Knotengruppenvermittler zu verwenden. Transformiert potenziell den Inhalt, abhängig davon, welche Typen von Readern und Writern bereitgestellt wurden.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Die zu verwendende <see cref="T:System.Xaml.XamlReader" />-Implementierung.</param>
        <param name="xamlWriter">Der zu verwendende <see cref="T:System.Xaml.XamlWriter" />.</param>
        <summary>Verbindet ein <see cref="T:System.Xaml.XamlReader" />-Element und ein <see cref="T:System.Xaml.XamlWriter" />-Element, um einen allgemeinen XAML-Knotengruppenvermittler zu verwenden. Transformiert potenziell den Inhalt, abhängig davon, welche Typen von Readern und Writern bereitgestellt wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist ein Wrapper um <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, wobei `closeWriter` angegeben ist, als `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />- oder <paramref name="xamlWriter" />-Eingabe ist <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Der XAML-Schemakontext passt nicht zwischen die bereitgestellten <paramref name="xamlReader" /> und <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter * bool -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter, closeWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Die zu verwendende <see cref="T:System.Xaml.XamlReader" />-Implementierung.</param>
        <param name="xamlWriter">Der zu verwendende <see cref="T:System.Xaml.XamlWriter" />.</param>
        <param name="closeWriter"><see langword="true" />, um den Writer zu schließen, nachdem der Aufruf abgeschlossen wurde, <see langword="false" />, um den Writer an der letzten geschriebenen Position in aktivem Zustand zu belassen.</param>
        <summary>Verbindet ein <see cref="T:System.Xaml.XamlReader" />-Element und ein <see cref="T:System.Xaml.XamlWriter" />-Element, um einen allgemeinen XAML-Knotengruppenvermittler zu verwenden. Transformiert potenziell den Inhalt, abhängig davon, welche Typen von Readern und Writern bereitgestellt wurden. Stellt einen Parameter bereit, mit dem angegeben wird, ob der Writer nach Abschluss des Aufrufs geschlossen werden soll.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />- oder <paramref name="xamlWriter" />-Eingabe ist <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Der XAML-Schemakontext passt nicht zwischen die bereitgestellten <paramref name="xamlReader" /> und <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
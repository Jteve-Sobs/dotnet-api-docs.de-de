<Type Name="IAmbientProvider" FullName="System.Xaml.IAmbientProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97b5aeae1a1f1d88c40d2c71fd24cd829ad938a1" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86713598" /></Metadata><TypeSignature Language="C#" Value="public interface IAmbientProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAmbientProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IAmbientProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAmbientProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAmbientProvider" />
  <TypeSignature Language="F#" Value="type IAmbientProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Dienst dar, von dem Informationselemente zu Ambient-Eigenschaften oder Ambient-Typen an Typkonverter und Markuperweiterungen zurückgegeben werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle stellt den Dienst dar, der Typkonvertern und Markup Erweiterungen helfen kann, die Ambient-Eigenschaften Bezeichner für das XAML-Typsystem (- <xref:System.Xaml.XamlMember> Objekte) zu erhalten. Der Dienst kann auch die Ambient-Eigenschaftswerte aus Klassen erhalten. Typen können auch Ambient sein. Jeder Member, der diesen Typ als Wert verwendet, sollte als Ambient betrachtet werden.  
  
 Dieser Dienst wird in der Regel durch einen-Rückruf zurückgegeben <xref:System.IServiceProvider.GetService%2A> , der für einen kontextspezifischen Dienstanbieter erfolgt. Der Dienstanbieter ist in der Regel für Kontexte verfügbar, die ihn benötigen, z. b. den Ausführungs Code eines Wert Konverters. Weitere Informationen finden Sie unter [Typkonverter und Markup Erweiterungen für XAML](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml) und [Dienst Kontexte, die für Typkonverter und Markup Erweiterungen verfügbar sind](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions).  
  
## <a name="about-ambient-properties"></a>Informationen zu Ambient-Eigenschaften  
 Eine Ambient-Eigenschaft ist eine Eigenschaft, deren Eigenschafts Wert für Typkonverter und Markup Erweiterungs Verwendungen verfügbar ist, die in der XAML-Knoten Struktur und im Objekt Diagramm vorhanden sind, das daraus erstellt wurde. Dies ist für einen XAML-Prozessor während der Objekt Schreibphase des Ladepfad oder der Serialisierungsphase eines Speicher Pfads relevant.  
  
 Im Fall des Lade Pfades kann der Ambient-Eigenschafts Wert den Wert im Objekt Diagramm anderer Eigenschaften beeinflussen, die sich in einer XAML-Knoten Struktur unterhalb des Objekts befinden. Bei der Verarbeitung als XAML-knotenstream bedeutet das Ambient-Konzept, dass der Ambient-Eigenschafts Wert für Typkonverter und Markup Erweiterungen von zu verfügbar sein muss `StartObject` `EndObject` . Ebenso kann ein Typkonverter, der für den Speicherpfad verwendet wird, Kenntnisse der Ambient-Eigenschaft und deren Wert verwenden. Daher ist die XAML, die erstellt wird, eine bessere Roundtrip-Darstellung.  
  
 Bei Membern im Allgemeinen gibt XAML nicht die Reihenfolge an, in der Member eines Objekts verarbeitet werden müssen. Allerdings muss jeder Ambient-Eigenschafts Wert zuerst vom XAML-Reader verarbeitet werden, damit der Typkonverter und die Markup Erweiterungs Verwendungen, die in anderen Eigenschaften enthalten sind, über den Dienst darauf zugreifen können <xref:System.Xaml.IAmbientProvider> .  
  
 <xref:System.Xaml.XamlMember.DependsOn%2A> ist ein ähnliches Konzept, das auch die Reihenfolge der XAML-Knoten Verarbeitung beeinflusst. Kann jedoch <xref:System.Xaml.XamlMember.DependsOn%2A> nur für peermember-und Knoten Beziehungen verwendet werden; Sie kann nicht alle Nachfolger beeinflussen. Außerdem <xref:System.Xaml.XamlMember.DependsOn%2A> wirkt sich die Eigenschafts Einstellung des Objekt Diagramms direkt aus, während die Umgebungs Technik auf Typkonvertern oder Markup Erweiterungen basiert. Bei der Ambient-Technik muss auch eine bestimmte typkonverterdefinition oder Markup Erweiterungs Definition vorhanden sein, die angibt, wie der Ambient-Eigenschafts Wert interpretiert und auf das Objekt angewendet werden soll.  
  
## <a name="wpf-usage-notes"></a>Hinweise zur WPF-Verwendung  
 Ein Umgebungs Eigenschafts Szenario, das in der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] featuremenge veranschaulicht wird <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> , ist, das die erforderlichen Eigenschaften Namen suchen nach anderen Werten qualifizieren kann. In diesem Fall qualifiziert der <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> Wert die <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> Werte, die sich in den darunter liegenden XAML-Knoten befinden. <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> verwendet das Typkonverterverhalten für eine <xref:System.Windows.DependencyProperty> . Dieses Verhalten greift <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> durch Abfragen <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> von einem Dienst Kontext, der für Typkonverter und Markup Erweiterungen verfügbar ist, auf den Ambient-Wert zu.  
  
 Ein Umgebungstyp Szenario, das in der WPF-Funktionsgruppe veranschaulicht wird, ist <xref:System.Windows.ResourceDictionary> . <xref:System.Windows.ResourceDictionary> verfügt über eine <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> Eigenschaft, die andere <xref:System.Windows.ResourceDictionary> Objekte enthalten kann, die zusammengeführt werden können, und die beabsichtigte Reihenfolge der Ressourcen Auflösung für das zusammengeführte Szenario steht in Konflikt mit der Reihenfolge, in der die <xref:System.Windows.ResourceDictionary> gilt <xref:System.Windows.Markup.AmbientAttribute> , damit ein XAML-Prozessor die Verweise in einem zusammengeführten Wörterbuch mit Verwendungen ordnungsgemäß verarbeiten kann `StaticResource` . Insbesondere `StaticResource` ist eine Markup Erweiterung, die aufruft <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A> .  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.AmbientPropertyValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetAllAmbientValues">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen aufzählbaren Satz von Ambient-Typ- oder Eigenschaftsinformationselementen für den angeforderten Bereich zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetAllAmbientValues (params System.Xaml.XamlType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetAllAmbientValues(class System.Xaml.XamlType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ParamArray types As XamlType()) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetAllAmbientValues(... cli::array &lt;System::Xaml::XamlType ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : System.Xaml.XamlType[] -&gt; seq&lt;obj&gt;" Usage="iAmbientProvider.GetAllAmbientValues types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">Der Satz von Typen, von dem Informationen zu Ambient-Typen abgerufen werden sollen.</param>
        <summary>Gibt einen aufzählbaren Satz von Objektinstanzen möglicher Ambient-Typen für die angeforderten Typen zurück.</summary>
        <returns>Ein aufzählbarer Satz von Objekten, die die Werte für den angeforderten Satz von <see cref="T:System.Xaml.XamlType" />-Bezeichnern darstellen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ceilingTypes As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As IEnumerable(Of AmbientPropertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xaml::AmbientPropertyValue ^&gt; ^ GetAllAmbientValues(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; seq&lt;System.Xaml.AmbientPropertyValue&gt;" Usage="iAmbientProvider.GetAllAmbientValues (ceilingTypes, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes">Gibt mindestens einen Typ an, von dem die Auswertung beendet werden sollte, wenn er im Objektdiagramm nach oben traversiert wird. Dieser Typ enthält die gewünschte Ambient-Eigenschaft. Kann <see langword="null" /> sein.</param>
        <param name="properties">Gibt mindestens einen Eigenschaftenbezeichner an, durch den die Eigenschaften identifiziert werden, die als ambient betrachtet werden sollen.</param>
        <summary>Gibt einen aufzählbaren Satz von Ambient-Eigenschaftsinformationselementen für den angeforderten Eigenschaftssatz zurück.</summary>
        <returns>Ein aufzählbarer Satz von Ambient-Eigenschaftsinformationselementen für den angeforderten Satz von Eigenschaften. Die Eigenschaftsinformationen für jedes zurückgegebene <see cref="T:System.Xaml.AmbientPropertyValue" />-Objekt entsprechen einer der eingegebenen <paramref name="properties" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Xaml.AmbientPropertyValue> , die zurückgegeben wird, enthält den <xref:System.Xaml.XamlMember> Bezeichner und einen Eigenschafts Wert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, bool searchLiveStackOnly, System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; types, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, bool searchLiveStackOnly, class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; types, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ceilingTypes As IEnumerable(Of XamlType), searchLiveStackOnly As Boolean, types As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As IEnumerable(Of AmbientPropertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xaml::AmbientPropertyValue ^&gt; ^ GetAllAmbientValues(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, bool searchLiveStackOnly, System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ types, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : seq&lt;System.Xaml.XamlType&gt; * bool * seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; seq&lt;System.Xaml.AmbientPropertyValue&gt;" Usage="iAmbientProvider.GetAllAmbientValues (ceilingTypes, searchLiveStackOnly, types, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="searchLiveStackOnly" Type="System.Boolean" />
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes">Gibt mindestens einen Typ an, von dem die Auswertung beendet werden sollte, wenn er im Objektdiagramm nach oben traversiert wird. Dieser Typ enthält die gewünschte Ambient-Eigenschaft. Kann <see langword="null" /> sein.</param>
        <param name="searchLiveStackOnly"><see langword="true" />, um keinen gespeicherten Kontext zu verwenden; <see langword="false" />, um einen gespeicherten Kontext zu verwenden. Der Standardwert ist <see langword="false" />.</param>
        <param name="types">Gibt mindestens ein Typbezeichnerobjekt an, das die Typen identifiziert, die als ambient betrachtet werden sollen.</param>
        <param name="properties">Gibt mindestens einen Eigenschaftenbezeichner an, durch den die Eigenschaften identifiziert werden, die als ambient betrachtet werden sollen.</param>
        <summary>Gibt einen aufzählbaren Satz von Ambient-Eigenschaftsinformationselementen für den angeforderten Satz von Typen und Eigenschaften zurück.</summary>
        <returns>Ein aufzählbarer Satz von Ambient-Eigenschaftsinformationselementen für den angeforderten Satz von Typen und Eigenschaften. Die Eigenschaftsinformationen für jedes zurückgegebene <see cref="T:System.Xaml.AmbientPropertyValue" />-Objekt entsprechen einer der eingegebenen <paramref name="types" /> oder <paramref name="properties" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Xaml.AmbientPropertyValue> , die zurückgegeben wird, enthält den <xref:System.Xaml.XamlMember> Bezeichner und einen Eigenschafts Wert.  
  
 Diese spezielle <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A> Überladung kann im gleichen Durchlauf durch eine Struktur nach Ambient-Typen und Ambient-Eigenschaften suchen. Die Verwendung dieser Überladung führt zu einer Reihenfolge von Elementen im Rückgabewert, die sich von oder unterscheiden <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29> .  
  
 Diese Überladung ermöglicht der Suche auch, keinen gespeicherten Kontext zu verwenden. Die- <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> oder- <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29> über Ladungen verwenden implizit einen gespeicherten Kontext, wenn Sie verfügbar ist (Sie agieren immer so, als ob ein impliziter `searchLiveStackOnly` Parameter ist `false` ). Das Konzept eines gespeicherten Kontexts kann möglicherweise von bestimmten XAML-Schema Kontexten oder von Frameworks, die XAML enthalten, anders gehandhabt werden. In der WPF-XAML-Implementierung werden gespeicherte Kontexte für die Vorlagen Erweiterung sowie für andere Funktionsbereiche verwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFirstAmbientValue">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen einzelnen Ambient-Typ oder ein Eigenschaftsinformationselement vom angeforderten Satz zurück. Dies ist abhängig von der zuerst gefundenen Eigenschaft.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFirstAmbientValue">
      <MemberSignature Language="C#" Value="public object GetFirstAmbientValue (params System.Xaml.XamlType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFirstAmbientValue(class System.Xaml.XamlType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstAmbientValue (ParamArray types As XamlType()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFirstAmbientValue(... cli::array &lt;System::Xaml::XamlType ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetFirstAmbientValue : System.Xaml.XamlType[] -&gt; obj" Usage="iAmbientProvider.GetFirstAmbientValue types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">Der Satz von Typen, von dem Informationen zu Ambient-Typen abgerufen werden sollen.</param>
        <summary>Gibt das erste übereinstimmende Objekt zurück, bei dem es sich um einen möglichen Ambient-Typ für die angeforderten Typen handelt.</summary>
        <returns>Das erste Ergebnisobjekt für den angeforderten Satz.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstAmbientValue">
      <MemberSignature Language="C#" Value="public System.Xaml.AmbientPropertyValue GetFirstAmbientValue (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.AmbientPropertyValue GetFirstAmbientValue(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstAmbientValue (ceilingTypes As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As AmbientPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::AmbientPropertyValue ^ GetFirstAmbientValue(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetFirstAmbientValue : seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; System.Xaml.AmbientPropertyValue" Usage="iAmbientProvider.GetFirstAmbientValue (ceilingTypes, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.AmbientPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes">Gibt mindestens einen Typ an, von dem die Auswertung beendet werden sollte, wenn er im Objektdiagramm nach oben traversiert wird. Dieser Typ enthält die gewünschte Ambient-Eigenschaft.</param>
        <param name="properties">Gibt mindestens ein Objekt an, durch das die Eigenschaften identifiziert werden, die als "ambient" betrachtet werden sollen.</param>
        <summary>Gibt ein einzelnes Ambient-Eigenschaftsinformationselement vom angeforderten Eigenschaftssatz zurück. Dies ist abhängig von der zuerst gefundenen Eigenschaft.</summary>
        <returns>Ein einzelnes Ambient-Eigenschaftsinformationselement für den ersten Ambient-Eigenschaftswert aus der <paramref name="properties" />-Liste, der gefunden wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Xaml.AmbientPropertyValue> , die zurückgegeben wird, enthält den <xref:System.Xaml.XamlMember> Bezeichner und einen Eigenschafts Wert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

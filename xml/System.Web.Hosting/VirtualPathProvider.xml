<Type Name="VirtualPathProvider" FullName="System.Web.Hosting.VirtualPathProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="da63e243320d1d952dd56cd32ed2c99a746c0bdd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69139332" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualPathProvider : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualPathProvider extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualPathProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualPathProvider&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualPathProvider abstract : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type VirtualPathProvider = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Reihe von Methoden bereit, mit denen eine Webanwendung Ressourcen aus einem virtuellen Dateisystem abrufen kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.VirtualPathProvider> -Klasse stellt eine Reihe von Methoden zum Implementieren eines virtuellen Dateisystems für eine Webanwendung bereit. In einem virtuellen Dateisystem werden die Dateien und Verzeichnisse von einem anderen Datenspeicher als dem Dateisystem verwaltet, das vom Betriebssystem des Servers bereitgestellt wird. Beispielsweise können Sie ein virtuelles Dateisystem zum Speichern von Inhalten in einer SQL Server-Datenbank verwenden.  
  
 Sie können alle Dateien speichern, die auf Anforderung in einem virtuellen Dateisystem verarbeitet werden. Dies umfasst Folgendes:  
  
-   ASP.NET Seiten, Masterseiten, Benutzer Steuerelemente und andere Objekte.  
  
-   Standard Webseiten mit Erweiterungen wie. htm und. jpg.  
  
-   Alle benutzerdefinierten Erweiterungen, die <xref:System.Web.Compilation.BuildProvider> einer-Instanz zugeordnet sind.  
  
-   Jedes benannte Design im `App_Theme` Ordner.  
  
 ASP.NET-Anwendungsordner oder-Dateien, die Assemblys auf Anwendungsebene generieren, können nicht in einem virtuellen Dateisystem gespeichert werden. Dies umfasst Folgendes:  
  
-   Die Datei "Global. asax".  
  
-   Web. config-Dateien.  
  
-   Site Map-Datendateien, die <xref:System.Web.XmlSiteMapProvider>von verwendet werden.  
  
-   Verzeichnisse, die Anwendungsassemblys enthalten oder Anwendungsassemblys `App_LocalResources`generieren: `Bin`, `App_Code`, `App_GlobalResources`, Any.  
  
-   Der Anwendungsdatenordner `App_Data`.  
  
> [!NOTE]
>  Wenn eine Website für die Bereitstellung vorkompiliert wird, wird der von <xref:System.Web.Hosting.VirtualPathProvider> einer-Instanz bereitgestellte Inhalt nicht <xref:System.Web.Hosting.VirtualPathProvider> kompiliert, und von der vorkompilierten Site werden keine Instanzen verwendet.  
  
## <a name="registering-a-virtualpathprovider"></a>Registrieren eines VirtualPathProvider  
 Eine Benutzer <xref:System.Web.Hosting.VirtualPathProvider> definierte Instanz muss beim ASP.net-Kompilierungs System registriert werden, <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=nameWithType> indem die-Methode verwendet wird, bevor eine Seiten Verarbeitung oder-Kompilierung von der Webanwendung ausgeführt wird.  
  
 In der Regel <xref:System.Web.Hosting.VirtualPathProvider> wird eine-Instanz in `AppInitialize` einer Methode registriert, `App_Code` die im Verzeichnis definiert ist `Application_Start` , oder während `Global.asax` des Ereignisses in der Datei. Ein Beispiel für das Registrieren einer <xref:System.Web.Hosting.VirtualPathProvider> -Instanz in `AppInitialize` einer-Methode finden Sie im Beispiel Abschnitt.  
  
 Sie können eine <xref:System.Web.Hosting.VirtualPathProvider> -Instanz bei anderen Ereignissen registrieren, aber Seiten, die vor der <xref:System.Web.Hosting.VirtualPathProvider> Registrierung der Instanz kompiliert und zwischengespeichert wurden, werden nicht für ungültig <xref:System.Web.Hosting.VirtualPathProvider> erklärt, auch wenn die neue Instanz jetzt die Quelle für den vorher bereitstellen würde. kompilierte Seite.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine <xref:System.Web.Hosting.VirtualPathProvider> Klassen Implementierung, die ein virtuelles Dateisystem mithilfe von Informationen erstellt, <xref:System.Data.DataSet> die in einem-Objekt gespeichert sind. Das Codebeispiel verwendet die Codebeispiele für die <xref:System.Web.Hosting.VirtualFile> -Klasse und die- <xref:System.Web.Hosting.VirtualDirectory> Klasse, um virtuelle Ressourcen aus einem Datenspeicher bereitzustellen <xref:System.Data.DataSet> , der in ein-Objekt geladen wird.  
  
 Dieses Beispiel besteht aus vier Teilen: <xref:System.Web.Hosting.VirtualPathProvider> der-Klassen Implementierung, einer XML-Datendatei, die <xref:System.Data.DataSet> zum Auffüllen des `AppStart` -Objekts verwendet wird `AppInitialize` , einem-Objekt, <xref:System.Web.Hosting.VirtualPathProvider> das eine Methode zum Registrieren der-Klasse mit der Kompilierung enthält. System und eine ASP.NET-Seite, die Links zu den virtuellen Dateien bereitstellt.  
  
 Um diesen Beispielcode in einer Anwendung zu verwenden, führen Sie die folgenden Schritte aus.  
  
1.  Erstellen Sie auf dem Webserver eine Beispielanwendung.  
  
2.  Kopieren Sie den Quellcode für das Benutzer <xref:System.Web.Hosting.VirtualPathProvider> definierte Objekt (siehe unten) in eine Datei im `App_Code` Verzeichnis der Anwendung.  
  
3.  Kopieren Sie den Quellcode für das Benutzer <xref:System.Web.Hosting.VirtualDirectory> definierte Objekt (siehe Beispiel Abschnitt <xref:System.Web.Hosting.VirtualDirectory> des Themas class Overview) in eine `App_Code` Datei im Verzeichnis der Anwendung.  
  
4.  Kopieren Sie den Quellcode für das Benutzer <xref:System.Web.Hosting.VirtualFile> definierte Objekt (siehe Beispiel Abschnitt <xref:System.Web.Hosting.VirtualFile> des Themas class Overview) in eine `App_Code` Datei im Verzeichnis der Anwendung.  
  
5.  Kopieren Sie den Quellcode für das `AppStart` - `App_Code` Objekt (siehe unten) in eine Datei im Verzeichnis der Anwendung.  
  
6.  Kopieren Sie die XML-Daten (siehe unten) `XMLData.xml` in eine Datei im `App_Data` Verzeichnis der Anwendung.  
  
7.  Kopieren Sie `default.aspx` die Datei (siehe unten) in das Stammverzeichnis der Beispielanwendung. Öffnen Sie die `default.aspx` Datei mithilfe eines Webbrowsers, und klicken Sie dann auf die Links auf der Seite, um den Inhalt der virtuellen Dateien anzuzeigen.  
  
 Das erste Beispiel ist eine Benutzer <xref:System.Web.Hosting.VirtualPathProvider> definierte-Klasse. Die <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> - <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> Methode und die-Methode werden überschrieben, um anzugeben, ob ein angefordertes Verzeichnis im virtuellen Dateisystem vorhanden ist. Die <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> Methoden <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> und werden überschrieben, um Benutzer <xref:System.Web.Hosting.VirtualDirectory> definierte <xref:System.Web.Hosting.VirtualFile> -und-Instanzen zurückzugeben, die Informationen aus dem virtuellen Dateisystem enthalten.  
  
 Die-Klasse bietet auch `GetVirtualData` eine-Methode, <xref:System.Web.Hosting.VirtualDirectory> die <xref:System.Web.Hosting.VirtualFile> von den Klassen und <xref:System.Data.DataSet> verwendet wird, um auf das Objekt zuzugreifen, das die virtuellen Dateisystem Daten enthält In einer Produktions Implementierung wäre diese Methode in der Regel in einem Geschäftsobjekt implementiert, das für die Interaktion mit dem Datenspeicher zuständig ist.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#20)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#20)]  
  
 Das zweite Beispiel ist die XML-Datendatei, die verwendet wird <xref:System.Data.DataSet> , um das vom Benutzer <xref:System.Web.Hosting.VirtualPathProvider> definierten-Objekt zurückgegebene-Objekt aufzufüllen. Diese XML-Daten werden verwendet, um die <xref:System.Web.Hosting.VirtualPathProvider>Verwendung <xref:System.Web.Hosting.VirtualDirectory>der- <xref:System.Web.Hosting.VirtualFile> ,-und-Objekte zum Abrufen von Daten aus externen Daten zu veranschaulichen. Sie sind nicht für die Darstellung eines Datenspeicher in Produktionsqualität vorgesehen.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
  <resource type="dir"   
    path="/vrDir"   
    parentPath=""   
    content="">  
    <resource type="file"   
      path="/vrDir/Level1FileA.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level1FileB.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileB.">  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirA"   
      parentPath="/vrDir"   
      content="">  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
    path="/vrDir/Level2DirB"   
    parentPath="/vrDir"   
    content="">  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 Das dritte Beispiel stellt ein `AppStart` -Objekt bereit, `AppInitialize` das eine-Methode enthält. Diese Methode wird während der Initialisierung einer ASP.NET-Anwendung aufgerufen, um die erforderliche benutzerdefinierte Initialisierung auszuführen. In diesem Fall wird das benutzerdefinierte <xref:System.Web.Hosting.VirtualPathProvider> Objekt beim ASP.NET-Buildsystem registriert.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/AppStart.cs#10)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/AppStart.vb#10)]  
  
 Das letzte Beispiel ist eine ASP.NET Seite, die Links zu den virtuellen Dateien enthält, die im virtuellen Dateisystem enthalten sind.  
  
 [!code-aspx-csharp[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Wenn Sie von <see cref="T:System.Web.Hosting.VirtualPathProvider" />erben, müssen Sie die folgenden Member überschreiben: 
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />  
  
Wenn Ihre Benutzer <see cref="T:System.Web.Hosting.VirtualPathProvider" /> definierte Klasse Verzeichnisse im virtuellen Dateisystem unterstützt, müssen Sie die folgenden Member überschreiben.  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" /><block subset="none" type="note"><para>  
      Wenn das virtuelle Dateisystem Designs für die Website enthält (durch Erstellen eines virtuellen <c>App_Themes</c> -Verzeichnisses), muss die Benutzer <see cref="T:System.Web.Hosting.VirtualPathProvider" /> definierte Klasse Verzeichnisse unterstützen.
    </para></block>  
  
    Eine Benutzer <see cref="T:System.Web.Hosting.VirtualPathProvider" /> definierte Klasse funktioniert mit Klassen, die <see cref="T:System.Web.Hosting.VirtualFile" /> von <see cref="T:System.Web.Hosting.VirtualDirectory" /> den Klassen und abgeleitet werden. Sie sollten abgeleitete Klassen aus diesen Typen implementieren, um Datei-und Verzeichnisinformationen aus dem virtuellen Dateisystem bereitzustellen. Ein Beispiel für eine benutzerdefinierte <see cref="T:System.Web.Hosting.VirtualFile" /> Implementierung finden Sie im Beispiel Abschnitt <see cref="T:System.Web.Hosting.VirtualFile" /> des Themas class Overview. Ein Beispiel für eine benutzerdefinierte <see cref="T:System.Web.Hosting.VirtualDirectory" /> Implementierung finden Sie im Beispiel Abschnitt <see cref="T:System.Web.Hosting.VirtualDirectory" /> des Themas class Overview.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualPathProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualPathProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert die Klasse zur Verwendung durch eine geerbte Klasseninstanz. Dieser Konstruktor kann nur von einer geerbten Klasse aufgerufen werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stellen Sie beim <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> Überschreiben des Konstruktors jede Initialisierung zurück, die nach <xref:System.Web.Hosting.VirtualPathProvider> der Registrierung des-Objekts <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> bei der-Methode ausgeführt werden muss.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung des <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> -Konstruktors, der eine benutzerdefinierte <xref:System.Web.Hosting.VirtualPathProvider> -Klasse initialisiert. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#25)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombineVirtualPaths">
      <MemberSignature Language="C#" Value="public virtual string CombineVirtualPaths (string basePath, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CombineVirtualPaths(string basePath, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CombineVirtualPaths (basePath As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CombineVirtualPaths(System::String ^ basePath, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="abstract member CombineVirtualPaths : string * string -&gt; string&#xA;override this.CombineVirtualPaths : string * string -&gt; string" Usage="virtualPathProvider.CombineVirtualPaths (basePath, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePath" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basePath">Der Basispfad für die Anwendung.</param>
        <param name="relativePath">Der Pfad zur virtuellen Ressource, relativ zum Basispfad.</param>
        <summary>Kombiniert einen Basispfad mit einem relativen Pfad, um einen vollständigen Pfad zu einer virtuellen Ressource zurückzugeben.</summary>
        <returns>Der vollständige Pfad zu einer virtuellen Ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths%2A> die-Methode, um den Inhalt eines relativen Pfads zu einer virtuellen Ressource zu überprüfen und erforderliche Änderungen auszuführen.  
  
 Die Standard Implementierung kombiniert den `basePath` - `relativePath` Parameter und den-Parameter gemäß der standardmäßigen ASP.net-Pfad Verarbeitung.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie die Standard Implementierung <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> der-Methode überschreiben, müssen Sie jede spezielle Syntax mit dem <paramref name="relativePath" /> -Parameter in einen gültigen virtuellen Pfad konvertieren. Sie sind verantwortlich für Syntax Überprüfung, Pfad Überprüfung und Behandlung falsch formatierter Eingaben sowie von Edge-Fällen für wohlgeformte Eingaben.  
  
In den meisten Fällen ist es nicht erforderlich, die Standard <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> Methode zu überschreiben. Wenn Sie jedoch den Pfad ändern müssen, empfiehlt es sich, die <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> Implementierung auf das Ändern von Token zu beschränken, die für den <paramref name="relativeUrl" /> virtuellen Pfad Anbieter spezifisch sind, und die Basis Implementierung für die normale Ausführung aufzurufen. ASP.net-Pfad Verarbeitung</para></block>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public virtual bool DirectoryExists (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DirectoryExists(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DirectoryExists (virtualDir As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DirectoryExists(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member DirectoryExists : string -&gt; bool&#xA;override this.DirectoryExists : string -&gt; bool" Usage="virtualPathProvider.DirectoryExists virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">Der Pfad zum virtuellen Verzeichnis.</param>
        <summary>Ruft einen Wert ab, der angibt, ob ein Verzeichnis im virtuellen Dateisystem vorhanden ist.</summary>
        <returns><see langword="true" />, wenn das Verzeichnis im virtuellen Dateisystem vorhanden ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> Sie die-Methode, um dem Kompilierungs System mitzuteilen, `virtualDir` dass die durch dargestellte Ressource im virtuellen Datei <xref:System.Web.Hosting.VirtualPathProvider> System vorhanden ist, das von dieser Instanz bereitgestellt wird  
  
 Wenn die Benutzer <xref:System.Web.Hosting.VirtualPathProvider> definierte Klasse keine Verzeichnisse unterstützt, <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> sollte die Methode `false`zurückgeben.  
  
> [!NOTE]
>  Wenn das virtuelle Dateisystem Designs für die Website enthält (durch Erstellen eines virtuellen `App_Themes` Verzeichnisses), muss die benutzerdefinierte <xref:System.Web.Hosting.VirtualPathProvider> Klasse Verzeichnisse unterstützen.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung der <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> -Methode in einer benutzerdefinierten <xref:System.Web.Hosting.VirtualPathProvider> -Klasse. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#22)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public virtual bool FileExists (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FileExists(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FileExists (virtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool FileExists(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member FileExists : string -&gt; bool&#xA;override this.FileExists : string -&gt; bool" Usage="virtualPathProvider.FileExists virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der Pfad zu der virtuellen Datei.</param>
        <summary>Ruft einen Wert ab, der angibt, ob eine Datei im virtuellen Dateisystem vorhanden ist.</summary>
        <returns><see langword="true" />, wenn die Datei im virtuellen Dateisystem vorhanden ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> Sie die-Methode, um dem Kompilierungs System mitzuteilen, `virtualPath` dass die durch dargestellte Ressource im virtuellen Datei <xref:System.Web.Hosting.VirtualPathProvider> System vorhanden ist, das von dieser Instanz bereitgestellt wird  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung der <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> -Methode in einer benutzerdefinierten <xref:System.Web.Hosting.VirtualPathProvider> -Klasse. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#21)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheDependency">
      <MemberSignature Language="C#" Value="public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Caching.CacheDependency GetCacheDependency(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies, valuetype System.DateTime utcStart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheDependency (virtualPath As String, virtualPathDependencies As IEnumerable, utcStart As DateTime) As CacheDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Caching::CacheDependency ^ GetCacheDependency(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency&#xA;override this.GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="virtualPathProvider.GetCacheDependency (virtualPath, virtualPathDependencies, utcStart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
        <Parameter Name="utcStart" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der Pfad zur primären virtuellen Ressource.</param>
        <param name="virtualPathDependencies">Ein Array von Pfaden zu anderen Ressourcen, die von der primären virtuellen Ressource angefordert werden.</param>
        <param name="utcStart">Die UTC-Zeit, zu der die virtuellen Ressourcen gelesen wurden.</param>
        <summary>Erstellt eine auf den angegebenen virtuellen Pfaden basierende Cacheabhängigkeit.</summary>
        <returns>Ein <see cref="T:System.Web.Caching.CacheDependency" />-Objekt für die angegebenen virtuellen Ressourcen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Implementierung <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> der-Methode gibt `null`zurück. Um virtuelle Ressourcen für die spätere Verwendung zwischenzuspeichern, müssen <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> Sie entweder die <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> -Methode oder die-Methode überschreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> -Methode für eine <xref:System.Web.Hosting.VirtualPathProvider> benutzerdefinierte-Klasse implementiert. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#28)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheKey">
      <MemberSignature Language="C#" Value="public virtual string GetCacheKey (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCacheKey(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheKey (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCacheKey(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheKey : string -&gt; string&#xA;override this.GetCacheKey : string -&gt; string" Usage="virtualPathProvider.GetCacheKey virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der Pfad zur virtuellen Ressource.</param>
        <summary>Gibt einen Cacheschlüssel zurück, der für den angegebenen virtuellen Pfad verwendet werden soll.</summary>
        <returns>Ein Cacheschlüssel für die angegebene virtuelle Ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> die-Methode, um einen benutzerdefinierten Cache Schlüssel für virtuelle Ressourcen bereitzustellen. Wenn Sie die <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> -Methode nicht überschreiben, wird der virtuelle Pfad für den Cache Schlüssel verwendet.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Überschreiben Sie nur <see cref="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" /> die Standardmethode, wenn die Erstellung eines Cache Schlüssels auf der Grundlage des virtuellen Pfads für Ihre Anwendung nicht funktioniert.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetDirectory">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualDirectory GetDirectory(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectory (virtualDir As String) As VirtualDirectory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualDirectory ^ GetDirectory(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory&#xA;override this.GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory" Usage="virtualPathProvider.GetDirectory virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualDirectory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">Der Pfad zum virtuellen Verzeichnis.</param>
        <summary>Ruft ein virtuelles Verzeichnis aus dem virtuellen Dateisystem ab.</summary>
        <returns>Eine untergeordnete Klasse der <see cref="T:System.Web.Hosting.VirtualDirectory" />-Klasse, die ein Verzeichnis im virtuellen Dateisystem darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> -Methode gibt einen Nachfolger <xref:System.Web.Hosting.VirtualDirectory> der-Klasse zurück, die die Datei und die Verzeichnisse enthält, die in `virtualDir` dem im-Parameter angegebenen Verzeichnis enthalten sind.  
  
 Wenn die Benutzer <xref:System.Web.Hosting.VirtualPathProvider> definierte Klasse keine Verzeichnisse unterstützt, <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> sollte die Methode `null`zurückgeben.  
  
> [!NOTE]
>  Wenn das virtuelle Dateisystem Designs für die Website enthält (durch Erstellen eines virtuellen `App_Themes` Verzeichnisses), muss die benutzerdefinierte <xref:System.Web.Hosting.VirtualPathProvider> Klasse Verzeichnisse unterstützen.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung der <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> -Methode in einer benutzerdefinierten <xref:System.Web.Hosting.VirtualPathProvider> -Klasse. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#24)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualFile GetFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (virtualPath As String) As VirtualFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualFile ^ GetFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string -&gt; System.Web.Hosting.VirtualFile&#xA;override this.GetFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="virtualPathProvider.GetFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der Pfad zu der virtuellen Datei.</param>
        <summary>Ruft aus dem virtuellen Dateisystem eine virtuelle Datei ab.</summary>
        <returns>Eine untergeordnete Klasse der <see cref="T:System.Web.Hosting.VirtualFile" />-Klasse, die eine Datei im virtuellen Dateisystem darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> -Methode gibt eine <xref:System.Web.Hosting.VirtualFile> untergeordnete Klasse der-Klasse zurück, die die durch `virtualPath` den-Parameter angegebene Datei darstellt.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung der <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> -Methode in einer benutzerdefinierten <xref:System.Web.Hosting.VirtualPathProvider> -Klasse. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileHash">
      <MemberSignature Language="C#" Value="public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFileHash(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileHash (virtualPath As String, virtualPathDependencies As IEnumerable) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFileHash(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies);" />
      <MemberSignature Language="F#" Value="abstract member GetFileHash : string * System.Collections.IEnumerable -&gt; string&#xA;override this.GetFileHash : string * System.Collections.IEnumerable -&gt; string" Usage="virtualPathProvider.GetFileHash (virtualPath, virtualPathDependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der Pfad zur primären virtuellen Ressource.</param>
        <param name="virtualPathDependencies">Ein Array von Pfaden zu anderen virtuellen Ressourcen, die von der primären virtuellen Ressource angefordert werden.</param>
        <summary>Gibt einen Hash der angegebenen virtuellen Pfade zurück.</summary>
        <returns>Ein Hash der angegebenen virtuellen Pfade.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> die-Methode, um einen Hash der Abhängigkeiten für eine Ressource des virtuellen Dateisystems bereitzustellen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.Initialize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit&#xA;override this.Initialize : unit -&gt; unit" Usage="virtualPathProvider.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert die <see cref="T:System.Web.Hosting.VirtualPathProvider" />-Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> -Methode wird aufgerufen, nachdem der Anbieter beim ASP.net-Kompilierungs System registriert wurde. Die <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> -Methode wird verwendet, um jede Initialisierung bereitzustellen <xref:System.Web.Hosting.VirtualPathProvider> , die erforderlich ist, nachdem die-Instanz in der Umgebung platziert wurde, die die Anwendung  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung der <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> -Methode, mit der der Pfad zu einer Datendatei aus der- <xref:System.Web.Hosting.HostingEnvironment> Instanz der Anwendung festgelegt wird. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#26)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="virtualPathProvider.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt zu einer unendlichen Lebensdauer des <see cref="T:System.Web.Hosting.VirtualPathProvider" />-Objekts, indem das Erstellen eines Lease verhindert wird.</summary>
        <returns>Immer <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt die <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> -Methode in ihrer Basisklasse. Es wird immer `null` zurückgegeben. Dadurch wird verhindert, dass eine Lease erstellt wird <xref:System.Web.Hosting.VirtualPathProvider> , die die Lebensdauer des Objekts einschränkt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenFile (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member OpenFile : string -&gt; System.IO.Stream" Usage="System.Web.Hosting.VirtualPathProvider.OpenFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der Pfad zu der virtuellen Datei.</param>
        <summary>Gibt einen Stream aus einer virtuellen Datei zurück.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.IO.Stream" />-Objekt für die angegebene virtuelle Datei oder Ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.VirtualPathProvider.OpenFile%2A> -Methode ist eine Hilfsmethode, die es Ihnen ermöglicht, einen Stream aus einer virtuellen Datei zu <xref:System.Web.Hosting.VirtualPathProvider> erhalten, ohne eine-Instanz zu erstellen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="protected internal System.Web.Hosting.VirtualPathProvider Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Hosting.VirtualPathProvider Previous" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Previous As VirtualPathProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::Hosting::VirtualPathProvider ^ Previous { System::Web::Hosting::VirtualPathProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Previous : System.Web.Hosting.VirtualPathProvider" Usage="System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualPathProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf ein vorher registriertes <see cref="T:System.Web.Hosting.VirtualPathProvider" />-Objekt im Kompilierungssystem ab.</summary>
        <value>Das nächste <see cref="T:System.Web.Hosting.VirtualPathProvider" />-Objekt im Kompilierungssystem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein <xref:System.Web.Hosting.VirtualPathProvider> -Objekt im ASP.net-Kompilierungs System registriert wird, wird es einer Kette von Anbietern hinzugefügt. Verwenden Sie <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> die-Eigenschaft, um die Verarbeitung an <xref:System.Web.Hosting.VirtualPathProvider> das vorherige Objekt in der Kette zu übergeben, wenn der angeforderte <xref:System.Web.Hosting.VirtualPathProvider> Pfad nicht von dieser Instanz bereitgestellt wird.  
  
 Die Kette von Pfad Anbietern endet immer mit dem standardmäßigen ASP.NET-Anbieter, der Dateien aus dem Dateisystem verarbeitet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung der <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> -Methode veranschaulicht. Wenn das angeforderte virtuelle Verzeichnis nicht mit der Zeichenfolge `"/vrdir"`beginnt, <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> verwendet die-Methode die-Eigenschaft, um die Anforderung <xref:System.Web.Hosting.VirtualPathProvider> an das nächste Objekt in der Kette zu übergeben. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im <xref:System.Web.Hosting.VirtualPathProvider> Beispiel Abschnitt des Themas class Overview.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1dc1490a7df51d445efca113976396a3d0fc7cb5" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69138781" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <TypeSignature Language="F#" Value="type VirtualFile = class&#xA;    inherit VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ein Dateiobjekt in einem virtuellen Dateiraum oder in einem virtuellen Ressourcenraum dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.Hosting.VirtualFile> Klasse ist die Basisklasse für Objekte, die Dateien in einem virtuellen Dateisystem darstellen. In der Regel implementieren Sie einen Nachfolger der- <xref:System.Web.Hosting.VirtualFile> Klasse für jeden <xref:System.Web.Hosting.VirtualPathProvider> Objekt Nachfolger in Ihrer Webanwendung.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine <xref:System.Web.Hosting.VirtualFile> Klassen Implementierung, die in einem-Objekt gespeicherte Informationen <xref:System.Data.DataSet> mit einer Vorlagen Datei kombiniert, um HTML-Daten zurückzugeben. Dieses Codebeispiel verwendet die Codebeispiele für die <xref:System.Web.Hosting.VirtualPathProvider> -Klasse und die- <xref:System.Web.Hosting.VirtualDirectory> Klasse, um virtuelle Ressourcen aus einem Datenspeicher bereitzustellen, der in ein-Objekt geladen wird <xref:System.Data.DataSet> . Die umfassenden Anweisungen zum Kompilieren und Ausführen des Beispiels finden Sie im Beispiel Abschnitt der- <xref:System.Web.Hosting.VirtualPathProvider> Klassen Übersicht.  
  
 Dieses Beispiel besteht aus drei Teilen: der <xref:System.Web.Hosting.VirtualFile> -Klassen Implementierung, einer XML-Datendatei, die zum Auffüllen des <xref:System.Data.DataSet> -Objekts verwendet wird, und der Seitenvorlagen Datei.  
  
 Das erste Codebeispiel ist eine Implementierung der- <xref:System.Web.Hosting.VirtualFile> Klasse. Der Konstruktor verwendet eine-Methode für ein benutzerdefiniertes- <xref:System.Web.Hosting.VirtualPathProvider> Objekt, um ein-Objekt zurückzugeben <xref:System.Data.DataSet> . Anschließend wird das- <xref:System.Data.DataSet> Objekt durchsucht, um die Informationen abzurufen, die dem bereitgestellten virtuellen Dateipfad zugeordnet sind. In der <xref:System.Web.Hosting.VirtualFile.Open%2A> -Methode werden die Informationen aus dem- <xref:System.Data.DataSet> Objekt mit einer Vorlagen Datei kombiniert, und die Kombination wird als-Objekt zurückgegeben <xref:System.IO.Stream> .  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 Das zweite Beispiel ist die XML-Datendatei, die verwendet wird, um das <xref:System.Data.DataSet> vom benutzerdefinierten-Objekt zurückgegebene-Objekt aufzufüllen <xref:System.Web.Hosting.VirtualPathProvider> . Diese XML-Daten werden verwendet, um die Verwendung der <xref:System.Web.Hosting.VirtualPathProvider> <xref:System.Web.Hosting.VirtualFile> -,-und- <xref:System.Web.Hosting.VirtualDirectory> Klassen zum Abrufen von Daten aus externen Daten zu veranschaulichen. Sie sind nicht für die Darstellung eines Datenspeicher in Produktionsqualität vorgesehen.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 Das dritte Beispiel ist die Textdatei, die als Vorlage für die virtuelle Datei verwendet wird. Platzhalter in der Datei werden durch Text zwischen Prozent (%) dargestellt. Markierungen, z `%file%` . b `%content%` . und. Zeitstempel werden verwendet, um Änderungen an zwischengespeicherten virtuellen Datei Daten zu überwachen.  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Wenn Sie von der- <see cref="T:System.Web.Hosting.VirtualFile" /> Klasse erben, müssen Sie die-Methode überschreiben, um einen schreibgeschützten Daten <see cref="M:System.Web.Hosting.VirtualFile.Open" /> Strom an den Inhalt der virtuellen Ressource zurückzugeben.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Hosting.VirtualFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="new System.Web.Hosting.VirtualFile virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Der virtuelle Pfad zu der durch diese Instanz dargestellten Ressource.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Hosting.VirtualFile" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung des- <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> Konstruktors, der virtuelle Dateiinformationen aus einem-Objekt abruft, das <xref:System.Data.DataSet> von einem benutzerdefinierten-Objekt bereitgestellt wird <xref:System.Web.Hosting.VirtualPathProvider> . Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im Beispiel Abschnitt der- <xref:System.Web.Hosting.VirtualFile> Klassen Übersicht.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der anzeigt, dass dies eine virtuelle Ressource ist, die als Datei behandelt werden soll.</summary>
        <value>Immer <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberSignature Language="F#" Value="abstract member Open : unit -&gt; System.IO.Stream" Usage="virtualFile.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse einen schreibgeschützten Stream zur virtuellen Ressource zurück.</summary>
        <returns>Ein schreibgeschützter Stream zur virtuellen Datei.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.Hosting.VirtualFile.Open%2A> Methode gibt einen Stream zurück, der die Daten enthält, die von der-Klasse als Datei behandelt werden <xref:System.Web.Hosting.VirtualPathProvider> . Der Stream ist schreibgeschützt und kann durchsuchbar sein (die- <xref:System.IO.Stream.CanSeek%2A> Eigenschaft ist true).  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung der <xref:System.Web.Hosting.VirtualFile.Open%2A> -Methode, die Virtual-File-spezifische Informationen mit einer Vorlagen Datei kombiniert und dann die-Kombination zurückgibt. Die Vorlagen Datei wird zwischengespeichert, um den mehr Aufwand zu reduzieren, um das Dateisystem mehrmals zu lesen, um die Vorlagen Datei abzurufen. Den vollständigen Code, der zum Ausführen des Beispiels erforderlich ist, finden Sie im Beispiel Abschnitt der- <xref:System.Web.Hosting.VirtualFile> Klassen Übersicht.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In abgeleiteten Klassen <see cref="M:System.Web.Hosting.VirtualFile.Open" /> muss die Methode einen suchbaren Datenstrom zurückgeben. Wenn die Methode einen Stream zurückgibt, der keine Suchvorgänge unterstützt, wird eine ausgelöst, <see cref="T:System.NotSupportedException" /> Wenn der Stream zum Schreiben der Daten an das-Objekt übermittelt wird <see cref="T:System.Web.HttpResponse" /> . Die Ausnahme tritt auf, weil die Antwort versucht, die Eigenschaft zu lesen <see cref="P:System.IO.Stream.Length" /> , und in einem Datenstrom, der nicht suchbar ist, eine Ausnahme verursacht, wenn versucht wird, auf die-Eigenschaft zuzugreifen. Weitere Informationen finden Sie in den Ausführungen zur <see cref="P:System.IO.Stream.CanSeek" />-Eigenschaft.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ApplicationManager" FullName="System.Web.Hosting.ApplicationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d478505a23a56d849504ea42b2be0c3c39f84d49" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70496456" /></Metadata><TypeSignature Language="C#" Value="public sealed class ApplicationManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ApplicationManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.ApplicationManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ApplicationManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationManager sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type ApplicationManager = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verwaltet ASP.NET-Anwendungsdomänen für eine Anwendung, die ASP.NET hostet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.Hosting.ApplicationManager> -Objekt stellt die Lebensdauer Verwaltung von Objekten in der Host Umgebung für eine ASP.NET-Anwendung bereit. Er ist für Folgendes zuständig:  
  
-   Aktivieren und Initialisieren von ASP.NET-Anwendungen.  
  
-   Verwalten der Lebensdauer der Anwendung und der Lebensdauer von Objekten, die in der Anwendung registriert sind.  
  
-   Verfügbar machen von Objekten, die von der Host Umgebung zum Verarbeiten von ASP.net-Anwendungsanforderungen verwendet werden  
  
-   Bereitstellen einer Liste von Anwendungen, die in einem beliebigen Moment im Hostingprozess ausgeführt werden.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="applicationManager.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fährt alle Anwendungsdomänen herunter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Aufruf <xref:System.Web.Hosting.ApplicationManager.Close%2A> der-Methode den Verweis Zähler der Anwendungen verringert, die den Anwendungs-Manager mit 0 (null) <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> verwenden, ruft die <xref:System.Web.Hosting.ApplicationManager.Close%2A> -Methode die-Methode auf.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt ein Objekt für die angegebene Anwendungsdomäne und den angegebenen Objekttyp.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(class System.Web.Hosting.IApplicationHost appHost, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::Web::Hosting::IApplicationHost ^ appHost, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : System.Web.Hosting.IApplicationHost * Type -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appHost, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appHost">Ein <see cref="T:System.Web.Hosting.IApplicationHost" />-Objekt.</param>
        <param name="type">Der Typ des zu erstellenden Objekts.</param>
        <summary>Erstellt ein Objekt für die angegebene Anwendungsdomäne, basierend auf dem Typ.</summary>
        <returns>Ein neues Objekt des in <paramref name="type" /> angegebenen Typs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>wird in der .NET Framework Version 3,5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Für die Anwendung ist kein physischer Pfad vorhanden.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="appHost" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string * Type * string * string * bool -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appId, type, virtualPath, physicalPath, failIfExists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Der eindeutige Bezeichner für die Anwendung, die das Objekt besitzt.</param>
        <param name="type">Der Typ des zu erstellenden Objekts.</param>
        <param name="virtualPath">Der virtuelle Pfad zur Anwendung.</param>
        <param name="physicalPath">Der physische Pfad zur Anwendung.</param>
        <param name="failIfExists"><see langword="true" />, um eine Ausnahme auszulösen, wenn ein Objekt vom angegebenen Typ derzeit registriert ist, <see langword="false" />, um das vorhandene registrierte Objekt vom angegebenen Typ zurückzugeben.</param>
        <summary>Erstellt anhand des Typs oder virtuellen bzw. physischen Pfads ein Objekt für die angegebene Anwendungsdomäne und einen booleschen Wert, der das Verhalten bei Fehlern angibt, wenn bereits ein Objekt vom angegebenen Typ vorhanden ist.</summary>
        <returns>Ein neues Objekt vom angegebenen <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> -Methode wird verwendet, um Objekte in der Anwendung zu erstellen und zu registrieren. Es kann nur ein Objekt jedes Typs erstellt werden. Wenn Sie mehrere Objekte desselben Typs erstellen müssen, müssen Sie eine Objektfactory implementieren. Weitere Informationen finden Sie im Codebeispiel in diesem Thema.  
  
 Jede Anwendung, die durch einen eindeutigen Anwendungs Bezeichner identifiziert wird, wird in einer eigenen Anwendungsdomäne ausgeführt. Die <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> -Methode erstellt ein Objekt des angegebenen Typs in der Anwendungsdomäne der Anwendung, die `appID` im-Parameter angegeben ist. Wenn eine Anwendungsdomäne für die angegebene Anwendung nicht vorhanden ist, wird eine erstellt, bevor das Objekt erstellt wird.  
  
 Der `failIfExists` -Parameter steuert das Verhalten <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> der-Methode, wenn ein Objekt des angegebenen Typs bereits in der Anwendung vorhanden ist. `failIfExists` <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Wenn den Wert <xref:System.InvalidOperationException> hat, löst die Methode eine Ausnahme aus. `true`  
  
 Wenn `failIfExists` <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> ist `false`, gibt die Methode das vorhandene registrierte Objekt des angegebenen Typs zurück.  
  
 Die <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> -Methode ruft die-Überladung auf `throwOnError` `false`, die `throwOnError` einen zusätzlichen Parameter annimmt.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Implementierung des objektfactoryentwurfsmusters für registrierte Objekte. Mit dem Factorymuster können Sie mehrere Instanzen eines Objekts registrieren. Das Beispiel enthält zwei-Objekte `SampleComponent`:, d. h. das-Objekt, das von der Anwendung `SampleComponentFactory`verwendet wird, und, das `SampleComponent` eine Liste von-Instanzen verwaltet.  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#1)]
 [!code-vb[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="physicalPath" /> ist gleich <see langword="null" />.  
  
- oder - 
 <paramref name="physicalPath" /> ist kein gültiger Anwendungspfad.  
  
- oder - 
 Die <see cref="T:System.Web.Hosting.IRegisteredObject" />-Schnittstelle wird von <paramref name="type" /> nicht implementiert.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="appID" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="failIfExists" /> ist <see langword="true" />, und ein Objekt vom angegebenen Typ ist bereits registriert.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string * Type * string * string * bool * bool -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appId, type, virtualPath, physicalPath, failIfExists, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Der eindeutige Bezeichner für die Anwendung, die das Objekt besitzt.</param>
        <param name="type">Der Typ des zu erstellenden Objekts.</param>
        <param name="virtualPath">Der virtuelle Pfad zur Anwendung.</param>
        <param name="physicalPath">Der physische Pfad zur Anwendung.</param>
        <param name="failIfExists"><see langword="true" />, um eine Ausnahme auszulösen, wenn ein Objekt vom angegebenen Typ derzeit registriert ist, <see langword="false" />, um das vorhandene registrierte Objekt vom angegebenen Typ zurückzugeben.</param>
        <param name="throwOnError"><see langword="true" />, um bei Hostinitialisierungsfehlern Ausnahmen auszulösen, <see langword="false" />, um keine Ausnahmen bei Hostinitialisierungsfehlern auszulösen.</param>
        <summary>Erstellt anhand des Typs oder virtuellen bzw. physischen Pfads ein Objekt für die angegebene Anwendungsdomäne, einen booleschen Wert, der das Verhalten bei Fehlern angibt, wenn bereits ein Objekt vom angegebenen Typ vorhanden ist, sowie einen booleschen Wert, der angibt, ob bei Hostinitialisierungsfehlern Ausnahmen ausgelöst werden.</summary>
        <returns>Ein neues Objekt vom angegebenen <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese über <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Ladung der-Methode stellt `throwOnError` den-Parameter bereit, mit dem Sie steuern können, ob hostinitialisierungs Ausnahmen ausgelöst werden. Die-über <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Ladung der-Methode, die `throwOnError` nicht bereitstellt, ruft diese Überladung `false`mit dem-Parameter auf.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="physicalPath" /> ist gleich <see langword="null" />.  
  
- oder - 
 <paramref name="physicalPath" /> ist kein gültiger Anwendungspfad.  
  
- oder - 
 Die <see cref="T:System.Web.Hosting.IRegisteredObject" />-Schnittstelle wird von <paramref name="type" /> nicht implementiert.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="appID" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="failIfExists" /> ist <see langword="true" />, und ein Objekt vom angegebenen Typ ist bereits registriert.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAppDomain">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die Anwendungsdomäne einer angegebenen Anwendung ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appId As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::String ^ appId);" />
      <MemberSignature Language="F#" Value="member this.GetAppDomain : string -&gt; AppDomain" Usage="applicationManager.GetAppDomain appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="appId">Der eindeutige Bezeichner der Anwendung.</param>
        <summary>Ruft die Anwendungsdomäne der angegebenen Anwendung ab.</summary>
        <returns>Die Anwendungsdomäne der Anwendung.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(class System.Web.Hosting.IApplicationHost appHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appHost As IApplicationHost) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::Web::Hosting::IApplicationHost ^ appHost);" />
      <MemberSignature Language="F#" Value="member this.GetAppDomain : System.Web.Hosting.IApplicationHost -&gt; AppDomain" Usage="applicationManager.GetAppDomain appHost" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="appHost">Der Host, für den die Anwendungsdomäne abgerufen werden soll.</param>
        <summary>Ruft die Anwendungsdomäne einer Anwendung mithilfe des angegebenen Hosts ab.</summary>
        <returns>Die Anwendungsdomäne der Anwendung.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManager">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.ApplicationManager GetApplicationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Hosting.ApplicationManager GetApplicationManager() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetApplicationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetApplicationManager () As ApplicationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Hosting::ApplicationManager ^ GetApplicationManager();" />
      <MemberSignature Language="F#" Value="static member GetApplicationManager : unit -&gt; System.Web.Hosting.ApplicationManager" Usage="System.Web.Hosting.ApplicationManager.GetApplicationManager " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die einzelne Instanz des <see cref="T:System.Web.Hosting.ApplicationManager" />-Objekts zurück, die diesem ASP.NET-Hostprozess zugeordnet ist.</summary>
        <returns>Die einzelne Instanz des <see cref="T:System.Web.Hosting.ApplicationManager" />-Objekts, die dem ASP.NET-Hostprozess zugeordnet ist, der derzeit ausgeführt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur eine Instanz des <xref:System.Web.Hosting.ApplicationManager> Objekts wird von einem ASP.NET-Host Prozess in der Standard Anwendungsdomäne erstellt. Wenn eine Instanz der <xref:System.Web.Hosting.ApplicationManager> -Klasse nicht verfügbar ist, <xref:System.Web.Hosting.ApplicationManager> erstellt <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> die-Methode zunächst eine Instanz der-Klasse und gibt dann das neu erstellte-Objekt zurück. Wenn bereits eine Instanz der <xref:System.Web.Hosting.ApplicationManager> -Klasse erstellt wurde, gibt <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> die-Methode das vorhandene-Objekt zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> -Methode verwendet, <xref:System.Web.Hosting.ApplicationManager> um die-Instanz für eine Webanwendung abzurufen.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject GetObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ GetObject(System::String ^ appId, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetObject : string * Type -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.GetObject (appId, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Der eindeutige Bezeichner für die Anwendung, die das Objekt besitzt.</param>
        <param name="type">Der Typ des zurückzugebenden Objekts.</param>
        <summary>Gibt das registrierte Objekt des angegebenen Typs aus der angegebenen Anwendung zurück.</summary>
        <returns>Das registrierte Objekt vom angegebenen Typ oder <see langword="null" />, wenn der Typ nicht durch einen Aufruf der <see cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />-Methode registriert wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appId" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunningApplications">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.ApplicationInfo[] GetRunningApplications() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetRunningApplications" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRunningApplications () As ApplicationInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Web::Hosting::ApplicationInfo ^&gt; ^ GetRunningApplications();" />
      <MemberSignature Language="F#" Value="member this.GetRunningApplications : unit -&gt; System.Web.Hosting.ApplicationInfo[]" Usage="applicationManager.GetRunningApplications " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Momentaufnahme von laufenden Anwendungen zurück.</summary>
        <returns>Ein Array von <see cref="T:System.Web.Hosting.ApplicationInfo" />-Objekten, die Informationen zu den Anwendungen enthalten, die von dieser <see cref="T:System.Web.Hosting.ApplicationManager" />-Instanz verwaltet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Hosting.ApplicationManager.GetRunningApplications%2A> -Methode verwendet, um Informationen zu den von einer <xref:System.Web.Hosting.ApplicationManager> -Instanz verwalteten Anwendungen anzuzeigen.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="applicationManager.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt zu einer unendlichen Lebensdauer der Anwendungsdomäne, indem das Erstellen eines Lease verhindert wird.</summary>
        <returns>Immer <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt die <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> -Methode in ihrer Basisklasse. Es wird immer `null` zurückgegeben. Dadurch wird verhindert, dass eine Lease erstellt wird, die die Lebensdauer der Anwendungsdomäne einschränkt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.IsIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle();" />
      <MemberSignature Language="F#" Value="member this.IsIdle : unit -&gt; bool" Usage="applicationManager.IsIdle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Wert zurück, der angibt, ob sich alle vom Prozess gehosteten Anwendungen im Leerlauf befinden und keine Anforderungen verarbeiten.</summary>
        <returns><see langword="true" />, wenn sich alle Anwendungen im Prozess im Leerlauf befinden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Hosting.ApplicationManager.IsIdle%2A> -Methode `true` gibt zurück, wenn sich alle vom Prozess gehosteten Anwendungen im Leerlauf befinden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Open" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open();" />
      <MemberSignature Language="F#" Value="member this.Open : unit -&gt; unit" Usage="applicationManager.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt eine threadsichere Inkrementierung des Benutzerverweiszählers für die Anwendungs-Managerinstanz durch.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAll">
      <MemberSignature Language="C#" Value="public void ShutdownAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownAll();" />
      <MemberSignature Language="F#" Value="member this.ShutdownAll : unit -&gt; unit" Usage="applicationManager.ShutdownAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entlädt alle Anwendungsressourcen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> der-Methode entspricht dem Aufrufen <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> der-Methode in allen Anwendungs Domänen <xref:System.Web.Hosting.ApplicationManager> , die von dieser Instanz <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> verwaltet werden. die-Methode kann jedoch von außerhalb der verwalteten Anwendungs Domänen aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownApplication">
      <MemberSignature Language="C#" Value="public void ShutdownApplication (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownApplication(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownApplication (appId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownApplication(System::String ^ appId);" />
      <MemberSignature Language="F#" Value="member this.ShutdownApplication : string -&gt; unit" Usage="applicationManager.ShutdownApplication appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Der eindeutige Bezeichner der zu entladenden Anwendung.</param>
        <summary>Entlädt die angegebene Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> der-Methode entspricht dem Aufrufen <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> der-Methode für eine bestimmte Anwendungsdomäne. die <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> -Methode kann jedoch von außerhalb verwalteter Anwendungs Domänen aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appId" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopObject">
      <MemberSignature Language="C#" Value="public void StopObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopObject(System::String ^ appId, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.StopObject : string * Type -&gt; unit" Usage="applicationManager.StopObject (appId, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Der eindeutige Bezeichner für die Anwendung, die das Objekt besitzt.</param>
        <param name="type">Der Typ des zu entladenden Objekts.</param>
        <summary>Entfernt das angegebene Objekt aus der Liste von registrierten Objekten in einer Anwendung. Wenn das zu entfernende Objekt das letzte Objekt in der Liste der in einer Anwendung registrierten Objekte ist, wird die Anwendung entladen.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appId" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

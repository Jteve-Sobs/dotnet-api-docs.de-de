<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4dc2b48fb7de7748b52e8086452807b8c1836524" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39907737" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableInterlocked = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="05785-101">Enthält ineinandergreifende Austauschmechanismen für unveränderliche Auflistungen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05785-101">Contains interlocked exchange mechanisms for immutable collections.</span>
      </span>
      <span data-ttu-id="05785-102">**NuGet-Paket**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">Grundlegendes zu unveränderlichen Sammlungen und deren Installation</see>)</span>
      <span class="sxs-lookup">
        <span data-stu-id="05785-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
    <threadsafe>
      <span data-ttu-id="05785-103">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05785-103">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * Func&lt;'Key, 'Value&gt; * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValueFactory, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="05785-104">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-104">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-105">Der Schlüssel für den hinzuzufügenden oder zu aktualisierenden Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-105">The key for the value to add or update.</span>
          </span>
        </param>
        <param name="addValueFactory">
          <span data-ttu-id="05785-106">Die Funktion, die den Schlüssel empfängt und einen neuen Wert zurückgibt, der dem Wörterbuch hinzugefügt wird, wenn noch kein Wert vorhanden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-106">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span>
          </span>
        </param>
        <param name="updateValueFactory">
          <span data-ttu-id="05785-107">Die Funktion, die den Schlüssel und vorherigen Wert empfängt und einen neuen Wert zurückgibt, mit dem das Wörterbuch aktualisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-107">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-108">Ruft den Wert aus einem Wörterbuch ab, nachdem er hinzugefügt oder ein vorhandener Eintrag aktualisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-108">Obtains the value from a dictionary after having added it or updated an existing entry.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-109">Der hinzugefügte oder aktualisierte Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-109">The added or updated value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * 'Value * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValue, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="05785-110">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-110">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-111">Der Schlüssel für den hinzuzufügenden oder zu aktualisierenden Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-111">The key for the value to add or update.</span>
          </span>
        </param>
        <param name="addValue">
          <span data-ttu-id="05785-112">Der zu verwendende Wert, wenn kein vorheriger Wert vorhanden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-112">The value to use if no previous value exists.</span>
          </span>
        </param>
        <param name="updateValueFactory">
          <span data-ttu-id="05785-113">Die Funktion, die den Schlüssel und vorherigen Wert empfängt und einen neuen Wert zurückgibt, mit dem das Wörterbuch aktualisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-113">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-114">Ruft den Wert aus einem Wörterbuch ab, nachdem er hinzugefügt oder ein vorhandener Eintrag aktualisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-114">Obtains the value from a dictionary after having added it or updated an existing entry.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-115">Der hinzugefügte oder aktualisierte Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-115">The added or updated value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Enqueue :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Enqueue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-116">Der Typ der in der Auflistung enthaltenen Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-116">The type of items contained in the collection</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-117">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-117">The variable or field to atomically update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-118">Der in die Warteschlange einzureihende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-118">The value to enqueue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-119">Fügt ein Element automatisch am Ende einer Warteschlange an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-119">Atomically enqueues an element to the end of a queue.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="05785-120">Der Typ der in der Auflistung enthaltenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-120">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="05785-121">Der Typ der Werte, die in der Auflistung enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-121">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-122">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-122">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-123">Der Schlüssel für den abzurufenden oder hinzuzufügenden Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-123">The key for the value to retrieve or add.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="05785-124">Die Funktion, die ausgeführt werden soll, um den in das Wörterbuch einzufügenden Wert abzurufen, wenn der Schlüssel nicht gefunden werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-124">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span>
          </span>
          <span data-ttu-id="05785-125">Dieser Delegat wird nicht mehr als einmal aufgerufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-125">This delegate will not be invoked more than once.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-126">Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-126">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-127">Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-127">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * 'Value -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="05785-128">Der Typ der in der Auflistung enthaltenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-128">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="05785-129">Der Typ der Werte, die in der Auflistung enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-129">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-130">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn der angegebene Schlüssel nicht im Wörterbuch enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-130">The variable or field to atomically update if the specified key is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-131">Der Schlüssel für den Wert, der abgerufen oder hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-131">The key for the value to get or add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-132">Der zum Wörterbuch hinzuzufügende Wert, wenn der Schlüssel nicht gefunden werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-132">The value to add to the dictionary the key is not found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-133">Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-133">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-134">Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-134">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Arg, 'Value&gt; * 'Arg -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory, factoryArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="05785-135">Der Typ der in der Auflistung enthaltenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-135">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="05785-136">Der Typ der Werte, die in der Auflistung enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-136">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TArg">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="05785-137">Die Variable oder das Feld, die bzw. das aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-137">The variable or field to update if the specified is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-138">Der Schlüssel für den abzurufenden oder hinzuzufügenden Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-138">The key for the value to retrieve or add.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="05785-139">Die Funktion, die ausgeführt werden soll, um den in das Wörterbuch einzufügenden Wert abzurufen, wenn der Schlüssel nicht gefunden werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-139">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span>
          </span>
        </param>
        <param name="factoryArgument">
          <span data-ttu-id="05785-140">Das an die Wertzuordnungsinstanz zu übergebende Argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-140">The argument to pass to the value factory.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-141">Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-141">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-142">Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-142">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="F#" Value="static member InterlockedCompareExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange (location, value, comparand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-143">Der Typ des Elements, das durch das Array gespeichert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-143">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-144">Das Ziel, dessen Wert mit <c>comparand</c> verglichen und möglicherweise ersetzt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-144">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-145">Der Wert, der den Zielwert ersetzt, wenn der Vergleich Gleichheit ergibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-145">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="05785-146">Der Wert, der mit dem Wert bei <c>location</c> verglichen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-146">The value that is compared to the value at <c>location</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-147">Vergleicht zwei unveränderliche Arrays auf Gleichheit und ersetzt eines der Arrays, wenn sie gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-147">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-148">Der ursprüngliche Wert in <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-148">The original value in <paramref name="location" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-149">Der Typ des Elements, das durch das Array gespeichert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-149">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-150">Das Array, das auf den angegebenen Wert festgelegt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-150">The array to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-151">Der Wert, auf den der <c>location</c>-Parameter festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-151">The value to which the <c>location</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-152">Legt ein Array auf das angegebene Array fest und gibt einen Verweis auf das ursprüngliche Array als atomarer Vorgang zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-152">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-153">Der ursprüngliche Wert von <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-153">The original value of <paramref name="location" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedInitialize :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-154">Der Typ des Elements, das durch das Array gespeichert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-154">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-155">Das Array, das auf den angegebenen Wert festgelegt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-155">The array to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-156">Der Wert, auf den der <c>location</c>-Parameter festgelegt wird, wenn er nicht initialisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-156">The value to which the <c>location</c> parameter is set, if it’s not initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-157">Legt ein Array auf das angegebene Array fest, wenn das Array nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-157">Sets an array to the specified array if the array has not been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-158">
            <see langword="true" />, wenn dem Array der angegebenen Wert zugewiesen wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-158">
              <see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Push :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Push (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-159">Der Typ der Elemente im Stapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-159">The type of items in the stack.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-160">Der zu aktualisierende Stapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-160">The stack to update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-161">Der Wert, der auf dem Stapel abgelegt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-161">The value to push on the stack.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-162">Legt ein neues Element auf dem Stapel ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-162">Pushes a new element onto the stack.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member TryAdd :  * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="05785-163">Der Typ der in der Auflistung enthaltenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-163">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="05785-164">Der Typ der Werte, die in der Auflistung enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-164">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-165">Das Wörterbuch, das mit dem angegebenen Schlüssel und Wert aktualisiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-165">The dictionary to update with the specified key and value.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-166">Der hinzuzufügende Schlüssel, wenn er noch nicht im Wörterbuch definiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-166">The key to add, if is not already defined in the dictionary.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-167">Der hinzuzufügende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-167">The value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-168">Fügt den angegebenen Schlüssel und Wert dem Wörterbuch hinzu, wenn der Schlüssel nicht im Wörterbuch enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-168">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-169">
            <see langword="true" />, wenn der Schlüssel nicht im Wörterbuch enthalten ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-169">
              <see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryDequeue :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryDequeue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-170">Der Typ der Elemente in der Warteschlange.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-170">The type of items in the queue.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-171">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-171">The variable or field to atomically update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-172">Wird auf den Wert am Anfang der Warteschlange festgelegt, wenn die Warteschlange nicht leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-172">Set to the value from the head of the queue, if the queue not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-173">Entfernt das angegebene Element automatisch und setzt es an den Anfang der Warteschlange zurück, wenn die Warteschlange nicht leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-173">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-174">
            <see langword="true" />, wenn die Warteschlange nicht leer ist und das Anfangselement entfernt wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-174">
              <see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryPop :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryPop (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-175">Der Typ der Elemente im Stapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-175">The type of items in the stack.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-176">Der zu aktualisierende Stapel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-176">The stack to update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-177">Empfängt den aus dem Stapel entfernten Wert, wenn der Stapel nicht leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-177">Receives the value removed from the stack, if the stack is not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-178">Entfernt ein Element von der obersten Position im Stapel, wenn ein zu entfernendes Element vorhanden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-178">Removes an element from the top of the stack, if there is an element to remove.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-179">
            <see langword="true" />, wenn ein Element aus dem Stapel entfernt wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-179">
              <see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="static member TryRemove :  * 'Key *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryRemove (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="05785-180">Der Typ der in der Auflistung enthaltenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-180">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="05785-181">Der Typ der Werte, die in der Auflistung enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-181">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-182">Das zu aktualisierende Wörterbuch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-182">The dictionary to update.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-183">Der zu entfernende Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-183">The key to remove.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="05785-184">Empfängt den Wert des entfernten Elements, wenn das Wörterbuch nicht leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-184">Receives the value of the removed item, if the dictionary is not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-185">Entfernt das Element mit dem angegebenen Schlüssel, wenn der Schlüssel vorhanden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-185">Removes the element with the specified key, if the key exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-186">
            <see langword="true" />, wenn der Schlüssel gefunden und entfernt wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-186">
              <see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="F#" Value="static member TryUpdate :  * 'Key * 'Value * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryUpdate (location, key, newValue, comparisonValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="05785-187">Der Typ der in der Auflistung enthaltenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-187">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="05785-188">Der Typ der Werte, die in der Auflistung enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-188">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-189">Das zu aktualisierende Wörterbuch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-189">The dictionary to update.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="05785-190">Der zu aktualisierende Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-190">The key to update.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="05785-191">Der neue Wert, der festzulegen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-191">The new value to set.</span>
          </span>
        </param>
        <param name="comparisonValue">
          <span data-ttu-id="05785-192">Der aktuelle Wert für <c>key</c>, damit das Update erfolgreich ausgeführt werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-192">The current value for <c>key</c> in order for the update to succeed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-193">Legt den angegebenen Schlüssel auf den angegebenen Wert fest, wenn für den angegebenen Schlüssel bereits ein bestimmter Wert festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-193">Sets the specified key to the specified value if the specified key already is set to a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-194">
            <see langword="true" />, wenn <paramref name="key" /> und <paramref name="comparisonValue" /> im Wörterbuch vorhanden sind und der Vergleich in <paramref name="newValue" /> aktualisiert wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-194">
              <see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'T (requires 'T : null and 'T : null)&gt; -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-195">Der Datentyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-195">The type of data.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-196">Die Variable oder das Feld, die bzw. das geändert werden soll; mehrere Threads können darauf zugreifen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-196">The variable or field to be changed, which may be accessed by multiple threads.</span>
          </span>
        </param>
        <param name="transformer">
          <span data-ttu-id="05785-197">Eine Funktion, die den Wert mutiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-197">A function that mutates the value.</span>
          </span>
          <span data-ttu-id="05785-198">Diese Funktion sollte keine Nebeneffekte haben, da sie mehrere Male ausgeführt werden kann, wenn Rennen mit anderen Threads auftreten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-198">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-199">Mutiert einen Wert direkt mit der Transaktionssemantik eingeschränkter Sperren über eine angegebene Transaktionsfunktion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-199">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span>
          </span>
          <span data-ttu-id="05785-200">Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-200">The transformation is retried as many times as necessary to win the optimistic locking race.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-201">
            <c>TRUE</c>, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <c>FALSE</c>, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-201">
              <c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'Arg, 'T (requires 'T : null and 'T : null)&gt; * 'Arg -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer, transformerArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="05785-202">Der Datentyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-202">The type of data.</span>
          </span>
        </typeparam>
        <typeparam name="TArg">
          <span data-ttu-id="05785-203">Der Typ des Arguments an den die <c>Transformator</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-203">The type of argument passed to the <c>transformer</c>.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="05785-204">Die Variable oder das Feld, die bzw. das geändert werden soll; mehrere Threads können darauf zugreifen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-204">The variable or field to be changed, which may be accessed by multiple threads.</span>
          </span>
        </param>
        <param name="transformer">
          <span data-ttu-id="05785-205">Eine Funktion, die den Wert mutiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-205">A function that mutates the value.</span>
          </span>
          <span data-ttu-id="05785-206">Diese Funktion sollte keine Nebeneffekte haben, da sie mehrere Male ausgeführt werden kann, wenn Rennen mit anderen Threads auftreten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-206">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span>
          </span>
        </param>
        <param name="transformerArgument">
          <span data-ttu-id="05785-207">Das an <c>transformer</c> zu übergebende Argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-207">The argument to pass to <c>transformer</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05785-208">Mutiert einen Wert direkt mit der Transaktionssemantik eingeschränkter Sperren über eine angegebene Transaktionsfunktion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-208">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span>
          </span>
          <span data-ttu-id="05785-209">Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-209">The transformation is retried as many times as necessary to win the optimistic locking race.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05785-210">
            <c>TRUE</c>, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <c>FALSE</c>, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05785-210">
              <c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
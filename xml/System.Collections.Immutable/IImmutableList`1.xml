<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72b2fd1fceb7eff332be2255f1f5473e2c04a5ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="3e2e9-101">Der Typ der Elemente in der Liste.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e2e9-101">The type of elements in the list.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="3e2e9-102">Stellt eine Liste von Elementen dar, die nicht geändert werden kann.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e2e9-102">Represents a list of elements that cannot be modified.</span>
      </span>
      <span data-ttu-id="3e2e9-103">**NuGet-Paket**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">Grundlegendes zu unveränderlichen Sammlungen und deren Installation</see>)</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e2e9-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e2e9-104">Wenn Sie hinzufügen oder Entfernen von Elementen aus einer <xref:System.Collections.Immutable.IImmutableList%601>, eine Kopie der ursprünglichen Liste erstellt, mit den Änderungen angewendet...</span><span class="sxs-lookup"><span data-stu-id="3e2e9-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied..</span></span> <span data-ttu-id="3e2e9-105">Inkrementelle Änderungen an einer Liste freigeben so viel Arbeitsspeicher wie möglich mit früheren Versionen von einer Liste, und aktivieren eine eindeutige Listendaten bereinigen, die nicht mehr verwiesen wird, wird die Garbagecollection.</span><span class="sxs-lookup"><span data-stu-id="3e2e9-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
 <span data-ttu-id="3e2e9-106">Um eine neue Liste erstellen zu können, verwenden Sie die Create-Methode.</span><span class="sxs-lookup"><span data-stu-id="3e2e9-106">To create a new list, use the Create method.</span></span>  
  
 <span data-ttu-id="3e2e9-107">Die <xref:System.Collections.Immutable.IImmutableList%601> keinen öffentlichen Konstruktor verfügt, da dies eine leere unveränderliche Liste erstellen würden.</span><span class="sxs-lookup"><span data-stu-id="3e2e9-107">The <xref:System.Collections.Immutable.IImmutableList%601> has no public constructor, as this would create an empty immutable list.</span></span> <span data-ttu-id="3e2e9-108">Erstellen Sie eine neue Liste mit der Create-Methode.</span><span class="sxs-lookup"><span data-stu-id="3e2e9-108">You should create a new list using the Create method.</span></span> <span data-ttu-id="3e2e9-109">Sie können neue Elemente hinzufügen, um eine Kopie der ursprünglichen Liste mithilfe der <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, und <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="3e2e9-109">You can add new items to a copy of the original list using the <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e2e9-110">Das Objekt, das der Liste hinzugefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-110">The object to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-111">Erstellt eine Kopie der Liste und fügt das angegebene Objekt am Ende der kopierten Liste hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-111">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-112">Eine neue Liste mit dem hinzugefügten Objekt oder diese Liste, wenn das Objekt bereits in der Liste enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-112">A new list with the object added, or this list if the object is already in the list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e2e9-113">Die Objekte, die der Liste hinzugefügt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-113">The objects to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-114">Erstellt eine Kopie der Liste und fügt die angegebenen Objekte am Ende der kopierten Liste hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-114">Makes a copy of the list and adds the specified objects to the end of the copied list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-115">Eine neue Liste mit den hinzugefügten Elementen oder diese Liste, wenn die Elemente bereits in der Liste enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-115">A new list with the elements added, or this list if the elements already exist in the list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e2e9-116">Erstellt eine Liste, aus der alle Elemente entfernt wurden, aber mit derselben Sortierungs- und Reihenfolgensemantik wie diese Liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-116">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-117">Eine leere Liste, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-117">An empty list that has the same sorting and ordering semantics as this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e2e9-118">Das im <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zu suchende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-118">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span>
          </span>
          <span data-ttu-id="3e2e9-119">Dieser Wert kann für Verweistypen NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-119">This value can be null for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3e2e9-120">Der nullbasierte Startindex für die Suche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-120">The zero-based starting indes of the search.</span>
          </span>
          <span data-ttu-id="3e2e9-121">0 (null) ist in einer leeren Liste gültig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-121">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e2e9-122">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-122">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e2e9-123">Der Gleichheitsvergleich, der zum Suchen von <c>item</c> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-123">The equality comparer to use to locate <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-124">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-124">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-125">Der nullbasierte Index des ersten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in <see cref="T:System.Collections.Immutable.IImmutableList`1" />, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-125">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e2e9-126">Der nullbasierte Index, an dem der Wert eingefügt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-126">The zero-based index at which to insert the value.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="3e2e9-127">Das einzufügende Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-127">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-128">Fügt das angegebene Element am angegebenen Index in die unveränderliche Liste ein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-128">Inserts the specified element at the specified index in the immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-129">Eine neue unveränderliche Liste, die das angegebene Element enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-129">A new immutable list that includes the specified element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e2e9-130">Der nullbasierte Index, an dem neue Elemente eingefügt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-130">The zero-based index at which the new elements should be inserted.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="3e2e9-131">Die einzufügenden Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-131">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-132">Fügt die angegebenen Elemente am angegebenen Index in die unveränderliche Liste ein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-132">Inserts the specified elements at the specified index in the immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-133">Eine neue unveränderliche Liste, die die angegebenen Elemente enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-133">A new immutable list that includes the specified elements.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e2e9-134">Das Objekt, das in der Liste gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-134">The object to locate in the list.</span>
          </span>
          <span data-ttu-id="3e2e9-135">Der Wert kann für Verweistypen <see langword="null" /> sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-135">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3e2e9-136">Der nullbasierte Startindex für die Suche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-136">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="3e2e9-137">0 (null) ist in einer leeren Liste gültig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-137">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e2e9-138">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-138">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e2e9-139">Der Gleichheitsvergleich, der mit <c>item</c> abgeglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-139">The equality comparer to match <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-140">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-140">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-141">Gibt <see cref="T:System.Int32" />zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-141">Returns <see cref="T:System.Int32" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e2e9-142">Das Objekt, das aus der Liste entfernt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-142">The object to remove from the list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e2e9-143">Der Gleichheitsvergleich, der zum Suchen von <c>value</c> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-143">The equality comparer to use to locate <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-144">Entfernt das erste Vorkommen eines angegebenen Objekts aus dieser unveränderlichen Liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-144">Removes the first occurrence of a specified object from this immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-145">Gibt eine neue Liste zurück, aus der das angegebene Objekt entfernt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-145">Returns a new list with the specified object removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3e2e9-146">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-146">The delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-147">Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-147">Removes all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-148">Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-148">A new immutable list with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e2e9-149">Der Index des zu entfernenden Elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-149">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-150">Entfernt das Element am angegebenen Index der unveränderlichen Liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-150">Removes the element at the specified index of the immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-151">Eine neue Liste, aus der das Element entfernt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-151">A new list with the element removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e2e9-152">Die Objekte, die aus der Liste entfernt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-152">The objects to remove from the list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e2e9-153">Der Gleichheitsvergleich, mit dem bestimmt wird, ob <c>items</c> mit Objekten in der Liste übereinstimmen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-153">The equality comparer to use to determine if <c>items</c> match any objects in the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-154">Entfernt das angegebene Objekt aus der Liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-154">Removes the specified object from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-155">Eine neue unveränderliche Liste, aus der die angegebenen Objekte entfernt wurden, wenn <paramref name="items" /> mit Objekten in der Liste übereingestimmt haben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-155">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e2e9-156">Der nullbasierte Startindex des zu entfernenden Bereichs von Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-156">The zero-based starting index of the range of elements to remove.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e2e9-157">Die Anzahl der zu entfernenden Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-157">The number of elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-158">Entfernt einen Bereich von Elementen aus der <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-158">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-159">Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-159">A new immutable list with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="3e2e9-160">Das zu ersetzende Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-160">The element to be replaced.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="3e2e9-161">Das Element, das das erste Vorkommen von <c>oldValue</c> ersetzen soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-161">The element to replace the  the first occurrence of <c>oldValue</c> with</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e2e9-162">Der Gleichheitsvergleich, der für den Abgleich mit <c>oldValue</c> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-162">The equality comparer to use for matching <c>oldValue</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-163">Gibt eine neue Liste zurück, wobei das erste übereinstimmende Element in der Liste durch das angegebene Element ersetzt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-163">Returns a new list with the first matching element in the list replaced with the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-164">Eine neue Liste, die selbst dann <paramref name="newValue" /> enthält, wenn <paramref name="oldvalue" /> und <paramref name="newValue" /> gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-164">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3e2e9-165">
            <paramref name="oldValue" /> ist nicht in der Liste vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-165">
              <paramref name="oldValue" /> does not exist in the list.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e2e9-166">Die Position des zu ersetzenden Elements in der Liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-166">The position in the list of the element to replace.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3e2e9-167">Das durch ein Element zu ersetzende alte Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-167">The element to replace the old element with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e2e9-168">Ersetzt ein Element an einer bestimmten Position in der Liste durch das angegebene Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-168">Replaces an element in the list at a given position with the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e2e9-169">Eine neue Liste, die das neue Element selbst dann enthält, wenn das Element an der angegebenen Position und das neue Element gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e2e9-169">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="EventLogWatcher" FullName="System.Diagnostics.Eventing.Reader.EventLogWatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bde8ea22e08f3a605247f4c1d3e3eae35b70d370" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogWatcher : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogWatcher extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogWatcher&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogWatcher : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="fdcd2-101">Ermöglicht das Abonnieren von eingehenden Ereignissen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fdcd2-101">Allows you to subscribe to incoming events.</span>
      </span>
      <span data-ttu-id="fdcd2-102">Jedes Mal, wenn ein gewünschtes Ereignis in einem Ereignisprotokoll veröffentlicht wird, wird das  <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />-Ereignis ausgelöst, und die Methode zur Behandlung dieses Ereignisses wird ausgeführt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fdcd2-102">Each time a desired event is published to an event log, the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, and the method that handles this event will be executed.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fdcd2-103">Die Instanzen dieser Klasse werden erstellt, von <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> Objekte, die eine Abfrage für das Ereignisabonnement angeben.</span><span class="sxs-lookup"><span data-stu-id="fdcd2-103">The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription.</span></span> <span data-ttu-id="fdcd2-104">Wenn ein Ereignis protokolliert wird, das den Kriterien in der Abfrage entspricht, wird das <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>-Ereignis ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="fdcd2-104">When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fdcd2-105">Z. B. Code mit dieser Klasse finden Sie unter [wie: Abonnieren von Ereignissen im Ereignisprotokoll](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span><span class="sxs-lookup"><span data-stu-id="fdcd2-105">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fdcd2-106">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-106">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="fdcd2-107">Gibt eine Abfrage für das Ereignisabonnement an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-107">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="fdcd2-108">Wenn ein Ereignis protokolliert wird, das den Kriterien in der Abfrage entspricht, wird das <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />-Ereignis ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-108">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fdcd2-109">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />-Klasse durch Angeben einer Ereignisabfrage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-109">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="fdcd2-110">Der Pfad oder der Name der Ereignisprotokollüberwachung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-110">The path or name of the event log monitor for events.</span>
          </span>
          <span data-ttu-id="fdcd2-111">Wenn ein Ereignis im Ereignisprotokoll protokolliert wird, wird das <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />-Ereignis ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-111">If any event is logged in this event log, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fdcd2-112">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />-Klasse unter Angabe des Namens oder des Pfads für ein Ereignisprotokoll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying the name or path to an event log.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="fdcd2-113">Gibt eine Abfrage für das Ereignisabonnement an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-113">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="fdcd2-114">Wenn ein Ereignis protokolliert wird, das den Kriterien in der Abfrage entspricht, wird das <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />-Ereignis ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-114">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="fdcd2-115">Das Lesezeichen (Platzhalter), das als Startposition im Ereignisprotokoll oder im Stream von Ereignissen verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-115">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="fdcd2-116">Nur Ereignisse, die nach dem Lesezeichenereignis protokolliert wurden, werden von der Abfrage zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-116">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fdcd2-117">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />-Klasse durch Angeben einer Ereignisabfrage und eines Lesezeichens, das als Startposition für die Abfrage verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-117">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark, readExistingEvents As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark, bool readExistingEvents);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
        <Parameter Name="readExistingEvents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="fdcd2-118">Gibt eine Abfrage für das Ereignisabonnement an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-118">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="fdcd2-119">Wenn ein Ereignis protokolliert wird, das den Kriterien in der Abfrage entspricht, wird das <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />-Ereignis ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-119">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="fdcd2-120">Das Lesezeichen (Platzhalter), das als Startposition im Ereignisprotokoll oder im Stream von Ereignissen verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-120">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="fdcd2-121">Nur Ereignisse, die nach dem Lesezeichenereignis protokolliert wurden, werden von der Abfrage zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-121">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <param name="readExistingEvents">
          <span data-ttu-id="fdcd2-122">Ein boolescher Wert, der bestimmt, ob Ereignisse gelesen werden sollen, die bereits im Ereignisprotokoll vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-122">A Boolean value that determines whether to read the events that already exist in the event log.</span>
          </span>
          <span data-ttu-id="fdcd2-123">
            <see langword="true" />, wenn die bereits vorhandenen Ereignisse gelesen werden sollen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-123">If this value is <see langword="true" />, then the existing events are read and if this value is <see langword="false" />, then the existing events are not read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fdcd2-124">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />-Klasse unter Angabe einer Ereignisabfrage, eines Lesezeichens als Startposition für die Abfrage und eines booleschen Werts, der bestimmt, ob die bereits im Ereignisprotokoll vorhandenen Ereignisse gelesen werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-124">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fdcd2-125">Gibt die vom Objekt verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-125">Releases the resources used by this object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fdcd2-126">Gibt alle vom Objekt verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-126">Releases all the resources used by this object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="fdcd2-127">
            <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-127">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fdcd2-128">Gibt die vom Objekt verwendeten nicht verwalteten Ressourcen und optional auch die verwalteten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-128">Releases the unmanaged resources used by this object, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fdcd2-129">Bestimmt, ob das Objekt beginnt, Ereignisse an den Ereignisdelegaten zu übermitteln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-129">Determines whether this object starts delivering events to the event delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fdcd2-130">Gibt <see langword="true" /> zurück, wenn Ereignisse vom Objekt an den Ereignisdelegaten übermittelt werden können, und gibt <see langword="false" /> zurück, wenn die Übermittlung vom Objekt beendet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-130">Returns <see langword="true" /> when this object can deliver events to the event delegate, and returns <see langword="false" /> when this object has stopped delivery.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventRecordWritten">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
      <MemberSignature Language="VB.NET" Value="Public Event EventRecordWritten As EventHandler(Of EventRecordWrittenEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Eventing::Reader::EventRecordWrittenEventArgs ^&gt; ^ EventRecordWritten;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fdcd2-131">Ermöglicht das Festlegen eines Delegaten (Ereignishandlermethode), der aufgerufen wird, ein Ereignis veröffentlicht wird, das den in der Ereignisabfrage für dieses Objekt angegebenen Kriterien entspricht </span>
          <span class="sxs-lookup">
            <span data-stu-id="fdcd2-131">Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fdcd2-132">Z. B. Code mit dieser Klasse finden Sie unter [wie: Abonnieren von Ereignissen im Ereignisprotokoll](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span><span class="sxs-lookup"><span data-stu-id="fdcd2-132">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
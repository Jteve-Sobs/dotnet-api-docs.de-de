<Type Name="PropertyKind" FullName="System.Data.Metadata.Edm.PropertyKind">
  <TypeSignature Language="C#" Value="public enum PropertyKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PropertyKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.Metadata.Edm.PropertyKind" />
  <TypeSignature Language="VB.NET" Value="Public Enum PropertyKind" />
  <TypeSignature Language="C++ CLI" Value="public enum class PropertyKind" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="4573d-101">Gibt die Arten der Elementattribute im konzeptionellen Modell an.</span><span class="sxs-lookup"><span data-stu-id="4573d-101">Specifies the kinds of item attributes in the conceptual model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4573d-102">Weitere Informationen finden Sie unter [erweiterte Eigenschaft (CSDL)](http://msdn.microsoft.com/library/697e2fb1-8977-4aa6-a1ef-236950e91fd1).</span><span class="sxs-lookup"><span data-stu-id="4573d-102">For more information, see [Extended Property (CSDL)](http://msdn.microsoft.com/library/697e2fb1-8977-4aa6-a1ef-236950e91fd1).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4573d-103">Im folgenden Codebeispiel wird dargestellt, wie von der Verbindung ein Metadaten-Arbeitsbereich abgerufen und verwendet wird, um Informationen 端ber die erweiterten Eigenschaften im angegebenen Datenmodell abzurufen.</span><span class="sxs-lookup"><span data-stu-id="4573d-103">The following code sample demonstrates how to get a metadata workspace from the connection and then use that metadata workspace to retrieve information about the extended properties in the specified data model.</span></span> <span data-ttu-id="4573d-104">Beachten Sie, dass es sich beim Metadaten-Arbeitsbereich um eine Laufzeitdienstkomponente handelt, die Unterst端tzung f端r das Abrufen von Metadaten bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="4573d-104">Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.</span></span>  
  
 <span data-ttu-id="4573d-105">Im Codebeispiel wird <xref:System.Data.Metadata.Edm.DataSpace.CSpace> verwendet, um das Modell anzugeben.</span><span class="sxs-lookup"><span data-stu-id="4573d-105">The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace.CSpace> to specify the model.</span></span> <span data-ttu-id="4573d-106"><xref:System.Data.Metadata.Edm.DataSpace.CSpace> stellt den Standardnamen f端r das konzeptionelle Modell dar.</span><span class="sxs-lookup"><span data-stu-id="4573d-106">The <xref:System.Data.Metadata.Edm.DataSpace.CSpace> represents the default name for the conceptual model.</span></span> <span data-ttu-id="4573d-107">Im Codebeispiel wird die AdventureWorks-Modell, das bereitgestellt wird die [AdventureWorks Model (EDM)](http://msdn.microsoft.com/library/da87d29e-8c89-4310-bbac-5cbd062930a7)Thema.</span><span class="sxs-lookup"><span data-stu-id="4573d-107">The code sample uses the AdventureWorks Model that is provided in the [AdventureWorks Model (EDM)](http://msdn.microsoft.com/library/da87d29e-8c89-4310-bbac-5cbd062930a7)topic.</span></span> <span data-ttu-id="4573d-108">Ein Beispiel der Anwendungskonfigurationsdatei, finden Sie unter [AdventureWorks-Objektmodell in Applications (EDM)](http://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).</span><span class="sxs-lookup"><span data-stu-id="4573d-108">For an example of the application config file, see [AdventureWorks Object Model in Applications (EDM)](http://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).</span></span>  
  
```csharp  
using System;  
using System.Data;  
using System.Data.EntityClient;  
using System.Collections.ObjectModel;  
using System.Data.Metadata.Edm;  
  
class UsePropertyKindExample  
{  
   static void Main(string[] args)  
   {  
     try  
     {  
       // Establish a connection to the underlying data provider by   
       // using the connection string specified in the config file.  
       using (EntityConnection connection =  
           new EntityConnection("Name=AdventureworksContext"))  
       {  
          // Open the connection.  
          connection.Open();  
  
          // Access the metadata workspace.  
          MetadataWorkspace workspace =   
             connection.GetMetadataWorkspace();  
  
          // Display the extended properties in the conceptual model.  
          DisplayProperties(workspace, DataSpace.CSpace);  
       }  
     }  
     catch (MetadataException exceptionMetadata)  
     {  
         Console.WriteLine("MetadataException: {0}",  
                         exceptionMetadata.Message);  
     }  
     catch (System.Data.MappingException exceptionMapping)  
     {  
         Console.WriteLine("MappingException: {0}",  
                          exceptionMapping.Message);  
     }  
   }  
  
   public static void DisplayProperties(  
        MetadataWorkspace workspace, DataSpace model)  
   {  
      // Get a collection of the entity containers.  
      ReadOnlyCollection<EntityContainer> containers =  
          workspace.GetItems<EntityContainer>(model);  
  
      // Iterate through the collection to get each entity container.  
      foreach (EntityContainer container in containers)  
      {  
          // Display the extended properties for the entity container.  
          DisplayExtendedProperties(container);  
  
          // Iterate through the collection to get each entity set.  
          foreach (EntitySetBase baseSet in container.BaseEntitySets)  
          {  
              // Check whether this instance is an EntitySet.  
              if (baseSet is EntitySet)  
              {  
                 // Display the extended properties for the entity set.  
                 DisplayExtendedProperties(baseSet);  
              }  
          }  
      }  
  
      // Get a collection of the entity types.  
      ReadOnlyCollection<EntityType> entities =   
             workspace.GetItems<EntityType>(model);  
  
      // Iterate through the collection to get each entity type.  
      foreach (EntityType entity in entities)  
      {  
         // Display the extended properties for the entity type.  
         DisplayExtendedProperties(entity);  
      }  
   }  
  
   private static void DisplayExtendedProperties(MetadataItem item)  
   {  
     foreach (MetadataProperty property in item.MetadataProperties)  
     {  
         if (property.PropertyKind == PropertyKind.Extended)  
           Console.WriteLine(string.Format("\t{0}\t{1}\t{2}",   
             item.GetType().Name, property.Name, property.Value));  
     }  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Extended">
      <MemberSignature Language="C#" Value="Extended" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Metadata.Edm.PropertyKind Extended = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Metadata.Edm.PropertyKind.Extended" />
      <MemberSignature Language="VB.NET" Value="Extended" />
      <MemberSignature Language="C++ CLI" Value="Extended" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.PropertyKind</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="4573d-109">Ein Enumerationsmember, der angibt, dass ein Elementattribut <c>erweitert</c> ist.</span><span class="sxs-lookup"><span data-stu-id="4573d-109">An enumeration member indicating that an item attribute is <c>Extended</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="System">
      <MemberSignature Language="C#" Value="System" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Metadata.Edm.PropertyKind System = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Metadata.Edm.PropertyKind.System" />
      <MemberSignature Language="VB.NET" Value="System" />
      <MemberSignature Language="C++ CLI" Value="System" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.PropertyKind</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="4573d-110">Ein Enumerationsmember, der angibt, dass ein Elementattribut <c>System</c> ist.</span><span class="sxs-lookup"><span data-stu-id="4573d-110">An enumeration member indicating that an item attribute is <c>System</c>.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
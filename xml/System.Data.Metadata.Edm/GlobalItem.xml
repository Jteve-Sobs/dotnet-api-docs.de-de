<Type Name="GlobalItem" FullName="System.Data.Metadata.Edm.GlobalItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1eced5c39d8904a8c3178f44e13b9a4c8449219e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37679568" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class GlobalItem : System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GlobalItem extends System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="DocId" Value="T:System.Data.Metadata.Edm.GlobalItem" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GlobalItem&#xA;Inherits MetadataItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class GlobalItem abstract : System::Data::Metadata::Edm::MetadataItem" />
  <TypeSignature Language="F#" Value="type GlobalItem = class&#xA;    inherit MetadataItem" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Metadata.Edm.MetadataItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Basiselementklasse für alle Typen des konzeptionellen Modells und die Entitätencontainer dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter [Übersicht über die Hierarchie von Metadaten-Typ](http://msdn.microsoft.com/library/d2b18fe0-60a5-4a5c-940d-21d07e5165d4).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird dargestellt, wie von der Verbindung ein Metadaten-Arbeitsbereich abgerufen und verwendet wird, um die Metadatentyp-Hierarchie zu durchsuchen. Beachten Sie, dass es sich beim Metadaten-Arbeitsbereich um eine Laufzeitdienstkomponente handelt, die Unterstützung für das Abrufen von Metadaten bereitstellt.  
  
 Im Codebeispiel wird <xref:System.Data.Metadata.Edm.DataSpace.CSpace> verwendet, um das Modell anzugeben. <xref:System.Data.Metadata.Edm.DataSpace.CSpace> stellt den Standardnamen für das konzeptionelle Modell dar. Im Codebeispiel wird die in der Anwendungskonfigurationsdatei bereitgestellte Verbindungszeichenfolge verwendet. Ein Beispiel für die Konfigurationsdatei der Anwendung, finden Sie unter [Adventure Works-Objektmodell in Anwendungen (EDM)](http://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).  
  
```csharp  
using System;  
using System.Data;  
using System.Data.EntityClient;  
using System.Data.Metadata.Edm;  
using System.Collections.ObjectModel;  
  
class BrowseTypes  
{  
  static void Main()  
  {  
    try  
    {  
      // Establish a connection to the underlying data provider by  
      // using the connection string specified in the config file.  
      using (EntityConnection connection =  
             new EntityConnection("Name=AdventureworksContext"))  
      {  
         // Access the metadata workspace.  
         MetadataWorkspace workspace =   
              connection.GetMetadataWorkspace();  
         // Browse the metadata type hierarchy.  
         BrowseTypesExample(workspace);  
      }  
    }  
    catch (MetadataException exceptionMetadata)  
    {  
       Console.WriteLine("MetadataException: {0}",  
                         exceptionMetadata.Message);  
     }  
     catch (System.Data.MappingException exceptionMapping)  
     {  
        Console.WriteLine("MappingException: {0}",  
                          exceptionMapping.Message);  
     }  
  }  
  
  private static void BrowseTypesExample(MetadataWorkspace workspace)  
  {  
    // Get a collection of the GlobalItems.   
    // An GlobalItem class is the base class for   
    // the conceptual model types and entity containers.  
    ReadOnlyCollection<GlobalItem> items =   
         workspace.GetItems<GlobalItem>(DataSpace.CSpace);  
  
    // Iterate through the collection to get each item.  
    foreach (GlobalItem item in items)  
    {  
       Console.WriteLine(  
           "Item BuiltInTypeKind: {0}, Type: {1} ",   
           item.BuiltInTypeKind, item.GetType().FullName);  
  
       EntityContainer entityContainer = item as EntityContainer;  
       if (entityContainer != null)  
       {  
          Console.WriteLine(  
               "EntityContainer Name: {0}",  
               entityContainer.Name);  
          continue;  
       }  
  
       EntityType entityType = item as EntityType;  
       if (entityType != null)  
       {  
         Console.WriteLine(  
             "EntityType Name: {0}, Namespace: {1}",  
             entityType.Name, entityType.NamespaceName);  
        continue;  
       }  
  
       AssociationType associationType = item as AssociationType;  
       if (associationType != null)  
       {  
          Console.WriteLine(  
             "AssociationType Name: {0}, Namespace: {1}",  
             associationType.Name, associationType.NamespaceName);  
          continue;  
       }  
  
       PrimitiveType primType = item as PrimitiveType;  
       if (primType != null)  
       {  
         Console.WriteLine(  
             "PrimitiveType Name: {0}, Namespace: {1}",   
             primType.Name, primType.NamespaceName);  
         continue;  
       }  
  
       EdmFunction function = item as EdmFunction;  
       if (function != null)  
       {  
         Console.WriteLine(  
           "EdmFunction Name: {0}, Namespace: {1}",  
           function.Name, function.NamespaceName);  
         continue;  
       }  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
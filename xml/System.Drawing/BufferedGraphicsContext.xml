<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c249e19e1e0ddac209202d4c2db95a78198f0d5" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39982887" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphicsContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Methoden für das Erstellen von Grafikpuffern bereit, die für die doppelte Pufferung verwendet werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.BufferedGraphicsContext> Klasse können Sie benutzerdefinierte doppelte Pufferung für Grafiken zu implementieren. Grafiken, die doppelte Pufferung verwenden können verringern oder beseitigen Flimmern, die durch eine Anzeigeoberfläche Neuzeichnen verursacht wird.  
  
> [!NOTE]
>  Die einfachste Möglichkeit, die doppelte Pufferung verwendet wird, legen Sie die <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuern der Format-Flag auf einem Steuerelement mit dem <xref:System.Windows.Forms.Control.SetStyle%2A> Methode. Festlegen der <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Flags für ein Steuerelement leitet alle Paint-Ereignisse für das Steuerelement über einen Standard-Grafikpuffer, ohne zusätzlichen Code. Dieses Flag wird festgelegt, um `true` standardmäßig.  
  
 Die <xref:System.Drawing.BufferedGraphicsContext> -Klasse bietet Methoden zum Erstellen und konfigurieren einen Grafikpuffer. Die <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> -Methode erstellt eine <xref:System.Drawing.BufferedGraphics>, dies ist ein Wrapper für einen Grafikpuffer, das auch Methoden bereitstellt, können Sie in den Puffer zu schreiben und deren Inhalt in ein Ausgabegerät zu rendern.  
  
 Sie können abrufen, die <xref:System.Drawing.BufferedGraphicsContext> für die aktuelle Anwendungsdomäne aus der statischen <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> Eigenschaft. Für grafikintensive Anwendungen wie z. B. Animation, können Sie erstellen eine dedizierte <xref:System.Drawing.BufferedGraphicsContext> mithilfe des Konstruktors, aber für die meisten Anwendungen die <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> Eigenschaft ausreichen.  
  
 Weitere Informationen zum Zeichnen von gepufferten Grafiken und benutzerdefinierte Pufferung Implementierungen, finden Sie unter [doppelt gepufferte Grafiken](~/docs/framework/winforms/advanced/double-buffered-graphics.md) und [Vorgehensweise: Manuelles Verwalten von gepufferten Grafiken](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Abrufen der <xref:System.Drawing.BufferedGraphicsContext> für die aktuelle Anwendungsdomäne. Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Drawing.BufferedGraphics> Klasse.  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Drawing.BufferedGraphicsContext" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Von grafisch anspruchsvollen Anwendungen wie z. B. Animationen, Sie können manchmal Leistung verbessern, indem eine dedizierte <xref:System.Drawing.BufferedGraphicsContext> statt mit der Standardinstanz von bereitgestellten der <xref:System.Drawing.BufferedGraphicsManager>. Dadurch können Sie zum Erstellen und verwalten Grafikpuffer einzeln.  
  
> [!NOTE]
>  Sie sollten immer Aufrufen <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> Wenn Sie fertig sind, mithilfe eines dedizierten <xref:System.Drawing.BufferedGraphicsContext>.  
  
 Weitere Informationen zu dedizierten Grafikpuffer, finden Sie unter [Vorgehensweise: Manuelles Verwalten von gepufferten Grafiken](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt einen Grafikpuffer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetGraphics, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">Das <see cref="T:System.Drawing.Graphics" />, dem das Pixelformat des neuen Puffers entsprechen soll.</param>
        <param name="targetRectangle">Ein <see cref="T:System.Drawing.Rectangle" />, das die Größe des zu erstellenden Puffers angibt.</param>
        <summary>Erstellt mithilfe des Pixelformats des angegebenen <see cref="T:System.Drawing.Graphics" /> einen Grafikpuffer von der angegebenen Größe.</summary>
        <returns>Ein <see cref="T:System.Drawing.BufferedGraphics" />, das zum Zeichnen in einen Puffer mit den angegebenen Abmessungen verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode mit einem Rechteck, dessen Größe den Wert überschreitet, von der <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> -Eigenschaft, ein temporäres <xref:System.Drawing.BufferedGraphicsContext> wird erstellt, um den Puffer reservieren und einen temporären Kontext für den Puffer bereitzustellen. Die neue <xref:System.Drawing.BufferedGraphicsContext> unterscheidet sich von der <xref:System.Drawing.BufferedGraphicsContext> für die Anwendung Domäne, und es wird automatisch verworfen, wenn die <xref:System.Drawing.BufferedGraphics> zurückgegebenes der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode verworfen wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer Grafiken-Puffer mithilfe der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode. Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Drawing.BufferedGraphics> Klasse.  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : nativeint * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetDC, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">Ein <see cref="T:System.IntPtr" /> für einen Gerätekontext, dem das Pixelformat des neuen Puffers entsprechen soll.</param>
        <param name="targetRectangle">Ein <see cref="T:System.Drawing.Rectangle" />, das die Größe des zu erstellenden Puffers angibt.</param>
        <summary>Erstellt mithilfe des Pixelformats des angegebenen <see cref="T:System.Drawing.Graphics" /> einen Grafikpuffer von der angegebenen Größe.</summary>
        <returns>Ein <see cref="T:System.Drawing.BufferedGraphics" />, das zum Zeichnen in einen Puffer mit den angegebenen Abmessungen verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode mit einem Rechteck, dessen Größe den Wert überschreitet, von der <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> -Eigenschaft, ein temporäres <xref:System.Drawing.BufferedGraphicsContext> wird erstellt, um den Puffer reservieren und einen temporären Kontext für den Puffer bereitzustellen. Die neue <xref:System.Drawing.BufferedGraphicsContext> unterscheidet sich von der <xref:System.Drawing.BufferedGraphicsContext> für die Anwendung Domäne, und es wird automatisch verworfen, wenn die <xref:System.Drawing.BufferedGraphics> zurückgegebenes der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode verworfen wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer Grafiken-Puffer mithilfe der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode. Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Drawing.BufferedGraphics> Klasse.  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Zugriff von nicht verwaltetem Code. Verwandte Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphicsContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Drawing.BufferedGraphicsContext" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> auf, wenn Sie <xref:System.Drawing.BufferedGraphicsContext> nicht mehr benötigen. Die <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>-Methode bewirkt, dass <xref:System.Drawing.BufferedGraphicsContext> nicht mehr verwendet werden kann. Nach dem Aufruf <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Drawing.BufferedGraphicsContext> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Drawing.BufferedGraphicsContext> belegt wurde. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Drawing.BufferedGraphicsContext> freigeben. Andernfalls werden die verwendeten Ressourcen reserviert, bis der Garbage Collector Ruft die <xref:System.Object.Finalize%2A> Methode der <xref:System.Drawing.BufferedGraphicsContext>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphicsContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="bufferedGraphicsContext.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwirft den aktuellen Grafikpuffer, wenn ein Puffer reserviert und noch nicht verworfen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Grafikpuffer verwendet wird, wird für die Löschung markiert werden, sobald dieser frei ist. Andernfalls wird er sofort verworfen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumBuffer : System.Drawing.Size with get, set" Usage="System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Größe des zu verwendenden Puffers ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Size" />, die die maximale Größe der Pufferdimensionen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft können Sie zum Abrufen oder Festlegen der maximalen Abmessungen für einen Puffer, der im Arbeitsspeicher beibehalten werden sollen. Jedoch alle mit Dimensionen, die größer als Puffer, weisen Sie einen Puffer mit beliebiger Größe, kann die <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> Größe werden vorübergehend verwendet, und klicken Sie dann verworfen, wenn die <xref:System.Drawing.BufferedGraphics> Objekt wird freigegeben.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Festlegen der maximalen Größe für den Puffer für eine <xref:System.Drawing.BufferedGraphicsContext>. Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Drawing.BufferedGraphics> Klasse.  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Höhe oder Breite der Größe ist kleiner oder gleich 0 (null).</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">für das Zulassen von Benutzerzugriff auf alle Fenster. Verwandte Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a629df442c2bb9fc752bc1664724e185d95fbf82" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86819657" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphicsContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Methoden für das Erstellen von Grafikpuffern bereit, die für die doppelte Pufferung verwendet werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der- <xref:System.Drawing.BufferedGraphicsContext> Klasse können Sie benutzerdefinierte doppelte Pufferung für Ihre Grafiken implementieren. Grafiken, die doppelte Pufferung verwenden, können das Flimmern reduzieren oder eliminieren, das durch das Neuzeichnen einer Anzeige Oberfläche verursacht wird.  
  
> [!NOTE]
>  Die einfachste Möglichkeit, die doppelte Pufferung zu verwenden, besteht darin, das <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuerelement stilflag für ein Steuerelement mithilfe der-Methode festzulegen <xref:System.Windows.Forms.Control.SetStyle%2A> . Wenn Sie das <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuerelement Stile-Flag für ein Steuerelement festlegen, wird das gesamte zeichnen für das Steuerelement über einen Standard Grafik Puffer umgeleitet, ohne dass zusätzlicher Code erforderlich ist. Dieses Flag ist standardmäßig auf festgelegt `true` .  
  
 Die <xref:System.Drawing.BufferedGraphicsContext> -Klasse stellt Methoden zum Erstellen und Konfigurieren eines Grafik Puffers bereit. Die- <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode erstellt eine <xref:System.Drawing.BufferedGraphics> , bei der es sich um einen Wrapper für einen Grafik Puffer handelt, der auch Methoden bereitstellt, mit denen Sie in den Puffer schreiben und dessen Inhalt auf einem Ausgabegerät Renderern können.  
  
 Sie können den <xref:System.Drawing.BufferedGraphicsContext> für die aktuelle Anwendungsdomäne aus der statischen- <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> Eigenschaft abrufen. Für grafisch intensive Anwendungen wie Animation können Sie eine dedizierte <xref:System.Drawing.BufferedGraphicsContext> mithilfe des Konstruktors erstellen, aber für die meisten Anwendungen ist die- <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> Eigenschaft ausreichend.  
  
 Weitere Informationen zum Zeichnen von gepufferten Grafiken und benutzerdefinierten Pufferimplementierungen finden Sie unter [doppelte gepufferte](/dotnet/framework/winforms/advanced/double-buffered-graphics) Grafiken und Gewusst [wie: Manuelles Verwalten von gepufferten Grafiken](/dotnet/framework/winforms/advanced/how-to-manually-manage-buffered-graphics).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der <xref:System.Drawing.BufferedGraphicsContext> für die aktuelle Anwendungsdomäne abgerufen wird. Dieser Code ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Drawing.BufferedGraphics> .  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
    <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Drawing.BufferedGraphicsContext" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für grafisch intensive Anwendungen, wie z. b. Animation, kann die Leistung manchmal verbessert werden, indem ein dedizierter <xref:System.Drawing.BufferedGraphicsContext> anstelle der von bereitgestellten Standard Instanz verwendet wird <xref:System.Drawing.BufferedGraphicsManager> . Dadurch können Grafik Puffer einzeln erstellt und verwaltet werden.  
  
> [!NOTE]
>  Sie sollten immer anrufen, <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> Wenn Sie die Verwendung eines dedizierten beendet haben <xref:System.Drawing.BufferedGraphicsContext> .  
  
 Weitere Informationen zu dedizierten Grafik Puffern finden [Sie unter Gewusst wie: Manuelles Verwalten von gepufferten Grafiken](/dotnet/framework/winforms/advanced/how-to-manually-manage-buffered-graphics).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
        <related type="Article" href="/dotnet/framework/winforms/advanced/how-to-manually-manage-buffered-graphics">Vorgehensweise: Manuelles Verwalten von gepufferten Grafiken</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt einen Grafikpuffer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetGraphics, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">Das <see cref="T:System.Drawing.Graphics" />, dem das Pixelformat des neuen Puffers entsprechen soll.</param>
        <param name="targetRectangle">Ein <see cref="T:System.Drawing.Rectangle" />, das die Größe des zu erstellenden Puffers angibt.</param>
        <summary>Erstellt mithilfe des Pixelformats des angegebenen <see cref="T:System.Drawing.Graphics" /> einen Grafikpuffer von der angegebenen Größe.</summary>
        <returns>Ein <see cref="T:System.Drawing.BufferedGraphics" />, das zum Zeichnen in einen Puffer mit den angegebenen Abmessungen verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die- <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode mit einem Rechteck aufzurufen, dessen Größe den Wert der-Eigenschaft überschreitet <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> , wird ein temporäres <xref:System.Drawing.BufferedGraphicsContext> erstellt, um den Puffer zuzuordnen und einen temporären Kontext für den Puffer bereitzustellen. Die neue unter <xref:System.Drawing.BufferedGraphicsContext> scheidet sich von der <xref:System.Drawing.BufferedGraphicsContext> für die Anwendungsdomäne und wird automatisch verworfen, wenn der <xref:System.Drawing.BufferedGraphics> von der-Methode zurückgegebene verworfen <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Erstellen eines Grafik Puffers mithilfe der- <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode veranschaulicht. Dieser Code ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Drawing.BufferedGraphics> .  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : nativeint * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetDC, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">Ein <see cref="T:System.IntPtr" /> für einen Gerätekontext, dem das Pixelformat des neuen Puffers entsprechen soll.</param>
        <param name="targetRectangle">Ein <see cref="T:System.Drawing.Rectangle" />, das die Größe des zu erstellenden Puffers angibt.</param>
        <summary>Erstellt mithilfe des Pixelformats des angegebenen <see cref="T:System.Drawing.Graphics" /> einen Grafikpuffer von der angegebenen Größe.</summary>
        <returns>Ein <see cref="T:System.Drawing.BufferedGraphics" />, das zum Zeichnen in einen Puffer mit den angegebenen Abmessungen verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die- <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode mit einem Rechteck aufzurufen, dessen Größe den Wert der-Eigenschaft überschreitet <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> , wird ein temporäres <xref:System.Drawing.BufferedGraphicsContext> erstellt, um den Puffer zuzuordnen und einen temporären Kontext für den Puffer bereitzustellen. Die neue unter <xref:System.Drawing.BufferedGraphicsContext> scheidet sich von der <xref:System.Drawing.BufferedGraphicsContext> für die Anwendungsdomäne und wird automatisch verworfen, wenn der <xref:System.Drawing.BufferedGraphics> von der-Methode zurückgegebene verworfen <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Erstellen eines Grafik Puffers mithilfe der- <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode veranschaulicht. Dieser Code ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Drawing.BufferedGraphics> .  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphicsContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Drawing.BufferedGraphicsContext" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> auf, wenn Sie <xref:System.Drawing.BufferedGraphicsContext> nicht mehr benötigen. Die <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>-Methode bewirkt, dass <xref:System.Drawing.BufferedGraphicsContext> nicht mehr verwendet werden kann. Nach dem Aufrufen <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> von müssen Sie alle Verweise auf den freigeben, <xref:System.Drawing.BufferedGraphicsContext> damit der Garbage Collector den Speicher freigeben kann, den der <xref:System.Drawing.BufferedGraphicsContext> belegt hat. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged) und [Implementieren einer](/dotnet/standard/garbage-collection/implementing-dispose)verwerfen-Methode.  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Drawing.BufferedGraphicsContext> freigeben. Andernfalls werden die verwendeten Ressourcen nicht freigegeben, bis die Garbage Collector die- <xref:System.Object.Finalize%2A> Methode von aufruft <xref:System.Drawing.BufferedGraphicsContext> .  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphicsContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="bufferedGraphicsContext.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwirft den aktuellen Grafikpuffer, wenn ein Puffer reserviert und noch nicht verworfen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Grafik Puffer verwendet wird, wird er für die Löschung markiert, sobald er kostenlos ist. Andernfalls wird Sie sofort verworfen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumBuffer : System.Drawing.Size with get, set" Usage="System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Größe des zu verwendenden Puffers ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Drawing.Size" />, die die maximale Größe der Pufferdimensionen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht es Ihnen, die maximale Größe für einen Puffer, der im Arbeitsspeicher beibehalten werden soll, zu erhalten oder festzulegen. Sie können einen Puffer beliebiger Größe zuordnen, allerdings wird jeder Puffer mit Dimensionen, der größer ist als die <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> Größe, temporär verwendet und dann verworfen, wenn das <xref:System.Drawing.BufferedGraphics> Objekt freigegeben wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die maximale Größe für den Puffer für ein festgelegt wird <xref:System.Drawing.BufferedGraphicsContext> . Dieser Code ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Drawing.BufferedGraphics> .  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Höhe oder Breite der Größe ist kleiner oder gleich 0 (null).</exception>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
  </Members>
</Type>

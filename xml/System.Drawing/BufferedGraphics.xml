<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de1606e7a41311ef45b2f32d01ea20fc19bf25c7" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46667536" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt einen Grafikpuffer für doppelte Pufferung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.BufferedGraphics> Klasse können Sie benutzerdefinierte doppelte Pufferung für Grafiken zu implementieren. Es stellt einen Wrapper für einen Grafikpuffer, zusammen mit Methoden, mit denen Sie in den Puffer zu schreiben und deren Inhalt in ein Ausgabegerät zu rendern.  
  
 Grafiken, die doppelte Pufferung verwenden können verringern oder beseitigen Flimmern, die durch eine Anzeigeoberfläche Neuzeichnen verursacht wird. Wenn Sie die doppelte Pufferung verwenden, aktualisierte Grafiken werden zuerst gezeichnet, in einen Puffer im Arbeitsspeicher, und der Inhalt dieses Puffers dann schnell auf einige oder alle der angezeigte Oberfläche geschrieben. Diese relativ kurze Überschreiben der angezeigten Grafiken in der Regel reduziert oder verhindert das Flackern, das manchmal beim Aktualisieren von Grafiken tritt.  
  
> [!NOTE]
>  Die einfachste Möglichkeit, die doppelte Pufferung verwendet wird, legen Sie die <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuern der Format-Flag auf einem Steuerelement mit dem <xref:System.Windows.Forms.Control.SetStyle%2A> Methode. Festlegen der <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> flag für ein Steuerelement alle Paint-Ereignisse für das Steuerelement über einen Standard-Grafikpuffer, leitet, ohne zusätzlichen Code. Dieses Flag wird festgelegt, um `true` standardmäßig.  
  
 Die <xref:System.Drawing.BufferedGraphics> Klasse verfügt über keinen öffentlichen Konstruktor und erstellt werden muss, indem die <xref:System.Drawing.BufferedGraphicsContext> für eine Anwendungsdomäne mit der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode. Sie können abrufen, die <xref:System.Drawing.BufferedGraphicsContext> für die aktuelle Anwendungsdomäne aus der statischen <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die <xref:System.Drawing.BufferedGraphics.Graphics%2A> Eigenschaft kann verwendet werden, um den Grafikpuffer zu zeichnen. Diese Eigenschaft bietet Zugriff auf die <xref:System.Drawing.Graphics> -Objekt, das an den Grafikpuffer, die für diese zugeordneten zeichnet <xref:System.Drawing.BufferedGraphics> Objekt.  
  
 Die <xref:System.Drawing.BufferedGraphics.Render%2A> Methode keine Argumente zeichnet den Inhalt des Grafikpuffers Puffer auf die Oberfläche des angegeben, wenn der Puffer zugewiesen wurde. Andere Überladungen der <xref:System.Drawing.BufferedGraphics.Render%2A> Methode können Sie angeben einer <xref:System.Drawing.Graphics> Objekt oder ein <xref:System.IntPtr> Objekt, das zeigt für einen Gerätekontext, der den Inhalt des Grafikpuffers gezeichnet werden soll.  
  
 Weitere Informationen über das Zeichnen doppelt gepufferte Grafiken finden Sie unter [doppelt gepufferte Grafiken](~/docs/framework/winforms/advanced/double-buffered-graphics.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung einer <xref:System.Drawing.BufferedGraphics> Objekt zum Zeichnen von Grafiken, die mehrere Typen von Pufferung Implementierungen verwenden. Auf das Formular klicken Sie alternativ startet und stoppt einen Zeitgeber, der bewirkt, dass Updates gezeichnet werden soll. Die Draw-Updates können Sie die Auswirkungen der doppelten Pufferung zu beobachten. Mit der rechten Maustaste in das Formular durchläuft die folgenden zeichnen-Modi:  
  
-   Zeichnen direkt an die <xref:System.Windows.Forms.Control.Handle%2A> für eine <xref:System.Windows.Forms.Form>.  
  
-   Zeichnen durch Überschreiben der <xref:System.Windows.Forms.Form.OnPaint%2A> Methode mithilfe der <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Format gesteuert.  
  
-   Zeichnen durch Überschreiben der <xref:System.Windows.Forms.Form.OnPaint%2A> Methode für die Formularmethode ohne Verwendung der <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Format gesteuert.  
  
 Im jeweiligen Modus wird Text gezeichnet, die den aktuellen Modus angibt, und beschreibt das Verhalten, das auftritt, wenn jede Maustaste gedrückt wird.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Die <see cref="T:System.Drawing.BufferedGraphics" />-Klasse ist nicht threadsicher. Beim Zugriff auf einen Grafikpuffer von separaten Threads, ist es wichtig, einen Thread-Zugriffssteuerungsmechanismus verwenden, um Konflikte zu vermeiden.</threadsafe>
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Doppelt gepufferte Grafiken</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Drawing.BufferedGraphics" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Drawing.BufferedGraphics.Dispose%2A> Wenn Sie fertig sind mit den <xref:System.Drawing.BufferedGraphics> Objekt. Die <xref:System.Drawing.BufferedGraphics.Dispose%2A> -Methode bewirkt, dass die <xref:System.Drawing.BufferedGraphics> Objekt in einem nicht verwendbaren Zustand. Nach dem Aufruf <xref:System.Drawing.BufferedGraphics.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Drawing.BufferedGraphics> Objekt, damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Drawing.BufferedGraphics> Objekt belegt wurde. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Drawing.BufferedGraphics.Dispose%2A> bereits vor der Veröffentlichung des letzten Verweis auf die <xref:System.Drawing.BufferedGraphics> Objekt. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Drawing.BufferedGraphics>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Drawing.Graphics" />-Objekt ab, das eine Ausgabe an den Grafikpuffer ausführt.</summary>
        <value>Ein <see cref="T:System.Drawing.Graphics" />-Objekt, das eine Ausgabe an den Grafikpuffer ausführt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft bietet eine <xref:System.Drawing.Graphics> -Objekt, das an den Grafikpuffer, die für diese zugeordneten zeichnet <xref:System.Drawing.BufferedGraphics> Objekt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt den Inhalt des Grafikpuffers.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt den Inhalt des Grafikpuffers an das Standardgerät.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt den Inhalt des Grafikpuffers an das Gerät, das durch den Aufruf von der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Methode der <xref:System.Drawing.BufferedGraphicsContext> verwendet zum Erstellen dieser <xref:System.Drawing.BufferedGraphics> Objekt.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">Ein <see cref="T:System.Drawing.Graphics" />-Objekt, in das der Inhalt des Grafikpuffers geschrieben werden soll.</param>
        <summary>Schreibt den Inhalt des Grafikpuffers in das angegebene <see cref="T:System.Drawing.Graphics" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt den Inhalt des Grafikpuffers in das angegebene <xref:System.Drawing.Graphics> Objekt.  
  
   
  
## Examples  
 Das folgende Codebeispiel demonstriert das Rendern den Inhalt des Grafikpuffers in einen angegebenen <xref:System.Drawing.Graphics> Objekt. Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Drawing.BufferedGraphics> Klasse.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">Ein <see cref="T:System.IntPtr" />, der auf den Gerätekontext zeigt, auf den der Inhalt des Grafikpuffers geschrieben werden soll.</param>
        <summary>Schreibt den Inhalt des Grafikpuffers auf den Gerätekontext, der dem angegebenen <see cref="T:System.IntPtr" />-Handle zugeordnet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt den Inhalt des Grafikpuffers auf den Zusammenhang mit dem angegebenen Gerätekontext <xref:System.IntPtr> behandeln.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie den Inhalt des Grafikpuffers zu rendern `grafx` für einen angegebenen Gerätekontext. Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Drawing.BufferedGraphics> Klasse.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Zugriff von nicht verwaltetem Code. Im Zusammenhang Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
  </Members>
</Type>
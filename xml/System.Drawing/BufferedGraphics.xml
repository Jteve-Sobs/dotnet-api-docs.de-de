<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9ba438a3902a2b2872fd0e3d40c95fab0156f0e1" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83946942" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt einen Grafikpuffer für doppelte Pufferung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.BufferedGraphics>-Klasse ermöglicht es Ihnen, benutzerdefinierte doppelte Pufferung für Ihre Grafiken zu implementieren. Es stellt einen Wrapper für einen Grafik Puffer bereit, zusammen mit Methoden, die Sie zum Schreiben in den Puffer und zum Renderinginhalt auf einem Ausgabegerät verwenden können.  
  
 Grafiken, die doppelte Pufferung verwenden, können das Flimmern reduzieren oder eliminieren, das durch das Neuzeichnen einer Anzeige Oberfläche verursacht wird. Wenn Sie die doppelte Pufferung verwenden, werden aktualisierte Grafiken zuerst in einen Puffer im Arbeitsspeicher gezeichnet, und der Inhalt dieses Puffers wird dann schnell auf eine oder alle der angezeigten Oberfläche geschrieben. Dieses relativ kurze Überschreiben der angezeigten Grafiken verringert oder entfernt das Flimmern, das manchmal beim Aktualisieren von Grafiken auftritt.  
  
> [!NOTE]
>  Die einfachste Möglichkeit, die doppelte Pufferung zu verwenden, besteht darin, mit der <xref:System.Windows.Forms.Control.SetStyle%2A>-Methode das <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuerelement Format Kennzeichen für ein Steuerelement festzulegen. Wenn das <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>-Flag für ein Steuerelement festgelegt wird, wird das gesamte zeichnen für das Steuerelement über einen Standard Grafik Puffer umgeleitet, ohne dass zusätzlicher Code erforderlich ist. Dieses Flag ist standardmäßig auf `true` festgelegt.  
  
 Die <xref:System.Drawing.BufferedGraphics>-Klasse verfügt über keinen öffentlichen Konstruktor und muss von der <xref:System.Drawing.BufferedGraphicsContext> für eine Anwendungsdomäne mithilfe ihrer <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>-Methode erstellt werden. Die <xref:System.Drawing.BufferedGraphicsContext> für die aktuelle Anwendungsdomäne können Sie aus der Eigenschaft static <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> abrufen.  
  
 Die <xref:System.Drawing.BufferedGraphics.Graphics%2A>-Eigenschaft kann zum Zeichnen in den Grafik Puffer verwendet werden. Diese Eigenschaft ermöglicht den Zugriff auf das <xref:System.Drawing.Graphics> Objekt, das sich auf den Grafik Puffer bezieht, der diesem <xref:System.Drawing.BufferedGraphics> Objekt zugeordnet ist.  
  
 Die <xref:System.Drawing.BufferedGraphics.Render%2A>-Methode ohne Argumente zeichnet den Inhalt des Grafik Puffers auf der Oberfläche, die beim Zuordnen des Puffers angegeben wurde. Andere über Ladungen der <xref:System.Drawing.BufferedGraphics.Render%2A>-Methode ermöglichen es Ihnen, ein <xref:System.Drawing.Graphics> Objekt oder ein <xref:System.IntPtr> Objekt anzugeben, das auf einen Gerätekontext zeigt, auf den der Inhalt des Grafik Puffers gezeichnet werden soll.  
  
 Weitere Informationen zum Zeichnen von doppelt gepufferten Grafiken finden Sie unter [doppelt gepufferte Grafiken](/dotnet/framework/winforms/advanced/double-buffered-graphics).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung eines <xref:System.Drawing.BufferedGraphics> Objekts zum Zeichnen von Grafiken mithilfe verschiedener Typen von Puffer Implementierungen veranschaulicht. Wenn Sie auf das Formular klicken, wird ein Timer gestartet und beendet, der Draw-Aktualisierungen auslöst. Mit den Draw-Aktualisierungen können Sie die Auswirkungen der doppelten Pufferung beobachten. Wenn Sie mit der rechten Maustaste auf das Formular klicken, werden die folgenden Zeichnungs Modi durchlaufen  
  
-   Direktes Zeichnen des <xref:System.Windows.Forms.Control.Handle%2A> für eine <xref:System.Windows.Forms.Form>.  
  
-   Zeichnen durch Überschreiben der <xref:System.Windows.Forms.Form.OnPaint%2A> Methode mithilfe des <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuerelement Stils.  
  
-   Zeichnen durch Überschreiben der <xref:System.Windows.Forms.Form.OnPaint%2A>-Methode für die Formular Methode, ohne den <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Steuerelement Stil zu verwenden.  
  
 In jedem Modus wird Text gezeichnet, der den aktuellen Modus identifiziert und das Verhalten beschreibt, das auftritt, wenn die Maustaste gedrückt wird.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Die Threadsicherheit der Klasse <see cref="T:System.Drawing.BufferedGraphics" /> ist nicht gewährleistet. Beim Zugriff auf einen Grafik Puffer aus separaten Threads ist es wichtig, einen Thread Zugriffs Steuerungsmechanismus zu verwenden, um Konflikte zu verhindern.</threadsafe>
    <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle Ressourcen frei, die vom <see cref="T:System.Drawing.BufferedGraphics" />-Objekt verwendet werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft <xref:System.Drawing.BufferedGraphics.Dispose%2A> auf, wenn die Verwendung des <xref:System.Drawing.BufferedGraphics>-Objekts abgeschlossen ist. Die <xref:System.Drawing.BufferedGraphics.Dispose%2A>-Methode lässt das <xref:System.Drawing.BufferedGraphics>-Objekt in einem nicht verwendbaren Zustand. Nachdem Sie <xref:System.Drawing.BufferedGraphics.Dispose%2A>aufgerufen haben, müssen Sie alle Verweise auf das <xref:System.Drawing.BufferedGraphics> Objekt freigeben, damit der Garbage Collector den Speicher freigeben kann, den das <xref:System.Drawing.BufferedGraphics> Objekt belegt hat. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged) und [Implementieren einer](/dotnet/standard/garbage-collection/implementing-dispose)verwerfen-Methode.  
  
> [!NOTE]
>  Immer <xref:System.Drawing.BufferedGraphics.Dispose%2A> aufgerufen, bevor Sie den letzten Verweis auf das <xref:System.Drawing.BufferedGraphics>-Objekt freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Drawing.BufferedGraphics>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Drawing.Graphics" />-Objekt ab, das eine Ausgabe an den Grafikpuffer ausführt.</summary>
        <value>Ein <see cref="T:System.Drawing.Graphics" />-Objekt, das eine Ausgabe an den Grafikpuffer ausführt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt ein <xref:System.Drawing.Graphics> Objekt bereit, das sich auf den Grafik Puffer bezieht, der diesem <xref:System.Drawing.BufferedGraphics> Objekt zugeordnet ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt den Inhalt des Grafikpuffers.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt den Inhalt des Grafikpuffers an das Standardgerät.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt den Inhalt des Grafik Puffers auf das Gerät, das durch Aufrufen der <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>-Methode des <xref:System.Drawing.BufferedGraphicsContext>, der zum Erstellen dieses <xref:System.Drawing.BufferedGraphics> Objekts verwendet wurde, angegeben wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">Ein <see cref="T:System.Drawing.Graphics" />-Objekt, in das der Inhalt des Grafikpuffers geschrieben werden soll.</param>
        <summary>Schreibt den Inhalt des Grafikpuffers in das angegebene <see cref="T:System.Drawing.Graphics" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt den Inhalt des Grafik Puffers in das angegebene <xref:System.Drawing.Graphics>-Objekt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Rendern des Inhalts des Grafik Puffers in ein angegebenes <xref:System.Drawing.Graphics> Objekt veranschaulicht. Dieser Code ist Teil eines größeren Beispiels, das für die <xref:System.Drawing.BufferedGraphics>-Klasse bereitgestellt wird.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">Ein <see cref="T:System.IntPtr" />, der auf den Gerätekontext zeigt, auf den der Inhalt des Grafikpuffers geschrieben werden soll.</param>
        <summary>Schreibt den Inhalt des Grafikpuffers auf den Gerätekontext, der dem angegebenen <see cref="T:System.IntPtr" />-Handle zugeordnet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt den Inhalt des Grafik Puffers in den Gerätekontext, der dem angegebenen <xref:System.IntPtr> Handle zugeordnet ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der Inhalt des Grafik Puffers in einen angegebenen Gerätekontext `grafx` werden kann. Dieser Code ist Teil eines größeren Beispiels, das für die <xref:System.Drawing.BufferedGraphics>-Klasse bereitgestellt wird.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IntPtr" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics">Doppelt gepufferte Grafiken</related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ToolboxBitmapAttribute" FullName="System.Drawing.ToolboxBitmapAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e7e3baddc7823e3a9d97c1cce31418160f7e4a9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ToolboxBitmapAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ToolboxBitmapAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.ToolboxBitmapAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class ToolboxBitmapAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ToolboxBitmapAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ermöglicht Ihnen, ein Symbol anzugeben, das ein Steuerelement in einem Container darstellt, z. B. in Microsoft Visual Studio Form Designer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können Anwenden einer <xref:System.Drawing.ToolboxBitmapAttribute> an ein Steuerelement, damit ein Symbol von Containern, z. B. Microsoft Visual Studio Formulardesigner abgerufen werden können, die Steuerelement darstellt. Die Bitmap für das Symbol kann in einer Datei allein oder in der Assembly eingebettet, die das Steuerelement enthält. Die Größe der Bitmap, die Sie in Einbetten des Steuerelements Assembly (oder in einer separaten Datei speichern) sollten 16 x 16 sein. Die <xref:System.Drawing.ToolboxBitmapAttribute.GetImage%2A> Methode von einer <xref:System.Drawing.ToolboxBitmapAttribute> Objekt zurückgeben kann, die kleine 16 x 16-Image oder ein großes 32 x 32-Image, das erstellt wird, indem Sie das kleine Bild zu skalieren.  
  
 Wenn Sie unterschiedliche Versionen des Symbole mit verschiedenen Versionen der Assembly verwenden möchten, müssen Sie nicht ändern, die <xref:System.Drawing.ToolboxBitmapAttribute> für jede Version. Stattdessen können Sie die Assembly mit Deklarieren einer <xref:System.Drawing.BitmapSuffixInSameAssemblyAttribute> oder ein <xref:System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute>, und geben Sie eine <xref:System.Drawing.Configuration.SystemDrawingSection.BitmapSuffix%2A> Konfigurationswert für jede Version der Assembly. In diesem Fall ein Dateinamen angegeben, indem eine <xref:System.Drawing.ToolboxBitmapAttribute> wird mit dem Bitmap-Suffix angehängt interpretiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Drawing.ToolboxBitmapAttribute> Klasse festzulegende `stop.bmp` als das Symbol "Toolbox" für die `StopSignControl`. In diesem Beispiel wird davon ausgegangen, das Vorhandensein einer 16 x 16 Pixel-Bitmap mit dem Namen `stop.bmp` unter "c:"\\.  
  
 [!code-cpp[System.Drawing.ToolBoxBitmapExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/cpp/usercontrol1.cpp#1)]
 [!code-csharp[System.Drawing.ToolBoxBitmapExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/CS/usercontrol1.cs#1)]
 [!code-vb[System.Drawing.ToolBoxBitmapExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/VB/usercontrol1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert ein neues <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolboxBitmapAttribute (string imageFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string imageFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (imageFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolboxBitmapAttribute(System::String ^ imageFile);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="imageFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageFile">Der Name einer Datei, die eine 16 x 16-Bitmap enthält.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt mit einem Bild aus einer angegebenen Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Drawing.ToolboxBitmapAttribute.%23ctor%2A> Konstruktor festzulegende `stop.bmp` als das Symbol "Toolbox" für die `StopSignControl`. In diesem Beispiel wird davon ausgegangen, das Vorhandensein einer 16 x 16 Pixel-Bitmap mit dem Namen `stop.bmp` unter "c:"\\.  
  
 [!code-cpp[System.Drawing.ToolBoxBitmapExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/cpp/usercontrol1.cpp#1)]
 [!code-csharp[System.Drawing.ToolBoxBitmapExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/CS/usercontrol1.cs#1)]
 [!code-vb[System.Drawing.ToolBoxBitmapExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/VB/usercontrol1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolboxBitmapAttribute (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolboxBitmapAttribute(Type ^ t);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">Ein <see cref="T:System.Type" />, dessen definierende Assembly nach der Bitmapressource durchsucht wird.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt auf Grundlage einer 16 x 16-Bitmap, die als Ressource in einer angegebenen Assembly eingebettet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor sucht eine eingebettete Ressource in der Assembly, die den vom angegebenen Typ definiert die `t` Parameter. Der Konstruktor sucht nach einer Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition der Klasse, die gemäß der `t` Parameter. Z. B. wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht dann der Konstruktor AssemblyA.dll für eine Ressource mit dem Namen NamespaceA.ControlA.bmp.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Drawing.ToolboxBitmapAttribute.%23ctor%2A> Konstruktor hat, legen Sie das Symbol für das Schaltflächen-Steuerelement auf das Symbol "Toolbox" für eine <xref:System.Windows.Forms.UserControl> mit dem Namen `StopSignControl3`.  
  
 [!code-cpp[System.Drawing.ToolBoxBitmapExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/cpp/usercontrol1.cpp#3)]
 [!code-csharp[System.Drawing.ToolBoxBitmapExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/CS/usercontrol1.cs#3)]
 [!code-vb[System.Drawing.ToolBoxBitmapExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/VB/usercontrol1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolboxBitmapAttribute (Type t, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type t, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Type, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolboxBitmapAttribute(Type ^ t, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">Ein <see cref="T:System.Type" />, dessen definierende Assembly nach der Bitmapressource durchsucht wird.</param>
        <param name="name">Der Name der eingebetteten Bitmapressource.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt auf Grundlage einer 16 x 16-Bitmap, die als Ressource in einer angegebenen Assembly eingebettet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor sucht eine eingebettete Ressource in der Assembly, die den vom angegebenen Typ definiert die `t` Parameter. Der Konstruktor sucht nach einer Ressource mit dem Namen namespace.name, wobei Namespace der Namespace ist mit der Definition der Klasse, die gemäß der `t` Parameter. Nehmen wir beispielsweise an, dass ControlA einer Klasse im in AssemblyA.dll gespeicherten ist und Sie haben "MyBitmap.bmp" übergeben, um die `name` Parameter. Anschließend sucht der Konstruktor AssemblyA.dll für eine Ressource mit dem Namen NamespaceA.MyBitmap.bmp.  
  
   
  
## Examples  
 "Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Drawing.ToolboxBitmapAttribute.%23ctor%2A> Konstruktor festzulegende `StopSignControl2.bmp` als ein Symbol" Toolbox "für die `StopSignControl2`. In diesem Beispiel wird davon ausgegangen, das Vorhandensein einer 16 x 16 Pixel-Bitmap mit dem Namen `StopSignControl2.bmp` mit seiner **BuildAction** -Eigenschaftensatz auf **EmbeddedResource**.  
  
 [!code-cpp[System.Drawing.ToolBoxBitmapExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/cpp/usercontrol1.cpp#2)]
 [!code-csharp[System.Drawing.ToolBoxBitmapExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/CS/usercontrol1.cs#2)]
 [!code-vb[System.Drawing.ToolBoxBitmapExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/VB/usercontrol1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly System.Drawing.ToolboxBitmapAttribute Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Drawing.ToolboxBitmapAttribute Default" />
      <MemberSignature Language="DocId" Value="F:System.Drawing.ToolboxBitmapAttribute.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Default As ToolboxBitmapAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Drawing::ToolboxBitmapAttribute ^ Default;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.ToolboxBitmapAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ein <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt, dessen kleines und großes Bild auf <see langword="null" /> festgelegt sind.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der zu überprüfende <see cref="T:System.Object" />.</param>
        <summary>Gibt an, ob das angegebene Objekt ein <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt und mit diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt identisch ist.</summary>
        <returns>Diese Methode gibt <see langword="true" /> zurück, wenn <paramref name="value" /> sowohl ein <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt als auch mit diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt identisch ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Hashcode für dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt ab.</summary>
        <returns>Der Hashcode für dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft das kleine oder große <see cref="T:System.Drawing.Image" /> ab, das diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt zugeordnet ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetImage (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetImage(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetImage (component As Object) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetImage(System::Object ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">Wenn dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt nicht bereits ein kleines Bild enthält, sucht diese Methode in der Assembly, die den Typ des vom Component-Parameter angegebenen Objekts definiert, nach einer Bitmapressource. Wenn Sie beispielsweise ein Objekt vom Typ ControlA an den Component-Parameter übergeben, durchsucht diese Methode die Assembly, die ControlA definiert.</param>
        <summary>Ruft das kleine <see cref="T:System.Drawing.Image" /> ab, das diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt zugeordnet ist.</summary>
        <returns>Das diesem <see cref="T:System.Drawing.Image" />-Objekt zugeordnete kleine <see cref="T:System.Drawing.ToolboxBitmapAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht eine Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition des Typs des Objekts gemäß der `component` Parameter. Nehmen wir beispielsweise an, die Sie ein Objekt vom Typ ControlA übergeben, die `component` Parameter. Wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht diese Methode für eine Ressource mit dem Namen NamespaceA.ControlA.bmp AssemblyA.dll.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Drawing.ToolboxBitmapAttribute.GetImage%2A>-Methode veranschaulicht.  
  
 [!code-cpp[System.Drawing.ToolBoxBitmapExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/cpp/usercontrol1.cpp#4)]
 [!code-csharp[System.Drawing.ToolBoxBitmapExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/CS/usercontrol1.cs#4)]
 [!code-vb[System.Drawing.ToolBoxBitmapExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ToolBoxBitmapExamples/VB/usercontrol1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetImage (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetImage(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetImage(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Wenn dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt nicht bereits ein kleines Bild enthält, sucht diese Methode in der Assembly, die den vom type-Parameter angegebenen Typ definiert, nach einer Bitmapressource. Wenn Sie beispielsweise typeof(ControlA) an den type-Parameter übergeben, durchsucht diese Methode die Assembly, die ControlA definiert.</param>
        <summary>Ruft das kleine <see cref="T:System.Drawing.Image" /> ab, das diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt zugeordnet ist.</summary>
        <returns>Das diesem <see cref="T:System.Drawing.Image" />-Objekt zugeordnete kleine <see cref="T:System.Drawing.ToolboxBitmapAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht eine Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition des Typs gemäß den `type` Parameter. Nehmen wir beispielsweise an Sie übergeben typeof(ControlA) an die `type` Parameter. Wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht diese Methode für eine Ressource mit dem Namen NamespaceA.ControlA.bmp AssemblyA.dll.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetImage (object component, bool large);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetImage(object component, bool large) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetImage (component As Object, large As Boolean) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetImage(System::Object ^ component, bool large);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="large" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="component">Wenn dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt nicht bereits ein kleines Bild enthält, sucht diese Methode in der Assembly, die den Typ des vom Component-Parameter angegebenen Objekts definiert, nach einer Bitmapressource. Wenn Sie beispielsweise ein Objekt vom Typ ControlA an den Component-Parameter übergeben, durchsucht diese Methode die Assembly, die ControlA definiert.</param>
        <param name="large">Gibt an, ob diese Methode ein großes Bild (<see langword="true" />) oder ein kleines Bild (<see langword="false" />) zurückgibt. Kleine Bilder haben die Größe 16 x 16. Große Bilder haben die Größe 32 x 32.</param>
        <summary>Ruft das kleine oder große <see cref="T:System.Drawing.Image" /> ab, das diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt zugeordnet ist.</summary>
        <returns>Ein diesem <see cref="T:System.Drawing.Image" />-Objekt zugeordnetes <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht eine Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition des Typs des Objekts gemäß der `component` Parameter. Nehmen wir beispielsweise an, die Sie ein Objekt vom Typ ControlA übergeben, die `component` Parameter. Wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht diese Methode für eine Ressource mit dem Namen NamespaceA.ControlA.bmp AssemblyA.dll.  
  
 Wenn diese <xref:System.Drawing.ToolboxBitmapAttribute> Objekt verfügt noch nicht über ein großes Bild, erstellt diese Methode ein großes Bild, indem Sie das kleine Bild zu skalieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetImage (Type type, bool large);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetImage(class System.Type type, bool large) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetImage(Type ^ type, bool large);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="large" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">Wenn dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt nicht bereits ein kleines Bild enthält, sucht diese Methode in der Assembly, die den vom Komponententyp angegebenen Typ definiert, nach einer Bitmapressource. Wenn Sie beispielsweise typeof(ControlA) an den type-Parameter übergeben, durchsucht diese Methode die Assembly, die ControlA definiert.</param>
        <param name="large">Gibt an, ob diese Methode ein großes Bild (<see langword="true" />) oder ein kleines Bild (<see langword="false" />) zurückgibt. Kleine Bilder haben die Größe 16 x 16. Große Bilder haben die Größe 32 x 32.</param>
        <summary>Ruft das kleine oder große <see cref="T:System.Drawing.Image" /> ab, das diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt zugeordnet ist.</summary>
        <returns>Ein diesem <see cref="T:System.Drawing.Image" />-Objekt zugeordnetes <see cref="T:System.Drawing.ToolboxBitmapAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht eine Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition des Typs gemäß den `type` Parameter. Nehmen wir beispielsweise an Sie übergeben ein typeof(ControlA) an die `type` Parameter. Wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht diese Methode für eine Ressource mit dem Namen NamespaceA.ControlA.bmp AssemblyA.dll.  
  
 Wenn diese <xref:System.Drawing.ToolboxBitmapAttribute> Objekt verfügt noch nicht über ein großes Bild, erstellt diese Methode ein großes Bild, indem Sie das kleine Bild zu skalieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetImage (Type type, string imgName, bool large);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetImage(class System.Type type, string imgName, bool large) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetImage(Type ^ type, System::String ^ imgName, bool large);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="imgName" Type="System.String" />
        <Parameter Name="large" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">Wenn dieses <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt nicht bereits ein kleines Bild enthält, sucht diese Methode in der Assembly, die den vom Komponententyp angegebenen Typ definiert, nach einer eingebetteten Bitmapressource. Wenn Sie beispielsweise typeof(ControlA) an den type-Parameter übergeben, durchsucht diese Methode die Assembly, die ControlA definiert.</param>
        <param name="imgName">Der Name der eingebetteten Bitmapressource.</param>
        <param name="large">Gibt an, ob diese Methode ein großes Bild (<see langword="true" />) oder ein kleines Bild (<see langword="false" />) zurückgibt. Kleine Bilder haben die Größe 16 x 16. Große Bilder haben die Größe 32 x 32.</param>
        <summary>Ruft das kleine oder große <see cref="T:System.Drawing.Image" /> ab, das diesem <see cref="T:System.Drawing.ToolboxBitmapAttribute" />-Objekt zugeordnet ist.</summary>
        <returns>Ein diesem <see cref="T:System.Drawing.Image" />-Objekt zugeordnetes <see cref="T:System.Drawing.ToolboxBitmapAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht eine Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition des Typs gemäß den `type` Parameter. Nehmen wir beispielsweise an Sie übergeben typeof(ControlA) an die `type` Parameter, und Sie "haben MyBitmap.bmp" an den ImgName-Parameter übergeben. Wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht diese Methode für eine Ressource mit dem Namen NamespaceA.MyBitmap.bmp AssemblyA.dll.  
  
 Wenn diese <xref:System.Drawing.ToolboxBitmapAttribute> Objekt verfügt noch nicht über ein großes Bild, erstellt diese Methode ein großes Bild, indem Sie das kleine Bild zu skalieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImageFromResource">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image GetImageFromResource (Type t, string imageName, bool large);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Image GetImageFromResource(class System.Type t, string imageName, bool large) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ToolboxBitmapAttribute.GetImageFromResource(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetImageFromResource (t As Type, imageName As String, large As Boolean) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ GetImageFromResource(Type ^ t, System::String ^ imageName, bool large);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
        <Parameter Name="imageName" Type="System.String" />
        <Parameter Name="large" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="t">Diese Methode sucht in der Assembly, die den vom t-Parameter angegebenen Typ definiert, nach einer eingebetteten Bitmapressource. Wenn Sie beispielsweise typeof(ControlA) an den t-Parameter übergeben, durchsucht diese Methode die Assembly, die ControlA definiert.</param>
        <param name="imageName">Der Name der eingebetteten Bitmapressource.</param>
        <param name="large">Gibt an, ob diese Methode ein großes Bild (true) oder ein kleines Bild (false) zurückgibt. Kleine Bilder haben die Größe 16 x 16. Große Bilder haben die Größe 32 x 32.</param>
        <summary>Gibt ein <see cref="T:System.Drawing.Image" />-Objekt auf Grundlage einer in einer Assembly eingebetteten Bitmapressource zurück.</summary>
        <returns>Ein <see cref="T:System.Drawing.Image" />-Objekt auf Grundlage der abgerufenen Bitmap.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht eine Ressource mit dem Namen Namespace.ClassName.bmp, in dem Namespace für den Namespace steht, mit der Definition des Typs gemäß den `t` Parameter. Nehmen wir beispielsweise an Sie übergeben typeof(ControlA) an den `t` angeben und Sie "MyBitmap.bmp" an den ImgName-Parameter übergeben. Wenn ControlA im in AssemblyA.dll gespeicherten ist, sucht diese Methode für eine Ressource mit dem Namen NamespaceA.MyBitmap.bmp AssemblyA.dll.  
  
 Diese Methode dient zum Abrufen einer 16 x 16-Bitmap-Ressource, die in einer Assembly eingebettet ist. Es ist jedoch nicht erforderlich, dass die eingebettete Bitmap eine Größe von 16 x 16 hat. Die Bitmap, die aus der Assembly (unabhängig von der Größe) abgerufen werden, gilt das kleine Bild. Das große Bild wird durch die "small" Image auf eine Größe von 32 x 32 Skalierung erstellt. Damit das große Bild immer 32 x 32, unabhängig von der Größe der Bitmap aus der Assembly abgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2074d12e1adf5e1521480a31fee44197ad632d1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39756326" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ComponentGuaranteesAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Constructor | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Module | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert die Kompatibilitätsgarantie einer Komponente, eines Typs oder eines Typmembers, die bzw. der mehrere Versionen umfassen kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> von Entwicklern von Komponenten und Klassenbibliotheken verwendet, um den Grad an Kompatibilität anzugeben, die über mehrere Versionen Consumer ihrer Bibliotheken erwarten können. Gibt die Ebene der Garantie, dass eine zukünftige Version der Bibliothek oder Komponente ein vorhandenes Clients nicht unterbrochen wird. Clients können Sie dann die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> als Hilfe beim Entwerfen von ihren eigenen Schnittstellen, um die Stabilität zwischen Versionen zu gewährleisten.  
  
> [!NOTE]
>  Die common Language Runtime (CLR) wird dieses Attribut nicht in keiner Weise verwenden. Der Wert liegt im formell dokumentieren die Absicht des Autors der Komponente. Während der Kompilierung Tools können auch diese Deklarationen verwenden, um Kompilierungsfehler zu erkennen, die andernfalls die deklarierte Garantie verletzen würden.  
  
## <a name="levels-of-compatibility"></a>Ebenen der Kompatibilität  
 Die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> unterstützt die folgenden Ebenen der Kompatibilität, die von Mitgliedern der dargestellt werden die <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Enumeration:  
  
-   Keine Kompatibilität für die Version-zu-Version (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). Der Client kann davon ausgehen, dass zukünftige Versionen im vorhandenen Client unterbrochen werden. Weitere Informationen finden Sie unter den [keine Kompatibilität](#None) weiter unten in diesem Thema.  
  
-   Kompatibilität von Seite-an-Seite-zwischen-Versionen (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). Die Komponente wurde getestet, um arbeiten, wenn mehr als eine Version der Assembly in derselben Anwendungsdomäne geladen wird. Im Allgemeinen können die zukünftige Versionen Kompatibilität aufgehoben. Wenn Änderungen vorgenommen werden, die alte Version wird nicht geändert, jedoch zusammen mit der neuen Version vorhanden ist. Seite-an-Seite-Ausführung ist die erwartete Methode stellen vorhandene Clients, die funktionieren, wenn Änderungen vorgenommen werden. Weitere Informationen finden Sie unter den [Seite-an-Seite-Kompatibilität](#SideBySide) weiter unten in diesem Thema.  
  
-   Stabile Version zu Version Kompatibilität (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). Zukünftige Versionen sollten den Client nicht unterbrechen und Seite-an-Seite-Ausführung sollte nicht erforderlich. Allerdings, wenn der Client versehentlich beschädigt ist, kann es möglich, eine Seite-an-Seite-Ausführung zu verwenden, um das Problem zu beheben sein. Weitere Informationen finden Sie unter den [stabile Kompatibilität](#Standard) Abschnitt.  
  
-   Exchange-Version zur Anwendungskompatibilität (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). Außerordentliche wird darauf geachtet, stellen Sie sicher, dass zukünftige Versionen des Clients nicht unterbrochen werden. Der Client sollte nur diese Typen in der Signatur der Schnittstellen verwenden, die für die Kommunikation mit anderen Assemblys verwendet werden, die unabhängig voneinander bereitgestellt werden. Nur eine Version dieser Typen wird erwartet, sollen in einer bestimmten Anwendungsdomäne, d. h. wenn ein Client unterbrochen wird, Seite-an-Seite-Ausführung der Kompatibilitätsproblem nicht beheben kann. Weitere Informationen finden Sie unter den [Exchange Typkompatibilität](#Exchange) Abschnitt.  
  
 Den folgenden Abschnitten werden jeder Ebene der Garantie ausführlicher.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>Keine Kompatibilität  
 Markieren einer Komponente als <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> gibt an, dass der Anbieter keine Garantien in Bezug auf Kompatibilität stellt. Clients sollten alle Abhängigkeiten auf den verfügbar gemachten Schnittstellen erstellen. Dieses Maß an Kompatibilität ist nützlich für Typen, die experimentelle oder werden, sind öffentlich verfügbar, jedoch werden nur für Komponenten, die immer zur selben Zeit aktualisiert werden soll. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> Gibt explizit an, dass diese Komponente nicht von externen Komponenten verwendet werden soll.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Seite-an-Seite-Kompatibilität  
 Markieren einer Komponente als <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> gibt an, dass die Komponente getestet wurde, funktionieren, wenn mehr als eine Version der Assembly in derselben Anwendungsdomäne geladen wird. Wichtige Änderungen sind zulässig, solange sie auf die Assembly vorgenommen werden, die die Versionsnummer größer werden. Komponenten, die an eine alte Version der Assembly gebunden sind, um den Vorgang fortzusetzen, zum Binden an die alte Version erwartet werden, und andere Komponenten können eine Bindung an die neue Version. Es ist auch möglich, eine Komponente aktualisieren, die als deklariert wird <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> durch die alte Version destruktiv zu ändern.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>Stabile Kompatibilität  
 Markieren eines Typs als <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> gibt an, dass der Typ über Versionen hinweg stabil bleiben soll. Allerdings kann es auch möglich, dass die Seite-an-Seite-Versionen von stabilen Typs in der gleichen Anwendungsdomäne vorhanden sein.  
  
 Stabile Typen verwalten einen hohen Binärkompatibilität Balken. Aus diesem Grund sollten Anbieter wichtige Änderungen in stabilen Typen. Die folgenden Arten von Änderungen sind zulässig:  
  
-   Private Instanzfelder hinzufügen oder Entfernen von Feldern aus einem Typ, solange dies nicht das Serialisierungsformat unterbricht.  
  
-   Eine nicht-serialisierbaren Typs in einen serialisierbaren Typ geändert. (Ein serialisierbarer Typ kann nicht jedoch zu einem nicht serialisierbaren Typ geändert.)  
  
-   Auslösen von neuen, mehr abgeleitete Ausnahmen aus einer Methode.  
  
-   Verbessern der Leistung einer Methode an.  
  
-   Ändern den Bereich der Rückgabewerte, solange die Änderung der Mehrheit der Clients nicht beeinträchtigt.  
  
-   Beheben von schwerwiegenden Fehler, wenn die geschäftliche Begründung hoch ist und die Anzahl der sich negativ auf betroffenen Clients niedrig ist.  
  
 Da neue Versionen des stabilen Komponenten nicht vorhandene Clients zu unterbrechen erwartet werden, ist in der Regel nur eine Version einer stabilen Komponente in einer Anwendungsdomäne erforderlich. Dies ist jedoch nicht zwingend erforderlich, da stabile Typen nicht als bekannte Exchange-Typen verwendet werden, denen alle Komponenten vereinbaren. Aus diesem Grund kann, wenn eine neue Version einer stabilen Komponente versehentlich eine Komponente unterbricht und andere Komponenten die neue Version erforderlich ist, es möglich, das Problem zu beheben, laden Sie sowohl die alten und neuen Komponente sein.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> bietet eine sicherere Versionskompatibilitätsgarantie als <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>. Es ist ein allgemeiner Standard für die Komponenten von Multi-Version.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> kann mit kombiniert werden <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>, das besagt, dass die Komponente Kompatibilität wird nicht unterbrochen, sondern wird getestet, wenn mehr als eine Version in einer bestimmten Anwendungsdomäne geladen wird.  
  
 Nachdem Sie einen Typ oder Methode als markiert ist <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, sie können ein Upgrade auf <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>. Allerdings kann nicht auf herabgestuft werden <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>Exchange-Typkompatibilität  
 Markieren eines Typs als <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> bietet eine sicherere Versionskompatibilitätsgarantie als <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, und auf dieser am stabilsten aller Typen angewendet werden soll. Diese Typen für Austausch zwischen unabhängig erstellten Komponenten über alle komponentenbegrenzungen hinweg rechtzeitig sowohl (beliebige Version der CLR) oder eine beliebige Version einer Komponente oder Anwendung und Speicherplatz (übergreifende Prozesse, die Cross-CLR in einem Prozess verwendet werden sollen Anwendungsdomänen hinweg in einem CLR). Wenn eine wichtige Änderung, die sich auf einen Exchange-Typ erfolgt, ist es unmöglich, das Problem zu beheben, indem Sie mehrere Versionen des Typs zu laden.  
  
 Exchange-Typen sollten geändert werden, nur, wenn ein Problem (z. B. eine schwerwiegende Sicherheitslücke) sehr schwerwiegend ist oder die Wahrscheinlichkeit zerbrechen sehr niedrig ist (d.h., wenn das Verhalten in der eine zufällige Weise, die Code nicht ist vorstellbar, dass eine Abhängigkeit berücksichtigt haben könnte bereits aufgehoben wurde). Sie können die folgenden Arten von Änderungen an einem Exchange-Typ vornehmen:  
  
-   Fügen Sie die Vererbung von neuen Definitionen für Schnittstellen hinzu.  
  
-   Fügen Sie neue private Methoden, die die Methoden der Definitionen von neu geerbte Schnittstelle implementieren.  
  
-   Fügen Sie neue statische Felder hinzu.  
  
-   Fügen Sie neue statische Methoden hinzu.  
  
-   Fügen Sie neue Instanzmethoden für nicht virtuelle hinzu.  
  
 Im folgenden gelten wichtige Änderungen und sind für primitive Typen nicht zulässig:  
  
-   Ändern die Serialisierungsformate. Versionstolerante Serialisierung ist erforderlich.  
  
-   Hinzufügen oder Entfernen von Feldern für private Instanz. Dies birgt das Serialisierungsformat des Typs ändern und das Umbrechen von Clientcode, der Reflektion verwendet.  
  
-   Ändern der Serialisierbarkeit eines Typs an. Ein nicht serialisierbarer Typ möglicherweise nicht serialisierbar gemacht werden und umgekehrt.  
  
-   Auslösen von anderen Ausnahmen aus einer Methode.  
  
-   Ändern den Wertebereich einer Methode zurückgeben, es sei denn, der Elementdefinition diese Möglichkeit auslöst und eindeutig angibt, wie Clients für unbekannte Werte behandeln soll.  
  
-   Beheben der meisten Fehler. Consumer des Typs werden auf das vorhandene Verhalten verlassen.  
  
 Wenn eine Komponente, des Typs oder Members ist mit markiert die <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> zu gewährleisten, es kann nicht geändert werden, entweder <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> oder <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
 Exchange-Typen werden in der Regel die grundlegenden Typen (z. B. <xref:System.Int32> und <xref:System.String> in .NET Framework) und Schnittstellen (z. B. <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, und <xref:System.IComparable%601>), der häufig in öffentlichen Schnittstellen verwendet werden.  
  
 Exchange-Typen können öffentlich verfügbar machen nur andere Typen, die auch mit gekennzeichnet sind <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> Kompatibilität. Darüber hinaus Austauschtypen können nicht auf das Verhalten von Windows-APIs abhängig sind, die so ändern Sie anfällig sind.  
  
## <a name="component-guarantees-a-summary"></a>Komponente Garantien: Eine Zusammenfassung der  
 Die folgende Tabelle gibt an, wie Eigenschaften und die Verwendung einer Komponente für die Kompatibilitätsgarantie auswirken.  
  
|Eigenschaften der Komponente|Exchange|Stable|Seite-an-Seite|Keiner|  
|-------------------------------|--------------|------------|--------------------|----------|  
|Kann in Schnittstellen zwischen Komponenten diese Version unabhängig verwendet.|J|N|N|N|  
|Kann (privat) von einer Assembly, die auf Versionen unabhängig verwendet.|J|J|J|N|  
|Kann mehrere Versionen einer einzelnen Anwendungsdomäne enthalten.|N|J|J|J|  
|Können Änderungen vornehmen|N|N|J|J|  
|Getestet, um die Stellen Sie sicher, dass mehrere Versionen der Assembly zusammen geladen werden können.|N|N|J|N|  
|Stelle können Änderungen vornehmen.|N|N|N|J|  
|Können äußerst sicher nicht unterbrechende Änderungen an Ort-Wartung vornehmen.|J|J|J|J|  
  
## <a name="applying-the-attribute"></a>Anwenden des Attributs  
 Sie können anwenden, die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> auf eine Assembly, einen Typ oder Typmember. Die Anwendung ist hierarchisch aufgebaut. D. h. in der Standardeinstellung die Garantie durch definiert die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> -Eigenschaft des Attributs auf Assemblyebene definiert alle Typen in der Assembly und alle Elemente in dieser Typen. Auf ähnliche Weise, wenn die Garantie für den Typ angewendet wird, gilt standardmäßig er auch auf jedes Element des Typs.  
  
 Diese geerbte Garantie kann überschrieben werden, durch Anwenden der <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> für einzelne Typen und Typmember. Allerdings können die Garantie nur gewährleistet, die dass die den Standardwert überschreiben, Schwächen; Sie können sie nicht stärken. Wenn eine Assembly mit markiert ist z. B. die <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> zu gewährleisten, die Typen und Member verfügen über keine Kompatibilitätsgarantie und eine beliebige andere Garantie, die auf Typen oder Member in der Assembly wird ignoriert.  
  
## <a name="testing-the-guarantee"></a>Testen die Garantie  
 Die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Eigenschaft gibt ein Mitglied der <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> -Enumeration, die mit markiert ist die <xref:System.FlagsAttribute> Attribut. Dies bedeutet, dass Sie das Flag getestet werden soll, die Sie interessiert sind, indem Sie maskieren potenziell unbekannte Flags. Z. B. das folgende Beispiel testet, ob ein Typ als gekennzeichnet ist <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 Das folgende Beispiel testet, ob ein Typ, als gekennzeichnet ist <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> oder <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 Im folgenden Beispiel wird getestet, ob einen Typ als markiert ist <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (d. h. weder <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> noch <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Versioning.ComponentGuaranteesAttribute : System.Runtime.Versioning.ComponentGuaranteesOptions -&gt; System.Runtime.Versioning.ComponentGuaranteesAttribute" Usage="new System.Runtime.Versioning.ComponentGuaranteesAttribute guarantees" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">Einer der Enumerationswerte, der die Ebene der Kompatibilität angibt, die über mehrere Versionen garantiert wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />-Klasse mit einem Wert, der den garantierten Kompatibilitätsgrad einer Bibliothek, eines Typs oder eines Members über mehrere Versionen angibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> Klasse instanziiert wird, den Wert des der `guarantees` Parameter zugewiesen wird die <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Guarantees : System.Runtime.Versioning.ComponentGuaranteesOptions" Usage="System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der den garantierten Kompatibilitätsgrad einer Bibliothek, eines Typs oder Typmembers angibt, die bzw. der mehrere Versionen umfasst.</summary>
        <value>Einer der Enumerationswerte, der die Ebene der Kompatibilität angibt, die über mehrere Versionen garantiert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Eigenschaft entspricht der `guarantees` Parameter der <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> Konstruktor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="RecognizerInfo" FullName="System.Speech.Recognition.RecognizerInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df73c6f009955e26d24e88856a1c32d4b3957e49" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86590033" /></Metadata><TypeSignature Language="C#" Value="public class RecognizerInfo : IDisposable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RecognizerInfo extends System.Object implements class System.IDisposable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizerInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizerInfo&#xA;Implements IDisposable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizerInfo : IDisposable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type RecognizerInfo = class&#xA;    interface IDisposable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C#" Value="public class RecognizerInfo" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RecognizerInfo extends System.Object" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizerInfo" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizerInfo" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="F#" Value="type RecognizerInfo = class" FrameworkAlternate="netframework-4.0" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Informationen zu einer <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können identifizierende Informationen für eine initialisierte Erkennungs-Engine mithilfe <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo%2A?displayProperty=nameWithType> von für ein- <xref:System.Speech.Recognition.SpeechRecognizer> Objekt oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A?displayProperty=nameWithType> für ein- <xref:System.Speech.Recognition.SpeechRecognitionEngine> Objekt abrufen.  
  
 Die Informationen, die in Instanzen von zurückgegeben werden, die <xref:System.Speech.Recognition.RecognizerInfo> von einem abgerufen <xref:System.Speech.Recognition.SpeechRecognizer> werden, werden durch die Einstellungen im **Spracheigenschaften** Element der **Systemsteuerung**bestimmt.  
  
 Sie können Instanzen von verwenden <xref:System.Speech.Recognition.RecognizerInfo> , um <xref:System.Speech.Recognition.SpeechRecognitionEngine> mithilfe des-Konstruktors eine bestimmte Konfiguration von zu erstellen <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%28System.Speech.Recognition.RecognizerInfo%29> .  
  
 Die statische-Methode <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> gibt eine Liste aller verfügbaren <xref:System.Speech.Recognition.SpeechRecognitionEngine> Konfigurationen als-Instanzen zurück <xref:System.Speech.Recognition.RecognizerInfo> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine angegebene <xref:System.Globalization.CultureInfo> und eine Bezeichnerzeichenfolge anhand der zulässigen <xref:System.Speech.Recognition.SpeechRecognitionEngine> Konfigurationen überprüft, die als Liste von-Objekten ausgedrückt werden <xref:System.Speech.Recognition.RecognizerInfo> .  
  
 Wenn die <xref:System.Globalization.CultureInfo> -und-Bezeichnerzeichenfolge gültig ist, wird im Beispiel eine neue Instanz von erstellt, <xref:System.Speech.Recognition.SpeechRecognitionEngine> die die- <xref:System.Speech.Recognition.RecognizerInfo> Instanz als Argument verwendet.  
  
```csharp  
  
private SpeechRecognitionEngine SelectRecognizer(CultureInfo requiredCulture, string requiredId)   
{  
  // Select based on a specific recognizer configuration  
  SpeechRecognitionEngine speechRecognitionEngine=null;  
  foreach (RecognizerInfo config in SpeechRecognitionEngine.InstalledRecognizers())   
  {  
    if (config.Culture.Equals(requiredCulture) && config.Id== requiredId)   
    {  
      speechRecognitionEngine = new SpeechRecognitionEngine(config);  
      break;  
    }  
  }  
  return speechRecognitionEngine;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  </Docs>
  <Members>
    <Member MemberName="AdditionalInfo">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; AdditionalInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; AdditionalInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerInfo.AdditionalInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AdditionalInfo As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ AdditionalInfo { System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AdditionalInfo : System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Speech.Recognition.RecognizerInfo.AdditionalInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft zusätzliche Informationen über eine <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz ab.</summary>
        <value>Gibt eine Instanz von <see cref="T:System.Collections.Generic.IDictionary`2" /> zurück, das Informationen über die Konfiguration eines <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekts enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Klick auf eine Schaltfläche implementiert, bei dem alle Informationen in einem- <xref:System.Speech.Recognition.RecognizerInfo> Objekt in einer angezeigt werden <xref:System.Windows.Forms.MessageBox> .  
  
 Die Schlüssel-Wert-Paare in der-Instanz, die <xref:System.Collections.Generic.IDictionary%602> von zurückgegeben wird, <xref:System.Speech.Recognition.RecognizerInfo.AdditionalInfo%2A> werden in einer Text Tabelle verkettet.  
  
```csharp  
private void recognizerInfoButton_Click(object sender, EventArgs e)   
{  
  RecognizerInfo info = _recognizer.RecognizerInfo;  
  string AudioFormats = "";  
  foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)   
  {  
    AudioFormats += String.Format("       {0}\n", fmt.EncodingFormat.ToString());  
  }  
  string AdditionalInfo = "";  
  foreach (string key in info.AdditionalInfo.Keys)   
  {  
    AdditionalInfo += String.Format("      {0}: {1}\n", key, info.AdditionalInfo[key]);  
  }  
  MessageBox.Show(String.Format(  
                     "Name:                 {0 } \n" +  
                     "Description:          {1} \n" +  
                     "SupportedAudioFormats:\n" +  
                     " {2} " +  
                     "Culture:              {3} \n" +  
                     "AdditionalInfo:       \n" +  
                     " {4}\n",  
                     info.Name.ToString(),  
                     info.Description.ToString(),  
                     AudioFormats,  
                     info.Culture.ToString(),  
                     AdditionalInfo));  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerInfo.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="System.Speech.Recognition.RecognizerInfo.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur ab, die von einem <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder einer <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz unterstützt wird.</summary>
        <value>Gibt Informationen über die Kultur zurück, die durch eine angegebene <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder eine <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz unterstützt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein- <xref:System.Globalization.CultureInfo> Objekt kann den Namen der Kultur, die zugeordnete Sprache, das Land/die Region, den verwendeten Kalender und das Formatieren von Datumsangaben und das Sortieren von Zeichen folgen enthalten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Schaltflächen Klick implementiert, der alle Informationen in einer- <xref:System.Speech.Recognition.RecognizerInfo> Instanz anzeigt. Im Beispiel wird die- <xref:System.Speech.Recognition.RecognizerInfo.Culture%2A> Eigenschaft verwendet, um die identifizierende Zeichenfolge für die <xref:System.Globalization.CultureInfo> von der Erkennungs-Engine-Konfiguration verwendete zu erhalten.  
  
```csharp  
private void recognizerInfoButton_Click(object sender, EventArgs e)   
{  
  RecognizerInfo info = _recognizer.RecognizerInfo;  
  string AudioFormats = "";  
  foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)   
  {  
    AudioFormats += String.Format("       {0}\n", fmt.EncodingFormat.ToString());  
  }  
  string AdditionalInfo = "";  
  foreach (string key in info.AdditionalInfo.Keys)   
  {  
    AdditionalInfo += String.Format("      {0}: {1}\n", key, info.AdditionalInfo[key]);  
  }  
  MessageBox.Show(String.Format(  
                     "Name:                 {0 }\n" +  
                     "Description:          {1} \n" +  
                     "SupportedAudioFormats:\n" +  
                     "{2} " +  
                     "Culture:              {3} \n" +  
                     "AdditionalInfo:       \n" +  
                     " {4}\n",  
                     info.Name.ToString(),  
                     info.Description.ToString(),  
                     AudioFormats,  
                     info.Culture.ToString(),  
                     AdditionalInfo));  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerInfo.Description" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Speech.Recognition.RecognizerInfo.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Beschreibung einer <see cref="T:System.Speech.Recognition.SpeechRecognizer" />-Instanz oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz ab.</summary>
        <value>Gibt eine <see langword="string" /> zurück, die die Konfiguration für eine bestimmte <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz beschreibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Klick auf eine Schaltfläche implementiert, der alle Informationen in einer- <xref:System.Speech.Recognition.RecognizerInfo> Instanz anzeigt. Im Beispiel wird die <xref:System.Speech.Recognition.RecognizerInfo.Description%2A> -Eigenschaft verwendet, um die Beschreibung einer Spracherkennungs-Engine-Konfiguration abzurufen, und dann in einem angezeigt <xref:System.Windows.Forms.MessageBox> .  
  
```csharp  
private void recognizerInfoButton_Click(object sender, EventArgs e)   
{  
  RecognizerInfo info = _recognizer.RecognizerInfo;  
  string AudioFormats = "";  
  foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)   
  {  
    AudioFormats += String.Format("       {0}\n", fmt.EncodingFormat.ToString());  
  }  
  string AdditionalInfo = "";  
  foreach (string key in info.AdditionalInfo.Keys)   
  {  
    AdditionalInfo += String.Format("      {0}: {1}\n", key, info.AdditionalInfo[key]);  
  }  
  MessageBox.Show(String.Format(  
                     "Name:                 {0 }\n" +  
                     "Description:          {1} \n" +  
                     "SupportedAudioFormats:\n" +  
                     "{2} " +  
                     "Culture:              {3} \n" +  
                     "AdditionalInfo:       \n" +  
                     " {4}\n",  
                     info.Name.ToString(),  
                     info.Description.ToString(),  
                     AudioFormats,  
                     info.Culture.ToString(),  
                     AdditionalInfo));  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizerInfo.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="recognizerInfo.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwirft das <c>RecognizerInfo</c>-Objekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.Speech.Recognition.RecognizerInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Bezeichner einer <see cref="T:System.Speech.Recognition.SpeechRecognizer" />-Instanz oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz ab.</summary>
        <value>Gibt den Bezeichner für eine bestimmte <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder eine <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der von der-Eigenschaft zurückgegebene Bezeichner <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> ist derselbe wie der Tokenname der Erkennungs-Engine in der Windows-Registrierung.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Schaltflächen Klick implementiert, der alle Informationen in einer- <xref:System.Speech.Recognition.RecognizerInfo> Instanz anzeigt. Im Beispiel wird die <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> -Eigenschaft verwendet, um die Bezeichnerzeichenfolge einer Erkennungs-Engine-Konfiguration abzurufen, und dann in einem angezeigt <xref:System.Windows.Forms.MessageBox> .  
  
```  
private void recognizerInfoButton_Click(object sender, EventArgs e)   
{  
  RecognizerInfo info = _recognizer.RecognizerInfo;  
  string AudioFormats = "";  
  foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)   
  {  
    AudioFormats += String.Format("       {0}\n",  fmt.EncodingFormat.ToString());  
  }  
  string AdditionalInfo = "";  
  foreach (string key in info.AdditionalInfo.Keys)   
  {  
    AdditionalInfo += String.Format("      {0}: {1}\n", key, info.AdditionalInfo[key]);  
  }  
  MessageBox.Show(String.Format(  
                           "Name:                 {0 }\n" +  
                           "Description:          {1} \n" +  
                           "SupportedAudioFormats:\n" +  
                           "{2} " +  
                           "Culture:              {3} \n" +  
                           "AdditionalInfo:       \n" +  
                           " {4}\n",  
                           info.Name.ToString(),  
                           info.Description.ToString(),  
                           AudioFormats,  
                           info.Culture.ToString(),  
                           AdditionalInfo));  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Speech.Recognition.RecognizerInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen einer <see cref="T:System.Speech.Recognition.SpeechRecognizer" />-Instanz oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz ab.</summary>
        <value>Gibt den Anzeigenamen für einen bestimmten <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder eine <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Schaltflächen Klick implementiert, der alle Informationen in einer- <xref:System.Speech.Recognition.RecognizerInfo> Instanz anzeigt. Im Beispiel wird die <xref:System.Speech.Recognition.RecognizerInfo.Name%2A> -Eigenschaft verwendet, um den anzeigen Amen einer Erkennungs-Engine-Konfiguration zu erhalten, und dann in einem angezeigt <xref:System.Windows.Forms.MessageBox> .  
  
```  
private void recognizerInfoButton_Click(object sender, EventArgs e)   
{  
  RecognizerInfo info = _recognizer.RecognizerInfo;  
  string AudioFormats = "";  
  foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)   
  {  
    AudioFormats += String.Format("       {0}\n", fmt.EncodingFormat.ToString());  
  }  
  string AdditionalInfo = "";  
  foreach (string key in info.AdditionalInfo.Keys)   
  {  
    AdditionalInfo += String.Format("      {0}: {1}\n", key, info.AdditionalInfo[key]);  
  }  
  MessageBox.Show(String.Format(  
                           "Name:                 {0 }\n" +  
                           "Description:          {1} \n" +  
                           "SupportedAudioFormats:\n" +  
                           "{2} " +  
                           "Culture:              {3} \n" +  
                           "AdditionalInfo:       \n" +  
                           " {4}\n",  
                           info.Name.ToString(),  
                           info.Description.ToString(),  
                           AudioFormats,  
                           info.Culture.ToString(),  
                           AdditionalInfo));  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SupportedAudioFormats">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.AudioFormat.SpeechAudioFormatInfo&gt; SupportedAudioFormats { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.AudioFormat.SpeechAudioFormatInfo&gt; SupportedAudioFormats" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerInfo.SupportedAudioFormats" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedAudioFormats As ReadOnlyCollection(Of SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::AudioFormat::SpeechAudioFormatInfo ^&gt; ^ SupportedAudioFormats { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::AudioFormat::SpeechAudioFormatInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedAudioFormats : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.AudioFormat.SpeechAudioFormatInfo&gt;" Usage="System.Speech.Recognition.RecognizerInfo.SupportedAudioFormats" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.AudioFormat.SpeechAudioFormatInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Audioformate ab, die von einer <see cref="T:System.Speech.Recognition.SpeechRecognizer" />- oder <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz unterstützt werden.</summary>
        <value>Gibt eine Liste der Audioformate zurück, die von einem <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> oder einer <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz unterstützt werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Schaltflächen Klick implementiert, der alle Informationen in einer- <xref:System.Speech.Recognition.RecognizerInfo> Instanz anzeigt. Im Beispiel wird die <xref:System.Speech.Recognition.RecognizerInfo.SupportedAudioFormats%2A> -Eigenschaft verwendet, um die von einer Erkennungs-Engine-Konfiguration unterstützten Codierungs Formate abzurufen, und dann in einem angezeigt <xref:System.Windows.Forms.MessageBox> .  
  
```  
private void recognizerInfoButton_Click(object sender, EventArgs e)   
{  
  RecognizerInfo info = _recognizer.RecognizerInfo;  
  string AudioFormats = "";  
  foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)   
  {  
    AudioFormats += String.Format("       {0}\n", fmt.EncodingFormat.ToString());  
  }  
  string AdditionalInfo = "";  
  foreach (string key in info.AdditionalInfo.Keys)   
  {  
    AdditionalInfo += String.Format("      {0}: {1}\n", key, info.AdditionalInfo[key]);  
  }  
  MessageBox.Show(String.Format(  
                           "Name:                 {0 }\n" +  
                           "Description:          {1} \n" +  
                           "SupportedAudioFormats:\n" +  
                           "{2} " +  
                           "Culture:              {3} \n" +  
                           "AdditionalInfo:       \n" +  
                           " {4}\n",  
                           info.Name.ToString(),  
                           info.Description.ToString(),  
                           AudioFormats,  
                           info.Culture.ToString(),  
                           AdditionalInfo));  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Docs>
    </Member>
  </Members>
</Type>

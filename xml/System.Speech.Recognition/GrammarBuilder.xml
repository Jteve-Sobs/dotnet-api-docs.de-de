<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="445ae1620c692c34154268c06fe2f355387357ff" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52231797" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <TypeSignature Language="F#" Value="type GrammarBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Mechanismus für das programmgesteuerte Erstellen von Einschränkungen für eine Spracherkennungsgrammatik bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spracherkennungsgrammatiken werden häufig erstellt, in das XML-Format von definiert die [Speech Recognition Grammar Specification (SRGS), Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761). Wenn Sie mit SRGS, aber möchten Sie Grammatiken programmgesteuert generieren vertraut sind, können Sie mithilfe der <xref:System.Speech.Recognition.SrgsGrammar> , deren Mitglieder entsprechen die Elemente und Attribute definiert werden, indem SRGS-Namespace. Wenn Sie mit der SRGS nicht vertraut sind oder Sie möchten einen einfachen, programmgesteuerten Ansatz zur Erstellung von Grammatiken, mit denen Sie viele allgemeine Szenarien effizient ausführen können. Sie können die <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Klassen.  
  
 Verwendung <xref:System.Speech.Recognition.GrammarBuilder> Objekte zum Erstellen einer hierarchischen Struktur besteht aus <xref:System.Speech.Recognition.Choices> Objekte, die alternative Ausdrücken zu erhalten, zusammen mit der Präambel und nach der Amble-Ausdrücken in jedem Knoten, und das Seeding mit semantischen Werte, die Bedeutungen zu vermitteln enthalten zurück an die die Anwendung.  
  
 Verwenden einer <xref:System.Speech.Recognition.GrammarBuilder> zum Erstellen einer <xref:System.Speech.Recognition.Grammar> Objekt, das die folgenden Schritte aus.  
  
1.  Erstellen eines <xref:System.Speech.Recognition.GrammarBuilder>-Objekts  
  
2.  Fügen Sie Einschränkungen, die die <xref:System.Speech.Recognition.GrammarBuilder>, z. B. <xref:System.String> Objekte <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, und andere <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die die Einschränkungen für die Grammatik zu definieren.  
  
3.  Gehen Sie die <xref:System.Speech.Recognition.Grammar.%23ctor%2A> von Konstruktoren zum Erstellen einer <xref:System.Speech.Recognition.Grammar> Objekt aus das abgeschlossene <xref:System.Speech.Recognition.GrammarBuilder> Grammatik.  
  
 Erstellen mit <xref:System.Speech.Recognition.GrammarBuilder> eignet sich am besten für Grammatiken, die eine einzelne Regel, Listen oder vielleicht Listen Listen enthält. Um programmgesteuert zu Grammatiken erstellen, die über mehrere Regeln, oder verwenden müssen, um eine interne Regel verweisen, verwenden Sie die Klassen der <xref:System.Speech.Recognition.SrgsGrammar> Namespace.  
  
 Instanzen von <xref:System.Speech.Recognition.GrammarBuilder> können auch abgerufen werden, von impliziten Konvertierungen von bestimmte andere Klassen oder durch Kombinieren von einem <xref:System.Speech.Recognition.GrammarBuilder> mit einem zweiten Objekt an, die Einschränkungen für eine Grammatik enthält... Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren und die <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> Methoden.  
  
 Zum Hinzufügen von Regeln zu einer vorhandenen <xref:System.Speech.Recognition.GrammarBuilder>, verwenden Sie die <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, und <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> Methoden.  
  
> [!IMPORTANT]
>  Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn eine spracherkennungsgrammatik zu verwenden, die enthält doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt den Wert des gleichen Elements semantische ändern könnten. 
  
 Debuggen, die <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> Eigenschaft gibt den aktuellen Status der <xref:System.Speech.Recognition.GrammarBuilder> als Zeichenfolge.  
  
 Weitere Informationen zum Erstellen und Verwenden von spracherkennungsgrammatiken finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und ["grammarbuilder" Grammatiken erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte an eine Grammatik zu erstellen, die eines der zwei Ausdrücke, erkennen kann "Stellen Hintergrund *ColorChoice*" oder "Festlegen des Hintergrunds auf *ColorChoice*".  
  
 Im Beispiel wird eine <xref:System.Speech.Recognition.Choices> Objekt zum Erstellen einer Liste der zulässigen Werte für *ColorChoice* aus einem Array von <xref:System.String> Objekte. Ein <xref:System.Speech.Recognition.Choices> Objekt ist analog zu den `one-of` Element in der SRGS-Spezifikation und enthält einen Satz von alternativen Ausdrücken zu erhalten, von denen erkannt werden können, während gesprochen. Im Beispiel verwendet auch eine <xref:System.Speech.Recognition.Choices> Objekt, das ein Array mit zwei Gruppe <xref:System.Speech.Recognition.GrammarBuilder> Objekte in ein paar andere Ausdrücke, die die resultierenden Grammatik erkennen kann. Alternative Worte oder Ausdrücke sind eine Komponente von Grammatiken für die meisten und <xref:System.Speech.Recognition.Choices> Objekt bietet folgende Funktionen für Grammatiken mit erstellt <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Im Beispiel wird schließlich erstellt eine <xref:System.Speech.Recognition.Grammar> -Objekt aus einem <xref:System.Speech.Recognition.GrammarBuilder> aus erstellt eine <xref:System.Speech.Recognition.Choices> Objekt.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instanzen dieser Klasse können auch abgerufen werden, oder durch Kombinieren von impliziten Konvertierungen von anderen Klassen eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt mit der ein zweites Objekt, das von einem neuen <xref:System.Speech.Recognition.GrammarBuilder>. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Methoden.  
  
 Zum Hinzufügen von Einschränkungen zu einer vorhandenen <xref:System.Speech.Recognition.GrammarBuilder>, verwenden Sie die <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, und <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> Methoden, und die <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operator.  
  
> [!IMPORTANT]
>  Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn eine spracherkennungsgrammatik zu verwenden, die enthält doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt den Wert des gleichen Elements semantische ändern könnten.
  
 Weitere Informationen zum Erstellen und Verwenden von spracherkennungsgrammatiken finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und ["grammarbuilder" Grammatiken erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue leere Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Hinzufügen von Regeln zu einer vorhandenen <xref:System.Speech.Recognition.GrammarBuilder> -Objekts die <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, und <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> Methoden, und die <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operator.  
  
> [!IMPORTANT]
>  Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn eine spracherkennungsgrammatik zu verwenden, die enthält doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt den Wert des gleichen Elements semantische ändern könnten.
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte an eine Grammatik zu erstellen, die eines der zwei Ausdrücke, erkennen kann "Stellen Hintergrund *ColorChoice*" oder "Festlegen des Hintergrunds auf *ColorChoice*".  
  
 Im Beispiel wird eine <xref:System.Speech.Recognition.Choices> Objekt zum Erstellen einer Liste der zulässigen Werte für *ColorChoice* aus einem Array von <xref:System.String> Objekte. Ein <xref:System.Speech.Recognition.Choices> Objekt ist analog zu den `one-of` Element in der SRGS-Spezifikation und enthält einen Satz von alternativen Ausdrücken zu erhalten, von denen erkannt werden kann, während gesprochen. Im Beispiel verwendet auch eine <xref:System.Speech.Recognition.Choices> Objekt, das ein Array mit zwei Gruppe <xref:System.Speech.Recognition.GrammarBuilder> Objekte in ein paar andere Ausdrücke, die die resultierenden Grammatik erkennen kann. Alternative Worte oder Ausdrücke sind eine Komponente von Grammatiken für die meisten und <xref:System.Speech.Recognition.Choices> Objekt bietet folgende Funktionen für Grammatiken mit erstellt <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Im Beispiel wird schließlich erstellt eine <xref:System.Speech.Recognition.Grammar> -Objekt aus einem <xref:System.Speech.Recognition.GrammarBuilder> aus erstellt eine <xref:System.Speech.Recognition.Choices> Objekt.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">Der Satz von Alternativen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse aus einer Gruppe von Alternativen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zum Erstellen einer spracherkennungsgrammatik, die alternativen enthält, finden Sie unter [mithilfe von Optionen zum Erstellen einer "grammarbuilder" Grammatik](https://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte an eine Grammatik zu erstellen, die eines der zwei Ausdrücke, erkennen kann "Stellen Hintergrund *ColorChoice*" oder "Festlegen des Hintergrunds auf *ColorChoice*".  
  
 Im Beispiel wird eine <xref:System.Speech.Recognition.Choices> Objekt zum Erstellen einer Liste der zulässigen Werte für *ColorChoice* aus einem Array von <xref:System.String> Objekte. Ein <xref:System.Speech.Recognition.Choices> Objekt ist analog zu den `one-of` Element in der SRGS-Spezifikation und enthält einen Satz von alternativen Ausdrücken zu erhalten, von denen erkannt werden können, während gesprochen. Im Beispiel verwendet auch eine <xref:System.Speech.Recognition.Choices> Objekt, das ein Array mit zwei Gruppe <xref:System.Speech.Recognition.GrammarBuilder> Objekte in ein paar andere Ausdrücke, die die resultierenden Grammatik erkennen kann. Alternative Worte oder Ausdrücke sind eine Komponente von Grammatiken für die meisten und <xref:System.Speech.Recognition.Choices> Objekt bietet folgende Funktionen für Grammatiken mit erstellt <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Im Beispiel wird schließlich erstellt eine <xref:System.Speech.Recognition.Grammar> -Objekt aus einem <xref:System.Speech.Recognition.GrammarBuilder> aus erstellt eine <xref:System.Speech.Recognition.Choices> Objekt.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">Der semantische Schlüssel.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse aus einem semantischen Schlüssel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Erstellung einer <xref:System.Speech.Recognition.GrammarBuilder> -Instanz aus einer <xref:System.Speech.Recognition.SemanticResultValue> -Objekts können Sie semantische Informationen hinzufügen, der Grammatik, die in das Erkennungsergebnis zurückgegeben werden können. Sie erreichen die semantische Informationen in das Ergebnis mithilfe der <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Eigenschaft <xref:System.Speech.Recognition.RecognizedPhrase>, steht in der der Handler für die `SpeechRecognized` Ereignis. Wenn die <xref:System.Speech.Recognition.GrammarBuilder> definiert eine <xref:System.Speech.Recognition.SemanticResultKey>, dies kann verwendet werden, um die semantischen Informationen in einem Erkennungsergebnis abzurufen, die mit dem Schlüssel zugeordnet ist. Siehe das Beispiel für <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, und auch <xref:System.Speech.Recognition.SemanticResultValue> und <xref:System.Speech.Recognition.SemanticResultKey>.  
  
> [!IMPORTANT]
>  Beim Erstellen <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> -Eigenschaft einer <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. 
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *ColorChoice*" und "Festlegen des Hintergrunds auf *ColorChoice*", wobei  *ColorChoice* aus einem Satz von Farben aktiviert ist. Die Grammatik ermöglicht es einem Benutzer, die verschiedene Farbe Namen sprechen und semantischen Informationen zu der erkannten Farbname an die Anwendung zurückgegeben.  
  
 Im Beispiel wird eine einzelne <xref:System.Speech.Recognition.SemanticResultKey> mit dem Sie abrufen können die <xref:System.Speech.Recognition.SemanticValue> , mit der Farbe, die vom Benutzer gesprochen verknüpft ist. Wenn die Eingabe der Formulierung enthält z. B. "Set-Hintergrund in Rot", das Erkennungsergebnis enthält den semantischen Wert von "#ff0000", die Sie abrufen können, verwenden einen Handler für die `SpeechRecognized` Ereignis.  
  
 Im Beispiel wird <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die Einschränkungen zu erstellen, die alle in den letzten enthalten sind <xref:System.Speech.Recognition.GrammarBuilder> Objekt `bothPhrases`. Zum Schluss das Beispiel erstellt eine <xref:System.Speech.Recognition.Grammar> Objekt aus das abgeschlossene <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">Der semantische Wert oder das Name/Wert-Paar.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse aus einem semantischen Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Erstellung einer <xref:System.Speech.Recognition.GrammarBuilder> -Instanz aus einer <xref:System.Speech.Recognition.SemanticResultValue> -Objekts können Sie semantische Informationen hinzufügen, der Grammatik, die in das Erkennungsergebnis zurückgegeben werden können. Sie erreichen die semantische Informationen in das Ergebnis mithilfe der <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Eigenschaft <xref:System.Speech.Recognition.RecognizedPhrase>, steht in der der Handler für die `SpeechRecognized` Ereignis. Wenn die <xref:System.Speech.Recognition.GrammarBuilder> definiert eine <xref:System.Speech.Recognition.SemanticResultKey>, dies kann verwendet werden, um die semantischen Informationen in einem Erkennungsergebnis abzurufen, die mit dem Schlüssel zugeordnet ist. Siehe das Beispiel für <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, und auch <xref:System.Speech.Recognition.SemanticResultValue> und <xref:System.Speech.Recognition.SemanticResultKey>.  
  
> [!IMPORTANT]
>  Beim Erstellen <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> -Eigenschaft einer <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. 
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *ColorChoice*" und "Festlegen des Hintergrunds auf *ColorChoice*", wobei  *ColorChoice* aus einem Satz von Farben aktiviert ist. Die Grammatik ermöglicht es einem Benutzer, die verschiedene Farbe Namen sprechen und semantischen Informationen zu der erkannten Farbname an die Anwendung zurückgegeben.  
  
 Im Beispiel wird eine einzelne <xref:System.Speech.Recognition.SemanticResultKey> mit dem Sie abrufen können die <xref:System.Speech.Recognition.SemanticValue> , mit der Farbe, die vom Benutzer gesprochen verknüpft ist. Wenn die Eingabe der Formulierung enthält z. B. "Set-Hintergrund in Rot", das Erkennungsergebnis enthält den semantischen Wert von "#ff0000", die Sie abrufen können, verwenden einen Handler für die `SpeechRecognized` Ereignis.  
  
 Im Beispiel wird <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die Einschränkungen zu erstellen, die alle in den letzten enthalten sind <xref:System.Speech.Recognition.GrammarBuilder> Objekt `bothPhrases`. Zum Schluss das Beispiel erstellt eine <xref:System.Speech.Recognition.Grammar> Objekt aus das abgeschlossene <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder phrase" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">Die Wortsequenz.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse aus einer Sequenz von Wörtern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ausdruck stellt einen genaue gesprochenen Ausdruck, den die spracherkennungsgrammatik erkennen können. Weitere Informationen zum Erstellen einer spracherkennungsgrammatik, die Zeichenfolgen enthält, finden Sie unter [Verwendung von Zeichenfolgen zum Erstellen einer "grammarbuilder" Grammatik](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte an eine Grammatik zu erstellen, die eines der zwei Ausdrücke, erkennen kann "Stellen Hintergrund *ColorChoice*" oder "Festlegen des Hintergrunds auf *ColorChoice*".  
  
 Nach dem Erstellen einer Liste der zulässigen Werte für *ColorChoice* mithilfe einer <xref:System.Speech.Recognition.Choices> Objekt, das Beispiel initialisiert zwei <xref:System.Speech.Recognition.GrammarBuilder> Objekte `makePhrase` und `setPhrase`, mit einer Zeichenfolge als Argument.  
  
 Im Beispiel wird schließlich erstellt eine <xref:System.Speech.Recognition.Grammar> -Objekt aus einem <xref:System.Speech.Recognition.Choices> Objekt umgewandelt wird, um eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * System.Speech.Recognition.SubsetMatchingMode -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, subsetMatchingCriteria)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">Die Wortsequenz.</param>
        <param name="subsetMatchingCriteria">Der entsprechende Modus, den die Spracherkennungsgrammatik verwendet, um den Ausdruck zu erkennen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse für eine Teilmenge einer Sequenz von Wörtern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `phrase` Parameter darstellt, den Ausdruck, den die spracherkennungsgrammatik erkennen können. Die `subsetMatchingMode` Parameter gibt an, eine Teilmenge des Ausdrucks, der für eine erfolgreiche Erkennung des gesamten Ausdrucks gesprochen werden kann. Sie können dies um eine Grammatik mit einer Liste von Einträgen zu erstellen, die lange Namen haben, ohne dass Benutzer, einen gesamten Namen entsprechend ein Element zu sprechen.  
  
 Weitere Informationen zu den entsprechenden Modi finden Sie unter <xref:System.Speech.Recognition.SubsetMatchingMode>. Weitere Informationen zum Erstellen einer spracherkennungsgrammatik, die Zeichenfolgen enthält, finden Sie unter [Verwendung von Zeichenfolgen zum Erstellen einer "grammarbuilder" Grammatik](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für jede <xref:System.Speech.Recognition.SubsetMatchingMode> Wert und eine Grammatik für die Wahl zwischen den entsprechenden Modus Grammatiken. Wenn der Wert des `phrase` ist "ein zwei drei vier fünf sechs sieben", und klicken Sie dann die Grammatik Untersequenz die Eingabe erkennt "zwei drei vier", aber nicht die Eingabe "eine drei fünf". Die Grammatik sortiert Teilmenge erkennt jedoch beide dieser Eingaben.  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.GrammarBuilder * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (builder, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">Das wiederholte Element.</param>
        <param name="minRepeat">Die minimale Wiederholungsrate für eine Übereinstimmung der Eingabe mit dem durch <paramref name="builder" /> definierten Element, nach der eine Übereinstimmung anerkannt wird.</param>
        <param name="maxRepeat">Die maximale Wiederholungsrate für eine Übereinstimmung der Eingabe mit dem durch <paramref name="builder" /> definierten Element, nach der eine Übereinstimmung anerkannt wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse aus einem wiederholten Element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert des `minRepeat` ist 0, und klicken Sie dann die neue <xref:System.Speech.Recognition.GrammarBuilder> ein optionales Element darstellt.  
  
 Der Wert des `minRepeat` muss größer als oder gleich 0 und kleiner oder gleich dem Wert des `maxRepeat`.  
  
> [!IMPORTANT]
>  Beim Angeben von Wiederholungen für <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelten semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt die ändernkönntenerstellen<xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. 
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für das bestellen einer Pizza: je. Es beginnt mit einem Ausdruck optional ist, öffnen ein, gefolgt von einem bis vier Belags, und schließt mit dem Wort "Pizza".  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">Die wiederholte Wortsequenz.</param>
        <param name="minRepeat">Die minimale Wiederholungsrate für eine Übereinstimmung der Eingabe mit der Phrase, nach der eine Übereinstimmung anerkannt wird.</param>
        <param name="maxRepeat">Die maximale Wiederholungsrate für eine Übereinstimmung der Eingabe mit der Phrase, nach der eine Übereinstimmung anerkannt wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Klasse aus der Sequenz von Wörtern in einem <see cref="T:System.String" /> und gibt an, wie oft der <see cref="T:System.String" /> wiederholt werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert des `minRepeat` ist 0, und klicken Sie dann die neue <xref:System.Speech.Recognition.GrammarBuilder> ein optionales Element darstellt.  
  
 Der Wert des `minRepeat` muss größer als oder gleich 0 und kleiner oder gleich dem Wert des `maxRepeat`. Weitere Informationen zum Erstellen einer spracherkennungsgrammatik, die Zeichenfolgen enthält, finden Sie unter [Verwendung von Zeichenfolgen zum Erstellen einer "grammarbuilder" Grammatik](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für das bestellen einer Pizza: je. Es beginnt mit einem Ausdruck optional ist, öffnen ein, gefolgt von einem bis vier Belags, und schließt mit dem Wort "Pizza".  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt ein neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der eine Sequenz aus zwei Grammatikelementen enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die statische <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> Methoden bieten einen anderen Mechanismus, mit dem verschiedene Typen zum Erstellen unterschiedlicher Technologien können kombiniert werden, und Dank der Flexibilität bei der Grammatiken <xref:System.Speech.Recognition.GrammarBuilder>. Diese Methoden entsprechen, an die statische <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> -Methoden, die auch für definiert sind die <xref:System.Speech.Recognition.GrammarBuilder> Klasse. Die Reihenfolge der Parameter bestimmt die Reihenfolge der Elemente in der neuen <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Ein <xref:System.Speech.Recognition.GrammarBuilder> kann auch von abgerufen werden <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, und [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733) Objekte. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren.  
  
> [!IMPORTANT]
>  Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn eine spracherkennungsgrammatik zu verwenden, die enthält doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt den Wert des gleichen Elements semantische ändern könnten. 
  
 Weitere Informationen zum Erstellen und Verwenden von spracherkennungsgrammatiken finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und ["grammarbuilder" Grammatiken erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (choices, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">Das erste Grammatikelement, das einen Satz von Alternativen darstellt.</param>
        <param name="builder">Das zweite Grammatikelement.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der ein <see cref="T:System.Speech.Recognition.Choices" />-Objekt gefolgt von einem <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt enthält.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="choices" />-Elements gefolgt vom <paramref name="builder" />-Element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die implizite Konvertierungen von den folgenden Klassen:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter.  
  
 Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren.  
  
> [!IMPORTANT]
>  Wenn Sie kombinieren <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. Weitere Informationen zum Erstellen einer spracherkennungsgrammatik, die semantischen Informationen enthält, finden Sie unter [Semantik hinzufügen, mit einer Grammatik "grammarbuilder"](https://msdn.microsoft.com/library/hh361581.aspx).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">Das erste Grammatikelement.</param>
        <param name="choices">Das zweite Grammatikelement, das einen Satz von Alternativen darstellt.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt gefolgt von einem <see cref="T:System.Speech.Recognition.Choices" />-Objekt enthält.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="builder" />-Elements gefolgt vom <paramref name="choices" />-Element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die implizite Konvertierungen von den folgenden Klassen:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter.  
  
 Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren.  
  
> [!IMPORTANT]
>  Wenn Sie kombinieren <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen mit anderen grammatikelementen, stellen Sie sicher, Sie vermeiden, doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente erstellen, wiederholt ändern konnte die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. 
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *Farbe*" und "Festlegen des Hintergrunds auf *Farbe*", wobei *Farbe* wird aus einem Satz von Farben ausgewählt werden. Verschiedene Typen werden verwendet, um die endgültige Grammatik, z. B. erstellen [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte. Die explizite Umwandlungsoperatoren in den Aufrufen der <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> Methoden sind optional.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder1, builder2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">Das erste Grammatikelement.</param>
        <param name="builder2">Das zweite Grammatikelement.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der eine Sequenz aus zwei <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekten enthält.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="builder1" />-Elements gefolgt vom <paramref name="builder2" />-Element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die implizite Konvertierungen von den folgenden Klassen:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder1` oder `builder2` Parameter.  
  
 Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren.  
  
> [!IMPORTANT]
>  Wenn Sie kombinieren <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen mit anderen grammatikelementen, stellen Sie sicher, Sie vermeiden, doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente erstellen, wiederholt ändern konnte die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. 
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *Farbe*" und "Festlegen des Hintergrunds auf *Farbe*", wobei *Farbe* wird aus einem Satz von Farben ausgewählt werden. Verschiedene Typen werden verwendet, um die endgültige Grammatik, z. B. erstellen [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte. Die explizite Umwandlungsoperatoren in den Aufrufen der <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> Methoden sind optional.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, phrase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">Das erste Grammatikelement.</param>
        <param name="phrase">Das zweite Grammatikelement, das eine Sequenz von Wörtern darstellt.</param>
        <summary>Erstellt ein neues <see cref="T:System.Speech.Recognition.GrammarBuilder" />, das ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt gefolgt von einem Begriff enthält.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="builder" />-Elements gefolgt vom <paramref name="phrase" />-Element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die implizite Konvertierungen von den folgenden Klassen:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter.  
  
 Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *Farbe*" und "Festlegen des Hintergrunds auf *Farbe*", wobei *Farbe* wird aus einem Satz von Farben ausgewählt werden. Verschiedene Typen werden verwendet, um die endgültige Grammatik, z. B. erstellen [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte. Die explizite Umwandlungsoperatoren in den Aufrufen der <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> Methoden sind optional.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (phrase, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">Das erste Grammatikelement, das eine Sequenz von Wörtern darstellt.</param>
        <param name="builder">Das zweite Grammatikelement.</param>
        <summary>Erstellt ein neues <see cref="T:System.Speech.Recognition.GrammarBuilder" />, das einen Begriff gefolgt von einem <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt enthält.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="phrase" />-Elements gefolgt vom <paramref name="builder" />-Element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die implizite Konvertierungen von den folgenden Klassen:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter.  
  
 Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> und <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> Operatoren.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *Farbe*" und "Festlegen des Hintergrunds auf *Farbe*", wobei *Farbe* wird aus einem Satz von Farben ausgewählt werden. Verschiedene Typen werden verwendet, um die endgültige Grammatik, z. B. erstellen [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte. Die explizite Umwandlungsoperatoren in den Aufrufen der <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> Methoden sind optional.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine Diktatgrammatik an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methoden zum Anfügen von grammatikelementen an eine vorhandene <xref:System.Speech.Recognition.GrammarBuilder>. Grammatikelementen erstellen, können Sie sie an der vorhandenen Generator, der die Einschränkungen für eine spracherkennungsgrammatik progressiv entwickeln anfügen. Jedes Element wird am Ende der aktuellen Sequenz von Elementen hinzugefügt.  
  
 Diese Methode verfügt über Überladungen, die zum Anfügen von <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, und <xref:System.Speech.Recognition.SemanticResultValue> Objekte.  
  
> [!IMPORTANT]
>  Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn eine spracherkennungsgrammatik zu verwenden, die enthält doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt den Wert des gleichen Elements semantische ändern könnten. 
  
 Weitere Informationen zum Erstellen und Verwenden von spracherkennungsgrammatiken finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und ["grammarbuilder" Grammatiken erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.Choices -&gt; unit" Usage="grammarBuilder.Append alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">Der Satz von Alternativen, die angefügt werden sollen.</param>
        <summary>Fügt einen Satz von Alternativen zur aktuellen Sequenz von Grammatikelementen an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `alternateChoices` wird am Ende der aktuellen Sequenz von Elementen hinzugefügt werden.  
  
> [!IMPORTANT]
>  Wenn Sie anfügen <xref:System.Speech.Recognition.Choices> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen zu eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt, stellen Sie sicher, dass Sie keine doppelten semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt Ändern der <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für formulierungen wie z. B. "Call James bei der Arbeit" und "Aufruf Anne auf ihr Handy,", wobei das Wort "Phone" optional ist. Das Beispiel zeigt die Verwendung von der <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> Methode.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder -&gt; unit" Usage="grammarBuilder.Append builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Das anzufügende Grammatikelement.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine Diktatgrammatik an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `builder` wird am Ende der aktuellen Sequenz von grammatikelementen hinzugefügt werden.  
  
> [!NOTE]
>  Wenn Sie anfügen <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen zu eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt, stellen Sie sicher, dass Sie keine doppelten semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt Ändern der <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten. 
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für formulierungen wie z. B. "Call James bei der Arbeit" und "Aufruf Anne auf ihr Handy,", wobei das Wort "Phone" optional ist. <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte werden verwendet, um die Grammatik zu erstellen. Das Beispiel zeigt die Verwendung von der <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> Methode.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultKey -&gt; unit" Usage="grammarBuilder.Append key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">Der semantische Schlüssel, der angefügt werden soll.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen einen semantischen Schlüssel an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `key` wird am Ende der aktuellen Sequenz von Elementen hinzugefügt werden.  
  
> [!IMPORTANT]
>  Sie anfügen, wenn <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> auf Instanzen einer <xref:System.Speech.Recognition.GrammarBuilder> Objekt, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft ein <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
   
  
## Examples  
 Im folgende Beispiel ist Teil einer Konsolenanwendung zum Ursprung und Ziel Städten für einen Flug auswählen. Die Anwendung erkennt Ausdrücke an, wie z. B. "Ich möchte über Miami nach Chicago fliegen." Der Handler für die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis verwendet die <xref:System.Speech.Recognition.SemanticResultKey> zum Extrahieren der flughafencode, angegeben der <xref:System.Speech.Recognition.SemanticResultValue> für die Orte Ursprung und Ziel.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultValue -&gt; unit" Usage="grammarBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">Der anzufügende semantische Wert.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen einen semantischen Schlüssel an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` wird am Ende der aktuellen Sequenz von Elementen hinzugefügt werden.  
  
> [!IMPORTANT]
>  Sie anfügen, wenn <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> auf Instanzen einer <xref:System.Speech.Recognition.GrammarBuilder> Objekt, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft ein <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
   
  
## Examples  
 Im folgende Beispiel ist Teil einer Konsolenanwendung zum Ursprung und Ziel Städten für einen Flug auswählen. Die Anwendung erkennt Ausdrücke an, wie z. B. "Ich möchte über Miami nach Chicago fliegen." Der Handler für die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis verwendet die <xref:System.Speech.Recognition.SemanticResultKey> zum Extrahieren der flughafencode, angegeben der <xref:System.Speech.Recognition.SemanticResultValue> für die Orte Ursprung und Ziel.  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="member this.Append : string -&gt; unit" Usage="grammarBuilder.Append phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">Die anzufügende Wortsequenz.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen einen Ausdruck an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `phrase` wird am Ende der aktuellen Sequenz von Elementen hinzugefügt werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="member this.Append : string * System.Speech.Recognition.SubsetMatchingMode -&gt; unit" Usage="grammarBuilder.Append (phrase, subsetMatchingCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">Die anzufügende Wortsequenz.</param>
        <param name="subsetMatchingCriteria">Der entsprechende Modus, den die Grammatik verwendet, um den Ausdruck zu erkennen.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen ein Element für eine Teilmenge eines Ausdrucks an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Element der Teilmenge wird am Ende der aktuellen Sequenz von Elementen hinzugefügt. Weitere Informationen zum Erstellen einer spracherkennungsgrammatik Verwendung von Zeichenfolgen finden Sie unter [Verwendung von Zeichenfolgen zum Erstellen einer "grammarbuilder" Grammatik](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
 Ausführliche Informationen zur Verwendung der übereinstimmenden Modi Teilmenge finden Sie unter <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für jede <xref:System.Speech.Recognition.SubsetMatchingMode> Wert. Z. B. die generierten Grammatik `OrderedSubset` erkennt die Ausdrücke, "drei vier fünf" und "eine drei fünf", und die Grammatik `Subsequence` erkennt den Ausdruck "drei vier fünf", aber nicht den Ausdruck, "eine drei fünf".  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder * int * int -&gt; unit" Usage="grammarBuilder.Append (builder, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">Das wiederholte anzufügende Grammatikelement.</param>
        <param name="minRepeat">Die minimale Wiederholungsrate für eine Übereinstimmung der Eingabe mit dem durch <paramref name="builder" /> definierten Element, nach der eine Übereinstimmung anerkannt wird.</param>
        <param name="maxRepeat">Die maximale Wiederholungsrate für eine Übereinstimmung der Eingabe mit dem durch <paramref name="builder" /> definierten Element, nach der eine Übereinstimmung anerkannt wird.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine wiederholte Grammatik an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des `minRepeat` muss größer als oder gleich 0 und kleiner oder gleich dem Wert des `maxRepeat`.  
  
> [!IMPORTANT]
>  Wenn Sie anfügen <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen zu eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt, stellen Sie sicher, dass Sie keine doppelten semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt Ändern der <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für formulierungen wie z. B. "Call James bei der Arbeit" und "Aufruf Anne auf ihr Handy,", wobei das Wort "Phone" optional ist. <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte werden verwendet, um die Grammatik zu erstellen. Das Beispiel zeigt die Verwendung von der <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> Methode.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : string * int * int -&gt; unit" Usage="grammarBuilder.Append (phrase, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">Die wiederholte anzufügende Wortsequenz.</param>
        <param name="minRepeat">Die minimale Wiederholungsrate für eine Übereinstimmung der Eingabe mit <paramref name="phrase" />, nach der eine Übereinstimmung anerkannt wird.</param>
        <param name="maxRepeat">Die maximale Wiederholungsrate für eine Übereinstimmung der Eingabe mit <paramref name="phrase" />, nach der eine Übereinstimmung anerkannt wird.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen einen wiederholten Ausdruck an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des `minRepeat` muss größer als oder gleich 0 und kleiner oder gleich dem Wert des `maxRepeat`.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für formulierungen wie z. B. "Call James bei der Arbeit" und "Aufruf Anne auf ihr Handy,", wobei das Wort "Phone" optional ist. <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte werden verwendet, um die Grammatik zu erstellen. Das Beispiel zeigt die Verwendung von der <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> Methode.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine Diktatgrammatik an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> Methoden ermöglichen es Ihnen als eine Regel, um die anzufügende eine diktatgrammatik einen <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Weitere Informationen zu den Diktatmodus Grammatiken, finden Sie unter <xref:System.Speech.Recognition.DictationGrammar>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : unit -&gt; unit" Usage="grammarBuilder.AppendDictation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine Standarddiktatgrammatik an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu den Diktatmodus Grammatiken, finden Sie unter <xref:System.Speech.Recognition.DictationGrammar>.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, die diktieren enthält.  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : string -&gt; unit" Usage="grammarBuilder.AppendDictation category" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">Die Kategorie der anzufügenden Diktatgrammatik.</param>
        <summary>Fügt eine angegebene Diktatgrammatik der aktuellen Sequenz von Grammatikelementen an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie zum verwenden die diktatgrammatik Rechtschreibung `category` zu `spelling`.  
  
 Weitere Informationen zu den Diktatmodus Grammatiken, finden Sie unter <xref:System.Speech.Recognition.DictationGrammar>.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, die Regeln für die Rechtschreibprüfung Diktat Grammatik enthält.  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine Grammatikdatei oder eine Grammatikregel an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> Methoden können eine Grammatikdatei oder eine Grammatikregel aus einer Datei angefügt werden. Diese Methoden ermöglichen es Anwendungen zu verwenden, der Grammatikregeln vorab bereitgestellt oder öffentlich verfügbar gemacht. Die Anwendung muss über Lesezugriff auf den Speicherort des angegebenen Grammatikdateien verfügen.  
  
 Diese Methoden können eine spracherkennungsgrammatik aus den folgenden Formaten lesen.  
  
-   XML-Formatdateien, die der W3C entsprechen [Speech Recognition Grammar Specification (SRGS), Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Binärdateien, die das Microsoft Speech Recognition Grammatik Binärformat (.cfg-Erweiterung) entsprechen  
  
 Kompiliert eine SRGS XML-Format kann Grammatikdatei an, eine binäre Grammatikdatei mit der .cfg-Erweiterung sucht nach einer Übereinstimmung, belegter verkürzen insbesondere dann, wenn die Grammatik der Erkennung einer großen Anzahl von Wörtern und Ausdrücken ist erforderlich. Informationen zum Kompilieren von SRGS-Grammatiken in das binäre CFG-Format finden Sie unter <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string -&gt; unit" Usage="grammarBuilder.AppendRuleReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Pfad oder der URI (Universal Resource Identifier) der Datei, die eine Spracherkennungsgrammatik in einem unterstützten Format beschreibt.</param>
        <summary>Fügt der aktuellen Sequenz von Grammatikelementen eine Grammatikdefinitionsdatei an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der URI, den der `path` Argument kann lokal oder remote sein. Die Anwendung muss über Lesezugriff auf den Speicherort des angegebenen Grammatikdateien verfügen.  
  
 Eine Darstellung des W3C Speech Recognition Grammar Specification (SRGS), kann eine Stammregel definieren. Diese Methode fügt die Grammatik ab dessen Stammverzeichnis in Hunderterschritten, damit der aktuellen Sequenz von grammatikelementen an. Um eine bestimmte Grammatikregel anzufügen, verwenden Sie die <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> Methode.  
  
   
  
## Examples  
 Das folgende C#-Beispiel erstellt eine spracherkennungsgrammatik, die die Regel verwendet `Cities` in einer lokalen Datei SRGS cities.grxml. Der Inhalt der Datei cities.grxml wird unterhalb der C#-Codebeispiel wird angezeigt.  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string * string -&gt; unit" Usage="grammarBuilder.AppendRuleReference (path, rule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Dateipfad oder der URI (Universal Resource Identifier) der Datei, der eine Spracherkennungsgrammatik in einem unterstützten Format beschreibt.</param>
        <param name="rule">Der Bezeichner der Regel, die anzuwenden ist, oder <see langword="null" />, um die standardmäßige Stammregel der Grammatikdatei anzuwenden.</param>
        <summary>Fügt die angegebene Regel einer Grammatikdefinitionsdatei der aktuellen Sequenz von Grammatikelementen an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der URI, den der `path` Argument kann lokal oder remote sein. Die Anwendung muss über Lesezugriff auf den Speicherort des angegebenen Grammatikdateien verfügen.  
  
 Sie können die Verwendung der <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> -Methode, um eine Grammatik beginnend mit der Stammregel.  
  
   
  
## Examples  
 Das folgende C#-Beispiel erstellt eine spracherkennungsgrammatik, die die Regel verwendet `Cities` in einer lokalen Datei SRGS cities.grxml. Der Inhalt der Datei cities.grxml wird unterhalb der C#-Codebeispiel wird angezeigt.  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberSignature Language="F#" Value="member this.AppendWildcard : unit -&gt; unit" Usage="grammarBuilder.AppendWildcard " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fügt ein Anerkennungsgrammatikelement an, das jeder Eingabe in die aktuelle Sequenz von Grammatikelementen entspricht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Platzhalterelement wird am Ende der aktuellen Sequenz von Elementen hinzugefügt.  
  
 Das Platzhalterelement entspricht einem beliebigen gesprochene Wort. Er entspricht nicht Hintergrundgeräusche oder Ruhe.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine Grammatik, die Kennwort als Platzhalter akzeptiert. Im Beispiel wird eine <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> -Ereignishandler der Grammatik, die überprüft, die Kennworteingabe ob.  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kultur der Spracherkennungsgrammatik auf oder legt diese fest.</summary>
        <value>Die Kultur des <see cref="T:System.Speech.Recognition.GrammarBuilder" />. Der Standard ist die <see cref="P:System.Threading.Thread.CurrentUICulture" />-Eigenschaft des ausführenden Threads.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Speech.Recognition.Grammar.%23ctor%2A> -Konstruktor erstellt ein <xref:System.Speech.Recognition.Grammar> -Objekt, das von einer Spracherkennung aus der entsprechenden Kultur verwendet werden kann. Nur die <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> Eigenschaft der <xref:System.Speech.Recognition.GrammarBuilder> , wie der Parameter an den Konstruktor der Grammatik, zum Festlegen der Kultur, die sich ergebende spracherkennungsgrammatik verwendet wird bereitgestellt wird.  
  
 Microsoft Windows und die "System.Speech"-API akzeptiert alle gültige Sprache / Land-Codes. Zum Ausführen der Spracherkennung, die mit der Sprache, die im angegebenen die `Culture` -Eigenschaft, einer spracherkennungs-Engine, die unterstützt werden, dass Sprache / Land-Code installiert werden muss. Spracherkennungsmoduls an, die mit den im Lieferumfang von Microsoft Windows 7 arbeiten Sie mit der folgenden Sprache / Land-Codes.  
  
-   En-GB. Englisch (Vereinigtes Königreich)  
  
-   En-US. Englisch (USA)  
  
-   de-DE. Deutsch (Deutschland)  
  
-   es-ES. Spanisch (Spanien)  
  
-   fr-FR. Französisch (Frankreich)  
  
-   ja-JP. Japanisch (Japan)  
  
-   zh-CN. Chinesisch (China)  
  
-   Zh-TW. Chinesisch (Taiwan)  
  
 Zwei Buchstaben bestehenden Sprache Fehlercodes, wie z. B. "En", "fr", oder "es" sind ebenfalls zulässig.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für das bestellen einer Pizza mit bis zu vier Beläge. Insbesondere wird die <xref:System.Speech.Recognition.GrammarBuilder> des Objekts zu verwendende Kultur Englisch (USA).  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DebugShowPhrases : string" Usage="System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Zeichenfolge ab, die den Inhalt und die Struktur der Grammatik angezeigt, die in <see cref="T:System.Speech.Recognition.GrammarBuilder" /> enthalten ist.</summary>
        <value>Der aktuelle Inhalt und die aktuelle Struktur von <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für das bestellen einer Pizza mit bis zu vier Beläge. Er schreibt den Status der <xref:System.Speech.Recognition.GrammarBuilder> an die Konsole vor dem Erstellen der Grammatik. Diese Methode wird die folgende Ausgabe generiert:  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361640(v%3doffice.14)">Mithilfe von "grammarbuilder" Grammatiken erstellen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt einen neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der einer Sequenz von zwei Grammatikelementen entspricht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Reihenfolge der Operanden bestimmt die Reihenfolge der Elemente in der neuen <xref:System.Speech.Recognition.GrammarBuilder>.  
  
> [!IMPORTANT]
>  Vorsicht wird empfohlen, beim Kombinieren von <xref:System.Speech.Recognition.Choices> oder <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> Instanzen mit anderen grammatikelementen. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn eine spracherkennungsgrammatik zu verwenden, die enthält doppelte semantische Elemente mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt den Wert des gleichen Elements semantische ändern könnten. 
  
 Weitere Informationen zum Erstellen und Verwenden von spracherkennungsgrammatiken finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und ["grammarbuilder" Grammatiken erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">Das erste Grammatikelement, das einen Satz von Alternativen darstellt.</param>
        <param name="builder">Das zweite Grammatikelement.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der ein <see cref="T:System.Speech.Recognition.Choices" />-Objekt gefolgt von einem <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt enthält.</summary>
        <returns>Gibt einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="choices" />-Parameters zurück, gefolgt vom Parameter <paramref name="builder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die Konvertierungen von den folgenden Klassen.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> Operatoren.  
  
> [!IMPORTANT]
>  Wenn Sie kombinieren <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">Das erste Grammatikelement.</param>
        <param name="choices">Das zweite Grammatikelement, das einen Satz von alternativen Elementen darstellt.</param>
        <summary>Erstellt ein neues <see cref="T:System.Speech.Recognition.GrammarBuilder" />, das einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> gefolgt von einem <see cref="T:System.Speech.Recognition.Choices" /> enthält.</summary>
        <returns>Gibt einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="builder" />-Parameters zurück, gefolgt vom Parameter <paramref name="choices" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die Konvertierungen von den folgenden Klassen:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> Operatoren.  
  
> [!IMPORTANT]
>  Wenn Sie kombinieren <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> Eigenschaft eine <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *Farbe*" und "Festlegen des Hintergrunds auf *Farbe*", wobei *Farbe* wird aus einem Satz von Farben ausgewählt werden. Verschiedene Typen werden verwendet, um die endgültige Grammatik, z. B. erstellen [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder1 + builder2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">Das erste Grammatikelement.</param>
        <param name="builder2">Das zweite Grammatikelement.</param>
        <summary>Erstellt einen neuen <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der eine Sequenz aus zwei <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekten enthält.</summary>
        <returns>Gibt einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="builder1" />-Parameters zurück, gefolgt vom Parameter <paramref name="builder2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die Konvertierungen von den folgenden Klassen.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder1` und `builder2` Parameter. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> Operatoren.  
  
> [!IMPORTANT]
>  Wenn Sie kombinieren <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die enthalten <xref:System.Speech.Recognition.SemanticResultValue> oder <xref:System.Speech.Recognition.SemanticResultKey> -Instanzen, stellen Sie sicher, dass Sie keine doppelte semantische Elemente erstellen, mit dem gleichen Schlüsselnamen oder mehrere semantische Elemente, die wiederholt ändern könnten die <xref:System.Speech.Recognition.SemanticValue.Value%2A> -Eigenschaft einer <xref:System.Speech.Recognition.SemanticValue> Objekt. Die freigegebene Spracherkennung. kann eine Ausnahme auslösen, wenn diese Situationen auftreten.
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">Das erste Grammatikelement.</param>
        <param name="phrase">Das zweite Grammatikelement, das eine Sequenz von Wörtern darstellt.</param>
        <summary>Erstellt ein neues <see cref="T:System.Speech.Recognition.GrammarBuilder" />, das einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> gefolgt von einem Bergriff enthält.</summary>
        <returns>Gibt einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="builder" />-Parameters zurück, gefolgt vom Parameter <paramref name="phrase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die Konvertierungen von den folgenden Klassen.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> Operatoren.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="phrase + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">Das erste Grammatikelement, das eine Sequenz von Wörtern darstellt.</param>
        <param name="builder">Das zweite Grammatikelement.</param>
        <summary>Erstellt ein neues <see cref="T:System.Speech.Recognition.GrammarBuilder" />, das einen Begriff gefolgt von einem <see cref="T:System.Speech.Recognition.GrammarBuilder" /> enthält.</summary>
        <returns>Gibt einen <see cref="T:System.Speech.Recognition.GrammarBuilder" /> für die Sequenz des <paramref name="phrase" />-Parameters zurück, gefolgt vom Parameter <paramref name="builder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> unterstützt die Konvertierungen von den folgenden Klassen.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Diese Methode akzeptiert, die für die oben aufgeführten Objekte die `builder` Parameter. Weitere Informationen finden Sie unter den <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> Operatoren.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, das die zwei Ausdrücke, erkennen können "Stellen Hintergrund *Farbe*" und "Festlegen des Hintergrunds auf *Farbe*", wobei *Farbe* wird aus einem Satz von Farben ausgewählt werden. Verschiedene Typen werden verwendet, um die endgültige Grammatik, z. B. erstellen [Zeichenfolge](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, und <xref:System.Speech.Recognition.GrammarBuilder> Objekte.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert einen anderen Typ in ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implizite Konvertierung erstellt eine neue Instanz der <xref:System.Speech.Recognition.GrammarBuilder>. Sie können die folgenden Klassen zum Umwandeln einer <xref:System.Speech.Recognition.GrammarBuilder>.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Jede impliziten Umwandlungen entspricht dem Aufrufen des Konstruktors.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices">Der Satz zum Alternativen, die konvertiert werden sollen.</param>
        <summary>Konvertiert ein <see cref="T:System.Speech.Recognition.Choices" />-Objekt in ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt.</summary>
        <returns>Das konvertierte <see cref="T:System.Speech.Recognition.Choices" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implizite Konvertierung erstellt eine neue Instanz der <xref:System.Speech.Recognition.GrammarBuilder>. Dieser Konvertierungsoperator entspricht dem Aufruf <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> und `choices` für die `alternateChoices`.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, die eine Antwort auf ein "Yes" oder "no" Frage erkennen können. Der implizite Konvertierungsoperator wird verwendet, bei der Erstellung von eine <xref:System.Speech.Recognition.SemanticResultValue> -Objekt aus einer <xref:System.Speech.Recognition.Choices> Objekt, bei der Erstellung von einer <xref:System.Speech.Recognition.Choices> Objekt aus zwei <xref:System.Speech.Recognition.SemanticResultValue> Objekte, und bei der Erstellung von eine <xref:System.Speech.Recognition.Grammar> Objekt aus einem <xref:System.Speech.Recognition.SemanticResultKey> Objekt.  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey">Der zu konvertierende semantische Schlüssel.</param>
        <summary>Konvertiert ein <see cref="T:System.Speech.Recognition.SemanticResultKey" />-Objekt in ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt.</summary>
        <returns>Das konvertierte <see cref="T:System.Speech.Recognition.SemanticResultKey" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implizite Konvertierung erstellt eine neue Instanz der <xref:System.Speech.Recognition.GrammarBuilder>. Dieser Konvertierungsoperator entspricht dem Aufruf <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> und `semanticKey` für die `key`.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, die eine Antwort auf ein "Yes" oder "no" Frage erkennen können. Der implizite Konvertierungsoperator wird verwendet, bei der Erstellung von eine <xref:System.Speech.Recognition.SemanticResultValue> -Objekt aus einer <xref:System.Speech.Recognition.Choices> Objekt, bei der Erstellung von einer <xref:System.Speech.Recognition.Choices> Objekt aus zwei <xref:System.Speech.Recognition.SemanticResultValue> Objekte, und bei der Erstellung von eine <xref:System.Speech.Recognition.Grammar> Objekt aus einem <xref:System.Speech.Recognition.SemanticResultKey> Objekt.  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue">Das zu konvertierende <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Objekt.</param>
        <summary>Konvertiert ein <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Objekt in ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt.</summary>
        <returns>Das konvertierte <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implizite Konvertierung erstellt eine neue Instanz der <xref:System.Speech.Recognition.GrammarBuilder>. Dieser Konvertierungsoperator entspricht dem Aufruf <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> und `semanticValue` für die `value`.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik, die eine Antwort auf ein "Yes" oder "no" Frage erkennen können. Der implizite Konvertierungsoperator wird verwendet, bei der Erstellung von eine <xref:System.Speech.Recognition.SemanticResultValue> -Objekt aus einer <xref:System.Speech.Recognition.Choices>Objekt, bei der Erstellung von einer <xref:System.Speech.Recognition.Choices> Objekt aus zwei <xref:System.Speech.Recognition.SemanticResultValue> Objekte, und bei der Erstellung von eine <xref:System.Speech.Recognition.Grammar> Objekt aus einem <xref:System.Speech.Recognition.SemanticResultKey> Objekt.  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">Die zu konvertierende Zeichenfolge.</param>
        <summary>Konvertiert eine Zeichenfolge in ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt.</summary>
        <returns>Die konvertierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implizite Konvertierung erstellt eine neue Instanz der <xref:System.Speech.Recognition.GrammarBuilder>. Dieser Konvertierungsoperator entspricht dem Aufruf <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> und geben Sie die gleiche `phrase`.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> Objekte an eine Grammatik zu erstellen, die eines der zwei Ausdrücke, erkennen kann "Stellen Hintergrund *ColorChoice*" oder "Festlegen des Hintergrunds auf *ColorChoice*".  
  
 Nach dem Erstellen einer Liste der zulässigen Werte für *ColorChoice* mithilfe einer <xref:System.Speech.Recognition.Choices> Objekt, das Beispiel initialisiert zwei <xref:System.Speech.Recognition.GrammarBuilder> Objekte `makePhrase` und `setPhrase`, implizite Konvertierung von Zeichenfolge mit -Objekte.  
  
 Im Beispiel wird schließlich erstellt eine <xref:System.Speech.Recognition.Grammar> -Objekt aus einem <xref:System.Speech.Recognition.Choices> Objekt umgewandelt wird, um eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt.  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>
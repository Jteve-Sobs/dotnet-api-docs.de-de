<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e59411ada9795ac6013ddec8b95b90064bd1f58d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86826561" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen semantischen Wert dar und ordnet optional den Wert einer Komponente einer Spracherkennungsgrammatik zu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Verwendung von <xref:System.Speech.Recognition.SemanticResultValue> -Objekten und- <xref:System.Speech.Recognition.SemanticResultKey> Objekten in Verbindung mit <xref:System.Speech.Recognition.GrammarBuilder> und <xref:System.Speech.Recognition.Choices> ist die einfachste Möglichkeit, eine semantische Struktur für einen zu entwerfen <xref:System.Speech.Recognition.Grammar> . Der Zugriff auf Semantik Informationen für einen Ausdruck erfolgt durch Abrufen einer Instanz von <xref:System.Speech.Recognition.SemanticValue> über die- <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Eigenschaft für <xref:System.Speech.Recognition.RecognizedPhrase> .  
  
> [!NOTE]
>  Die von- <xref:System.Speech.Recognition.SemanticResultValue> Objekten verwalteten Werte werden durch- <xref:System.Object> Instanzen definiert, die an Ihre Konstruktoren übergeben werden. Der zugrunde liegende Typ dieses <xref:System.Object> muss `bool` , `int` , oder sein `float` `string` . Jeder andere Typ verhindert die Erstellung einer- <xref:System.Speech.Recognition.Grammar> Instanz mit dem <xref:System.Speech.Recognition.SemanticResultValue> .  
  
 Die typische Verwendung einer- <xref:System.Speech.Recognition.SemanticResultValue> Instanz ordnet die-Instanz einer erkennbaren Komponente eines zu <xref:System.Speech.Recognition.Grammar> , z. b. eines Ausdrucks, einer Regel oder eines- <xref:System.Speech.Recognition.Choices> Objekts. Wenn die zugeordnete Komponente im Rahmen einer Erkennungs Operation verwendet wird, <xref:System.Speech.Recognition.SemanticResultValue> wird der verwendet, um einen Wert in der Semantik des zurückgegebenen Ausdrucks zu definieren.  
  
 Es gibt zwei grundlegende Methoden zum Zuordnen einer- <xref:System.Speech.Recognition.SemanticResultValue> Instanz zu einem Grammatik Element, abhängig vom Konstruktor, der zum Erstellen von verwendet wird <xref:System.Speech.Recognition.SemanticResultValue> .  
  
-   Wenn nur der Wert (angegeben durch eine Instanz von <xref:System.Object> ) verwendet wird, um ein-Objekt zu erstellen <xref:System.Speech.Recognition.SemanticResultValue> , wird der der <xref:System.Speech.Recognition.SemanticResultValue> Grammatik Komponente, die ihm vorangestellt ist, zusätzlich zu einem- <xref:System.Speech.Recognition.GrammarBuilder> Objekt zugeordnet.  
  
     Beispielsweise wird im folgenden Code Fragment, wenn ein, das <xref:System.Speech.Recognition.Grammar> mit dieser Instanz erstellt wurde, <xref:System.Speech.Recognition.GrammarBuilder> das Wort "Background" erkennt, der Wert `true` in der erkannten Ausdrucks Semantik festgelegt wird.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Weitere Informationen finden Sie in der Beschreibung von <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Wenn ein Zeichen folgen Wertausdruck oder eine bestimmte- <xref:System.Speech.Recognition.GrammarBuilder> Instanz zusammen mit einem verwendet wird, der <xref:System.Object> einen- <xref:System.Speech.Recognition.SemanticResultValue> Wert angibt, wird dieser Wert automatisch dem Zeichen folgen Wertausdruck oder der- <xref:System.Speech.Recognition.GrammarBuilder> Instanz zugeordnet.  Wenn der Ausdruck oder das <xref:System.Speech.Recognition.GrammarBuilder> Objekt im Erkennungsprozess verwendet wird, wird der Wert der Semantik des erkannten Ausdrucks zugewiesen.  
  
     Dies wird im folgenden Beispiel veranschaulicht und ist funktional äquivalent zum vorherigen Beispiel, in dem explizite Aufrufe von und verwendet werden <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> . Wenn die Erkennungs Logik das Wort "Background" verwendet, wird der Wert der `true` erkannten Semantik hinzugefügt.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Weitere Informationen finden Sie in der Beschreibung von <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> und <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29> .  
  
 Um von einem als Erkennungs verwendet werden zu können <xref:System.Speech.Recognition.Grammar> , <xref:System.Speech.Recognition.SemanticResultValue> müssen alle Instanzen einem der-Objekte zugeordnet werden, die <xref:System.Speech.Recognition.SemanticValue> von diesem verwendet werden <xref:System.Speech.Recognition.Grammar> . Dies erfolgt durch Zuordnen eines Semantik Schlüssels zum <xref:System.Speech.Recognition.SemanticResultValue> .  
  
 Semantische Schlüssel können mithilfe eines-Objekts explizit an einen angefügt werden <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticResultKey> .  <xref:System.Speech.Recognition.SemanticResultValue> Instanzen, die nicht explizit an einen Schlüssel angefügt sind, werden an den Stamm Schlüssel der Standardeinstellung angefügt <xref:System.Speech.Recognition.SemanticValue> .  
  
 Nachdem ein <xref:System.Speech.Recognition.SemanticResultValue> verwendet wurde, um das festzulegen <xref:System.Speech.Recognition.SemanticValue.Value%2A> , d. h., ob es mit dem Standard Stamm Schlüssel oder einem bestimmten gekennzeichnet ist <xref:System.Speech.Recognition.SemanticResultKey> , darf dieser Wert nicht geändert werden, oder es tritt eine Ausnahme während der Erkennungs Vorgänge auf.  
  
 Im folgenden Beispiel wird eine Ausnahme ausgelöst, da Sie den Stamm eines festlegt und dann ändert <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.Grammar> .  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 Der Code im folgenden Beispiel ist dagegen zulässig. Obwohl mehrere Instanzen von definiert <xref:System.Speech.Recognition.SemanticResultValue> sind, sind Sie in einem <xref:System.Speech.Recognition.Choices> -Objekt enthalten, und es wird immer nur eine verwendet, um den Wert des Schlüssels festzulegen `bgOrfgText` .  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 Im folgenden Beispiel wird ein-Wert zurückgegeben <xref:System.Speech.Recognition.Grammar> , der den Befehl "Set/Change/Alter Vordergrund/Hintergrund... [Farbliste] ".  <xref:System.Speech.Recognition.SemanticResultValue> -und- <xref:System.Speech.Recognition.SemanticResultKey> Instanzen (in Verbindung mit <xref:System.Speech.Recognition.Choices> -und- <xref:System.Speech.Recognition.GrammarBuilder> Objekten) werden verwendet, um Semantik zu definieren, die bei der Erkennung analysiert werden kann.  Die analysierte Semantik bestimmt, welche Farbe angefordert wurde und ob der Vordergrund oder der Hintergrund geändert werden muss.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Verwenden von semantikresultkey zum Extrahieren eines semantikresultvalue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `SemanticResultValue` Konstruktoren unterstützen die Angabe einer <xref:System.Object> Instanz mit dem zugrunde liegenden Datentyp `bool` , `int` , `float` oder `string` .  
  
 Ein Konstruktor kann eine- `SemanticResultValue` Instanz in einem der beiden folgenden Situationen erstellen:  
  
-   Die- `SemanticResultValue` Instanz muss explizit einem Grammatik Element zugeordnet werden, wenn ein verwendet wird <xref:System.Speech.Recognition.GrammarBuilder> , um eine zu erstellen <xref:System.Speech.Recognition.Grammar> .  
  
-   Der `SemanticResultValue` ist bereits einem Zeichen folgen Wertausdruck oder einem- <xref:System.Speech.Recognition.GrammarBuilder> Objekt zugeordnet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert, der von <see cref="T:System.Speech.Recognition.SemanticResultValue" /> gesteuert wird. Der Wert muss vom Typ <see langword="bool" />, <see langword="int" />, <see langword="float" /> oder <see langword="string" /> sein.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Klasse und gibt einen semantischen Wert an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein, `SemanticResultValue` der von diesem Konstruktor zurückgegeben wird, ist keinem bestimmten Grammatik Element zugeordnet. Die Zuordnung muss explizit erfolgen, indem die Instanz von `SemanticResultValue` in Verbindung mit verwendet wird <xref:System.Speech.Recognition.GrammarBuilder> .  
  
 Beispielsweise wird im folgenden Code Fragment, wenn ein, das <xref:System.Speech.Recognition.Grammar> mit dieser Instanz erstellt wurde, <xref:System.Speech.Recognition.GrammarBuilder> das Wort "Background" erkennt, der Wert `true` in der erkannten Ausdrucks Semantik festgelegt wird.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein-Wert zurückgegeben <xref:System.Speech.Recognition.Grammar> , der den Befehl "Set/Change/Alter Vordergrund/Hintergrund... [Farbliste] ". <xref:System.Speech.Recognition.SemanticResultValue> -und- <xref:System.Speech.Recognition.SemanticResultKey> Instanzen (in Verbindung mit <xref:System.Speech.Recognition.Choices> -und- <xref:System.Speech.Recognition.GrammarBuilder> Objekten) werden verwendet, um Semantik zu definieren, die bei der Erkennung analysiert werden kann.  Die analysierte Semantik bestimmt, welche Farbe angefordert wurde und ob der Vordergrund oder der Hintergrund geändert werden muss.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Eine in der Erkennung verwendete Grammatikkomponente.</param>
        <param name="value">Der Wert, der von <see cref="T:System.Speech.Recognition.SemanticResultValue" /> gesteuert wird. Der Wert muss vom Typ <see langword="bool" />, <see langword="int" />, <see langword="float" /> oder <see langword="string" /> sein.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Klasse und ordnet einem <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt einen semantischen Wert zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das von angegebene Grammatik Element <xref:System.Speech.Recognition.GrammarBuilder> in der Erkennungs Logik verwendet wird, `value` wird in der Semantik der erkannten Ausgabe festgelegt.  
  
 Wenn im folgenden Code Fragment die Erkennungs Logik, die mit der- <xref:System.Speech.Recognition.GrammarBuilder> Instanz ( `myGb` ) erstellt wurde, das- <xref:System.Speech.Recognition.Choices> Objekt ( `myChoice` ) zum Identifizieren der Eingabe verwendet, wird der Wert der `true` erkannten Semantik hinzugefügt.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Da <xref:System.Speech.Recognition.GrammarBuilder> die implizite Konvertierung für <xref:System.Speech.Recognition.Choices> ,  `SemanticResultValue` und unterstützt <xref:System.Speech.Recognition.SemanticResultKey> , kann dieser Konstruktor auch diese Objekte verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein-Wert zurückgegeben <xref:System.Speech.Recognition.Grammar> , der den Befehl "Set/Change/Alter Vordergrund/Hintergrund... [Farbliste] ". <xref:System.Speech.Recognition.SemanticResultValue> -und- <xref:System.Speech.Recognition.SemanticResultKey> Instanzen (in Verbindung mit <xref:System.Speech.Recognition.Choices> -und- <xref:System.Speech.Recognition.GrammarBuilder> Objekten) werden verwendet, um Semantik zu definieren, die bei der Erkennung analysiert werden kann.  Die analysierte Semantik bestimmt, welche Farbe angefordert wurde und ob der Vordergrund oder der Hintergrund geändert werden muss.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Ein Ausdruck, der in der Erkennung verwendetet werden soll.</param>
        <param name="value">Der Wert, der von <see cref="T:System.Speech.Recognition.SemanticResultValue" /> gesteuert wird. Der Wert muss vom Typ <see langword="bool" />, <see langword="int" />, <see langword="float" /> oder <see langword="string" /> sein.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Klasse und ordnet einem <see cref="T:System.String" />-Objekt einen semantischen Wert zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die von angegebene Zeichenfolge `phrase` in der Erkennungs Logik verwendet wird, `value` wird in der Semantik der erkannten Ausgabe festgelegt.  
  
 Im folgenden Code Fragment wird der Wert der erkannten Semantik hinzugefügt, wenn die Erkennungs Logik, die mit der- <xref:System.Speech.Recognition.GrammarBuilder> Instanz ( `myGb` ) erstellt wurde, die Zeichenfolge "My Hypotheken" verwendet, um die Eingabe zu identifizieren `true` .  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein-Wert zurückgegeben <xref:System.Speech.Recognition.Grammar> , der den Befehl "Set/Change/Alter Vordergrund/Hintergrund... [Farbliste] ". <xref:System.Speech.Recognition.SemanticResultValue> -und- <xref:System.Speech.Recognition.SemanticResultKey> Instanzen (in Verbindung mit <xref:System.Speech.Recognition.Choices> -und- <xref:System.Speech.Recognition.GrammarBuilder> Objekten) werden verwendet, um Semantik zu definieren, die bei der Erkennung analysiert werden kann.  Die analysierte Semantik bestimmt, welche Farbe angefordert wurde und ob der Vordergrund oder der Hintergrund geändert werden muss.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Instanz von <see cref="T:System.Speech.Recognition.GrammarBuilder" /> zurück, die aus der aktuellen <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Instanz konstruiert wurde.</summary>
        <returns>Gibt eine Instanz von <see cref="T:System.Speech.Recognition.GrammarBuilder" /> zurück, die aus der aktuellen <see cref="T:System.Speech.Recognition.SemanticResultValue" />-Instanz konstruiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Verwendung von <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> entspricht der Verwendung des- <xref:System.Speech.Recognition.GrammarBuilder> Konstruktors, der einen <xref:System.Speech.Recognition.SemanticResultValue> als Argument annimmt ( <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29> ).  
  
   
  
## Examples  
 Im folgenden Beispiel werden- <xref:System.Speech.Recognition.Grammar> Objekte erstellt, die Befehle zum Ändern der Hintergrundfarbe unterstützen.  
  
 Ein- <xref:System.Speech.Recognition.Choices> Objekt ( `colorChoice` ), das die Liste der Optionen für Hintergrundfarben enthält, wird mithilfe der- <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> Methode mit-Instanzen aufgefüllt, die <xref:System.Speech.Recognition.GrammarBuilder> von der- <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> Methode für die aus Farb Zeichenfolgen `SemanticResultValue` erstellten Objekte abgerufen werden.  
  
 Eine <xref:System.Speech.Recognition.GrammarBuilder> wird dann durch Aufrufen von <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> für eine- <xref:System.Speech.Recognition.SemanticResultKey> Instanz abgerufen, die zum Schlüssel der semantischen Auswahl in der-Instanz verwendet wird `colorChoice` .  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
